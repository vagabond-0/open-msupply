/// <reference no-default-lib="true"/>
/// <reference path="../types/plugin-interface.d.ts" />
/// <reference path="../types/polyfills.d.ts" />
/// <reference lib="es2020" />
declare module "config" {
    global {
        var Config: {
            get(key: string): string | null;
        };
    }
    export {};
}
declare module "date" {
    global {
    }
    export {};
}
declare module "host" {
    global {
        interface Host {
            invokeFunc0(id: number, ...args: unknown[]): void;
            invokeFunc(id: number, ...args: unknown[]): unknown;
            inputBytes(): ArrayBufferLike;
            inputString(): string;
            outputBytes(output: ArrayBufferLike): boolean;
            outputString(output: string): boolean;
            getFunctions(): import("extism:host").user;
            arrayBufferToBase64(input: ArrayBuffer): string;
            base64ToArrayBuffer(input: string): ArrayBuffer;
        }
        var Host: Host;
    }
    export {};
}
declare module "http" {
    global {
        interface HttpRequest {
            url: string;
            method?: "GET" | "HEAD" | "POST" | "PUT" | "DELETE" | "CONNECT" | "OPTIONS" | "TRACE" | "PATCH";
            headers?: Record<string, string | number | boolean>;
        }
        interface HttpResponse {
            body: string;
            status: number;
        }
        var Http: {
            request(req: HttpRequest, body?: string | ArrayBufferLike): HttpResponse;
        };
    }
    export {};
}
declare module "text-decoder" {
    global {
    }
    export {};
}
declare module "text-encoder" {
    global {
    }
    export {};
}
declare module "memory" {
    global {
        interface Memory {
            fromString(str: string): MemoryHandle;
            fromBuffer(bytes: ArrayBufferLike): MemoryHandle;
            fromJsonObject(obj: unknown): MemoryHandle;
            allocUInt32(i: number): MemoryHandle;
            allocUInt64(i: bigint): MemoryHandle;
            allocFloat32(i: number): MemoryHandle;
            allocFloat64(i: number): MemoryHandle;
            find(offset: PTR): MemoryHandle;
        }
        var Memory: Memory;
    }
    export {};
}
declare module "memory-handle" {
    global {
        interface MemoryHandle {
            offset: PTR;
            len: I64;
            readString(): string;
            readUInt32(): number;
            readUInt64(): bigint;
            readFloat32(): number;
            readUFloat64(): number;
            readBytes(): ArrayBuffer;
            readJsonObject<T = any>(): T;
            free(): void;
        }
        var MemoryHandle: {
            prototype: MemoryHandle;
            new (offset: PTR, len: I64): MemoryHandle;
        };
    }
    export {};
}
declare module "var" {
    global {
        var Var: {
            set(name: string, value: string | ArrayBufferLike): void;
            getBytes(name: string): ArrayBufferLike | null;
            getString(name: string): string | null;
        };
    }
    export {};
}
declare module "index" {
    import "core-js/actual/url";
    import "core-js/actual/url/to-json";
    import "core-js/actual/url-search-params";
    import "urlpattern-polyfill";
    import "config";
    import "date";
    import "text-decoder";
    import "text-encoder";
    import "host";
    import "http";
    import "memory";
    import "memory-handle";
    import "var";
}
