diff --git a/.github/ISSUE_TEMPLATE/bug_report.md b/.github/ISSUE_TEMPLATE/bug_report.md
index 32129cee7..a245c55ea 100644
--- a/.github/ISSUE_TEMPLATE/bug_report.md
+++ b/.github/ISSUE_TEMPLATE/bug_report.md
@@ -2,13 +2,13 @@
 name: Bug report
 about: Create a report for a bug or to help us improve
 title: A brief clear title describing the bug from a user's perspective
-labels: bug, needs triage, needs daily triage
-assignees: ""
+labels: bug, needs triage
+assignees: ''
+
 ---
 
 ## What went wrong? 😲
-
-<!-- Provide a clear and concise description of what the bug is. Screenshots are helpful! -->
+<!-- Provide a clear and concise description of what the bug is. Screenshots are helpful! --> 
 
 ## Expected behaviour 🤔
 
@@ -22,9 +22,7 @@ Steps to reproduce the behaviour:
 4. See error
 
 ## Your environment 🌱
-
 <!-- e.g. 1.2.3 -->
-
 - Open mSupply Version:
 - Legacy mSupply Central Server Version:
 <!-- e.g. android, browser (extra points if you tell us which one), desktop (windows), desktop (macOS), server (windows) -->
diff --git a/build/windows/omsupply_demo.suf b/build/windows/omsupply_demo.suf
index 0ba47d3df..e600ee97f 100644
--- a/build/windows/omsupply_demo.suf
+++ b/build/windows/omsupply_demo.suf
@@ -3477,7 +3477,7 @@ g_HandleSystemReboot();
 <CustomSegSizeMode>0</CustomSegSizeMode>
 <Platform>1</Platform>
 <CollectLaunchUserInfo>0</CollectLaunchUserInfo>
-<CodeSignSetups>0</CodeSignSetups>
+<CodeSignSetups>1</CodeSignSetups>
 <CodeSignLocation>C:\Program Files (x86)\Windows Kits\8.0\bin\x64\signtool.exe</CodeSignLocation>
 <CodeSignWithSHA256>1</CodeSignWithSHA256>
 <CodeSignCertificateFileSHA256>C:\mSupply_installer_codesigning\mSupply_installer_code_signing.pfx</CodeSignCertificateFileSHA256>
diff --git a/build/windows/omsupply_desktop.suf b/build/windows/omsupply_desktop.suf
index 7244e4413..ed170d19b 100644
--- a/build/windows/omsupply_desktop.suf
+++ b/build/windows/omsupply_desktop.suf
@@ -3244,7 +3244,7 @@ g_HandleSystemReboot();
 <CustomSegSizeMode>0</CustomSegSizeMode>
 <Platform>1</Platform>
 <CollectLaunchUserInfo>0</CollectLaunchUserInfo>
-<CodeSignSetups>0</CodeSignSetups>
+<CodeSignSetups>1</CodeSignSetups>
 <CodeSignLocation>C:\Program Files (x86)\Windows Kits\8.0\bin\x64\signtool.exe</CodeSignLocation>
 <CodeSignWithSHA256>1</CodeSignWithSHA256>
 <CodeSignCertificateFileSHA256>C:\mSupply_installer_codesigning\mSupply_installer_code_signing.pfx</CodeSignCertificateFileSHA256>
diff --git a/build/windows/omsupply_server.suf b/build/windows/omsupply_server.suf
index 60fe7bc65..bf0ef195d 100644
--- a/build/windows/omsupply_server.suf
+++ b/build/windows/omsupply_server.suf
@@ -4594,7 +4594,7 @@ g_HandleSystemReboot();
 <CustomSegSizeMode>0</CustomSegSizeMode>
 <Platform>1</Platform>
 <CollectLaunchUserInfo>0</CollectLaunchUserInfo>
-<CodeSignSetups>0</CodeSignSetups>
+<CodeSignSetups>1</CodeSignSetups>
 <CodeSignLocation>C:\Program Files (x86)\Windows Kits\8.0\bin\x64\signtool.exe</CodeSignLocation>
 <CodeSignWithSHA256>1</CodeSignWithSHA256>
 <CodeSignCertificateFileSHA256>C:\mSupply_installer_codesigning\mSupply_installer_code_signing.pfx</CodeSignCertificateFileSHA256>
diff --git a/build/windows/omsupply_standalone.suf b/build/windows/omsupply_standalone.suf
index f9d7880d6..c9d62ed5e 100644
--- a/build/windows/omsupply_standalone.suf
+++ b/build/windows/omsupply_standalone.suf
@@ -3527,7 +3527,7 @@ g_HandleSystemReboot();
 <CustomSegSizeMode>0</CustomSegSizeMode>
 <Platform>1</Platform>
 <CollectLaunchUserInfo>0</CollectLaunchUserInfo>
-<CodeSignSetups>0</CodeSignSetups>
+<CodeSignSetups>1</CodeSignSetups>
 <CodeSignLocation>C:\Program Files (x86)\Windows Kits\8.0\bin\x64\signtool.exe</CodeSignLocation>
 <CodeSignWithSHA256>1</CodeSignWithSHA256>
 <CodeSignCertificateFileSHA256>C:\mSupply_installer_codesigning\mSupply_installer_code_signing.pfx</CodeSignCertificateFileSHA256>
diff --git a/client/.eslintrc.js b/client/.eslintrc.js
index 3159a981a..ef7f3788d 100644
--- a/client/.eslintrc.js
+++ b/client/.eslintrc.js
@@ -52,13 +52,6 @@ module.exports = {
     'react-hooks/exhaustive-deps': 'warn',
     '@typescript-eslint/no-explicit-any': 'warn',
     'no-console': ['error', { allow: ['info', 'warn', 'error'] }],
-    'prefer-const': [
-      'error',
-      {
-        destructuring: 'any',
-        ignoreReadBeforeAssign: true,
-      },
-    ],
   },
   ignorePatterns: ['**/operations.generated.ts', '**/types/schema.ts'],
 };
diff --git a/client/README.md b/client/README.md
index a6e89077a..a91b48fc8 100644
--- a/client/README.md
+++ b/client/README.md
@@ -28,7 +28,7 @@ To see it in action, check out the [demo server](https://demo-open.msupply.org/)
 
 - If there are feature flags in use, they are set as environment variables. For example:
 
-`yarn start-local FEATURE_INVENTORY_ADJUSTMENTS=true`
+`yarn start-local-features FEATURE_INVENTORY_ADJUSTMENTS=true`
 
 - Bundle for production:
 
diff --git a/client/package.json b/client/package.json
index 7ab7e27c3..62fd27796 100644
--- a/client/package.json
+++ b/client/package.json
@@ -5,8 +5,9 @@
   "sideEffects": false,
   "private": true,
   "scripts": {
-    "start-local": "lerna run --scope @openmsupply-client/* --parallel start-local -- --env $1 _",
-    "start-remote": "lerna run --scope @openmsupply-client/* --parallel start-remote -- --env $1 _",
+    "start-local-features": "yarn start-local -- -- --env $1",
+    "start-local": "lerna run --scope @openmsupply-client/* --parallel start-local",
+    "start-remote": "lerna run --scope @openmsupply-client/* --parallel start-remote",
     "start": "yarn start-local",
     "build": "lerna run --scope @openmsupply-client/* build",
     "build-stats": "lerna run --scope @openmsupply-client/* build-stats",
@@ -126,4 +127,4 @@
   "msw": {
     "workerDirectory": "packages/host/public"
   }
-}
\ No newline at end of file
+}
diff --git a/client/packages/coldchain/src/Equipment/DetailView/DetailView.tsx b/client/packages/coldchain/src/Equipment/DetailView/DetailView.tsx
index 2c31a8742..c13ba3de5 100644
--- a/client/packages/coldchain/src/Equipment/DetailView/DetailView.tsx
+++ b/client/packages/coldchain/src/Equipment/DetailView/DetailView.tsx
@@ -12,7 +12,6 @@ import {
   useConfirmOnLeaving,
   TableProvider,
   createTableStore,
-  ObjUtils,
 } from '@openmsupply-client/common';
 import { AppRoute } from '@openmsupply-client/config';
 import { Toolbar } from './Toolbar';
@@ -24,7 +23,6 @@ import { StatusLogs } from './Tabs/StatusLogs';
 import { Documents } from './Tabs/Documents';
 import { ActivityLogList, useLocation } from '@openmsupply-client/system';
 import { DraftAsset } from '../types';
-import { Details } from './Tabs/Details';
 
 export const EquipmentDetailView = () => {
   const { data, isLoading } = useAssets.document.get();
@@ -75,17 +73,11 @@ export const EquipmentDetailView = () => {
 
   useEffect(() => {
     if (!data) return;
-
-    const assetProperties = ObjUtils.parse(data.properties);
-    const catalogProperties = ObjUtils.parse(data.catalogProperties);
-
     setDraft({
       ...data,
       locationIds: draft?.locationIds
         ? draft.locationIds
         : data.locations.nodes.map(location => location.id),
-      parsedProperties: assetProperties,
-      parsedCatalogProperties: catalogProperties,
     });
     // eslint-disable-next-line react-hooks/exhaustive-deps
   }, [data, setDraft]);
@@ -105,10 +97,6 @@ export const EquipmentDetailView = () => {
       ),
       value: 'Summary',
     },
-    {
-      Component: <Details onChange={onChange} draft={draft} />,
-      value: 'Details',
-    },
     {
       Component: draft === undefined ? null : <StatusLogs assetId={draft.id} />,
       value: 'StatusLogs',
diff --git a/client/packages/coldchain/src/Equipment/DetailView/Tabs/Details.tsx b/client/packages/coldchain/src/Equipment/DetailView/Tabs/Details.tsx
deleted file mode 100644
index 8ccfb0c62..000000000
--- a/client/packages/coldchain/src/Equipment/DetailView/Tabs/Details.tsx
+++ /dev/null
@@ -1,160 +0,0 @@
-import React from 'react';
-import {
-  BasicSpinner,
-  InfoTooltipIcon,
-  InputWithLabelRow,
-  Typography,
-} from '@common/components';
-import { useTranslation } from '@common/intl';
-import { ArrayUtils, Box, PropertyInput } from '@openmsupply-client/common';
-import { DraftAsset } from '../../types';
-import { useAssets } from '../../api';
-
-interface DetailsProps {
-  draft?: DraftAsset;
-  onChange: (patch: Partial<DraftAsset>) => void;
-}
-
-const Container = ({ children }: { children: React.ReactNode }) => (
-  <Box display="flex" flexDirection="column" alignContent="center" padding={4}>
-    {children}
-  </Box>
-);
-
-const Section = ({
-  children,
-  heading,
-}: {
-  children: React.ReactNode;
-  heading: string;
-}) => (
-  <Box
-    display="flex"
-    flexDirection="column"
-    padding={2}
-    paddingRight={4}
-    sx={{ maxWidth: '600px', width: '100%' }}
-  >
-    <Heading>{heading}</Heading>
-    {children}
-  </Box>
-);
-
-const Heading = ({ children }: { children: React.ReactNode }) => (
-  <Typography
-    sx={{
-      marginLeft: '158px',
-      fontSize: '20px',
-      fontWeight: 'bold',
-    }}
-  >
-    {children}
-  </Typography>
-);
-
-const Row = ({
-  children,
-  tooltip,
-  label,
-}: {
-  children: React.ReactNode;
-  tooltip?: string;
-  label: string;
-}) => (
-  <Box paddingTop={1.5}>
-    <InputWithLabelRow
-      labelWidth="300px"
-      label={label}
-      labelProps={{
-        sx: {
-          fontSize: '16px',
-          paddingRight: 2,
-          textAlign: 'right',
-        },
-      }}
-      Input={
-        <>
-          <Box sx={{}} flex={1}>
-            {children}{' '}
-          </Box>
-          <Box>
-            {tooltip && (
-              <InfoTooltipIcon
-                iconSx={{ color: 'gray.main' }}
-                title={tooltip}
-              />
-            )}
-          </Box>
-        </>
-      }
-    />
-  </Box>
-);
-
-export const Details = ({ draft, onChange }: DetailsProps) => {
-  const t = useTranslation('coldchain');
-
-  const { data: assetProperties, isLoading } = useAssets.properties.list({
-    assetCategoryId: { equalAnyOrNull: [draft?.assetCategory?.id ?? ''] },
-    assetClassId: { equalAnyOrNull: [draft?.assetClass?.id ?? ''] },
-    assetTypeId: { equalAnyOrNull: [draft?.assetType?.id ?? ''] },
-  });
-
-  if (!draft) return null;
-
-  return (
-    <Box display="flex" flex={3} justifyContent={'center'}>
-      <Container>
-        {isLoading ? <BasicSpinner /> : null}
-        <Section heading={t('label.asset-properties')}>
-          {!draft.parsedProperties ? (
-            <Typography sx={{ textAlign: 'center' }}>
-              {t('messages.no-properties')}
-            </Typography>
-          ) : (
-            <>
-              {assetProperties &&
-                ArrayUtils.uniqBy(assetProperties, 'key').map(property => {
-                  const isCatalogue =
-                    draft.parsedCatalogProperties?.hasOwnProperty(
-                      property.key
-                    ) ?? false;
-                  const value =
-                    draft.parsedCatalogProperties?.[property.key] ??
-                    draft.parsedProperties?.[property.key] ??
-                    null;
-
-                  return (
-                    <Row
-                      key={property.key}
-                      label={property.name}
-                      tooltip={
-                        isCatalogue
-                          ? t('messages.catalogue-property')
-                          : undefined
-                      }
-                    >
-                      <PropertyInput
-                        valueType={property.valueType}
-                        allowedValues={property.allowedValues?.split(',')}
-                        value={value}
-                        onChange={v =>
-                          onChange({
-                            parsedProperties: {
-                              ...draft.parsedProperties,
-                              [property.key]: v ?? null,
-                            },
-                          })
-                        }
-                        disabled={isCatalogue}
-                      />
-                    </Row>
-                  );
-                })}
-            </>
-          )}
-        </Section>
-      </Container>
-    </Box>
-  );
-};
diff --git a/client/packages/coldchain/src/Equipment/DetailView/Tabs/StatusLogs.tsx b/client/packages/coldchain/src/Equipment/DetailView/Tabs/StatusLogs.tsx
index b5a873d0b..b256e0805 100644
--- a/client/packages/coldchain/src/Equipment/DetailView/Tabs/StatusLogs.tsx
+++ b/client/packages/coldchain/src/Equipment/DetailView/Tabs/StatusLogs.tsx
@@ -40,7 +40,7 @@ const User = ({ user }: { user: ColdchainAssetLogFragment['user'] }) => {
   return (
     <Box display="flex" alignItems="flex-start">
       <Typography sx={{ fontWeight: 'bold', fontSize: '12px' }}>
-        {t('label.user')}: {user?.username ?? '-'}
+        {t('label.user')}: {user?.username}
       </Typography>
       {!!fullName && <Divider />}
       {!!fullName && (
@@ -97,7 +97,7 @@ const StatusLog = ({
     >
       <Box flex={0} display="flex" flexDirection="column" alignItems="center">
         <Connector visible={!isFirst} />
-        <Icon username={log.user?.username ?? '-'} />
+        <Icon username={log.user?.username} />
         <Connector visible={!isLast} />
       </Box>
       <Paper
diff --git a/client/packages/coldchain/src/Equipment/DetailView/Tabs/Summary.tsx b/client/packages/coldchain/src/Equipment/DetailView/Tabs/Summary.tsx
index 2ee9ea925..8db12b073 100644
--- a/client/packages/coldchain/src/Equipment/DetailView/Tabs/Summary.tsx
+++ b/client/packages/coldchain/src/Equipment/DetailView/Tabs/Summary.tsx
@@ -2,7 +2,6 @@ import React from 'react';
 import {
   AutocompleteMulti,
   BasicTextInput,
-  Checkbox,
   DateTimePickerInput,
   InputWithLabelRow,
   Typography,
@@ -12,16 +11,11 @@ import {
   ArrayUtils,
   Box,
   Formatter,
-  useAuthContext,
   useIsCentralServerApi,
 } from '@openmsupply-client/common';
 import { Status } from '../../Components';
-import {
-  DonorSearchInput,
-  NameRowFragment,
-  StoreRowFragment,
-  StoreSearchInput,
-} from '@openmsupply-client/system';
+import { formatPropertyValue } from '../../utils';
+import { StoreRowFragment, StoreSearchInput } from '@openmsupply-client/system';
 import { DraftAsset } from '../../types';
 interface SummaryProps {
   draft?: DraftAsset;
@@ -84,7 +78,7 @@ const Row = ({
 }) => (
   <Box paddingTop={1.5}>
     <InputWithLabelRow
-      labelWidth="160px"
+      labelWidth="150px"
       label={label}
       labelProps={{
         sx: {
@@ -105,7 +99,6 @@ const Row = ({
 export const Summary = ({ draft, onChange, locations }: SummaryProps) => {
   const t = useTranslation('coldchain');
   const { localisedDate } = useFormatDateTime();
-  const { storeId } = useAuthContext();
   const isCentralServer = useIsCentralServerApi();
 
   if (!draft) return null;
@@ -134,14 +127,6 @@ export const Summary = ({ draft, onChange, locations }: SummaryProps) => {
     if (reason === 'clear') onChange({ store: null });
   };
 
-  const onDonorInputChange = (
-    _event: React.SyntheticEvent<Element, Event>,
-    _value: string,
-    reason: string
-  ) => {
-    if (reason === 'clear') onChange({ donor: null, donorNameId: null });
-  };
-
   return (
     <Box display="flex" flex={1}>
       <Container>
@@ -198,58 +183,36 @@ export const Summary = ({ draft, onChange, locations }: SummaryProps) => {
               textFieldProps={{ fullWidth: true }}
             />
           </Row>
-          <Row label={t('label.warranty-start-date')}>
-            <DateTimePickerInput
-              value={DateUtils.getDateOrNull(draft.warrantyStart)}
-              format="P"
-              onChange={date =>
-                onChange({ warrantyStart: Formatter.naiveDate(date) })
-              }
-              textFieldProps={{ fullWidth: true }}
-            />
-          </Row>
-          <Row label={t('label.warranty-end-date')}>
-            <DateTimePickerInput
-              value={DateUtils.getDateOrNull(draft.warrantyEnd)}
-              format="P"
-              onChange={date =>
-                onChange({ warrantyEnd: Formatter.naiveDate(date) })
-              }
-              textFieldProps={{ fullWidth: true }}
-            />
+        </Section>
+        <Section heading={t('heading.cold-chain')}>
+          <Row label={t('label.cold-storage-location')}>
+            {locations ? (
+              <AutocompleteMulti
+                isOptionEqualToValue={(option, value) =>
+                  option.value === value.value
+                }
+                defaultValue={defaultLocations}
+                filterSelectedOptions
+                getOptionLabel={option => option.label}
+                inputProps={{ fullWidth: true }}
+                onChange={(
+                  _event,
+                  newSelectedLocations: {
+                    label: string;
+                    value: string;
+                  }[]
+                ) => {
+                  onChange({
+                    locationIds: ArrayUtils.dedupe(
+                      newSelectedLocations.map(location => location.value)
+                    ),
+                  });
+                }}
+                options={locations}
+              />
+            ) : null}
           </Row>
         </Section>
-        {(!isCentralServer || draft.storeId == storeId) && (
-          <Section heading={t('heading.cold-chain')}>
-            <Row label={t('label.cold-storage-location')}>
-              {locations ? (
-                <AutocompleteMulti
-                  isOptionEqualToValue={(option, value) =>
-                    option.value === value.value
-                  }
-                  defaultValue={defaultLocations}
-                  filterSelectedOptions
-                  getOptionLabel={option => option.label}
-                  inputProps={{ fullWidth: true }}
-                  onChange={(
-                    _event,
-                    newSelectedLocations: {
-                      label: string;
-                      value: string;
-                    }[]
-                  ) => {
-                    onChange({
-                      locationIds: ArrayUtils.dedupe(
-                        newSelectedLocations.map(location => location.value)
-                      ),
-                    });
-                  }}
-                  options={locations}
-                />
-              ) : null}
-            </Row>
-          </Section>
-        )}
       </Container>
       <Box
         marginTop={4}
@@ -282,13 +245,20 @@ export const Summary = ({ draft, onChange, locations }: SummaryProps) => {
               fullWidth
             />
           </Row>
-          <Row label={t('label.needs-replacement')}>
-            <Checkbox
-              checked={Boolean(draft.needsReplacement)}
-              onChange={e => onChange({ needsReplacement: e.target.checked })}
-            />
-          </Row>
         </Section>
+        {draft.properties.length === 0 ? null : (
+          <Section heading={t('label.catalogue-properties')}>
+            {draft.properties.map(property => (
+              <Row key={property.id} label={property.name}>
+                <BasicTextInput
+                  value={formatPropertyValue(property, t)}
+                  disabled
+                  fullWidth
+                />
+              </Row>
+            ))}
+          </Section>
+        )}
         <Section heading={t('label.additional-info')}>
           <Row label={t('label.notes')}>
             <BasicTextInput
@@ -300,16 +270,6 @@ export const Summary = ({ draft, onChange, locations }: SummaryProps) => {
             />
           </Row>
         </Section>
-        <Section heading={t('label.donor')}>
-          <Row label={t('label.donor')}>
-            <DonorSearchInput
-              value={draft.donor as NameRowFragment} // Using as NameRowFragment is ok, because the comparison function is based on the id
-              onChange={e => onChange({ donor: e, donorNameId: e?.id })}
-              onInputChange={onDonorInputChange}
-              clearable
-            />
-          </Row>
-        </Section>
       </Container>
     </Box>
   );
diff --git a/client/packages/coldchain/src/Equipment/ImportAsset/EquipmentImportModal.tsx b/client/packages/coldchain/src/Equipment/ImportAsset/EquipmentImportModal.tsx
index 00baac383..cbb49b46a 100644
--- a/client/packages/coldchain/src/Equipment/ImportAsset/EquipmentImportModal.tsx
+++ b/client/packages/coldchain/src/Equipment/ImportAsset/EquipmentImportModal.tsx
@@ -50,7 +50,6 @@ export type ImportRow = {
   id: string;
   notes: string;
   errorMessage: string;
-  warningMessage: string;
   store: StoreRowFragment | null | undefined;
 };
 
@@ -119,8 +118,6 @@ export const EquipmentImportModal: FC<EquipmentImportModalProps> = ({
   const { Modal } = useDialog({ isOpen, onClose });
 
   const [errorMessage, setErrorMessage] = useState<string>(() => '');
-  const [warningMessage, setWarningMessage] = useState<string>(() => '');
-
   const [importProgress, setImportProgress] = useState(0);
   const [importErrorCount, setImportErrorCount] = useState(0);
   const {
@@ -246,7 +243,6 @@ export const EquipmentImportModal: FC<EquipmentImportModalProps> = ({
   const exportNotReady = !(
     bufferedEquipment.length >= 0 && errorMessage.length > 0
   );
-  const showWarnings = errorMessage.length == 0 && warningMessage.length > 0;
 
   const importSteps = [
     { label: t('label.upload'), description: '', clickable: true },
@@ -312,14 +308,12 @@ export const EquipmentImportModal: FC<EquipmentImportModalProps> = ({
                 catalogueItemData={catalogueItemData?.nodes}
                 setEquipment={setBufferedEquipment}
                 setErrorMessage={setErrorMessage}
-                setWarningMessage={setWarningMessage}
                 onUploadComplete={() => {
                   changeTab(Tabs.Review);
                 }}
               />
             </QueryParamsProvider>
             <EquipmentReviewTab
-              showWarnings={showWarnings}
               tab={Tabs.Review}
               uploadedRows={bufferedEquipment}
             />
diff --git a/client/packages/coldchain/src/Equipment/ImportAsset/ImportReviewDataTable.tsx b/client/packages/coldchain/src/Equipment/ImportAsset/ImportReviewDataTable.tsx
index ea2215fea..c7d923318 100644
--- a/client/packages/coldchain/src/Equipment/ImportAsset/ImportReviewDataTable.tsx
+++ b/client/packages/coldchain/src/Equipment/ImportAsset/ImportReviewDataTable.tsx
@@ -15,11 +15,9 @@ import { ImportRow } from './EquipmentImportModal';
 
 interface ImportReviewDataTableProps {
   importRows: ImportRow[];
-  showWarnings: boolean;
 }
 export const ImportReviewDataTable: FC<ImportReviewDataTableProps> = ({
   importRows,
-  showWarnings,
 }) => {
   const t = useTranslation('coldchain');
   const isCentralServer = useIsCentralServerApi();
@@ -52,6 +50,7 @@ export const ImportReviewDataTable: FC<ImportReviewDataTableProps> = ({
       accessor: ({ rowData }) => rowData.store?.code,
     });
   }
+
   columnDescriptions.push({
     key: 'serialNumber',
     width: 100,
@@ -73,21 +72,12 @@ export const ImportReviewDataTable: FC<ImportReviewDataTableProps> = ({
     label: 'label.asset-notes',
     Cell: TooltipTextCell,
   });
-  if (showWarnings) {
-    columnDescriptions.push({
-      key: 'warningMessage',
-      label: 'label.warning-message',
-      width: 150,
-      Cell: TooltipTextCell,
-    });
-  } else {
-    columnDescriptions.push({
-      key: 'errorMessage',
-      label: 'label.error-message',
-      width: 150,
-      Cell: TooltipTextCell,
-    });
-  }
+  columnDescriptions.push({
+    key: 'errorMessage',
+    label: 'label.error-message',
+    width: 150,
+    Cell: TooltipTextCell,
+  });
 
   const columns = useColumns<ImportRow>(columnDescriptions, {}, []);
 
diff --git a/client/packages/coldchain/src/Equipment/ImportAsset/ReviewTab.tsx b/client/packages/coldchain/src/Equipment/ImportAsset/ReviewTab.tsx
index 36efc4d77..f417cc48c 100644
--- a/client/packages/coldchain/src/Equipment/ImportAsset/ReviewTab.tsx
+++ b/client/packages/coldchain/src/Equipment/ImportAsset/ReviewTab.tsx
@@ -5,18 +5,13 @@ import { ImportReviewDataTable } from './ImportReviewDataTable';
 
 interface EquipmentReviewTabProps {
   uploadedRows: ImportRow[];
-  showWarnings: boolean;
 }
 
 export const EquipmentReviewTab: FC<ImportPanel & EquipmentReviewTabProps> = ({
-  showWarnings,
   tab,
   uploadedRows,
 }) => (
   <ImportPanel tab={tab}>
-    <ImportReviewDataTable
-      importRows={uploadedRows}
-      showWarnings={showWarnings}
-    />
+    <ImportReviewDataTable importRows={uploadedRows} />
   </ImportPanel>
 );
diff --git a/client/packages/coldchain/src/Equipment/ImportAsset/UploadTab.tsx b/client/packages/coldchain/src/Equipment/ImportAsset/UploadTab.tsx
index a8b924b11..19bb6d2c1 100644
--- a/client/packages/coldchain/src/Equipment/ImportAsset/UploadTab.tsx
+++ b/client/packages/coldchain/src/Equipment/ImportAsset/UploadTab.tsx
@@ -29,7 +29,6 @@ import {
 interface EquipmentUploadTabProps {
   setEquipment: React.Dispatch<React.SetStateAction<ImportRow[]>>;
   setErrorMessage: (value: React.SetStateAction<string>) => void;
-  setWarningMessage: (value: React.SetStateAction<string>) => void;
   onUploadComplete: () => void;
   catalogueItemData?: AssetCatalogueItemFragment[];
 }
@@ -53,7 +52,6 @@ function getImportHelpers<T, P>(
     id: FnUtils.generateUUID(),
   } as T;
   const rowErrors: string[] = [];
-  const rowWarnings: string[] = [];
 
   const addCell = (
     key: keyof T,
@@ -89,39 +87,6 @@ function getImportHelpers<T, P>(
     addCell(key, localeKey, formatter);
   };
 
-  const addSoftRequired = (
-    key: keyof T,
-    localeKey: LocaleKey,
-    formatter?: (value: string) => unknown
-  ) => {
-    const prop = t(localeKey) as keyof P;
-    const value = row[prop] ?? '';
-
-    if (value === undefined || (value as string).trim() === '') {
-      rowWarnings.push(
-        t('warning.field-not-parsed', {
-          field: t(localeKey),
-        })
-      );
-      return;
-    }
-
-    if (
-      formatter &&
-      value &&
-      (formatter(value as string) === undefined ||
-        formatter(value as string) === null)
-    ) {
-      rowWarnings.push(
-        t('warning.field-not-parsed', {
-          field: t(localeKey),
-        })
-      );
-      return;
-    }
-    addCell(key, localeKey, formatter);
-  };
-
   const addUnique = (
     key: keyof T,
     localeKey: LocaleKey,
@@ -166,22 +131,12 @@ function getImportHelpers<T, P>(
     addCell(key, localeKey, formatter);
   }
 
-  return {
-    addLookup,
-    addCell,
-    addRequired,
-    addSoftRequired,
-    addUnique,
-    importRow,
-    rowErrors,
-    rowWarnings,
-  };
+  return { addLookup, addCell, addRequired, addUnique, importRow, rowErrors };
 }
 
 export const EquipmentUploadTab: FC<ImportPanel & EquipmentUploadTabProps> = ({
   tab,
   setErrorMessage,
-  setWarningMessage,
   setEquipment,
   onUploadComplete,
   catalogueItemData,
@@ -248,15 +203,8 @@ export const EquipmentUploadTab: FC<ImportPanel & EquipmentUploadTabProps> = ({
     let hasErrors = false;
 
     data.data.forEach((row, index) => {
-      const {
-        addLookup,
-        addCell,
-        addUnique,
-        importRow,
-        rowErrors,
-        rowWarnings,
-        addSoftRequired,
-      } = getImportHelpers(row, rows, index, t);
+      const { addLookup, addCell, addUnique, importRow, rowErrors } =
+        getImportHelpers(row, rows, index, t);
       const lookupCode = (item: { code: string | null | undefined }) =>
         item.code;
       const lookupStore = (store: { code: string }) => store.code;
@@ -278,23 +226,14 @@ export const EquipmentUploadTab: FC<ImportPanel & EquipmentUploadTabProps> = ({
         );
       }
       addCell('notes', 'label.asset-notes');
-      addSoftRequired(
-        'installationDate',
-        'label.installation-date',
-        formatDate
-      );
+      addCell('installationDate', 'label.installation-date', formatDate);
       addCell('serialNumber', 'label.serial');
       importRow.errorMessage = rowErrors.join(',');
-      importRow.warningMessage = rowWarnings.join(',');
       hasErrors = hasErrors || rowErrors.length > 0;
-      const hasWarnings = rowWarnings.length > 0;
       rows.push(importRow);
       if (hasErrors) {
         setErrorMessage(t('messages.import-error-on-upload'));
       }
-      if (hasWarnings) {
-        setWarningMessage(t('messages.import-warning-on-upload'));
-      }
     });
     EquipmentBuffer.push(...rows);
   };
diff --git a/client/packages/coldchain/src/Equipment/ListView/CreateAssetModal.tsx b/client/packages/coldchain/src/Equipment/ListView/CreateAssetModal.tsx
index 52f2eccfc..afaac8a45 100644
--- a/client/packages/coldchain/src/Equipment/ListView/CreateAssetModal.tsx
+++ b/client/packages/coldchain/src/Equipment/ListView/CreateAssetModal.tsx
@@ -69,7 +69,12 @@ const InputRow = ({
 
 const parseInsertError = (e: unknown) => {
   const message = (e as Error).message;
-  if (message.includes('AssetNumberAlreadyExists')) {
+  if (
+    message.includes('DatabaseError(') &&
+    message.includes('UniqueViolation(') &&
+    message.includes('asset_asset_number_key') &&
+    message.includes('duplicate key')
+  ) {
     return 'error.cce-asset-number-already-used';
   }
 
diff --git a/client/packages/coldchain/src/Equipment/api/api.ts b/client/packages/coldchain/src/Equipment/api/api.ts
index b872a8625..d39254135 100644
--- a/client/packages/coldchain/src/Equipment/api/api.ts
+++ b/client/packages/coldchain/src/Equipment/api/api.ts
@@ -49,11 +49,6 @@ const assetParsers = {
     serialNumber: input.serialNumber,
     storeId: input.store?.id,
     typeId: input.typeId,
-    properties: JSON.stringify(input.parsedProperties),
-    donorNameId: input.donorNameId,
-    warrantyStart: input.warrantyStart,
-    warrantyEnd: input.warrantyEnd,
-    needsReplacement: input.needsReplacement,
   }),
   toUpdate: (input: Partial<DraftAsset>): UpdateAssetInput => ({
     id: input.id ?? '',
@@ -65,11 +60,6 @@ const assetParsers = {
     serialNumber: setNullableInput('serialNumber', input),
     storeId: setNullableInput('id', input.store),
     locationIds: input.locationIds,
-    properties: JSON.stringify(input.parsedProperties),
-    donorNameId: setNullableInput('donorNameId', input),
-    warrantyStart: setNullableInput('warrantyStart', input),
-    warrantyEnd: setNullableInput('warrantyEnd', input),
-    needsReplacement: input.needsReplacement,
   }),
   toLogInsert: (input: Partial<InsertAssetLogInput>): InsertAssetLogInput => ({
     id: input.id ?? '',
diff --git a/client/packages/coldchain/src/Equipment/api/hooks/document/index.ts b/client/packages/coldchain/src/Equipment/api/hooks/document/index.ts
index 8c113cb49..ebe0f8b40 100644
--- a/client/packages/coldchain/src/Equipment/api/hooks/document/index.ts
+++ b/client/packages/coldchain/src/Equipment/api/hooks/document/index.ts
@@ -6,7 +6,6 @@ import { useAssetUpdate } from './useAssetUpdate';
 import { useAssets } from './useAssets';
 import { useAssetsAll } from './useAssetsAll';
 import { useAssetsDelete } from './useAssetsDelete';
-import { useAssetProperties } from '@openmsupply-client/system/src/Asset/api/hooks/utils/useAssetProperties';
 
 export const Document = {
   useAsset,
@@ -18,5 +17,4 @@ export const Document = {
   useAssetsDelete,
   useAssetUpdate,
   useFetchAssetById,
-  useAssetProperties,
 };
diff --git a/client/packages/coldchain/src/Equipment/api/hooks/index.ts b/client/packages/coldchain/src/Equipment/api/hooks/index.ts
index 2e962d121..8296dfb15 100644
--- a/client/packages/coldchain/src/Equipment/api/hooks/index.ts
+++ b/client/packages/coldchain/src/Equipment/api/hooks/index.ts
@@ -21,9 +21,7 @@ export const useAssets = {
     deleteAssets: Document.useAssetsDelete,
     update: Document.useAssetUpdate,
   },
-  properties: {
-    list: Document.useAssetProperties,
-  },
+
   log: {
     insert: Log.useAssetLogInsert,
     list: Log.useAssetLogs,
diff --git a/client/packages/coldchain/src/Equipment/api/hooks/utils/useAssetApi.ts b/client/packages/coldchain/src/Equipment/api/hooks/utils/useAssetApi.ts
index df122b6ff..39a77eab3 100644
--- a/client/packages/coldchain/src/Equipment/api/hooks/utils/useAssetApi.ts
+++ b/client/packages/coldchain/src/Equipment/api/hooks/utils/useAssetApi.ts
@@ -11,8 +11,6 @@ export const useAssetApi = () => {
     list: () => [...keys.base(), storeId, 'list'] as const,
     paramList: (params: ListParams<AssetFragment>) =>
       [...keys.list(), params] as const,
-    paramListProperties: (params: ListParams<AssetFragment>) =>
-      [...keys.list(), params] as const,
     sortedList: (sortBy: SortBy<AssetFragment>) =>
       [...keys.list(), sortBy] as const,
     logs: (assetId: string) => [...keys.base(), assetId, 'logs'] as const,
diff --git a/client/packages/coldchain/src/Equipment/api/operations.generated.ts b/client/packages/coldchain/src/Equipment/api/operations.generated.ts
index cddb4f65f..c0dd565b8 100644
--- a/client/packages/coldchain/src/Equipment/api/operations.generated.ts
+++ b/client/packages/coldchain/src/Equipment/api/operations.generated.ts
@@ -6,7 +6,7 @@ import gql from 'graphql-tag';
 import { graphql, ResponseResolver, GraphQLRequest, GraphQLContext } from 'msw'
 export type AssetRowFragment = { __typename: 'AssetNode', assetNumber?: string | null, id: string, notes?: string | null, serialNumber?: string | null, modifiedDatetime: any, installationDate?: string | null, createdDatetime: any, replacementDate?: string | null, storeId?: string | null, statusLog?: { __typename: 'AssetLogNode', logDatetime: any, status?: Types.StatusType | null, reason?: { __typename: 'AssetLogReasonNode', reason: string } | null } | null, store?: { __typename: 'StoreNode', id: string, code: string, storeName: string } | null, catalogueItem?: { __typename: 'AssetCatalogueItemNode', manufacturer?: string | null, model: string } | null, assetType?: { __typename: 'AssetTypeNode', name: string } | null };
 
-export type AssetFragment = { __typename: 'AssetNode', catalogueItemId?: string | null, assetNumber?: string | null, createdDatetime: any, id: string, installationDate?: string | null, properties: string, catalogProperties?: string | null, modifiedDatetime: any, notes?: string | null, replacementDate?: string | null, serialNumber?: string | null, storeId?: string | null, donorNameId?: string | null, warrantyStart?: string | null, warrantyEnd?: string | null, needsReplacement?: boolean | null, documents: { __typename: 'SyncFileReferenceConnector', nodes: Array<{ __typename: 'SyncFileReferenceNode', fileName: string, id: string, mimeType?: string | null }> }, locations: { __typename: 'LocationConnector', totalCount: number, nodes: Array<{ __typename: 'LocationNode', id: string, code: string, name: string, onHold: boolean }> }, statusLog?: { __typename: 'AssetLogNode', logDatetime: any, status?: Types.StatusType | null, reason?: { __typename: 'AssetLogReasonNode', reason: string } | null } | null, store?: { __typename: 'StoreNode', id: string, code: string, storeName: string } | null, catalogueItem?: { __typename: 'AssetCatalogueItemNode', manufacturer?: string | null, model: string } | null, assetType?: { __typename: 'AssetTypeNode', id: string, name: string } | null, assetClass?: { __typename: 'AssetClassNode', id: string, name: string } | null, assetCategory?: { __typename: 'AssetCategoryNode', id: string, name: string } | null, donor?: { __typename: 'NameNode', id: string, name: string } | null };
+export type AssetFragment = { __typename: 'AssetNode', catalogueItemId?: string | null, assetNumber?: string | null, createdDatetime: any, id: string, installationDate?: string | null, modifiedDatetime: any, notes?: string | null, replacementDate?: string | null, serialNumber?: string | null, storeId?: string | null, documents: { __typename: 'SyncFileReferenceConnector', nodes: Array<{ __typename: 'SyncFileReferenceNode', fileName: string, id: string, mimeType?: string | null }> }, locations: { __typename: 'LocationConnector', totalCount: number, nodes: Array<{ __typename: 'LocationNode', id: string, code: string, name: string, onHold: boolean }> }, properties: Array<{ __typename: 'AssetCatalogueItemPropertyValueNode', id: string, name: string, valueString?: string | null, valueFloat?: number | null, valueBool?: boolean | null, valueInt?: number | null, valueType: Types.PropertyNodeValueType }>, statusLog?: { __typename: 'AssetLogNode', logDatetime: any, status?: Types.StatusType | null, reason?: { __typename: 'AssetLogReasonNode', reason: string } | null } | null, store?: { __typename: 'StoreNode', id: string, code: string, storeName: string } | null, catalogueItem?: { __typename: 'AssetCatalogueItemNode', manufacturer?: string | null, model: string } | null, assetType?: { __typename: 'AssetTypeNode', name: string } | null, assetClass?: { __typename: 'AssetClassNode', name: string } | null, assetCategory?: { __typename: 'AssetCategoryNode', name: string } | null };
 
 export type ColdchainAssetLogFragment = { __typename: 'AssetLogNode', comment?: string | null, id: string, logDatetime: any, status?: Types.StatusType | null, type?: string | null, reason?: { __typename: 'AssetLogReasonNode', reason: string } | null, user?: { __typename: 'UserNode', firstName?: string | null, lastName?: string | null, username: string, jobTitle?: string | null } | null, documents: { __typename: 'SyncFileReferenceConnector', nodes: Array<{ __typename: 'SyncFileReferenceNode', fileName: string, id: string, mimeType?: string | null }> } };
 
@@ -28,7 +28,7 @@ export type AssetByIdQueryVariables = Types.Exact<{
 }>;
 
 
-export type AssetByIdQuery = { __typename: 'Queries', assets: { __typename: 'AssetConnector', totalCount: number, nodes: Array<{ __typename: 'AssetNode', catalogueItemId?: string | null, assetNumber?: string | null, createdDatetime: any, id: string, installationDate?: string | null, properties: string, catalogProperties?: string | null, modifiedDatetime: any, notes?: string | null, replacementDate?: string | null, serialNumber?: string | null, storeId?: string | null, donorNameId?: string | null, warrantyStart?: string | null, warrantyEnd?: string | null, needsReplacement?: boolean | null, documents: { __typename: 'SyncFileReferenceConnector', nodes: Array<{ __typename: 'SyncFileReferenceNode', fileName: string, id: string, mimeType?: string | null }> }, locations: { __typename: 'LocationConnector', totalCount: number, nodes: Array<{ __typename: 'LocationNode', id: string, code: string, name: string, onHold: boolean }> }, statusLog?: { __typename: 'AssetLogNode', logDatetime: any, status?: Types.StatusType | null, reason?: { __typename: 'AssetLogReasonNode', reason: string } | null } | null, store?: { __typename: 'StoreNode', id: string, code: string, storeName: string } | null, catalogueItem?: { __typename: 'AssetCatalogueItemNode', manufacturer?: string | null, model: string } | null, assetType?: { __typename: 'AssetTypeNode', id: string, name: string } | null, assetClass?: { __typename: 'AssetClassNode', id: string, name: string } | null, assetCategory?: { __typename: 'AssetCategoryNode', id: string, name: string } | null, donor?: { __typename: 'NameNode', id: string, name: string } | null }> } };
+export type AssetByIdQuery = { __typename: 'Queries', assets: { __typename: 'AssetConnector', totalCount: number, nodes: Array<{ __typename: 'AssetNode', catalogueItemId?: string | null, assetNumber?: string | null, createdDatetime: any, id: string, installationDate?: string | null, modifiedDatetime: any, notes?: string | null, replacementDate?: string | null, serialNumber?: string | null, storeId?: string | null, documents: { __typename: 'SyncFileReferenceConnector', nodes: Array<{ __typename: 'SyncFileReferenceNode', fileName: string, id: string, mimeType?: string | null }> }, locations: { __typename: 'LocationConnector', totalCount: number, nodes: Array<{ __typename: 'LocationNode', id: string, code: string, name: string, onHold: boolean }> }, properties: Array<{ __typename: 'AssetCatalogueItemPropertyValueNode', id: string, name: string, valueString?: string | null, valueFloat?: number | null, valueBool?: boolean | null, valueInt?: number | null, valueType: Types.PropertyNodeValueType }>, statusLog?: { __typename: 'AssetLogNode', logDatetime: any, status?: Types.StatusType | null, reason?: { __typename: 'AssetLogReasonNode', reason: string } | null } | null, store?: { __typename: 'StoreNode', id: string, code: string, storeName: string } | null, catalogueItem?: { __typename: 'AssetCatalogueItemNode', manufacturer?: string | null, model: string } | null, assetType?: { __typename: 'AssetTypeNode', name: string } | null, assetClass?: { __typename: 'AssetClassNode', name: string } | null, assetCategory?: { __typename: 'AssetCategoryNode', name: string } | null }> } };
 
 export type AssetLogsQueryVariables = Types.Exact<{
   filter: Types.AssetLogFilterInput;
@@ -133,8 +133,15 @@ export const AssetFragmentDoc = gql`
     }
     totalCount
   }
-  properties
-  catalogProperties
+  properties {
+    id
+    name
+    valueString
+    valueFloat
+    valueBool
+    valueInt
+    valueType
+  }
   modifiedDatetime
   notes
   replacementDate
@@ -157,25 +164,14 @@ export const AssetFragmentDoc = gql`
     model
   }
   assetType {
-    id
     name
   }
   assetClass {
-    id
     name
   }
   assetCategory {
-    id
-    name
-  }
-  donorNameId
-  donor(storeId: $storeId) {
-    id
     name
   }
-  warrantyStart
-  warrantyEnd
-  needsReplacement
 }
     `;
 export const ColdchainAssetLogFragmentDoc = gql`
diff --git a/client/packages/coldchain/src/Equipment/api/operations.graphql b/client/packages/coldchain/src/Equipment/api/operations.graphql
index 12c66cb42..e421ae6a4 100644
--- a/client/packages/coldchain/src/Equipment/api/operations.graphql
+++ b/client/packages/coldchain/src/Equipment/api/operations.graphql
@@ -53,8 +53,15 @@ fragment Asset on AssetNode {
     }
     totalCount
   }
-  properties
-  catalogProperties
+  properties {
+    id
+    name
+    valueString
+    valueFloat
+    valueBool
+    valueInt
+    valueType
+  }
   modifiedDatetime
   notes
   replacementDate
@@ -77,25 +84,14 @@ fragment Asset on AssetNode {
     model
   }
   assetType {
-    id
     name
   }
   assetClass {
-    id
     name
   }
   assetCategory {
-    id
-    name
-  }
-  donorNameId
-  donor(storeId: $storeId) {
-    id
     name
   }
-  warrantyStart
-  warrantyEnd
-  needsReplacement
 }
 
 fragment ColdchainAssetLog on AssetLogNode {
diff --git a/client/packages/coldchain/src/Equipment/types.ts b/client/packages/coldchain/src/Equipment/types.ts
index c5c7323c6..afcc251d5 100644
--- a/client/packages/coldchain/src/Equipment/types.ts
+++ b/client/packages/coldchain/src/Equipment/types.ts
@@ -1,14 +1,16 @@
+import { PropertyNodeValueType } from '@common/types';
 import { AssetFragment } from './api';
 
 export interface LocationIds {
   locationIds: string[];
 }
 
-export interface Properties {
-  parsedProperties: Record<string, string | number | boolean | null>;
-  parsedCatalogProperties: Record<string, string | number | boolean | null>;
-}
+export type DraftAsset = AssetFragment & LocationIds & { files?: File[] };
 
-export type DraftAsset = AssetFragment &
-  LocationIds &
-  Properties & { files?: File[] };
+export type PropertyValue = {
+  valueString?: string | null;
+  valueFloat?: number | null;
+  valueBool?: boolean | null;
+  valueInt?: number | null;
+  valueType: PropertyNodeValueType;
+};
diff --git a/client/packages/coldchain/src/Equipment/utils.ts b/client/packages/coldchain/src/Equipment/utils.ts
index dd27069e8..ab7915277 100644
--- a/client/packages/coldchain/src/Equipment/utils.ts
+++ b/client/packages/coldchain/src/Equipment/utils.ts
@@ -1,8 +1,9 @@
 import { LocaleKey, TypedTFunction } from '@common/intl';
 import { AssetRowFragment } from './api';
 import { Formatter } from '@common/utils';
-import { StatusType } from '@common/types';
+import { PropertyNodeValueType, StatusType } from '@common/types';
 import { ImportRow, LineNumber } from './ImportAsset';
+import { PropertyValue } from './types';
 
 // the reference data is loaded in migrations so the id here is hardcoded
 export const CCE_CLASS_ID = 'fad280b6-8384-41af-84cf-c7b6b4526ef0';
@@ -134,3 +135,21 @@ export const importEquipmentToCsv = (
 
   return Formatter.csv({ fields, data });
 };
+
+export const formatPropertyValue = (
+  propertyValue: PropertyValue,
+  t: TypedTFunction<LocaleKey>
+) => {
+  switch (propertyValue.valueType) {
+    case PropertyNodeValueType.Boolean:
+      return propertyValue.valueBool ? t('messages.yes') : t('messages.no');
+    case PropertyNodeValueType.Float:
+      return propertyValue.valueFloat?.toString();
+    case PropertyNodeValueType.Integer:
+      return propertyValue.valueInt?.toString();
+    case PropertyNodeValueType.String:
+      return propertyValue.valueString;
+    default:
+      return undefined;
+  }
+};
diff --git a/client/packages/coldchain/src/Monitoring/ListView/ListView.tsx b/client/packages/coldchain/src/Monitoring/ListView/ListView.tsx
index 155cba71e..5a5dc916b 100644
--- a/client/packages/coldchain/src/Monitoring/ListView/ListView.tsx
+++ b/client/packages/coldchain/src/Monitoring/ListView/ListView.tsx
@@ -43,7 +43,7 @@ export const ListView: FC = () => {
   return (
     <>
       <AppBarButtons />
-      <DetailTabs tabs={tabs} overwriteQuery={false} restoreTabQuery={false} />
+      <DetailTabs tabs={tabs} />
     </>
   );
 };
diff --git a/client/packages/coldchain/src/Monitoring/ListView/TemperatureBreach/TemperatureBreachList.tsx b/client/packages/coldchain/src/Monitoring/ListView/TemperatureBreach/TemperatureBreachList.tsx
index f7bb04f82..47aef1613 100644
--- a/client/packages/coldchain/src/Monitoring/ListView/TemperatureBreach/TemperatureBreachList.tsx
+++ b/client/packages/coldchain/src/Monitoring/ListView/TemperatureBreach/TemperatureBreachList.tsx
@@ -27,9 +27,9 @@ const ListView: FC = () => {
     filter,
     queryParams: { sortBy, page, first, offset, filterBy },
   } = useUrlQueryParams({
-    initialSort: { key: 'datetime', dir: 'desc' },
+    initialSort: { key: 'startDatetime', dir: 'desc' },
     filters: [
-      { key: 'datetime', condition: 'between' },
+      { key: 'startDatetime', condition: 'between' },
       {
         key: 'sensor.name',
       },
@@ -100,12 +100,11 @@ const ListView: FC = () => {
         sortable: false,
       },
       {
-        key: 'datetime',
+        key: 'startDatetime',
         label: 'label.type-start',
         accessor: ({ rowData }) => {
           return Formatter.csvDateTimeString(rowData.startDatetime);
         },
-        getSortValue: row => row.startDatetime,
       },
       {
         key: 'endDatetime',
diff --git a/client/packages/coldchain/src/Monitoring/ListView/TemperatureBreach/Toolbar.tsx b/client/packages/coldchain/src/Monitoring/ListView/TemperatureBreach/Toolbar.tsx
index d6cb8d6c8..ccf2b4eff 100644
--- a/client/packages/coldchain/src/Monitoring/ListView/TemperatureBreach/Toolbar.tsx
+++ b/client/packages/coldchain/src/Monitoring/ListView/TemperatureBreach/Toolbar.tsx
@@ -41,13 +41,13 @@ export const Toolbar: FC<{ filter: FilterController }> = () => {
                 {
                   type: 'dateTime',
                   name: t('label.from-start-datetime'),
-                  urlParameter: 'datetime',
+                  urlParameter: 'startDatetime',
                   range: 'from',
                 },
                 {
                   type: 'dateTime',
                   name: t('label.to-start-datetime'),
-                  urlParameter: 'datetime',
+                  urlParameter: 'startDatetime',
                   range: 'to',
                 },
               ],
diff --git a/client/packages/coldchain/src/Monitoring/api/TemperatureBreach/api.ts b/client/packages/coldchain/src/Monitoring/api/TemperatureBreach/api.ts
index 76a16f5d0..88c3841e9 100644
--- a/client/packages/coldchain/src/Monitoring/api/TemperatureBreach/api.ts
+++ b/client/packages/coldchain/src/Monitoring/api/TemperatureBreach/api.ts
@@ -1,7 +1,6 @@
 import { SortBy } from '@common/hooks';
 import { Sdk, TemperatureBreachFragment } from './operations.generated';
 import {
-  DatetimeFilterInput,
   RecordPatch,
   TemperatureBreachFilterInput,
   TemperatureBreachSortFieldInput,
@@ -11,9 +10,7 @@ export type ListParams = {
   first: number;
   offset: number;
   sortBy: SortBy<TemperatureBreachFragment>;
-  filterBy:
-    | (TemperatureBreachFilterInput & { datetime?: DatetimeFilterInput })
-    | null;
+  filterBy: TemperatureBreachFilterInput | null;
 };
 
 export const getTemperatureBreachQueries = (sdk: Sdk, storeId: string) => ({
@@ -21,30 +18,14 @@ export const getTemperatureBreachQueries = (sdk: Sdk, storeId: string) => ({
     list:
       ({ first, offset, sortBy, filterBy }: ListParams) =>
       async () => {
-        const key =
-          sortBy.key === 'datetime' || sortBy.key === 'temperature'
-            ? TemperatureBreachSortFieldInput.StartDatetime
-            : (sortBy.key as TemperatureBreachSortFieldInput);
-
-        let filter = undefined;
-        if (filterBy !== null) {
-          const { datetime, ...rest } = filterBy;
-          if (!!datetime) {
-            filter = {
-              ...rest,
-              startDatetime: datetime,
-            };
-          }
-        }
-
         const result = await sdk.temperature_breaches({
           storeId,
           page: { offset, first },
           sort: {
-            key,
+            key: sortBy.key as TemperatureBreachSortFieldInput,
             desc: !!sortBy.isDesc,
           },
-          filter,
+          filter: filterBy,
         });
 
         return result?.temperatureBreaches;
diff --git a/client/packages/coldchain/src/Monitoring/api/TemperatureLog/api.ts b/client/packages/coldchain/src/Monitoring/api/TemperatureLog/api.ts
index 5f23c74c1..00b31c3f6 100644
--- a/client/packages/coldchain/src/Monitoring/api/TemperatureLog/api.ts
+++ b/client/packages/coldchain/src/Monitoring/api/TemperatureLog/api.ts
@@ -14,16 +14,11 @@ export const getTemperatureLogQueries = (sdk: Sdk, storeId: string) => ({
     list:
       ({ first, offset, sortBy, filterBy }: ListParams) =>
       async () => {
-        const key =
-          sortBy.key === 'endDatetime'
-            ? TemperatureLogSortFieldInput.Datetime
-            : (sortBy.key as TemperatureLogSortFieldInput);
-
         const result = await sdk.temperature_logs({
           storeId,
           page: { offset, first },
           sort: {
-            key,
+            key: sortBy.key as TemperatureLogSortFieldInput,
             desc: !!sortBy.isDesc,
           },
           filter: filterBy,
diff --git a/client/packages/common/package.json b/client/packages/common/package.json
index dca094dc1..1f3df7b64 100644
--- a/client/packages/common/package.json
+++ b/client/packages/common/package.json
@@ -51,7 +51,7 @@
     "recharts": "^2.5.0",
     "stylis": "^4.0.13",
     "stylis-plugin-rtl": "^2.1.1",
-    "uuidv7": "^1.0.0",
+    "uuid": "^9.0.0",
     "zustand": "^4.3.6"
   },
   "devDependencies": {
@@ -59,6 +59,7 @@
     "@types/css-mediaquery": "^0.1.1",
     "@types/dompurify": "^3.0.0",
     "@types/js-cookie": "^3.0.1",
+    "@types/uuid": "^9.0.1",
     "css-mediaquery": "^0.1.2"
   }
 }
diff --git a/client/packages/common/src/authentication/AuthContext.tsx b/client/packages/common/src/authentication/AuthContext.tsx
index aace6f140..a9ed51862 100644
--- a/client/packages/common/src/authentication/AuthContext.tsx
+++ b/client/packages/common/src/authentication/AuthContext.tsx
@@ -149,7 +149,7 @@ export const AuthProvider: FC<PropsWithChildrenOnly> = ({ children }) => {
     lastSuccessfulSync,
     updateUser,
     error: updateUserError,
-  } = useUpdateUserInfo(setCookie, cookie, mostRecentCredentials);
+  } = useUpdateUserInfo(setCookie, cookie);
 
   const logout = () => {
     Cookies.remove('auth');
diff --git a/client/packages/common/src/hooks/useNativeClient/useNativeClient.ts b/client/packages/common/src/hooks/useNativeClient/useNativeClient.ts
index dc37b5262..84ca64d90 100644
--- a/client/packages/common/src/hooks/useNativeClient/useNativeClient.ts
+++ b/client/packages/common/src/hooks/useNativeClient/useNativeClient.ts
@@ -117,22 +117,16 @@ export const useNativeClient = ({
     // Currently only supported on native platforms via capacitor
     if (!Capacitor.isNativePlatform()) return;
 
-    try {
-      const result = await KeepAwake.isSupported();
-      if (result.isSupported) await KeepAwake.allowSleep();
-      // If KeepAwake has errors, just swallow them
-    } catch {}
+    const result = await KeepAwake.isSupported();
+    if (result.isSupported) await KeepAwake.allowSleep();
   };
 
   const keepAwake = async () => {
     // Currently only supported on native platforms via capacitor
     if (!Capacitor.isNativePlatform()) return;
 
-    try {
-      const result = await KeepAwake.isSupported();
-      if (result.isSupported) await KeepAwake.keepAwake();
-      // If KeepAwake has errors, just swallow them
-    } catch {}
+    const result = await KeepAwake.isSupported();
+    if (result.isSupported) await KeepAwake.keepAwake();
   };
 
   const saveFile = async (fileInfo: FileInfo) => {
diff --git a/client/packages/common/src/intl/context/IntlContext.tsx b/client/packages/common/src/intl/context/IntlContext.tsx
index 0d5681ca1..75e2549f1 100644
--- a/client/packages/common/src/intl/context/IntlContext.tsx
+++ b/client/packages/common/src/intl/context/IntlContext.tsx
@@ -7,12 +7,8 @@ import { I18nextProviderProps, initReactI18next } from 'react-i18next';
 import LanguageDetector from 'i18next-browser-languagedetector';
 import { browserLanguageDetector } from './browserLanguageDetector';
 import { createRegisteredContext } from 'react-singleton-context';
-const appVersion = require('../../../../../../package.json').version; // eslint-disable-line @typescript-eslint/no-var-requires
-
-// Created by webpack DefinePlugin see webpack.config.js
-// Only for web, otherwise default to app version
-declare const LANG_VERSION: string;
 
+declare const LANG_VERSION: string; // Created by webpack DefinePlugin see webpack.config.js
 const defaultNS = 'common';
 
 type IntlProviderProps = PropsWithChildren<{ isElectron?: boolean }>;
@@ -38,9 +34,6 @@ export const IntlProvider: FC<IntlProviderProps> = ({
       ? 0
       : 7 * 24 * 60 * minuteInMilliseconds; // Cache for 7 days, on rebuild we should get a new language version so we can use a reasonably long cache
 
-    const languageVersion =
-      typeof LANG_VERSION === 'undefined' ? appVersion : LANG_VERSION;
-
     // Electron `main` window translations should be served with relative path
     const loadPath = `${!!isElectron ? '.' : ''}/locales/{{lng}}/{{ns}}.json`;
 
@@ -59,9 +52,7 @@ export const IntlProvider: FC<IntlProviderProps> = ({
               /* options for primary backend */
               expirationTime,
               defaultVersion: 'v0.1',
-              versions: {
-                en: languageVersion,
-              },
+              versions: { en: LANG_VERSION },
             },
             {
               /* options for secondary backend */
diff --git a/client/packages/common/src/intl/locales/en/app.json b/client/packages/common/src/intl/locales/en/app.json
index 0410d4f2f..991aa1285 100644
--- a/client/packages/common/src/intl/locales/en/app.json
+++ b/client/packages/common/src/intl/locales/en/app.json
@@ -45,9 +45,7 @@
   "docs": "Docs",
   "equipment": "Equipment",
   "error.sync-api-incompatible": "Sync API version is not compatible",
-  "error.sync-api-incompatible-hint": "The mSupply Central Server needs to be upgraded to a newer version before you can connect - please contact support@msupply.foundation",
-  "error.sync-v6-api-incompatible": "Sync V6 API version is not compatible",
-  "error.sync-v6-api-incompatible-hint": "The Open mSupply Central Server needs to be upgraded to a newer version before you can connect - please contact support@msupply.foundation",
+  "error.sync-api-incompatible-hint": "The mSupply Central Server needs to be upgraded to a newer version before you can connect - please contact support@msupply.org.nz",
   "error.authentication-error": "The server has returned an error",
   "error.connection-error": "Unable to connect to server",
   "error.connection-error-hint": "Check your network connection",
@@ -73,8 +71,6 @@
   "error.unknown-sync-error": "Unknown sync error",
   "error.v6-server-not-configured": "V6 central server not configured",
   "error.v6-server-not-configured-hint": "Check the central server URL",
-  "facilities": "Facilities",
-  "immunisations": "Immunizations",
   "heading.password": "Password",
   "heading.server-error": "Server Error",
   "heading.username": "Username",
@@ -89,6 +85,7 @@
   "internal-order": "Internal Orders",
   "inventory": "Inventory",
   "items": "Items",
+  "label.central": "Central",
   "label.central-server": "Central server",
   "label.site": "Site:",
   "loading": "Loading…",
@@ -96,8 +93,6 @@
   "login.body": "Whether you run a pharmaceutical distribution warehouse, or are a manufacturer needing dozens of connected users, or a small dispensary, mSupply is a valuable partner.",
   "login.heading": "Simple.\nPowerful.\nPharmaceutical\nManagement.",
   "login.store-changed": "Welcome to the {{store}} store",
-  "manage": "Manage",
-  "settings": "Settings",
   "settings.label-printing": "Label Printing",
   "settings.printer-address": "IP address",
   "settings.printer-label-height": "Label height",
@@ -106,7 +101,6 @@
   "settings.scanner-type": "Scanner Type",
   "logout": "Logout",
   "master-lists": "Master Lists",
-  "indicators-demographics": "Demographics",
   "messages": "Messages",
   "messages.change-server": "Change server",
   "messages.connected-to-printer": "Connected successfully to printer!",
diff --git a/client/packages/common/src/intl/locales/en/catalogue.json b/client/packages/common/src/intl/locales/en/catalogue.json
index 0148db439..7a3a2ffbb 100644
--- a/client/packages/common/src/intl/locales/en/catalogue.json
+++ b/client/packages/common/src/intl/locales/en/catalogue.json
@@ -20,7 +20,6 @@
   "label.create-pack-variant": "Create Pack Variant",
   "label.ddd": "Defined Daily Dose",
   "label.doses": "Doses",
-  "label.target-demographic": "Target Demographic",
   "label.edit-pack-variant": "Edit Pack Variant",
   "label.general": "General",
   "label.is-vaccine": "Vaccine",
@@ -30,7 +29,6 @@
   "label.model": "Model",
   "label.months": "Months",
   "label.name": "Name",
-  "label.percentage": "Percentage",
   "label.new-pack-variant": "New Pack Variant",
   "label.outer-pack-size": "Outer pack size",
   "label.pack-variants": "Pack Variants",
diff --git a/client/packages/common/src/intl/locales/en/coldchain.json b/client/packages/common/src/intl/locales/en/coldchain.json
index d8fbd3e57..12b1eb7d5 100644
--- a/client/packages/common/src/intl/locales/en/coldchain.json
+++ b/client/packages/common/src/intl/locales/en/coldchain.json
@@ -7,10 +7,6 @@
   "button.upload-assets": "Import",
   "button.view-all-breaches": "View all breaches",
   "button.view-details": "View Details",
-  "error.immunisations-not-found": "Immunizations not found",
-  "button.add-new-program": "New Program",
-  "button.add-new-immunisation": "New Immunization",
-  "error.no-immunisation-programs": "No Immunization programs found",
   "error.asset-not-found": "Asset not found",
   "button.create-log-reason": "Create log reason",
   "error.cce-asset-number-already-used": "CCE asset number already in use, please use another number",
@@ -53,7 +49,6 @@
   "heading.import-cold-chain-equipment": "Import assets",
   "heading.unable-to-print": "Unable to print",
   "heading.upload-cce-documents": "Upload CCE documents",
-  "label.create-new-program": "Create new immunization program",
   "label.acknowledged": "Acknowledged",
   "label.asset-notes": "Notes",
   "label.breach-end": "Breach end",
@@ -62,8 +57,7 @@
   "label.breaches": "Breaches",
   "label.catalogue-item": "Catalogue item",
   "label.catalogue-item-code": "Catalogue item code",
-  "label.catalogue-properties": "Catalogue Properties",
-  "label.asset-properties": "Asset Properties",
+  "label.catalogue-properties": "Properties",
   "label.cce": "CCE",
   "label.chart": "Chart",
   "label.cold-consecutive": "Cold Consecutive",
@@ -74,7 +68,6 @@
   "label.current-status": "Current Status",
   "label.documents": "Documents",
   "label.error-message": "Error message",
-  "label.warning-message": "Warning",
   "label.hot-consecutive": "Hot Consecutive",
   "label.hot-cumulative": "Hot Cumulative",
   "label.import": "Import",
@@ -92,7 +85,6 @@
   "label.upload": "Upload",
   "label.upload-files": "Upload files",
   "label.use-catalogue": "Use asset catalogue",
-  "label.needs-replacement": "Needs replacement",
   "messages.acknowledge-breach-helptext": "Enter a comment and click OK to acknowledge the breach.",
   "messages.asset-saved": "Asset saved 🥳",
   "messages.breach-ongoing": "This breach is ongoing and cannot be acknowledged until it has ended.",
@@ -109,8 +101,6 @@
   "messages.error-generic_other": "{{count}} errors",
   "messages.error-no-file-selected": "No file selected",
   "messages.fridge-tag-import-successful": "Success! {{numberOfLogs}} logs and {{numberOfBreaches}} breaches imported.",
-  "messages.upload-error": "Error with uploaded file {{ error }}",
-  "messages.no-data-found": "No data found",
   "messages.import-error": "Some or all assets failed to import. Click export to download a csv file with rows which caused an error. Error free rows will have been imported",
   "messages.import-error-on-upload": "Import error on upload. Please fix errors and re upload",
   "messages.import-generic": "import successful",
@@ -122,7 +112,6 @@
   "messages.new-sensor": "A new sensor has been added as a result of importing these logs. Would you like to assign a location to the new sensor now?",
   "messages.no-documents-uploaded": "No documents have been uploaded",
   "messages.no-status-logs": "No status logs have been created for this asset. Click the 'Update Status' button to create a new status log.",
-  "messages.no-properties": "No properties defined",
   "messages.notification-breach-detected": "Temperature breach detected! {{time}} ago",
   "messages.notification-excursion-detected": "Temperature excursion detected! {{time}} ago",
   "messages.search": "Search",
@@ -132,7 +121,6 @@
   "messages.total-breaches": "Total unacknowledged: {{count}}",
   "messages.total-excursions": "Total excursions: {{count}}",
   "messages.unknown-error": "Unknown error",
-  "messages.catalogue-property": "This property is defined in the catalogue",
   "reason.awaiting-decomissioning": "Awaiting decomissioning",
   "reason.awaiting-decommissioning": "Awaiting decommissioning",
   "reason.awaiting-installation": "Awaiting installation",
@@ -152,7 +140,5 @@
   "status.not-in-use": "Not in use",
   "title.new-sensor": "New sensor added",
   "title.sensor-details": "Sensor Details",
-  "warning.field-not-parsed": "{{field}} not parsed",
-  "messages.import-warning-on-upload": "Warning some values failed to parse. Please fix or these will be ignored on upload",
   "tooltip.import-fridge-tag": "Import Berlinger Fridge-tag and Q-tag log files. A sensor will be created, if necessary, for each log file imported."
-}
+}
\ No newline at end of file
diff --git a/client/packages/common/src/intl/locales/en/common.json b/client/packages/common/src/intl/locales/en/common.json
index b47031fc8..dafa0c430 100644
--- a/client/packages/common/src/intl/locales/en/common.json
+++ b/client/packages/common/src/intl/locales/en/common.json
@@ -9,8 +9,6 @@
   "auth.permission-denied": "Permission denied",
   "breadcrumb.item": "#{{id}}",
   "button.add-item": "Add Item",
-  "button.add-new-indicator": "Add New Indicator",
-  "button.edit": "Edit",
   "button.allocate": "Allocate",
   "button.browse-files": "Browse files",
   "button.back": "Back",
@@ -26,7 +24,6 @@
   "button.initialise": "Initialise",
   "button.import": "Import",
   "button.language": "Language",
-  "label.general-population": "General Population",
   "button.more": "More",
   "button.new-inbound-shipment": "New Inbound Shipment",
   "button.new-outbound-shipment": "New Outbound Shipment",
@@ -146,11 +143,11 @@
   "heading.user-sync": "User Synchronisation Status",
   "info.server-restarting": "Server restarting...",
   "label.abbreviation": "Abbreviation",
-  "label.programs-immunisations": "Immunisations",
   "label.actions": "Actions",
   "label.add-another": "Add another",
   "label.additional-info": "Additional Info",
   "label.address": "Address",
+  "label.adjust": "Adjust",
   "label.age": "Age",
   "label.allocated": "Allocated",
   "label.already-issued": "Issued",
@@ -160,7 +157,6 @@
   "label.catalogue-item-code": "Catalogue item code",
   "label.asset-notes": "Notes",
   "label.error-message": "Error message",
-  "label.warning-message": "Warning",
   "label.app-version": "Version:",
   "label.approval-comment": "Approval Comment",
   "label.approved-packs": "Approved packs",
@@ -267,8 +263,6 @@
   "label.in-packs-of": "in packs of",
   "label.in-store": "In Store (packs)",
   "label.installation-date": "Installation date",
-  "label.warranty-start-date": "Warranty start",
-  "label.warranty-end-date": "Warranty end",
   "label.invoice-number": "Number",
   "label.issue": "Issue",
   "label.item_few": "Items",
@@ -325,8 +319,6 @@
   "label.patient": "Patient",
   "label.patient-id": "Patient ID",
   "label.patient-nuic": "NUIC",
-  "label.percentage": "Percentage",
-  "label.population": "Population",
   "label.period": "Period",
   "label.phone": "Phone",
   "label.picked": "Picked",
@@ -344,7 +336,7 @@
   "label.remove": "Remove",
   "label.remove-all-filters": "Remove all filters",
   "label.repack": "Repack",
-  "label.replacement-date": "Replacement due",
+  "label.replacement-date": "Replacement date",
   "label.requested-number-packs": "Requested number of packs (approx)",
   "label.requested-packs": "Requested packs",
   "label.requested-quantity": "Requested",
@@ -418,14 +410,14 @@
   "link.copy-to-clipboard": "Copy to Clipboard",
   "log.changed-from": "From",
   "log.changed-to": "to",
-  "log.invoice-created": "Created",
-  "log.invoice-deleted": "Deleted",
-  "log.invoice-number-allocated": "Number allocated",
-  "log.invoice-status-allocated": "Status changed to Allocated",
-  "log.invoice-status-delivered": "Status changed to Delivered",
-  "log.invoice-status-picked": "Status changed to Picked",
-  "log.invoice-status-shipped": "Status changed to Shipped",
-  "log.invoice-status-verified": "Status changed to Verified",
+  "log.invoice-created": "Shipment created",
+  "log.invoice-deleted": "Shipment deleted",
+  "log.invoice-number-allocated": "Shipment number allocated",
+  "log.invoice-status-allocated": "Shipment allocated",
+  "log.invoice-status-delivered": "Shipment delivered",
+  "log.invoice-status-picked": "Shipment picked",
+  "log.invoice-status-shipped": "Shipment shipped",
+  "log.invoice-status-verified": "Shipment verified",
   "log.prescription-created": "Prescription created",
   "log.prescription-deleted": "Prescription deleted",
   "log.prescription-status-picked": "Prescription picked",
@@ -487,7 +479,6 @@
   "messages.no-data-available": "No data available",
   "messages.no-lines": "Cannot change the status because there are no lines",
   "messages.no-log-entries": "No log entries available",
-  "messages.no-properties": "No properties defined",
   "messages.no-scanners-found": "No scanners found",
   "messages.not-applicable": "N/A",
   "messages.not-initialised": "[ Not configured ]",
@@ -528,7 +519,6 @@
   "sync-status.push": "Push",
   "sync-status.push-v6": "Push V6",
   "table.show-columns": "Show / hide columns",
-  "table.select-unselect-all-columns": "Select / unselect all columns",
   "title.confirm-delete-encounter": "Delete encounter",
   "warning.caps-lock": "Warning: Caps lock is on",
   "error.record-already-exists": "A record with this id already exists",
diff --git a/client/packages/common/src/intl/locales/en/inventory.json b/client/packages/common/src/intl/locales/en/inventory.json
index 898968d3e..d553cfd49 100644
--- a/client/packages/common/src/intl/locales/en/inventory.json
+++ b/client/packages/common/src/intl/locales/en/inventory.json
@@ -3,7 +3,6 @@
   "button.new-stock": "New Stock",
   "button.reduce-lines-to-zero": "Reduce lines to 0",
   "button.repack": "Repack",
-  "button.adjust": "Adjust",
   "error.cant-save": "There was a problem saving.",
   "error.no-locations": "There are no Locations to display.",
   "error.no-stock": "There is no stock to display.",
@@ -116,6 +115,5 @@
   "stocktake.comment-location-template": "Created using items in location '{{location}}'",
   "stocktake-comment-items-have-stock-template": "Created using items that have stock",
   "title.stock-line-details": "Stock Line Details",
-  "title.adjustment-details": "Adjustment Details",
   "title.repack-details": "Repack Details"
 }
diff --git a/client/packages/common/src/intl/locales/en/manage.json b/client/packages/common/src/intl/locales/en/manage.json
deleted file mode 100644
index 383fad4f3..000000000
--- a/client/packages/common/src/intl/locales/en/manage.json
+++ /dev/null
@@ -1,3 +0,0 @@
-{
-  "placeholder.enter-facility-code-or-name": "Enter facility code or name"
-}
diff --git a/client/packages/common/src/intl/locales/es/app.json b/client/packages/common/src/intl/locales/es/app.json
index 342c43154..2ebb5f001 100644
--- a/client/packages/common/src/intl/locales/es/app.json
+++ b/client/packages/common/src/intl/locales/es/app.json
@@ -52,7 +52,7 @@
   "cmdk.goto-suppliers": "Ir a: Proveedores",
   "discovery.sub-heading": "¡Para abrir mSupply!",
   "error.connection-error": "No se puede conectar al servidor",
-  "error.integration-timeout-reached": "El servidor central tardó demasiado en integrar los registros enviados. Por favor, inténtalo de nuevo más tarde.",
+  "error.integration-timeout-reached": "El servidor central tardó demasiado en integrar los registros enviados. Por favor, inténtalo de nuevo más tarde",
   "error.invalid-url": "url Invalida",
   "error.login": "Nombre de usuario o contraseña no válidos",
   "error.account-blocked": "Cuenta está bloqueada hasta el bloqueo el periodo ha expirado",
@@ -102,24 +102,5 @@
   "dispensary": "Farmacia",
   "programs": "Programas",
   "heading.server-error": "Error de servidor",
-  "error.internal-error": "El servidor experimentó un problema.",
-  "assets": "Activos",
-  "log-reasons": "Resgistrar razones",
-  "easter-egg": "Huevo de pascua",
-  "cmdk.goto-cold-chain-equipment": "Ve a: Equipamiento de cadena de frío",
-  "cmdk.goto-cold-chain-monitoring": "Ve a: Monitoreo de la cadena de frío",
-  "equipment": "Equipo",
-  "error.unable-to-connect-to-printer": "No se puede conectar a la impresora.",
-  "error.v6-server-not-configured": "Servidor central V6 no configurado",
-  "inbound-return": "Devoluciones e clientes",
-  "label.central-server": "Servidor central",
-  "settings.label-printing": "Impresión de etiquetas",
-  "settings.printer-address": "Dirección IP",
-  "settings.printer-label-height": "Altura de etiqueta",
-  "settings.printer-label-width": "Ancho de etiqueta",
-  "settings.printer-port": "Número de puerto",
-  "settings.scanner-type": "Tipo de escáner",
-  "messages.connected-to-printer": "¡Conexión exitosa a la impresora!",
-  "outbound-return": "Devoluciones salientes",
-  "returns": "Devoluciones"
+  "error.internal-error": "El servidor experimentó un problema."
 }
diff --git a/client/packages/common/src/intl/locales/es/catalogue.json b/client/packages/common/src/intl/locales/es/catalogue.json
index c5110bff8..e9b323bfa 100644
--- a/client/packages/common/src/intl/locales/es/catalogue.json
+++ b/client/packages/common/src/intl/locales/es/catalogue.json
@@ -27,42 +27,5 @@
   "label.universal-code": "Código universal",
   "label.volume-per-outer-pack": "Volumen por paquete externo",
   "messages.click-to-return-to-item-list": "No se pudo encontrar un elemento con ese ID. Haz clic en Aceptar para regresar a la lista de artículos.",
-  "title.months-of-stock": "Meses de inventario",
-  "error.cannot-add-with-no-abbreviation-and-name": "No se puede agregar una variante sin abreviatura y nombre",
-  "button.new-catalogue-item": "Nuevo artículo de catálogo",
-  "button.manage-asset-log-reasons": "Administrar las razones de registro de activos",
-  "error.pack-variant-exists": "Ya existe una variante de paquete con el mismo tamaño de paquete para este artículo",
-  "label.create-log-reason": "Crear motivo de registro",
-  "label.category": "Categoría",
-  "label.class": "Clase",
-  "label.status": "Estado",
-  "label.create-pack-variant": "Crear variante de paquete",
-  "label.edit-pack-variant": "Editar variante de empaque",
-  "label.general": "General",
-  "label.manufacturer": "Fabricante",
-  "label.master-lists": "Listas Maestras",
-  "label.model": "Modelo",
-  "label.pack-variants": "Variantes de paquete",
-  "messages.confirm-delete-pack-variants_one": "Esto eliminará permanentemente 1 variante de paquete.",
-  "messages.confirm-delete-pack-variants_other": "Esto eliminará permanentemente {{count}} variantes de paquete.",
-  "messages.deleted-reasons_one": "Se eliminó {{count}} razón",
-  "messages.deleted-pack-variant_one": "Se eliminó {{count}} variante de paquete",
-  "messages.deleted-pack-variant_other": "Se eliminó {{count}} variantes de paquete",
-  "messages.deleted-reasons_few": "Se eliminó {{count}} razones",
-  "messages.deleted-reasons_many": "Se eliminó {{count}} razones",
-  "messages.confirm-delete-reasons_one": "Esto eliminará permanentemente 1 razón",
-  "messages.confirm-delete-reasons_few": "Esto eliminará permanentemente {{count}} razones",
-  "messages.confirm-delete-reasons_many": "Esto eliminará permanentemente {{count}} razones",
-  "messages.confirm-delete-reasons_other": "Esto eliminará permanentemente {{count}} razones",
-  "messages.error-deleting-reasons_one": "No se pudo eliminar {{count}} razón",
-  "messages.error-deleting-reasons_few": "No se pudo eliminar {{count}} razones",
-  "messages.error-deleting-reasons_many": "No se pudo eliminar {{count}} razones",
-  "messages.error-deleting-reasons_other": "No se pudo eliminar {{count}} razones",
-  "error.cannot-add-pack-size-of-zero": "No se puede agregar una variante con un tamaño de paquete de cero",
-  "error.no-pack-variants": "Este artículo no tiene ninguna variante de empaque configurada.",
-  "filename.asset-categories": "Categorías de activos",
-  "label.reason": "Razón",
-  "label.new-pack-variant": "Nueva variante de paquete",
-  "messages.confirm-delete-pack-variant": "Esto eliminará {{packVariantName}} de la lista de variantes de paquete.",
-  "messages.deleted-reasons_other": "Se eliminó {{count}} razones"
+  "title.months-of-stock": "Meses de inventario"
 }
diff --git a/client/packages/common/src/intl/locales/es/distribution.json b/client/packages/common/src/intl/locales/es/distribution.json
index 3c33f4d85..ef03dc4d5 100644
--- a/client/packages/common/src/intl/locales/es/distribution.json
+++ b/client/packages/common/src/intl/locales/es/distribution.json
@@ -122,33 +122,5 @@
   "messages.confirm-delete-shipments_many": "Esto eliminará permanentemente {{count}} envíos",
   "messages.confirm-delete-lines_few": "Esto eliminará permanentemente {{count}} líneas de esta factura",
   "messages.deleted-requisitions_few": "{{count}} requisiciones eliminadas",
-  "messages.deleted-requisitions_many": "{{count}} requisiciones eliminadas",
-  "button.new-return": "Nueva devolución",
-  "button.return-lines": "Procesar la devolución de las líneas seleccionadas",
-  "error.failed-to-create-return": "¡Fallo al crear la devolución!",
-  "error.no-inbound-return-items": "No se han agregado artículos a esta devolución.",
-  "error.no-inbound-returns": "No hay devoluciones de cliente para mostrar.",
-  "error.return-not-found": "Devolución no encontrada",
-  "heading.confirm-finalise": "¿Estás seguro de que deseas finalizar?",
-  "heading.return-items": "Artículos devueltos",
-  "info.automatic-return-no-edit": "No puedes editar los detalles hasta que el estado se confirme como Entregado.",
-  "info.manual-return": "Esta devolución fue creada manualmente. El estado de entrega no se actualizará automáticamente.",
-  "label.outbound-shipment": "Salida",
-  "label.quantity": "Cantidad",
-  "message.placeholder-lines-cannot-be-returned": "No se pueden devolver las líneas de marcador de posición",
-  "messages.deleted-returns_other": "{{count}} Devoluciones eliminadas",
-  "messages.confirm-delete-inbound-return": "Esto eliminará permanentemente la devolución entrante #{{number}}",
-  "messages.confirm-delete-returns_other": "Esto eliminará permanentemente {{count}} devoluciones",
-  "messages.confirm-delete-returns_one": "Esto eliminará permanentemente 1 devolución",
-  "messages.select-rows-to-return": "Selecciona filas para devolverlas",
-  "messages.return-saved": "Devolución guardada 🥳",
-  "messages.confirm-not-fully-supplied_many": "Si finalizas, no podrás suministrar más artículos al cliente desde esta requisición\n\n{{count}} líneas en esta requisición no han sido suministradas completamente al cliente.\n¿Aún deseas continuar?",
-  "info.automatic-return": "Esta devolución fue creada automáticamente como resultado de una devolución saliente en otro almacén.",
-  "messages.cant-return-shipment": "No se puede procesar la devolución de líneas hasta que el estado sea 'Enviado'",
-  "messages.deleted-returns_one": "1 Devolución eliminada",
-  "messages.click-to-return-to-inbound-returns": "No se puede encontrar una devolución con ese ID. Haz clic en OK para volver a la lista de devoluciones de cliente",
-  "messages.error-saving-return": "Error al guardar la devolución 🥺",
-  "messages.confirm-not-fully-supplied_one": "Si finalizas, no podrás suministrar más artículos al cliente desde esta requisición\n\n{{count}} línea en esta requisición no ha sido suministrada completamente al cliente.\n¿Aún deseas continuar?",
-  "messages.confirm-not-fully-supplied_few": "Si finalizas, no podrás suministrar más artículos al cliente desde esta requisición\n\n{{count}} líneas en esta requisición no han sido suministradas completamente al cliente.\n¿Aún deseas continuar?",
-  "messages.confirm-not-fully-supplied_other": "Si finalizas, no podrás suministrar más artículos al cliente desde esta requisición\n\n{{count}} líneas en esta requisición no han sido suministradas completamente al cliente.\n¿Aún deseas continuar?"
+  "messages.deleted-requisitions_many": "{{count}} requisiciones eliminadas"
 }
diff --git a/client/packages/common/src/intl/locales/es/inventory.json b/client/packages/common/src/intl/locales/es/inventory.json
index 0c2e547a8..19eed5b61 100644
--- a/client/packages/common/src/intl/locales/es/inventory.json
+++ b/client/packages/common/src/intl/locales/es/inventory.json
@@ -13,9 +13,9 @@
   "error.not-editable": "Toma de inventario no editable.",
   "label.add-batch": "Agregar lote",
   "error.is-locked": "Toma de inventario bloqueada.",
-  "error.snapshot-total-mismatch": "Error: Una o más líneas tienen una discrepancia entre el nivel de inventario actual y el recuento instantáneo.",
+  "error.snapshot-total-mismatch": "La cantidad prevista no coincide con la cantidad total.",
   "error.provide-valid-reason": "La razón del ajuste no coincide con la dirección del ajuste",
-  "error.reduced-below-zero": "Inventario reservado para nuevas salidas. La cantidad no puede reducirse por debajo de cero.",
+  "error.reduced-below-zero": "La línea de inventario existe en nuevas salidas. La cantidad no se puede reducir por debajo de cero.",
   "label.add-new-line": "Agregar línea nueva",
   "label.cost-price": "Costo",
   "label.sell-price": "Precio",
@@ -42,7 +42,7 @@
   "messages.deleted-locations_other": "Se eliminaron {{count}} ubicaciones",
   "messages.error-deleting-locations_one": "{{count}} ubicación no pudo ser eliminada",
   "messages.error-deleting-locations_other": "{{count}} ubicaciones no pudieron ser eliminadas",
-  "messages.create-stocktake-1": "Puedes crear un inventario basado en los artículos actualmente asignados a una ubicación, los artículos que tienes actualmente en inventario, los artículos asignados a una lista maestra o los artículos que caducan antes de una fecha específica.",
+  "messages.create-stocktake-1": "Puede crear un inventario basado en los artículos actualmente asignados a una ubicación o en los artículos asignados a una lista maestra.",
   "messages.create-stocktake-2": "Para crear un inventario vacío, simplemente haga clic en Aceptar para continuar.",
   "messages.finalised-stock-take": "Este inventario está finalizado y no se puede editar",
   "messages.no-locations": "No hay ubicaciones disponibles",
@@ -95,24 +95,5 @@
   "messages.deleted-locations_many": "{{count}} Ubicaciones eliminadas",
   "messages.deleted-stocktakes_few": "{{count}} Tomas de inventario eliminadas",
   "messages.error-deleting-locations_few": "{{count}} ubicaciones no se pudieron eliminar",
-  "messages.error-deleting-locations_many": "{{count}} ubicaciones no se pudieron eliminar",
-  "button.new-stock": "Nuevo inventario",
-  "button.reduce-lines-to-zero": "Reducir líneas a 0",
-  "label.adjust-by": "por",
-  "label.decrease-qty": "Disminuir cantidad",
-  "label.direction": "Dirección del ajuste",
-  "label.increase-qty": "Aumentar cantidad",
-  "label.items-expiring-before": "Artículos expiran antes de",
-  "label.new-pack-qty": "Nueva cantidad de paquete",
-  "messages.changed-location_one": "Ubicación cambiada para 1 línea",
-  "messages.no-lines-selected": "No se han seleccionado líneas",
-  "messages.confirm-change-location": "Esto cambiará la ubicación de todas las líneas seleccionadas",
-  "messages.inventory-adjustment-saved": "Ajuste de inventario guardado 🥳",
-  "messages.reduced-to-zero_one": "Se redujo la cantidad de 1 línea a 0",
-  "messages.reduced-to-zero_other": "Se redujo la cantidad de {{ count }} líneas a 0",
-  "messages.stock-line-saved": "Línea de inventario guardada 🥳",
-  "button.change-location": "Cambiar la ubicación de las líneas",
-  "label.current-num-of-packs": "Número actual de paquetes",
-  "messages.changed-location_other": "Ubicación cambiada para {{ count }} líneas",
-  "messages.confirm-reduce-lines-to-zero": "Esto reducirá la cantidad de todas las líneas seleccionadas del inventario a 0"
+  "messages.error-deleting-locations_many": "{{count}} ubicaciones no se pudieron eliminar"
 }
diff --git a/client/packages/common/src/intl/locales/es/replenishment.json b/client/packages/common/src/intl/locales/es/replenishment.json
index f0eb06541..3c670053a 100644
--- a/client/packages/common/src/intl/locales/es/replenishment.json
+++ b/client/packages/common/src/intl/locales/es/replenishment.json
@@ -70,7 +70,7 @@
   "messages.select-rows-to-delete-them": "Selecciona filas para eliminarlas",
   "messages.shipment-saved": "Envío guardado 🥳",
   "error.soh-and-suggested-quantity-are-zero": "No hay valores de inventario a la mano o de cantidad sugerida",
-  "messages.deleted-requisitions_other": "{{count}} Ordenes eliminadas",
+  "messages.deleted-requisitions_other": "{{count}} ordenes eliminadas",
   "info.automatic-shipment": "Este envío fue creado automáticamente como resultado de una salida en otro almacén.",
   "label.suggested-order-quantity": "Cantidad de pedido sugerida",
   "messages.internal-order-created-on": "Orden Interna creada el {{date}}",
@@ -101,7 +101,7 @@
   "messages.changing-max-mos": "Esto cambiará los meses objetivo de stock.",
   "messages.changing-min-mos": "Esto cambiará los meses de stock del punto de reorden.",
   "messages.unassign-min-mos": "Esto eliminará el punto de reorden del stock. El punto de reorden ahora se establecerá por defecto para ser el mismo que los meses objetivo de stock.",
-  "messages.confirm-delete-requisition": "Esto eliminará permanentemente la Orden Interna #{{number}}",
+  "messages.confirm-delete-requisition": "Esto eliminará permanentemente la Orden Interna n.º{{number}}",
   "label.not-set": "No establecido",
   "label.current": "Actual",
   "label.min-months-of-stock": "MOS punto de reorden",
@@ -119,36 +119,6 @@
   "messages.confirm-delete-requisitions_many": "Esto eliminará permanentemente {{count}} ordenes internas",
   "messages.confirm-delete-shipment-lines_few": "Esto eliminará permanentemente {{count}} líneas del envío",
   "messages.confirm-delete-shipment-lines_many": "Esto eliminará permanentemente {{count}} líneas del envío",
-  "messages.deleted-requisitions_few": "{{count}} Ordenes eliminadas",
-  "messages.deleted-requisitions_many": "{{count}} Ordenes eliminadas",
-  "button.new-return": "Nueva devolución",
-  "error.return-not-found": "Devolución no encontrada",
-  "heading.return-items": "Artículos devueltos",
-  "button.return-lines": "Devolver líneas seleccionadas",
-  "label.cant-zero-quantity-disabled": "Las cantidades de las líneas solo pueden establecerse en 0 cuando el estado es Nuevo",
-  "label.inbound-shipment": "Entrada",
-  "label.select-quantity": "Seleccionar cantidad",
-  "messages.deleted-returns_other": "{{count}} Devoluciones eliminadas",
-  "messages.deleted-returns_one": "1 Devolución eliminada",
-  "messages.confirm-delete-returns_other": "Esto eliminará permanentemente {{count}} devoluciones",
-  "messages.confirm-delete-returns_one": "Esto eliminará permanentemente 1 devolución",
-  "messages.cant-return-shipment": "No se pueden devolver líneas hasta que el estado sea 'Entregado'",
-  "messages.click-to-return-to-returns": "No se puede encontrar una devolución con ese ID. Haz clic en OK para volver a la lista de devoluciones",
-  "messages.zero-return-quantity-will-delete-lines": "No se especifican cantidades de devolución. Haz clic en OK de nuevo para confirmar y eliminar estas líneas de la devolución.",
-  "messages.zero-line-quantities_one": "La cantidad de 1 línea ha sido establecida en 0",
-  "messages.zero-line-quantities_few": "La cantidad de {{count}} líneas se ha establecido en 0",
-  "messages.zero-line-quantities_other": "La cantidad de {{count}} líneas se ha establecido en 0",
-  "messages.confirm-zero-shipment-lines_one": "Esto establecerá la cantidad de 1 línea en 0",
-  "messages.confirm-zero-shipment-lines_few": "Esto establecerá la cantidad de {{count}} línea en 0",
-  "messages.error-saving-return": "Error al guardar la devolución 🥺",
-  "messages.select-rows-to-return": "Selecciona filas para devolverlas",
-  "messages.return-saved": "Devolución guardada 🥳",
-  "messages.confirm-zero-shipment-lines_many": "Esto establecerá la cantidad de {{count}} línea en 0",
-  "label.location": "Ubicación",
-  "error.failed-to-create-return": "¡Fallo al crear la devolución!",
-  "error.no-outbound-returns": "No hay Devoluciones de Salidas para mostrar.",
-  "messages.confirm-delete-return": "Esto eliminará permanentemente la Devolución #{{number}}",
-  "messages.alert-zero-return-quantity": "Por favor agregue cantidades a la devolución antes de proceder con el siguiente paso",
-  "messages.zero-line-quantities_many": "La cantidad de {{count}} líneas se ha establecido en 0",
-  "messages.confirm-zero-shipment-lines_other": "Esto establecerá la cantidad de {{count}} línea en 0"
+  "messages.deleted-requisitions_few": "{{count}} ordenes eliminadas",
+  "messages.deleted-requisitions_many": "{{count}} ordenes eliminadas"
 }
diff --git a/client/packages/common/src/intl/locales/fr-DJ/app.json b/client/packages/common/src/intl/locales/fr-DJ/app.json
index 13b7e62ec..48abfa394 100644
--- a/client/packages/common/src/intl/locales/fr-DJ/app.json
+++ b/client/packages/common/src/intl/locales/fr-DJ/app.json
@@ -16,8 +16,5 @@
   "dashboard": "Tableau de bord",
   "customer-requisition": "Commandes Client",
   "catalogue": "Articles",
-  "outbound-shipments": "Sorties de stock",
-  "assets": "Équipements",
-  "log-reasons": "Raisons",
-  "auth.no-store-assigned": "Votre utilisateur n'est assigné à aucun dépôt. Veuillez vous connecter avec un autre compte utilisateur ou contacter votre administrateur."
-}
+  "outbound-shipments": "Sorties de stock"
+}
\ No newline at end of file
diff --git a/client/packages/common/src/intl/locales/fr/app.json b/client/packages/common/src/intl/locales/fr/app.json
index 02de07ad4..e998353a5 100644
--- a/client/packages/common/src/intl/locales/fr/app.json
+++ b/client/packages/common/src/intl/locales/fr/app.json
@@ -10,11 +10,11 @@
   "reports": "Rapports",
   "suppliers": "Fournisseurs",
   "tools": "Outils",
-  "admin": "Administrateur",
+  "admin": "Admin",
   "catalogue": "Catalogue",
   "distribution": "Distribution",
   "docs": "Docs",
-  "loading": "Chargement…",
+  "loading": "Chargement...",
   "messages": "Messages",
   "stock": "Afficher le stock",
   "sync": "Synchronisation",
@@ -29,7 +29,7 @@
   "cmdk.goto-outbound": "Aller à : Livraisons Sortantes",
   "cmdk.goto-items": "Aller à : Articles",
   "login.heading": "Simple. \nEfficace. \nGestion \nPharmaceutique.",
-  "saving": "Sauvegarde en cours…",
+  "saving": "Sauvegarde en cours...",
   "internal-order": "Bons de commande",
   "stocktakes": "Inventaires",
   "master-lists": "Listes Maîtresses",
@@ -60,9 +60,9 @@
   "cmdk.placeholder": "Saisir une commande ou rechercher",
   "login.body": "Que vous dirigiez un entrepôt de distribution pharmaceutique, ou que vous soyez un fabricant ayant besoin de dizaines d'utilisateurs connectés, ou un petit dispensaire, mSupply est un partenaire précieux.",
   "cmdk.drawer-toggle": "Menu à bascule",
-  "auth.server-error": "Le serveur a renvoyé une erreur lors de la récupération des détails utilisateurs! \nImpossible de continuer, veuillez contacter support@msupply.foundation",
+  "auth.server-error": "Le serveur a renvoyé une erreur lors de la récupération des détails utilisateurs ! \nImpossible de continuer, veuillez contacter notre équipe support (support@msupply.foundation)",
   "auth.timeout-message": "Vous avez été déconnecté(e) de votre session pour cause d'inactivité. Cliquez sur OK pour revenir à la page d'accueil.",
-  "searching": "Recherche en cours…",
+  "searching": "Recherche en cours...",
   "initialise.body": "Pour commender, nous allons configurer les paramètres pour synchroniser avec mSupply. Veuillez remplir les champs et cliquer sur Sauvegarder. \n\nSi vous ne savez pas quoi saisir, veuillez contacter support@msupply.foundation.",
   "discovery.heading": "Bienvenue",
   "discovery.body": "Pour commencer, merci de bien vouloir choisir le serveur auquel vous souhaitez vous connecter. \nUne fois sélectionné, nous vous reconnecterons automatiquement à ce serveur s'il est disponible (comme ça vous n'avez pas à le refaire à chaque fois.\nL'icône 🏠 à côté d'un serveur vous montre qu'il s'agit de votre ordinateur local.",
@@ -73,7 +73,7 @@
   "error.site-name-not-found": "Le nom du site est introuvable",
   "discovery.sub-heading": "sur Open mSupply !",
   "error.site-auth-timeout": "L'authentification du site a expiré, veuillez réessayer plus tard",
-  "error.integration-timeout-reached": "Le délai d'intégration du serveur central est atteint. Merci d'essayer de nouveau ultérieurement.",
+  "error.integration-timeout-reached": "Le délai d'intégration du serveur central est atteint",
   "error.invalid-url": "url non valide",
   "error.unable-to-save-settings": "Impossible d'enregistrer les paramètres",
   "error.unable-to-initialise": "Impossible d'initialiser",
@@ -90,48 +90,5 @@
   "error.unable-to-connect": "Impossible de se connecter au serveur {{server}}",
   "label.site": "Site :",
   "messages.change-server": "Changer de serveur",
-  "error.sync-api-incompatible": "La version de l'API Sync n'est pas compatible",
-  "assets": "Équipements",
-  "equipment": "Equipement",
-  "error.unable-to-connect-to-printer": "Impossible de se connecter à l'imprimante.",
-  "error.v6-server-not-configured": "Serveur central V6 non configuré",
-  "inbound-return": "Retour client",
-  "label.central-server": "Serveur central",
-  "settings.label-printing": "Impression d'étiquette",
-  "settings.printer-address": "Adresse IP",
-  "settings.printer-label-height": "Hauteur de l'étiquette",
-  "settings.printer-label-width": "Largeur d'étiquette",
-  "settings.printer-port": "Numéro de port",
-  "settings.scanner-type": "Type de scanner",
-  "messages.connected-to-printer": "Connection avec succès à l'imprimante!",
-  "returns": "Retours",
-  "outbound-return": "Retour fournisseur",
-  "cold-chain": "Chaîne du froid",
-  "sensors": "Capteurs",
-  "discovery.use-server-mode": "Note: Vous êtes actuellement en mode client. Pour passer en mode serveur local, presser le bouton ci-dessous.",
-  "patients": "Patients",
-  "dispensary": "Dispensaire",
-  "programs": "Programmes",
-  "prescription": "Prescriptions",
-  "error.internal-error": "Le serveur a rencontré un problème.",
-  "heading.server-error": "Erreur serveur",
-  "log-reasons": "Raisons",
-  "easter-egg": "Œuf de Pâques",
-  "cmdk.goto-cold-chain-equipment": "Aller à : Equipement de la chaine du froid",
-  "cmdk.goto-cold-chain-monitoring": "Aller à : Contrôle chaine du froid",
-  "error.sync-api-incompatible-hint": "Le serveur central mSupply doit être mis à jour vers une version plus récente avant que vous puissiez vous connecter - veuillez contacter support@msupply.foundation",
-  "error.connection-error-hint": "Vérifier votre connection internet",
-  "cmdk.goto-prescriptions": "Aller à : Ordonnances",
-  "cmdk.goto-patients": "Aller à : Patients",
-  "error.no-site-access": "Votre compte n'a accès à aucun dépôt sur ce site",
-  "error.unable-to-login": "Impossible de se connecter",
-  "error.v6-server-not-configured-hint": "Vérifier l'URL du serveur central",
-  "inbound-returns": "Retours client",
-  "inventory-addition": "Ajout de stock",
-  "inventory-reduction": "Réduction de stock",
-  "outbound-returns": "Retours fournisseur",
-  "contact-trace": "Recherche des contacts",
-  "prescriptions": "Ordonnances",
-  "monitoring": "Contrôle",
-  "encounter": "Visites"
+  "error.sync-api-incompatible": "La version de l'API Sync n'est pas compatible"
 }
diff --git a/client/packages/common/src/intl/locales/fr/catalogue.json b/client/packages/common/src/intl/locales/fr/catalogue.json
index f77b85007..0313e77cc 100644
--- a/client/packages/common/src/intl/locales/fr/catalogue.json
+++ b/client/packages/common/src/intl/locales/fr/catalogue.json
@@ -27,42 +27,5 @@
   "title.pricing": "Tarification",
   "title.stock-on-hand": "Stock disponible",
   "error.no-items": "Aucun article à afficher.",
-  "error.no-master-lists": "Aucune liste maîtresse à afficher.",
-  "error.cannot-add-with-no-abbreviation-and-name": "Impossible d'ajouter une variante sans abréviation ni nom",
-  "button.new-catalogue-item": "Nouvel article catalogue",
-  "error.pack-variant-exists": "Une variante de conditionnement avec la même taille de conditionnement existe déjà pour l'article",
-  "filename.asset-categories": "Catégories d'équipement",
-  "label.class": "Classe",
-  "label.status": "Statut",
-  "label.create-pack-variant": "Créer une variante de conditionnement",
-  "label.general": "Général",
-  "label.manufacturer": "Fabricant",
-  "label.master-lists": "Listes maîtresses",
-  "label.model": "Modèle",
-  "label.pack-variants": "Variantes de conditionnement",
-  "error.cannot-add-pack-size-of-zero": "Impossible d'ajouter une variante avec un conditionnement égal à zéro",
-  "error.no-pack-variants": "Cet article n'a aucun conditionnement configuré.",
-  "label.category": "Catégorie",
-  "label.reason": "Motif",
-  "button.manage-asset-log-reasons": "Gérer les raisons du statut des équipements",
-  "label.create-log-reason": "Créer une raison",
-  "label.edit-pack-variant": "Editer la variante de conditionnement",
-  "label.new-pack-variant": "Nouvelle variante de conditionnement",
-  "messages.confirm-delete-pack-variants_one": "Cela supprimera définitivement une variante de conditionnement.",
-  "messages.confirm-delete-pack-variant": "Cela supprimera {{packVariantName}} de la liste des variantes de conditionnement.",
-  "messages.confirm-delete-pack-variants_other": "Cela supprimera définitivement {{count}} variantes de conditionnement.",
-  "messages.deleted-pack-variant_one": "{{count}} variantes supprimées",
-  "messages.deleted-pack-variant_other": "{{count}} variantes supprimées",
-  "messages.deleted-reasons_one": "{{count}} raison supprimée",
-  "messages.deleted-reasons_few": "{{count}} raisons supprimées",
-  "messages.deleted-reasons_many": "{{count}} raisons supprimées",
-  "messages.deleted-reasons_other": "{{count}} raisons supprimées",
-  "messages.confirm-delete-reasons_one": "Cela supprimera définitivement 1 raison",
-  "messages.confirm-delete-reasons_few": "Cela supprimera définitivement {{count}} raisons",
-  "messages.confirm-delete-reasons_other": "Cela supprimera définitivement {{count}} raisons",
-  "messages.error-deleting-reasons_one": "{{count}} raisons n'ont pas pu être supprimées",
-  "messages.error-deleting-reasons_few": "{{count}} raisons n'ont pas pu être supprimées",
-  "messages.error-deleting-reasons_many": "{{count}} raisons n'ont pas pu être supprimées",
-  "messages.error-deleting-reasons_other": "{{count}} raisons n'ont pas pu être supprimées",
-  "messages.confirm-delete-reasons_many": "Cela supprimera définitivement {{count}} raisons"
+  "error.no-master-lists": "Aucune liste maîtresse à afficher."
 }
diff --git a/client/packages/common/src/intl/locales/fr/coldchain.json b/client/packages/common/src/intl/locales/fr/coldchain.json
deleted file mode 100644
index 0967ef424..000000000
--- a/client/packages/common/src/intl/locales/fr/coldchain.json
+++ /dev/null
@@ -1 +0,0 @@
-{}
diff --git a/client/packages/common/src/intl/locales/fr/common.json b/client/packages/common/src/intl/locales/fr/common.json
index 0c7931235..0012beff5 100644
--- a/client/packages/common/src/intl/locales/fr/common.json
+++ b/client/packages/common/src/intl/locales/fr/common.json
@@ -108,7 +108,7 @@
   "label.cant-delete-disabled-requisition": "On peut uniquement supprimer les lignes des commandes avec le statut \"Brouillon\"",
   "label.chargeCode": "Code facturation",
   "label.clear-filter": "Effacer le filtre",
-  "label.click-to-sort": "Cliquez pour trier par ",
+  "label.click-to-sort": "Cliquez pour trier par colonne",
   "label.client": "Client",
   "label.code": "Code",
   "label.collapse": "Réduire",
@@ -168,7 +168,7 @@
   "label.months_other": "mois",
   "label.my-store": "Mon dépôt",
   "label.name": "Nom",
-  "label.new": "Nouveau",
+  "label.new": "Nouvel(le)",
   "label.new-requisition": "Nouvelle Commande",
   "label.new-stocktake": "Nouvel Inventaire",
   "label.notes": "Notes",
@@ -243,14 +243,14 @@
   "label.verified": "Vérifié(e)",
   "label.website": "Site internet",
   "link.copy-to-clipboard": "Copier vers le Presse-papier",
-  "log.invoice-created": "Créée",
-  "log.invoice-deleted": "Supprimée",
-  "log.invoice-number-allocated": "Numéro alloué",
-  "log.invoice-status-allocated": "Confirmée comme \"allouée\"",
-  "log.invoice-status-delivered": "Confirmée comme \"livrée\"",
-  "log.invoice-status-picked": "Confirmée comme \"prélevée\"",
-  "log.invoice-status-shipped": "Confirmée comme \"expédiée\"",
-  "log.invoice-status-verified": "Confirmée comme \"vérifiée\"",
+  "log.invoice-created": "Livraison créée",
+  "log.invoice-deleted": "Livraison supprimée",
+  "log.invoice-number-allocated": "Numéro de livraison alloué",
+  "log.invoice-status-allocated": "Livraison confirmée comme \"allouée\"",
+  "log.invoice-status-delivered": "Livraison confirmée comme \"livrée\"",
+  "log.invoice-status-picked": "Livraison prélevée",
+  "log.invoice-status-shipped": "Livraison confirmée comme \"expédiée\"",
+  "log.invoice-status-verified": "Livraison confirmée comme \"vérifiée\"",
   "log.requisition-created": "Réquisition créée",
   "log.requisition-deleted": "Réquisition supprimée",
   "log.requisition-number-allocated": "Numéro de commande alloué",
@@ -292,7 +292,7 @@
   "placeholder.search-by-name-or-code": "Recherche par nom ou par code",
   "success": "Succès!",
   "success.sync-settings": "Paramètres de synchronisation mis à jour",
-  "sync-info.last-sync": "Dernière tentative de synchronisation",
+  "sync-info.last-sync": "Dernière synchronisation",
   "sync-info.number-to-push": "Enregistrements en attente",
   "sync-status.integrate": "Intégration",
   "sync-status.prepare": "Préparation",
@@ -300,231 +300,5 @@
   "sync-status.pull-remote": "Réception (Remote)",
   "sync-status.push": "Envoi",
   "table.show-columns": "Montrer / cacher les colonnes",
-  "warning.caps-lock": "Avertissement: Verrouillage majuscule activé",
-  "auth.not-a-central-server": "Cette opération n'est permise que sur le serveur central",
-  "error.problem-saving": "Une erreur s'est produite : il y a eu un problème lors de l'enregistrement des données.",
-  "label.warning-message": "Avertissement",
-  "label.breach-type": "Type d'excursion",
-  "label.clear-selection": "Effacer la sélection",
-  "label.detect-scanners": "Détecter",
-  "label.duration": "Durée",
-  "label.encounter-status-pending": "En attente",
-  "label.enter-pack-size": "Entrer un conditionnement :",
-  "label.items-selected_many": "{{count}} articles sélectionnés",
-  "label.sub-catalogue": "Sous-catalogue",
-  "label.max-min-temperature": "Max / Min",
-  "label.program-enrolments": "Inscriptions programme",
-  "label.replacement-date": "Date de remplacement",
-  "label.save-log": "Sauvegarder le journal dans le fichier",
-  "label.start-datetime": "Date/heure de début",
-  "label.to-start-datetime": "jusqu'à la date/heure de début",
-  "log.zero-quantities-for-invoice-created-before-store": "La quantité de toutes les lignes ont été mise à 0",
-  "message.database-not-local": "La base de données est basée sur un serveur et ne peut donc pas être téléchargée ici.",
-  "messages.confirm-delete-shipment": "Cela supprimera définitivement la livraison #{{number}}",
-  "messages.confirm-zero-quantity": "Il n'y aucune quantité allouée pour cet article ! Cliquer sur OK pour confirmer.",
-  "messages.fetching-report-data": "Récupération des données du rapport...",
-  "messages.over-allocated": "En raison des conditionnements disponibles, une quantité totale de {{quantity}} a été allouée au lieu de {{issueQuantity}}",
-  "placeholder.search-by-location-code": "Rechercher par code d'emplacement",
-  "table.select-unselect-all-columns": "Sélectionner / désélectionner toutes les colonnes",
-  "auth.permission-denied": "Permission refusée",
-  "button.browse-files": "Rechercher les fichiers",
-  "button.back": "Précédent",
-  "button.create": "Créer",
-  "button.delete": "Supprimer",
-  "button.delete-lines": "Supprimer les lignes sélectionnées",
-  "button.download": "Télécharger",
-  "button.import-fridge-tag": "Import Fridge-tag",
-  "button.import": "Importer",
-  "button.next-step": "Étape suivante",
-  "button.remove-file": "Supprimer le fichier",
-  "button.save-log": "Enregistrer le journal",
-  "button.test": "Test",
-  "button.dashboard": "Tableau de bord",
-  "button.view": "Afficher",
-  "button.zero-line-quantity": "Mettre les quantités à 0",
-  "description.breach-type": "Type d'excursion en cours",
-  "description.fc-cost-price": "Prix d'achat en devise étrangère par conditionnement",
-  "description.fc-line-total": "Total ligne en devise étrangère",
-  "description.fc-sell-price": "Prix de vente en devise étrangère par conditionnement",
-  "description.last-reading-datetime": "Date et heure du dernier relevé",
-  "description.max-min-temperature": "Relevé de temperature maximum ou minimum",
-  "description.remaining-to-supply": "La quantité restante à livrer, c'est à dire la quantité demandée moins la quantité déjà livrée pour cet article sur les livraisons sortantes associées",
-  "error.date_disableFuture": "La date ne doit pas être dans le futur",
-  "error.date_disablePast": "La date ne peut pas être dans le passé",
-  "error.date_invalidDate": "La date est invalide",
-  "error.date_maxDate": "La date est trop élevée",
-  "error.invalid-credentials": "Impossible de récupérer les détails de l'utilisateur. Veuillez vous reconnecter pour mettre à jour les détails de l'utilisateur.",
-  "error.json-bad-format-with-examples": "Format incorrect. Utiliser : \"{{examples}}\"",
-  "error.missing-inputs": "{{count}}",
-  "error.no-sensors": "Aucun capteur détecté",
-  "error.no-temperature-breaches": "Aucune excursion de température trouvée",
-  "error.an-error-occurred": "Une erreur s'est produite : {{message}}",
-  "error.scanner-not-connected": "Le lecteur n'est pas connecté. Voir le menu Admin > Appareils pour connecter un lecteur.",
-  "error.unable-to-detect-scanner": "Impossible de détecter un lecteur",
-  "error.date_minDate": "La date est trop basse",
-  "error.unable-to-load-server-log": "Aucun journal de serveur n'a été trouvé. Vérifiez votre configuration pour voir si les journaux du serveur sont activés.",
-  "filename.asset-categories": "Catégories d'équipement",
-  "filename.cold-chain-equipment": "Equipement de la chaine du froid",
-  "filename.inbound-returns": "Retours client",
-  "filename.outbound-returns": "Retours fournisseur",
-  "heading.barcode-scanners": "Lecteurs de codes-barres",
-  "heading.custom-logo-info": "Remplace le logo par défaut (\"le bonhomme mSupply\"). Le logo doit petre dans le format svg. Exemple: <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>...<svg...>",
-  "heading.devices": "Appareils",
-  "heading.details": "Détails",
-  "heading.foreign-currency": "Devise étrangère",
-  "heading.history": "Historique",
-  "heading.logout-confirm": "Êtes vous sûr(e) ?",
-  "heading.rate": "Taux",
-  "heading.shipments-to-be-picked": "Livraisons en attente de prélèvement",
-  "heading.support": "Support",
-  "heading.user-sync": "Statut de synchronisation de l'utilisateur",
-  "label.abbreviation": "Abréviation",
-  "label.add-another": "Ajouter un autre",
-  "label.additional-info": "Informations additionnelles",
-  "label.adjust": "Ajuster",
-  "label.age": "Âge",
-  "label.asset-number": "Numéro d'équipement",
-  "label.catalogue-item-code": "Code article catalogue",
-  "label.asset-notes": "Notes",
-  "label.error-message": "Message d'erreur",
-  "label.barcode-scanner-id": "ID du Fournisseur: {{vid}}, ID du Produit: {{pid}}",
-  "label.fc-line-total": "Total ligne en DE",
-  "label.fc-sell-price": "Prix de vente en DE",
-  "label.filters": "Filtres",
-  "label.first-name": "Prénom",
-  "label.from-created-datetime": "À partir de la date/heure de création",
-  "label.from-datetime": "A partir de la date/heure",
-  "label.from-start-datetime": "À partir de la date/heure de début",
-  "label.last-name": "Nom",
-  "label.statuslogs": "Journal des statuts",
-  "messages.no": "Non",
-  "title.confirm-delete-encounter": "Supprimer la visite",
-  "label.available-quantity-for-return": "Quantité disponible pour le retour",
-  "label.battery-level": "Niveau de batterie",
-  "label.breach": "Excursion",
-  "label.non-catalogue": "Hors catalogue",
-  "label.category": "Catégorie",
-  "label.cce": "ECF",
-  "label.change-currency": "Changer la devise",
-  "label.class": "Classe",
-  "label.contact-patient": "Patient contact",
-  "label.contact-tracing-type": "Type de contact",
-  "label.context": "Contexte",
-  "label.created-datetime": "Date/heure de création",
-  "label.currency": "Devise",
-  "label.current": "Actuel",
-  "label.custom": "Personnalisé :",
-  "label.date-of-birth": "Date de naissance",
-  "label.date-time": "Date heure",
-  "label.deceased": "Décédé(e)",
-  "label.documents": "Documents",
-  "label.download-database": "Télécharger la base de données",
-  "label.encounter": "Visite",
-  "label.encounter-end": "Fin",
-  "label.encounter-id": "Numéro de visite",
-  "label.encounter-start": "Début",
-  "label.encounter-status-cancelled": "Annulée",
-  "label.encounter-status-deleted": "Supprimée",
-  "label.encounter-status-missed": "Manquée",
-  "label.encounter-status-scheduled": "Prévue",
-  "label.encounter-status-visited": "Réalisée",
-  "label.encounter-type": "Type",
-  "label.encounters": "Visites",
-  "label.end-of-supply": "Fin de la prescription",
-  "label.enrolment-datetime": "Date d'enregistrement",
-  "label.enrolment-patient-id": "Numéro d'enregistrement",
-  "label.enrolment-program": "Programme",
-  "label.fc-cost-price": "Prix d'achat en DE",
-  "label.functional-status": "Statut fonctionnel",
-  "label.gender": "Genre",
-  "label.generate": "Générer",
-  "label.installation-date": "Date d'installation",
-  "label.item_few": "Articles",
-  "label.item_many": "Articles",
-  "label.items-selected_few": "{{count}} articles sélectionnés",
-  "label.last-reading": "Dernier relevé",
-  "label.ledger": "Grand livre",
-  "label.model": "Modèle",
-  "label.modified-datetime": "Date/heure de modification",
-  "label.months_few": "mois",
-  "label.months_many": "mois",
-  "label.ok-and-close": "Fermer le journal",
-  "label.packs-of_few": "paquets de",
-  "label.packs-of_many": "paquets de",
-  "label.patient": "Patient",
-  "label.patient-id": "Identifiant du patient",
-  "label.program-status": "Statut programme",
-  "label.programs": "Programmes",
-  "label.quantity": "Quantité",
-  "label.quantity-returned": "Quantité retournée",
-  "label.quantity-to-return": "Quantité à retourner",
-  "label.relationship": "Relation",
-  "label.remove": "Enlever",
-  "label.remove-all-filters": "Enlever les filtres",
-  "label.repack": "Reconditionnement",
-  "label.sensor-name": "Nom du capteur",
-  "label.sensor-type": "Type de capteur",
-  "label.serial": "Numéro de série",
-  "label.store": "Dépôt",
-  "label.summary": "Résumé",
-  "label.temperature": "Température",
-  "label.to-created-datetime": "jusqu'à la date/heure de création",
-  "label.to-datetime": "jusqu'à la date/heure",
-  "label.trace-status-done": "Fait",
-  "label.trace-status-pending": "En attente",
-  "label.type-end": "Fin de l'excursion",
-  "label.type-start": "Début de l'excursion",
-  "label.unit-plural_few": "{{unit}}s",
-  "label.unit-plural_many": "{{unit}}s",
-  "label.unit-variant-and-pack-size": "Variante d'unité / conditionnement",
-  "label.units-plural_few": "unités",
-  "label.units-plural_many": "unités",
-  "log.changed-from": "De",
-  "log.changed-to": "à",
-  "log.prescription-created": "Ordonnance créée",
-  "log.prescription-deleted": "Ordonnance supprimée",
-  "log.prescription-status-picked": "Ordonnance prélevée",
-  "log.prescription-status-verified": "Ordonnance vérifiée",
-  "log.quantity-for-line-has-been-set-to-zero": "La quantité de ce lot a été mise à 0",
-  "message.already-saving": "Sauvegarde déjà en cours...",
-  "message.coming-soon": "Disponible prochainement...",
-  "message.confirm-delete-encounter": "Êtes vous sûr(e) ?",
-  "message.copy-success": "Copié dans le presse-papiers avec succès",
-  "message.database-not-sqlite": "Le téléchargement des bases de données n'est disponible que pour les bases de données SQLite",
-  "message.nothing-to-copy": "Rien à copier",
-  "message.nothing-to-save": "Rien à sauvegarder",
-  "messages.cannot-delete-multiple-lines": "Une ou plusieurs lignes ne peuvent pas être supprimées",
-  "messages.click-to-expand": "Cliquer pour agrandir",
-  "messages.confirm-remove-item": "Êtes vous sûr(e) ?",
-  "messages.confirm-save-generic": "Êtes vous sûr(e) de vouloir sauvegarder les changements ?",
-  "messages.confirm-zero-quantity-status": "Il y a des lignes avec des quantités émises à 0. Si vous continuez, elle seront supprimées. Cliquer sur \"Annuler\" si vous souhaitez les modifier.",
-  "messages.deleted-generic_few": "{{count}} enregistrements supprimés",
-  "messages.deleted-generic_many": "{{count}} enregistrements supprimés",
-  "messages.deleted-lines_few": "{{count}} lignes supprimées",
-  "messages.deleted-lines_many": "{{count}} lignes supprimées",
-  "messages.detect-scanner": "Pour identifier votre lecteur, essayez de scanner le code-barre ci-dessus",
-  "messages.logout-confirm": "Cela vous déconnectera.",
-  "messages.no-lines": "Impossible de changer le statut car il n'y a pas de ligne",
-  "messages.no-scanners-found": "Aucun lecteur trouvé",
-  "messages.placeholder-allocated": "Il n'y a pas assez de stock disponible pour allouer la quantité demandée. Une ligne temporaire a été ajoutée pour {{placeholderQuantity}} unités.",
-  "messages.scanner-connected": "Connecté",
-  "messages.scanner-disconnected": "Non connecté",
-  "messages.scanner-found": "Lecteur détecté ! 🥳",
-  "messages.upload-invite": "Glisser-déplacer pour télécharger",
-  "messages.upload-or": "ou",
-  "messages.yes": "Oui",
-  "multiple": "[multiples]",
-  "placeholder.search-by-location-name": "Rechercher par nom d'emplacement",
-  "placeholder.search-by-notes": "Rechercher dans les notes",
-  "placeholder.search-by": "Rechercher par {{field}}",
-  "success.data-deleted": "Supprimé avec succès",
-  "success.data-saved": "Sauvegardé avec succès",
-  "sync-info.last-successful-sync": "Dernière synchronisation réussie",
-  "sync-info.syncing": "Synchronisation...",
-  "sync-info.updating-user": "Mise à jour de l'utilisateur...",
-  "sync-info.user-last-updated": "Dernière mise à jour de la configuration utilisateur",
-  "sync-status.pull-v6": "Télécharger V6",
-  "sync-status.push-v6": "Envoyer V6",
-  "error.record-already-exists": "Un enregistrement avec cet identifiant existe déjà",
-  "error.unique-value-violation": "Un enregistrement avec ce/cette {{ field }} existe déjà"
+  "warning.caps-lock": "Avertissement: Verrouillage majuscule activé"
 }
diff --git a/client/packages/common/src/intl/locales/fr/dashboard.json b/client/packages/common/src/intl/locales/fr/dashboard.json
index 55109a6dc..4edd3d854 100644
--- a/client/packages/common/src/intl/locales/fr/dashboard.json
+++ b/client/packages/common/src/intl/locales/fr/dashboard.json
@@ -24,16 +24,6 @@
   "label.inbound-not-delivered": "Bon(s) de livraison pas encore livré(s)",
   "label.more-than-six-months-stock-items_one": "Article avec plus de 6 mois de stock",
   "label.more-than-six-months-stock-items_other": "Articles avec plus de 6 mois de stock",
-  "label.new": "Nouveau",
-  "label.not-sent": "pas encore envoyé(s)",
-  "label.expired_few": "Lots expirés",
-  "label.expired_many": "Lots expirés",
-  "label.items-no-stock_few": "Articles sans stock",
-  "label.items-no-stock_many": "Articles sans stock",
-  "label.low-stock-items_few": "Articles avec moins de 3 mois de stock",
-  "label.low-stock-items_many": "Articles avec mois de 3 mois de stock",
-  "label.more-than-six-months-stock-items_few": "Articles avec plus de 6 mois de stock",
-  "label.more-than-six-months-stock-items_many": "Articles avec plus de 6 mois de stock",
-  "label.total-items_few": "Total articles",
-  "label.total-items_many": "Total articles"
+  "label.new": "Nouvel(le)",
+  "label.not-sent": "pas encore envoyé(s)"
 }
diff --git a/client/packages/common/src/intl/locales/fr/dispensary.json b/client/packages/common/src/intl/locales/fr/dispensary.json
deleted file mode 100644
index 0967ef424..000000000
--- a/client/packages/common/src/intl/locales/fr/dispensary.json
+++ /dev/null
@@ -1 +0,0 @@
-{}
diff --git a/client/packages/common/src/intl/locales/fr/distribution.json b/client/packages/common/src/intl/locales/fr/distribution.json
index 5d2de0a1f..e69ce74e1 100644
--- a/client/packages/common/src/intl/locales/fr/distribution.json
+++ b/client/packages/common/src/intl/locales/fr/distribution.json
@@ -106,49 +106,5 @@
   "messages.supply-to-approved": "Etes vous sûr(e) de vouloir définir les quantités à fournir avec les quantités autorisées pour toutes les lignes ?",
   "button.supply-to-approved": "Fournir Qtés Autorisées",
   "messages.could-not-save": "Sauvegarde impossible",
-  "messages.saved": "Sauvegardé",
-  "label.quantity": "Quantité",
-  "button.new-return": "Nouveau retour",
-  "error.failed-to-create-return": "Impossible de créer un retour !",
-  "error.return-not-found": "Retour non trouvé",
-  "error.no-inbound-return-items": "Aucun article n'a été ajouté à ce retour.",
-  "heading.confirm-finalise": "Êtes vous sûr(e) de vouloir finaliser ?",
-  "heading.return-items": "Retourner articles",
-  "info.automatic-return-no-edit": "Vous ne pouvez modifier cette transaction que lorsque le statut est confirmé comme \"Livré(e)\"",
-  "button.return-lines": "Créer un retour pour les lignes sélectionnées",
-  "error.no-inbound-returns": "Il n'y a pas de retours client à afficher.",
-  "info.automatic-return": "Ce retour client a été créé automatiquement, suite à un retour fournisseur créé dans un autre dépôt.",
-  "label.outbound-shipment": "Livraison sortante",
-  "message.placeholder-lines-cannot-be-returned": "Les lignes temporaires ne peuvent pas être retournées",
-  "messages.allocated-lines_few": "{{count}} lignes allouées",
-  "info.manual-return": "Ce retour a été créé manuellement. Le statut de livraison ne se mettra pas à jour automatiquement.",
-  "messages.allocated-lines_many": "{{count}} lignes allouées",
-  "messages.allocated-lines-failed_few": "{{count}} lignes non allouées",
-  "messages.allocated-lines-failed_many": "{{count}} lignes non allouées",
-  "messages.allocated-lines-partial_few": "{{count}} lignes partiellement allouées",
-  "messages.allocated-lines-partial_many": "{{count}} lignes partiellement allouées",
-  "messages.cant-return-shipment": "Impossible de procéder au retour des lignes tant que le statut n'est pas \"Expédié(e)\"",
-  "messages.deleted-returns_one": "1 retour supprimé",
-  "messages.deleted-returns_other": "{{count}} retours supprimés",
-  "messages.deleted-shipments_many": "{{count}} livraisons supprimées",
-  "messages.confirm-delete-returns_one": "Cela supprimera définitivement 1 retour",
-  "messages.confirm-delete-returns_other": "Cela supprimera définitivement {{count}} retours",
-  "messages.confirm-delete-shipments_few": "Cela supprimera définitivement {{count}} transactions",
-  "messages.confirm-delete-shipments_many": "Cela supprimera définitivement {{count}} transactions",
-  "messages.confirm-delete-inbound-return": "Cela supprimera définitivement le retour client #{{number}}",
-  "messages.confirm-delete-lines_few": "Cela supprimera définitivement {{count}} lignes de cette transaction",
-  "messages.confirm-delete-lines_many": "Cela supprimera définitivement {{count}} lignes de cette transaction",
-  "messages.deleted-requisitions_many": "{{count}} commandes client supprimées",
-  "messages.error-saving-return": "Erreur lors de la sauvegarde du retour 🥺",
-  "messages.select-rows-to-return": "Sélectionner les lignes pour les retourner",
-  "messages.return-saved": "Retour sauvegardé 🥳",
-  "messages.confirm-not-fully-supplied_few": "Si vous finalisez, vous ne pourrez plus fournir d'autres articles à ce client depuis cette commande.\n\n{{count}} lignes dans cette commande n'ont pas été totalement fournies.\nSouhaitez vous continuer quand même ?",
-  "messages.confirm-not-fully-supplied_many": "Si vous finalisez, vous ne pourrez plus fournir d'autres articles à ce client depuis cette commande.\n\n{{count}} lignes dans cette commande n'ont pas été totalement fournies.\nSouhaitez vous continuer quand même ?",
-  "messages.stock-on-hold": "Certaines lignes de stock sont bloquées et ne peuvent pas être allouées.",
-  "messages.click-to-return-to-inbound-returns": "Impossible de trouver un retour avec ce numéro. Cliquer sur OK pour retourner à la liste des retours client",
-  "messages.confirm-not-fully-supplied_one": "Si vous finalisez, vous ne pourrez pas fournir d'autres articles à ce client depuis cette commande.\n\n{{count}} lignes dans cette commande n'ont pas été totalement fournies pour le client.\nSouhaitez-vous continuer quand même ?",
-  "messages.confirm-not-fully-supplied_other": "Si vous finalisez, vous ne pourrez plus fournir d'autres articles à ce client depuis cette commande.\n\n{{count}} lignes dans cette commande n'ont pas été totalement fournies.\nSouhaitez vous continuer quand même ?",
-  "messages.deleted-shipments_few": "{{count}} transactions supprimées",
-  "messages.deleted-requisitions_few": "{{count}} Commandes client supprimées",
-  "messages.stock-expired": "Certaines lignes de stock sont expirées et ne pourront pas être allouées automatiquement."
+  "messages.saved": "Sauvegardé"
 }
diff --git a/client/packages/common/src/intl/locales/fr/inventory.json b/client/packages/common/src/intl/locales/fr/inventory.json
index db7e6aa4a..4fd70199e 100644
--- a/client/packages/common/src/intl/locales/fr/inventory.json
+++ b/client/packages/common/src/intl/locales/fr/inventory.json
@@ -66,54 +66,5 @@
   "error.unable-to-scan": "Impossible de lire le code-barre : {{error}}",
   "messages.no-items-with-stock": "Aucun article avec du stock disponible",
   "stocktake-comment-items-have-stock-template": "Créé(e) pour tous les articles en stock",
-  "label.items-with-stock": "Articles avec du stock",
-  "button.change-location": "Changer l'emplacement des lignes",
-  "button.new-stock": "Ajouter du stock",
-  "button.reduce-lines-to-zero": "Réduire les lignes à 0",
-  "label.adjust-by": "par",
-  "label.current-num-of-packs": "Nombre de boites actuel",
-  "label.decrease-qty": "Réduire Quantité",
-  "label.direction": "Direction d'ajustement",
-  "label.increase-qty": "Augmenter quantité",
-  "label.items-expiring-before": "Articles expirant avant",
-  "button.repack": "Reconditionnement",
-  "error.repack-cannot-be-fractional": "Impossible de reconditionner dans un conditionnement fractionnaire",
-  "error.repack-has-stock-reduced-below-zero": "Impossible de reconditionner la ligne de stock. Le nouveau nombre de boîtes dépasse le nombre de boîtes de la ligne de stock.",
-  "label.code-or-name": "Code ou nom",
-  "label.from-expiry": "A partir de la date d'expiration",
-  "label.to-expiry": "Juqu'à la date d'expiration",
-  "label.new": "Nouveau",
-  "messages.confirm-delete-stocktake": "Cela supprimera définitivement l'inventaire #{{number}}",
-  "messages.changed-location_one": "Emplacement modifié pour 1 ligne",
-  "messages.changed-location_other": "Emplacement modifié pour {{ count }} lignes",
-  "messages.no-lines-selected": "Aucune ligne sélectionnée",
-  "messages.confirm-delete-locations_many": "Cela supprimera définitivement {{count}} emplacements",
-  "messages.confirm-delete-stocktake_lines_few": "Cela supprimera définitivement {{count}} lignes d'inventaire",
-  "messages.confirm-reduce-lines-to-zero": "Cela réduira la quantité de toutes les lignes de stock sélectionnées à 0",
-  "messages.deleted-stocktakes_many": "{{count}} inventaires supprimés",
-  "messages.error-deleting-locations_few": "{{count}} emplacements n'ont pas pu être supprimés",
-  "messages.error-deleting-locations_many": "{{count}} emplacements n'ont pas pu être supprimés",
-  "messages.inventory-adjustment-saved": "Ajustement de stock sauvegardé 🥳",
-  "label.new-pack-qty": "Nouvelle quantité de boites",
-  "messages.confirm-change-location": "Cela changement l'emplacement pour toutes les lignes sélectionnées",
-  "messages.confirm-delete-stocktake_lines_many": "Cela supprimera définitivement {{count}} lignes d'inventaire",
-  "messages.no-ledger": "Cette ligne de stock n'a pas de mouvement de stock à afficher",
-  "messages.no-repacks": "Cette ligne de stock n'a pas été reconditionnée. Cliquer sur Nouveau pour créer un nouveau reconditionnement.",
-  "messages.no-repack-detail": "Sélectionner une ligne pour afficher les détails d'un reconditionnement ou cliquer sur nouveau pour créer un nouveau reconditionnement",
-  "messages.all-packs-repacked": "Sauvegardé. La fenêtre précédente a été fermée puisque la ligne de stock a été entièrement reconditionnée.",
-  "messages.repack-log-info": "Reconditionné depuis la ligne de stock",
-  "messages.reduced-to-zero_one": "La quantité de 1 ligne a été réduite à 0",
-  "messages.reduced-to-zero_other": "La quantité de {{ count }} lignes réduite à 0",
-  "messages.stock-line-saved": "Ligne de stock sauvegardée 🥳",
-  "title.repack-details": "Détails du reconditionnement",
-  "messages.confirm-delete-stocktakes_few": "Cela supprimera définitivement {{count}} inventaires",
-  "messages.confirm-delete-stocktakes_many": "Cela supprimera définitivement {{count}} inventaires",
-  "messages.deleted-locations_few": "{{count}} emplacements supprimés",
-  "messages.deleted-locations_many": "{{count}} emplacements supprimés",
-  "messages.confirm-delete-locations_few": "Cela supprimera définitivement {{count}} emplacements",
-  "label.new-pack-size": "Nouveau conditionnement",
-  "label.new-num-packs": "Nouvelle quantité de boites",
-  "label.packs-available": "Boites disponibles",
-  "label.packs-to-repack": "Nombre de boites à reconditionner",
-  "messages.deleted-stocktakes_few": "{{count}} inventaires supprimés"
+  "label.items-with-stock": "Articles avec du stock"
 }
diff --git a/client/packages/common/src/intl/locales/fr/plugin.json b/client/packages/common/src/intl/locales/fr/plugin.json
deleted file mode 100644
index 0967ef424..000000000
--- a/client/packages/common/src/intl/locales/fr/plugin.json
+++ /dev/null
@@ -1 +0,0 @@
-{}
diff --git a/client/packages/common/src/intl/locales/fr/programs.json b/client/packages/common/src/intl/locales/fr/programs.json
deleted file mode 100644
index 0967ef424..000000000
--- a/client/packages/common/src/intl/locales/fr/programs.json
+++ /dev/null
@@ -1 +0,0 @@
-{}
diff --git a/client/packages/common/src/intl/locales/fr/replenishment.json b/client/packages/common/src/intl/locales/fr/replenishment.json
index 6e76aea77..ffc6f6639 100644
--- a/client/packages/common/src/intl/locales/fr/replenishment.json
+++ b/client/packages/common/src/intl/locales/fr/replenishment.json
@@ -39,7 +39,7 @@
   "label.max": "Max",
   "label.min": "Min",
   "label.moving-average": "Moy. Mob. (3mois)",
-  "label.new": "Nouveau",
+  "label.new": "Nouvel(le)",
   "label.number-months_one": "{{count}} mois",
   "label.number-months_other": "{{count}} mois",
   "label.order-quantity": "Qté demandée",
@@ -97,62 +97,5 @@
   "messages.select-rows-to-delete": "Sélectionner des lignes pour les supprimer",
   "messages.select-rows-to-delete-them": "Sélectionner les lignes pour les supprimer",
   "messages.shipment-saved": "Bon de livraison sauvegardé 🥳",
-  "template.requisition-sent": "Autorisé par {{name}}{{job}}. Courriel: {{email}} et Téléphone: {{phone}}.",
-  "label.min-months-of-stock": "Point de commande (MDS)",
-  "info.automatic-shipment-no-edit": "Vous ne pouvez modifier la transaction tant que le statut n'est pas confirmé comme \"Livrée\".",
-  "label.max-months-of-stock": "MDS cible",
-  "button.new-return": "Nouveau retour",
-  "button.return-lines": "Retourner les lignes sélectionnées",
-  "error.failed-to-create-return": "Impossible de créer un retour !",
-  "error.no-outbound-returns": "Il n'y a pas de retours fournisseur à afficher.",
-  "error.return-not-found": "Retour non trouvé",
-  "label.cant-zero-quantity-disabled": "Les quantités des lignes ne peut être mises à 0 que lorsque le statut est \"Nouveau\"",
-  "label.inbound-shipment": "Livraison entrante",
-  "label.location": "Emplacement",
-  "heading.return-items": "Retourner articles",
-  "label.current": "Actuel",
-  "label.number-months_few": "{{count}} mois",
-  "messages.unassign-min-mos": "Cela va enlever le point de commande. Le point de commande sera par défaut le même que le mois de stock cible.",
-  "messages.deleted-shipments_many": "{{count}} livraisons supprimées",
-  "messages.confirm-delete-invoice-lines_few": "Cela supprimera définitivement {{count}} lignes de cette transaction",
-  "messages.deleted-shipments_few": "{{count}} transactions supprimées",
-  "messages.confirm-delete-requisition-lines_many": "Cela supprimera définitivement {{count}} lignes de cette commande",
-  "messages.confirm-delete-shipments_few": "Cela supprimera définitivement {{count}} transactions",
-  "messages.confirm-delete-requisitions_many": "Cela supprimera définitivement {{count}} bon de commande",
-  "label.inbound-shipment-cant-delete-reserved-line": "Le lot {{batch}} (code article {{itemCode}})) est déjà allouée ou distribué",
-  "messages.confirm-delete-shipments_many": "Cela supprimera définitivement {{count}} transactions",
-  "messages.confirm-delete-requisitions_few": "Cela supprimera définitivement {{count}} bons de commande",
-  "messages.cant-send-order": "Impossible d'envoyer le bon de commande parce qu'il n'y a pas de lignes ou parce qu'il n'y a que des lignes temporaires",
-  "messages.deleted-returns_other": "{{count}} retours supprimés",
-  "messages.confirm-delete-returns_one": "Cela supprimera définitivement 1 retour",
-  "messages.zero-return-quantity-will-delete-lines": "Aucune quantité à retourné n'a été spécifiée. Cliquer une nouvelle fois sur OK pour confirmer et supprimer ces lignes du retour.",
-  "label.select-quantity": "Sélectionner quantité",
-  "messages.cant-return-shipment": "Impossible de retourner les lignes tant le statut n'est pas \"Livré(e)\"",
-  "messages.changing-max-mos": "Cela va modifier le mois de stock cible",
-  "messages.changing-min-mos": "Cela va modifier le nombre de mois de stock du point de commande.",
-  "messages.click-to-return-to-returns": "Impossible de trouver un retour avec ce numéro. Cliquer sur OK pour retourner à la liste des retours",
-  "messages.deleted-returns_one": "1 retour supprimé",
-  "messages.confirm-delete-returns_other": "Cela supprimera définitivement {{count}} retours",
-  "messages.confirm-zero-shipment-lines_few": "Cela va mettre la quantité de {{count}} lignes à 0",
-  "label.not-set": "Non défini",
-  "messages.confirm-delete-requisition": "Cela supprimera définitivement le bon de commande #{{number}}",
-  "label.number-months_many": "{{count}} mois",
-  "messages.confirm-delete-invoice-lines_many": "Cela supprimera définitivement {{count}} lignes de cette transaction",
-  "messages.confirm-delete-requisition-lines_few": "Cela supprimera définitivement {{count}} lignes de cette commande",
-  "messages.confirm-delete-shipment-lines_few": "Cela supprimera définitivement {{count}} lignes de la transaction",
-  "messages.confirm-delete-shipment-lines_many": "Cela supprimera définitivement {{count}} lignes de la transaction",
-  "messages.confirm-delete-return": "Cela supprimera définitivement le retour #{{number}}",
-  "messages.alert-zero-return-quantity": "Veuillez ajouter des quantités à retourner avant de procéder à l'étape suivante",
-  "messages.zero-line-quantities_one": "La quantité de 1 ligne a été mise à 0",
-  "messages.zero-line-quantities_few": "La quantité de {{count}} lignes ont été mises à 0",
-  "messages.zero-line-quantities_many": "La quantité de {{count}} lignes a été mise à 0",
-  "messages.zero-line-quantities_other": "La quantité de {{count}} lignes a été mise à 0",
-  "messages.error-saving-return": "Erreur lors de la sauvegarde du retour 🥺",
-  "messages.confirm-zero-shipment-lines_one": "Cela va mettre la quantité de 1 ligne à 0",
-  "messages.confirm-zero-shipment-lines_many": "Cela va mettre la quantité de {{count}} lignes à 0",
-  "messages.confirm-zero-shipment-lines_other": "Cela va mettre la quantité de {{count}} lignes à 0",
-  "messages.select-rows-to-return": "Sélectionner les lignes pour les retourner",
-  "messages.deleted-requisitions_few": "{{count}} commandes supprimées",
-  "messages.deleted-requisitions_many": "{{count}} commandes supprimées",
-  "messages.return-saved": "Retour sauvegardé 🥳"
+  "template.requisition-sent": "Autorisé par {{name}}{{job}}. Courriel: {{email}} et Téléphone: {{phone}}."
 }
diff --git a/client/packages/common/src/intl/locales/index.ts b/client/packages/common/src/intl/locales/index.ts
index d44580d9b..861f9e6d2 100644
--- a/client/packages/common/src/intl/locales/index.ts
+++ b/client/packages/common/src/intl/locales/index.ts
@@ -11,7 +11,6 @@ import * as dispensary from './en/dispensary.json';
 import * as programs from './en/programs.json';
 import * as coldchain from './en/coldchain.json';
 import * as plugin from './en/plugin.json';
-import * as manage from './en/manage.json';
 
 // Normalize single namespace
 type WithOrWithoutPlural<K> = TypeOptions['jsonFormat'] extends 'v4'
@@ -39,5 +38,4 @@ export type LocaleKey =
   | WithOrWithoutPlural<keyof typeof dispensary>
   | WithOrWithoutPlural<keyof typeof programs>
   | WithOrWithoutPlural<keyof typeof coldchain>
-  | WithOrWithoutPlural<keyof typeof plugin>
-  | WithOrWithoutPlural<keyof typeof manage>;
+  | WithOrWithoutPlural<keyof typeof plugin>;
diff --git a/client/packages/common/src/intl/locales/pt/common.json b/client/packages/common/src/intl/locales/pt/common.json
index 956487c24..3f91ce43f 100644
--- a/client/packages/common/src/intl/locales/pt/common.json
+++ b/client/packages/common/src/intl/locales/pt/common.json
@@ -221,7 +221,6 @@
   "label.snapshot-num-of-packs": "Pacotes Salvos",
   "label.soh": "Estoque Disponível (ED)",
   "label.status": "Status",
-  "label.percentage": "percentage",
   "label.stock-on-hand": "Estoque Disponível (Restante estimado)",
   "label.stocktake-comment": "Comentário",
   "label.suggested": "Sugerido",
diff --git a/client/packages/common/src/intl/locales/ru/app.json b/client/packages/common/src/intl/locales/ru/app.json
index 07981034a..eb897f45e 100644
--- a/client/packages/common/src/intl/locales/ru/app.json
+++ b/client/packages/common/src/intl/locales/ru/app.json
@@ -41,7 +41,7 @@
   "messages.change-server": "Сменить сервер",
   "outbound-shipments": "Исходящие Поставки",
   "cmdk.goto-dashboard": "Перейти к: Приборная Панель",
-  "prescription": "Рецепт",
+  "prescription": "Рецепты",
   "select-language": "Выбрать язык",
   "cmdk.goto-customer-requisition": "Перейти к: Заявки на Закупку",
   "cmdk.goto-customers": "Перейти к: Клиенты",
@@ -78,7 +78,7 @@
   "discovery.body": "Для начала работы выберите сервер, к которому вы хотите подключиться.\nПосле выбора мы будем подключаться автоматически, если этот сервер будет доступен, так что вам не придется делать это снова.\nЗначок 🏠 рядом с сервером показывает, что это ваш локальный компьютер.",
   "error.connection-error": "Невозможно соединиться с сервером",
   "error.authentication-error": "Сервер выдал ошибку",
-  "error.integration-timeout-reached": "Центральный сервер слишком долго интегрировал записи. Пожалуйста, повторите попытку позже.",
+  "error.integration-timeout-reached": "Достигнут предел ожидания интеграции с центральным сервером",
   "error.invalid-url": "Неверный URL-адрес",
   "error.login": "Неверное имя пользователя или пароль",
   "error.server-failed-to-start": "Ошибка! Не удалось запустить сервер",
@@ -99,42 +99,5 @@
   "store-details": "Код хранилища: {{code}}",
   "encounter": "Встречи",
   "dispensary": "Диспансер",
-  "programs": "Программы",
-  "assets": "Ресурсы",
-  "log-reasons": "Причины записи",
-  "easter-egg": "Пасхалка",
-  "cmdk.goto-cold-chain-equipment": "Перейти к: Холодильное оборудование",
-  "error.connection-error-hint": "Проверьте подключение к сети",
-  "equipment": "Оборудование",
-  "error.no-site-access": "Ваш аккаунт не имеет доступа ни к одному хранилищу на этом участке",
-  "error.unable-to-connect-to-printer": "Невозможно подключиться к принтеру.",
-  "error.unable-to-login": "Невозможно войти",
-  "inbound-return": "Входящий Возврат",
-  "inbound-returns": "Входящие Возвраты",
-  "error.v6-server-not-configured": "V6 центральный сервер не настроен",
-  "error.v6-server-not-configured-hint": "Проверьте URL-адрес центрального сервера",
-  "heading.server-error": "Ошибка Сервера",
-  "inventory-addition": "Пополнение Инвентаря",
-  "inventory-reduction": "Сокращение Инвентаря",
-  "label.central-server": "Центральный сервер",
-  "settings.label-printing": "Печать Лейблов",
-  "settings.printer-label-height": "Высота лейбла",
-  "settings.printer-label-width": "Ширина лейбла",
-  "settings.printer-address": "IP-адрес",
-  "settings.printer-port": "Номер порта",
-  "settings.scanner-type": "Тип Сканера",
-  "messages.connected-to-printer": "Успешное соединение с принтером!",
-  "returns": "Возвраты",
-  "outbound-return": "Исходящий Возврат",
-  "outbound-returns": "Исходящие Возвраты",
-  "prescriptions": "Рецепты",
-  "error.account-blocked": "Аккаунт заблокирован до окончания срока действия периода блокировки",
-  "error.internal-error": "Сервер столкнулся с проблемой.",
-  "cmdk.goto-cold-chain-monitoring": "Перейти к: Контроль холодильной цепи",
-  "error.sync-api-incompatible-hint": "Необходимо обновить mSupply Центральный Сервер до более новой версии - пожалуйста, свяжитесь с support@msupply.foundation",
-  "error.sync-v6-api-incompatible": "Версия API Sync V6 несовместима",
-  "error.sync-v6-api-incompatible-hint": "Необходимо обновить Open mSupply Центральный Сервер до более новой версии - пожалуйста, свяжитесь с support@msupply.foundation",
-  "facilities": "Объекты",
-  "manage": "Управлять",
-  "settings": "Настройки"
+  "programs": "Программы"
 }
diff --git a/client/packages/common/src/intl/locales/ru/catalogue.json b/client/packages/common/src/intl/locales/ru/catalogue.json
index b012655c8..31bd9f805 100644
--- a/client/packages/common/src/intl/locales/ru/catalogue.json
+++ b/client/packages/common/src/intl/locales/ru/catalogue.json
@@ -26,42 +26,5 @@
   "label.outer-pack-size": "Размер внешней упаковки",
   "label.strength": "Прочность",
   "label.volume-per-outer-pack": "Объем на одну внешнюю упаковку",
-  "label.volume-per-pack": "Объем на одну упаковку",
-  "label.manufacturer": "Производитель",
-  "button.manage-asset-log-reasons": "Управлять причинами ресурсных записей",
-  "error.cannot-add-pack-size-of-zero": "Невозможно добавить вариант с нулевым объемом упаковки",
-  "error.cannot-add-with-no-abbreviation-and-name": "Невозможно добавить вариант без аббревиатуры и названия",
-  "button.new-catalogue-item": "Новый Товар Каталога",
-  "error.no-pack-variants": "У этого товара нет настроенных вариантов упаковки.",
-  "filename.asset-categories": "Категории Ресурсов",
-  "error.pack-variant-exists": "Вариант упаковки с таким же размером уже существует для товара",
-  "label.create-log-reason": "Создать причину записи",
-  "label.category": "Категория",
-  "label.class": "Класс",
-  "label.create-pack-variant": "Создать Вариант Упаковки",
-  "label.edit-pack-variant": "Редактировать Вариант Упаковки",
-  "label.general": "Общее",
-  "label.status": "Статус",
-  "label.reason": "Причина",
-  "label.master-lists": "Главные Списки",
-  "label.model": "Модель",
-  "label.new-pack-variant": "Новый Вариант Упаковки",
-  "label.pack-variants": "Варианты Упаковок",
-  "messages.deleted-reasons_other": "Удалено {{count}} причин",
-  "messages.confirm-delete-reasons_many": "Это навсегда удалит {{count}} причин",
-  "messages.confirm-delete-reasons_other": "Это навсегда удалит {{count}} причин",
-  "messages.error-deleting-reasons_one": "{{count}} причина не может быть удалена",
-  "messages.confirm-delete-pack-variant": "Это удалит {{packVariantName}} из списка вариантов упаковок.",
-  "messages.confirm-delete-pack-variants_one": "Это навсегда удалит 1 вариант упаковки.",
-  "messages.confirm-delete-pack-variants_other": "Это навсегда удалит {{count}} вариантов упаковок.",
-  "messages.deleted-pack-variant_one": "Удален {{count}} вариант упаковки",
-  "messages.deleted-pack-variant_other": "Удалено {{count}} вариантов упаковки",
-  "messages.deleted-reasons_one": "Удалена {{count}} причина",
-  "messages.deleted-reasons_few": "Удалены {{count}} причины",
-  "messages.deleted-reasons_many": "Удалено {{count}} причин",
-  "messages.confirm-delete-reasons_one": "Это навсегда удалит 1 причину",
-  "messages.confirm-delete-reasons_few": "Это навсегда удалит {{count}} причины",
-  "messages.error-deleting-reasons_few": "{{count}} причины не могут быть удалены",
-  "messages.error-deleting-reasons_many": "{{count}} причин не могут быть удалены",
-  "messages.error-deleting-reasons_other": "{{count}} причин не могут быть удалены"
+  "label.volume-per-pack": "Объем на одну упаковку"
 }
diff --git a/client/packages/common/src/intl/locales/ru/coldchain.json b/client/packages/common/src/intl/locales/ru/coldchain.json
deleted file mode 100644
index ad539ccc4..000000000
--- a/client/packages/common/src/intl/locales/ru/coldchain.json
+++ /dev/null
@@ -1,6 +0,0 @@
-{
-    "button.print-qr": "Распечатать QR-код",
-    "button.upload-assets": "Импортировать",
-    "button.stop": "Стоп",
-    "button.update-status": "Обновить Статус"
-}
diff --git a/client/packages/common/src/intl/locales/ru/common.json b/client/packages/common/src/intl/locales/ru/common.json
index 3277887ae..80122d0de 100644
--- a/client/packages/common/src/intl/locales/ru/common.json
+++ b/client/packages/common/src/intl/locales/ru/common.json
@@ -58,96 +58,5 @@
   "description.pack-quantity": "Общее количество в упаковках",
   "description.program": "Программы используются для управления группами товаров и графиками пополнения запасов.",
   "heading.edit-item": "Редактировать Товар",
-  "heading.comment": "Комментарий",
-  "label.reason": "Причина",
-  "label.category": "Категория",
-  "label.class": "Класс",
-  "label.status": "Статус",
-  "label.manufacturer": "Производитель",
-  "label.model": "Модель",
-  "button.next-step": "Следующий этап",
-  "button.zero-line-quantity": "Установить количество на 0",
-  "description.remaining-to-supply": "Количество, оставшееся для поставки клиенту, которое будет пересчитано после создания партии. Расчет производится по формуле 'Поставка - Выдано'.",
-  "auth.not-a-central-server": "Операция разрешена только на центральном сервере",
-  "auth.permission-denied": "Доступ запрещен",
-  "button.browse-files": "Просмотр файлов",
-  "button.back": "Назад",
-  "button.delete": "Удалить",
-  "button.download": "Скачать",
-  "button.import": "Импортировать",
-  "button.remove-file": "Удалить файл",
-  "button.save-log": "Сохранить запись",
-  "button.test": "Тест",
-  "button.dashboard": "Приборная Панель",
-  "description.already-issued": "Количество, уже выпущенное в поставках.",
-  "description.fc-cost-price": "Себестоимость в иностранной валюте за упаковку",
-  "description.fc-line-total": "Итого по строке в иностранной валюте",
-  "description.fc-sell-price": "Цена продажи в иностранной валюте за упаковку",
-  "description.last-reading-datetime": "Дата и время последнего считывания данных",
-  "description.max-min-temperature": "Показания максимальной или минимальной температуры",
-  "description.requested-quantity": "Количество, запрашиваемое клиентом",
-  "description.snapshot-num-of-packs": "Количество Упаковок на данный момент",
-  "description.soh": "Запасы в Наличии",
-  "description.stock-on-hand": "Запасы в Наличии (оценка остатка)",
-  "description.supply-quantity": "Количество, которое будет поставлено этим хранилищем",
-  "description.total": "Общее значение",
-  "description.unit-quantity": "Общее количество в единицах",
-  "error.404": "Нажмите стрелку назад или воспользуйтесь меню, чтобы найти свой путь.",
-  "error.date_disableFuture": "Дата не должна быть в будущем",
-  "error.date_disablePast": "Дата не должна быть в прошлом",
-  "error.date_invalidDate": "Значение даты недействительно",
-  "error.date_maxDate": "Слишком большое значение даты",
-  "error.date_minDate": "Слишком маленькое значение даты",
-  "error.general-query-error": "Произошла ошибка связи с сервером 😢",
-  "error.invalid-credentials": "Не удалось получить данные пользователя. Пожалуйста, повторно войдите в систему, чтобы обновить данные пользователя.",
-  "error.missing-inputs": "{{count}}",
-  "error.no-data": "Данные отсутствуют",
-  "error.no-items": "Нет товаров",
-  "error.no-permission": "Нет разрешения на просмотр этой информации",
-  "error.no-report-permission": "Нет разрешения на просмотр отчетов",
-  "error.no-reports-available": "Отчеты отсутствуют",
-  "error.no-results": "Здесь ничего нет",
-  "error.no-sensors": "Датчики не найдены",
-  "filename.master-lists": "главные-списки",
-  "filename.outbound-returns": "исходящие-возвраты",
-  "filename.outbounds": "исходящие-поставки",
-  "filename.responses": "заявки-на-закупку",
-  "filename.stock": "запас",
-  "filename.stocktakes": "инвентаризации",
-  "heading.404": "Вы не можете что-то найти?",
-  "heading.actions": "Действия",
-  "heading.additional-info": "Дополнительная Информация",
-  "heading.barcode-scanners": "Сканеры штрих-кода",
-  "heading.custom-logo-info": "Заменяет стандартный \"mSupply man\". Логотип должен быть в формате svg, например, <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>...<svg...>",
-  "heading.custom-theme": "Пользовательская тема",
-  "heading.devices": "Устройства",
-  "heading.details": "Детали",
-  "heading.expiring-stock": "Истекающие Запасы",
-  "heading.foreign-currency": "Иностранная Валюта",
-  "heading.grand-total": "Итого",
-  "heading.history": "История",
-  "heading.logout-confirm": "Вы уверены?",
-  "heading.rate": "Тариф",
-  "heading.select-items": "Выбрать Товары",
-  "heading.server-log": "Журнал Сервера",
-  "heading.settings-android": "Настройки Андроида",
-  "heading.settings-display": "Настройки отображения",
-  "heading.settings-sync": "Синхронизация",
-  "label.additional-info": "Дополнительная Информация",
-  "label.address": "Адрес",
-  "label.adjust": "Откорректировать",
-  "label.age": "Возраст",
-  "label.allocated": "Выделено",
-  "label.already-issued": "Выдано",
-  "label.amc": "Среднее Месячное Потребление",
-  "error.json-bad-format-with-examples": "Неправильный формат. Используйте: \"{{examples}}\"",
-  "error.no-items-filter-on": "Нет товаров для отображения. Попробуйте изменить критерии фильтра.",
-  "filename.locations": "локации",
-  "filename.requests": "внутренние-заказы",
-  "heading.add-item": "Добавить Товар",
-  "heading.custom-logo": "Пользовательский Логотип",
-  "label.actions": "Действия",
-  "label.delete": "Удалить",
-  "label.quantity": "Количество",
-  "label.requisition": "Заявка на закупку"
+  "heading.comment": "Комментарий"
 }
diff --git a/client/packages/common/src/intl/locales/ru/dispensary.json b/client/packages/common/src/intl/locales/ru/dispensary.json
deleted file mode 100644
index ab73a442e..000000000
--- a/client/packages/common/src/intl/locales/ru/dispensary.json
+++ /dev/null
@@ -1,19 +0,0 @@
-{
-    "button-save-as-visited": "Сохранить как Посещенное",
-    "button.add-contact-trace": "Добавить Контакт",
-    "button.add-encounter": "Добавить Встречу",
-    "button.add-program": "Добавить Программу",
-    "button.link-contact-to-patient": "Привязать к Пациенту",
-    "button.new-patient": "Новый Пациент",
-    "button.new-prescription": "Новый Рецепт",
-    "button.unlink-patient": "Отвязать Пациента",
-    "error.contact-trace-not-created": "Невозможно создать отслеживание контактов",
-    "error.encounter-not-created": "Невозможно создать встречу",
-    "error.encounter-not-found": "Встреча не найдена.",
-    "error.failed-to-create-prescription": "Не удалось создать рецепт!",
-    "error.no-prescriptions": "Нет Рецептов для отображения.",
-    "error.prescription-not-found": "Рецепт не найден.",
-    "filename.patients": "пациенты",
-    "filename.prescriptions": "Рецепты",
-    "button.edit-linked-patient": "Редактировать Привязанного Пациента"
-}
diff --git a/client/packages/common/src/intl/locales/ru/distribution.json b/client/packages/common/src/intl/locales/ru/distribution.json
index 5428e7de7..1e8f7890c 100644
--- a/client/packages/common/src/intl/locales/ru/distribution.json
+++ b/client/packages/common/src/intl/locales/ru/distribution.json
@@ -30,44 +30,5 @@
   "heading.create-outbound-shipment": "Создать Исходящую Поставку",
   "heading.edit-item": "Редактировать Товар",
   "heading.supply-to-requested": "Установить снабжение как запрошенное",
-  "heading.supply-to-approved": "Установить снабжение как одобренно",
-  "messages.select-rows-to-delete-them": "Выберите строки, чтобы удалить их",
-  "stocktake.description-template": "Создано пользователем {{username}} {{date}}",
-  "error.failed-to-create-return": "Не удалось создать возврат!",
-  "error.no-inbound-returns": "Нет входящих возвратов для отображения.",
-  "heading.edit-tax-rate": "Редактировать процентную ставку налога",
-  "heading.item-sell-price": "Цена продажи товаров",
-  "info.automatic-return": "Этот возврат был создан автоматически в результате Исходящего Возврата в другом хранилище.",
-  "info.manual-return": "Этот возврат был создан вручную. Статус доставки не будет обновляться автоматически.",
-  "label.any": "Любой",
-  "label.shipment": "Поставка",
-  "messages.allocated-lines_one": "Распределена {{count}} строка",
-  "button.new-return": "Новый Возврат",
-  "button.return-lines": "Обработать возврат выбранных строк",
-  "error.no-inbound-return-items": "В этот возврат не добавлено ни одного товара.",
-  "error.return-not-found": "Возврат не найден",
-  "heading.confirm-finalise": "Вы уверены, что хотите завершить?",
-  "heading.order": "Заказ",
-  "heading.reference": "Ссылка",
-  "heading.transport-details": "Детали Транспорта",
-  "label.add-charges": "Добавить плату",
-  "heading.return-items": "Возврат Товаров",
-  "heading.stock-details": "Детали запасов",
-  "heading.sub-total": "Промежуточный Итог",
-  "heading.total": "Итого",
-  "info.automatic-return-no-edit": "Вы не можете редактировать детали, пока статус не будет подтвержден как Доставлено.",
-  "label.incoming-stock": "Прибывающие запасы",
-  "label.stock-on-order": "Запасы под заказ",
-  "label.all-requested-quantity": "Другие запрашиваемые",
-  "label.stock-on-hand": "Запасы в наличии",
-  "label.allocated": "Выделено",
-  "label.amc": "Среднее Месячное Потребление",
-  "label.customer-name": "Имя Клиента",
-  "label.delete": "Удалить",
-  "label.quantity": "Количество",
-  "label.requisition": "Заявка на закупку",
-  "label.requested-quantity": "Запрошенное количество",
-  "messages.allocated-lines_few": "Распределено {{count}} строки",
-  "messages.allocated-lines_many": "Распределено {{count}} строк",
-  "messages.allocated-lines_other": "Распределено {{count}} строк"
+  "heading.supply-to-approved": "Установить снабжение как одобренно"
 }
diff --git a/client/packages/common/src/intl/locales/ru/inventory.json b/client/packages/common/src/intl/locales/ru/inventory.json
index fc9f00b1e..00add9bb2 100644
--- a/client/packages/common/src/intl/locales/ru/inventory.json
+++ b/client/packages/common/src/intl/locales/ru/inventory.json
@@ -34,86 +34,5 @@
   "label.edit-location": "Редактировать Локацию",
   "label.new-num-packs": "Новое количество упаковок",
   "label.sell-price": "Цена продажи",
-  "message.no-supplier": "Корректировка Инвентаря",
-  "error.snapshot-total-mismatch": "Ошибка: В одной или нескольких строках имеется несоответствие между текущим уровнем запасов и количеством на данный момент.",
-  "button.change-location": "Изменить локацию линий",
-  "button.new-stock": "Новые Запасы",
-  "button.reduce-lines-to-zero": "Сократить количество строк до 0",
-  "error.provide-reason": "Должна быть указана причина для всех рядов, в которых есть разница в подсчитанном количестве упаковок.",
-  "error.stocktake-has-stock-reduced-below-zero": "Инвентаризация не может быть завершена, поскольку часть запасов была использована в новых исходящих поставках.",
-  "messages.click-to-return": "Невозможно найти инвентаризацию с таким ID. Нажмите OK, чтобы вернуться к списку инвентаризаций",
-  "messages.confirm-delete-locations_one": "Это навсегда удалит 1 локацию",
-  "messages.confirm-delete-stocktake": "Это навсегда удалит Инвентаризацию №{{number}}",
-  "messages.confirm-delete-stocktake_lines_one": "Это навсегда удалит 1 линию инвентаризации",
-  "messages.unlocked-description": "Это позволит снова вносить изменения в инвентаризацию.",
-  "messages.select-rows-to-delete": "Выберите ряды для удаления",
-  "label.adjust-by": "на",
-  "label.current-num-of-packs": "Текущее количество упаковок",
-  "label.decrease-qty": "Уменьшить количество",
-  "label.direction": "Направление регулировки",
-  "label.increase-qty": "Увеличить количество",
-  "label.items-expiring-before": "Товары, срок действия которых истекает до",
-  "messages.changed-location_other": "Локация изменена для {{ count }} строк",
-  "messages.no-lines-selected": "Не выбрано ни одной линии",
-  "messages.confirm-change-location": "Это сменит локацию всех выделенных строк",
-  "messages.confirm-delete-locations_few": "Это навсегда удалит {{count}} локации",
-  "messages.confirm-delete-locations_many": "Это навсегда удалит {{count}} локаций",
-  "messages.confirm-delete-stocktake_lines_many": "Это навсегда удалит {{count}} линий инвентаризации",
-  "messages.confirm-delete-stocktake_lines_other": "Это навсегда удалит {{count}} линий инвентаризации",
-  "messages.confirm-delete-stocktakes_one": "Это навсегда удалит 1 инвентаризацию",
-  "messages.confirm-delete-stocktakes_many": "Это навсегда удалит {{count}} инвентаризаций",
-  "messages.confirm-delete-stocktakes_other": "Это навсегда удалит {{count}} инвентаризаций",
-  "label.new-pack-qty": "Кол-во Новых Упаковок",
-  "messages.changed-location_one": "Локация изменена для 1 строки",
-  "messages.locked-description": "Это предотвратит дальнейшие изменения в инвентаризации, до тех пор пока она не будет разблокирована.",
-  "messages.confirm-delete-locations_other": "Это навсегда удалит {{count}} локаций",
-  "messages.confirm-delete-stocktake_lines_few": "Это навсегда удалит {{count}} линии инвентаризации",
-  "messages.confirm-delete-stocktakes_few": "Это навсегда удалит {{count}} инвентаризации",
-  "error.provide-valid-reason": "Причина корректировки не соответствует направлению корректировки",
-  "error.reduced-below-zero": "Запас зарезервирован для новых исходящих поставок. Количество не может быть уменьшено ниже нуля.",
-  "error.repack-has-stock-reduced-below-zero": "Невозможно переупаковать запас. Новое количество упаковок превышает количество упаковок в запасе.",
-  "error.repack-cannot-be-fractional": "Невозможно переупаковать в дробную упаковку",
-  "label.code-or-name": "Код или Имя",
-  "label.from-expiry": "С момента окончания срока действия",
-  "label.to-expiry": "До истечения срока действия",
-  "placeholder.enter-an-item-code-or-name": "Введите код товара или наименование",
-  "messages.on-hold-stock-take": "Эта инвентаризация приостановлена и не может быть отредактирована",
-  "messages.select-rows-to-delete-them": "Выберите строки, чтобы удалить их",
-  "stocktake.description-template": "Создано пользователем {{username}} {{date}}",
-  "stocktake.comment-list-template": "Создано используя главный список '{{list}}'",
-  "messages.confirm-reduce-lines-to-zero": "Это уменьшит количество всех выбранных линий запаса до 0",
-  "messages.confirm-save-stock-line": "Вы хотите сохранить изменения в этой строке запасов? Все изменения будут зарегистрированы, и их можно будет просмотреть позже на этом экране.",
-  "messages.create-stocktake-2": "Чтобы создать пустую инвентаризацию, просто нажмите ОК, чтобы продолжить.",
-  "messages.deleted-locations_one": "Удалена {{count}} локация",
-  "messages.deleted-locations_few": "Удалены {{count}} локации",
-  "messages.deleted-locations_many": "Удалены {{count}} локаций",
-  "messages.deleted-stocktakes_one": "Удалена {{count}} инвентаризация",
-  "messages.deleted-stocktakes_few": "Удалены {{count}} инвентаризации",
-  "messages.deleted-stocktakes_many": "Удалены {{count}} инвентаризаций",
-  "messages.error-deleting-locations_one": "Не удалось удалить {{count}} локацию",
-  "messages.error-deleting-locations_few": "Не удалось удалить {{count}} локации",
-  "messages.error-deleting-locations_other": "Не удалось удалить {{count}} локаций",
-  "messages.finalised-stock-take": "Эта инвентаризация завершена и не подлежит редактированию",
-  "messages.no-locations": "Нет доступных локаций",
-  "messages.no-master-lists": "Нет доступных главных списков",
-  "messages.no-items-with-stock": "Нет товаров в наличии",
-  "messages.create-stocktake-1": "Вы можете создать инвентаризацию на основе товаров, которые в настоящее время назначены определенной локации, товаров, которые в настоящее время имеются у вас на складе, товаров, включенных в основной список, или товаров, срок действия которых истекает до определенной даты.",
-  "messages.deleted-locations_other": "Удалены {{count}} локаций",
-  "messages.deleted-stocktakes_other": "Удалены {{count}} инвентаризаций",
-  "messages.error-deleting-locations_many": "Не удалось удалить {{count}} локаций",
-  "messages.inventory-adjustment-saved": "Корректировка инвентаризации сохранена 🥳",
-  "messages.no-ledger": "В этой строке запасов нет перемещения запасов для отображения",
-  "messages.no-repacks": "Эта линия запасов не была переупакована. Нажмите кнопку Новая, чтобы создать новую упаковку.",
-  "messages.no-repack-detail": "Выберите строку, чтобы просмотреть детали о переупаковке, или нажмите «Новая», чтобы создать новую переупаковку",
-  "messages.all-packs-repacked": "Сохранено. Предыдущее окно было закрыто, так как все в строке запасов было переупаковано.",
-  "messages.repack-log-info": "Переупаковано со строки запасов",
-  "messages.reduced-to-zero_other": "Количество {{ count }} строк уменьшено до 0",
-  "messages.stock-line-saved": "Строка запасов сохранена 🥳",
-  "status.new": "Новая",
-  "status.finalised": "Завершена",
-  "stocktake-comment-items-have-stock-template": "Создано с использованием товаров, которые есть в наличии",
-  "title.stock-line-details": "Детали Строки Запасов",
-  "title.repack-details": "Детали Переупаковки",
-  "messages.reduced-to-zero_one": "Количество 1 строки уменьшено до 0",
-  "stocktake.comment-location-template": "Создано с использованием товаров в локации '{{location}}'"
+  "message.no-supplier": "Корректировка Инвентаря"
 }
diff --git a/client/packages/common/src/intl/locales/ru/plugin.json b/client/packages/common/src/intl/locales/ru/plugin.json
deleted file mode 100644
index 4b18da222..000000000
--- a/client/packages/common/src/intl/locales/ru/plugin.json
+++ /dev/null
@@ -1,4 +0,0 @@
-{
-    "error.plugin": "Произошла ошибка при загрузке плагина {{name}}",
-    "error.plugin-unavailable": "Плагин недоступен"
-}
diff --git a/client/packages/common/src/intl/locales/ru/programs.json b/client/packages/common/src/intl/locales/ru/programs.json
deleted file mode 100644
index 0967ef424..000000000
--- a/client/packages/common/src/intl/locales/ru/programs.json
+++ /dev/null
@@ -1 +0,0 @@
-{}
diff --git a/client/packages/common/src/intl/locales/ru/replenishment.json b/client/packages/common/src/intl/locales/ru/replenishment.json
index 9791dd73c..9c6579b1a 100644
--- a/client/packages/common/src/intl/locales/ru/replenishment.json
+++ b/client/packages/common/src/intl/locales/ru/replenishment.json
@@ -14,17 +14,5 @@
   "label.cant-delete-disabled": "Возможно удаление строк только со статусом 'Новый'",
   "button.new-shipment": "Новая Поставка",
   "error.shipment-not-found": "Поставка не найдена",
-  "error.unable-to-calculate": "Невозможно рассчитать",
-  "messages.select-rows-to-delete-them": "Выберите строки, чтобы удалить их",
-  "label.amc": "Среднее Месячное Потребление",
-  "button.new-return": "Новый Возврат",
-  "heading.edit-tax-rate": "Редактировать процентную ставку налога",
-  "error.failed-to-create-return": "Не удалось создать возврат!",
-  "error.return-not-found": "Возврат не найден",
-  "heading.return-items": "Возврат Товаров",
-  "heading.sub-total": "Промежуточный Итог",
-  "heading.total": "Итого",
-  "label.shipment": "Поставка",
-  "button.return-lines": "Обработать возврат выбранных строк",
-  "button.requested-to-suggested": "Использовать Рекомендуемые Количества"
+  "error.unable-to-calculate": "Невозможно рассчитать"
 }
diff --git a/client/packages/common/src/intl/strings/IntlStrings.ts b/client/packages/common/src/intl/strings/IntlStrings.ts
index 3c95fa6e3..6610eb4cd 100644
--- a/client/packages/common/src/intl/strings/IntlStrings.ts
+++ b/client/packages/common/src/intl/strings/IntlStrings.ts
@@ -30,7 +30,7 @@ export const useTranslation = (ns?: Namespace): TypedTFunction<LocaleKey> => {
           ? { ...opts, returnDetails: false }
           : { returnDetails: false, defaultValue };
 
-      return key ? t(key, options) : defaultValue || opts?.defaultValue || '';
+      return key ? t(key, options) : '';
     },
     [t]
   );
diff --git a/client/packages/common/src/types/schema.ts b/client/packages/common/src/types/schema.ts
index 37fc2ed59..675f34f1c 100644
--- a/client/packages/common/src/types/schema.ts
+++ b/client/packages/common/src/types/schema.ts
@@ -92,7 +92,6 @@ export enum ActivityLogNodeType {
   AssetLogCreated = 'ASSET_LOG_CREATED',
   AssetLogReasonCreated = 'ASSET_LOG_REASON_CREATED',
   AssetLogReasonDeleted = 'ASSET_LOG_REASON_DELETED',
-  AssetPropertyCreated = 'ASSET_PROPERTY_CREATED',
   AssetUpdated = 'ASSET_UPDATED',
   InventoryAdjustment = 'INVENTORY_ADJUSTMENT',
   InvoiceCreated = 'INVOICE_CREATED',
@@ -107,7 +106,6 @@ export enum ActivityLogNodeType {
   PrescriptionDeleted = 'PRESCRIPTION_DELETED',
   PrescriptionStatusPicked = 'PRESCRIPTION_STATUS_PICKED',
   PrescriptionStatusVerified = 'PRESCRIPTION_STATUS_VERIFIED',
-  ProgramCreated = 'PROGRAM_CREATED',
   QuantityForLineHasBeenSetToZero = 'QUANTITY_FOR_LINE_HAS_BEEN_SET_TO_ZERO',
   Repack = 'REPACK',
   RequisitionCreated = 'REQUISITION_CREATED',
@@ -126,8 +124,7 @@ export enum ActivityLogNodeType {
   StockOffHold = 'STOCK_OFF_HOLD',
   StockOnHold = 'STOCK_ON_HOLD',
   StockSellPriceChange = 'STOCK_SELL_PRICE_CHANGE',
-  UserLoggedIn = 'USER_LOGGED_IN',
-  VaccineCourseCreated = 'VACCINE_COURSE_CREATED'
+  UserLoggedIn = 'USER_LOGGED_IN'
 }
 
 export type ActivityLogResponse = ActivityLogConnector;
@@ -273,10 +270,33 @@ export type AssetCatalogueItemNode = {
   id: Scalars['String']['output'];
   manufacturer?: Maybe<Scalars['String']['output']>;
   model: Scalars['String']['output'];
-  properties: Scalars['String']['output'];
   subCatalogue: Scalars['String']['output'];
 };
 
+export type AssetCatalogueItemPropertyNode = {
+  __typename: 'AssetCatalogueItemPropertyNode';
+  catalogueItemId: Scalars['String']['output'];
+  cataloguePropertyId: Scalars['String']['output'];
+  id: Scalars['String']['output'];
+  valueBool?: Maybe<Scalars['Boolean']['output']>;
+  valueFloat?: Maybe<Scalars['Float']['output']>;
+  valueInt?: Maybe<Scalars['Int']['output']>;
+  valueString?: Maybe<Scalars['String']['output']>;
+};
+
+export type AssetCatalogueItemPropertyValueNode = {
+  __typename: 'AssetCatalogueItemPropertyValueNode';
+  catalogueItemId: Scalars['String']['output'];
+  cataloguePropertyId: Scalars['String']['output'];
+  id: Scalars['String']['output'];
+  name: Scalars['String']['output'];
+  valueBool?: Maybe<Scalars['Boolean']['output']>;
+  valueFloat?: Maybe<Scalars['Float']['output']>;
+  valueInt?: Maybe<Scalars['Int']['output']>;
+  valueString?: Maybe<Scalars['String']['output']>;
+  valueType: PropertyNodeValueType;
+};
+
 export type AssetCatalogueItemResponse = AssetCatalogueItemNode | NodeError;
 
 export enum AssetCatalogueItemSortFieldInput {
@@ -297,6 +317,7 @@ export type AssetCatalogueMutations = {
   __typename: 'AssetCatalogueMutations';
   deleteAssetCatalogueItem: DeleteAssetCatalogueItemResponse;
   insertAssetCatalogueItem: InsertAssetCatalogueItemResponse;
+  insertAssetCatalogueItemProperty: InsertAssetCatalogueItemPropertyResponse;
 };
 
 
@@ -310,6 +331,34 @@ export type AssetCatalogueMutationsInsertAssetCatalogueItemArgs = {
   storeId: Scalars['String']['input'];
 };
 
+
+export type AssetCatalogueMutationsInsertAssetCatalogueItemPropertyArgs = {
+  input: InsertAssetCatalogueItemPropertyInput;
+  storeId: Scalars['String']['input'];
+};
+
+export type AssetCataloguePropertyConnector = {
+  __typename: 'AssetCataloguePropertyConnector';
+  nodes: Array<AssetCataloguePropertyNode>;
+  totalCount: Scalars['Int']['output'];
+};
+
+export type AssetCataloguePropertyFilterInput = {
+  categoryId?: InputMaybe<EqualFilterStringInput>;
+  id?: InputMaybe<EqualFilterStringInput>;
+};
+
+export type AssetCataloguePropertyNode = {
+  __typename: 'AssetCataloguePropertyNode';
+  allowedValues?: Maybe<Scalars['String']['output']>;
+  categoryId: Scalars['String']['output'];
+  id: Scalars['String']['output'];
+  name: Scalars['String']['output'];
+  valueType: PropertyNodeValueType;
+};
+
+export type AssetCataloguePropertyResponse = AssetCataloguePropertyConnector | NodeError;
+
 export type AssetCategoriesResponse = AssetCategoryConnector;
 
 export type AssetCategoryConnector = {
@@ -504,63 +553,21 @@ export type AssetNode = {
   assetClass?: Maybe<AssetClassNode>;
   assetNumber?: Maybe<Scalars['String']['output']>;
   assetType?: Maybe<AssetTypeNode>;
-  /** Returns a JSON string of the asset catalogue properties e.g {"property_key": "value"} */
-  catalogProperties?: Maybe<Scalars['String']['output']>;
   catalogueItem?: Maybe<AssetCatalogueItemNode>;
   catalogueItemId?: Maybe<Scalars['String']['output']>;
   createdDatetime: Scalars['NaiveDateTime']['output'];
   documents: SyncFileReferenceConnector;
-  donor?: Maybe<NameNode>;
-  donorNameId?: Maybe<Scalars['String']['output']>;
   id: Scalars['String']['output'];
   installationDate?: Maybe<Scalars['NaiveDate']['output']>;
   locations: LocationConnector;
   modifiedDatetime: Scalars['NaiveDateTime']['output'];
-  needsReplacement?: Maybe<Scalars['Boolean']['output']>;
   notes?: Maybe<Scalars['String']['output']>;
-  /** Returns a JSON string of the asset properties (defined on the asset itself) e.g {"property_key": "value"} */
-  properties: Scalars['String']['output'];
+  properties: Array<AssetCatalogueItemPropertyValueNode>;
   replacementDate?: Maybe<Scalars['NaiveDate']['output']>;
   serialNumber?: Maybe<Scalars['String']['output']>;
   statusLog?: Maybe<AssetLogNode>;
   store?: Maybe<StoreNode>;
   storeId?: Maybe<Scalars['String']['output']>;
-  warrantyEnd?: Maybe<Scalars['NaiveDate']['output']>;
-  warrantyStart?: Maybe<Scalars['NaiveDate']['output']>;
-};
-
-
-export type AssetNodeDonorArgs = {
-  storeId: Scalars['String']['input'];
-};
-
-export type AssetPropertiesResponse = AssetPropertyConnector;
-
-export type AssetPropertyConnector = {
-  __typename: 'AssetPropertyConnector';
-  nodes: Array<AssetPropertyNode>;
-  totalCount: Scalars['Int']['output'];
-};
-
-export type AssetPropertyFilterInput = {
-  assetCategoryId?: InputMaybe<EqualFilterStringInput>;
-  assetClassId?: InputMaybe<EqualFilterStringInput>;
-  assetTypeId?: InputMaybe<EqualFilterStringInput>;
-  id?: InputMaybe<EqualFilterStringInput>;
-  key?: InputMaybe<EqualFilterStringInput>;
-  name?: InputMaybe<StringFilterInput>;
-};
-
-export type AssetPropertyNode = {
-  __typename: 'AssetPropertyNode';
-  allowedValues?: Maybe<Scalars['String']['output']>;
-  assetCategoryId?: Maybe<Scalars['String']['output']>;
-  assetClassId?: Maybe<Scalars['String']['output']>;
-  assetTypeId?: Maybe<Scalars['String']['output']>;
-  id: Scalars['String']['output'];
-  key: Scalars['String']['output'];
-  name: Scalars['String']['output'];
-  valueType: PropertyNodeValueType;
 };
 
 export enum AssetSortFieldInput {
@@ -639,7 +646,7 @@ export type BarcodeNode = {
   id: Scalars['String']['output'];
   itemId: Scalars['String']['output'];
   manufacturerId?: Maybe<Scalars['String']['output']>;
-  packSize?: Maybe<Scalars['Float']['output']>;
+  packSize?: Maybe<Scalars['Int']['output']>;
   parentId?: Maybe<Scalars['String']['output']>;
 };
 
@@ -872,25 +879,11 @@ export type CentralPatientSearchInput = {
 
 export type CentralPatientSearchResponse = CentralPatientSearchConnector | CentralPatientSearchError;
 
-export type CentralProgramsMutations = {
-  __typename: 'CentralProgramsMutations';
-  insertImmunisationProgram: InsertImmunisationProgramResponse;
-};
-
-
-export type CentralProgramsMutationsInsertImmunisationProgramArgs = {
-  input: InsertImmunisationProgramInput;
-  storeId: Scalars['String']['input'];
-};
-
 export type CentralServerMutationNode = {
   __typename: 'CentralServerMutationNode';
   assetCatalogue: AssetCatalogueMutations;
-  demographic: DemographicMutations;
   logReason: AssetLogReasonMutations;
   packVariant: PackVariantMutations;
-  program: CentralProgramsMutations;
-  vaccineCourse: VaccineCourseMutations;
 };
 
 export type ClinicianConnector = {
@@ -1116,7 +1109,7 @@ export type CurrencySortInput = {
   key: CurrencySortFieldInput;
 };
 
-export type DatabaseError = DeleteAssetCatalogueItemErrorInterface & DeleteAssetErrorInterface & DeleteAssetLogReasonErrorInterface & DeleteLocationErrorInterface & InsertAssetCatalogueItemErrorInterface & InsertAssetErrorInterface & InsertAssetLogErrorInterface & InsertAssetLogReasonErrorInterface & InsertDemographicIndicatorErrorInterface & InsertDemographicProjectionErrorInterface & InsertImmunisationProgramErrorInterface & InsertLocationErrorInterface & NodeErrorInterface & RefreshTokenErrorInterface & UpdateAssetErrorInterface & UpdateDemographicIndicatorErrorInterface & UpdateDemographicProjectionErrorInterface & UpdateLocationErrorInterface & UpdateSensorErrorInterface & {
+export type DatabaseError = DeleteAssetCatalogueItemErrorInterface & DeleteAssetErrorInterface & DeleteAssetLogReasonErrorInterface & DeleteLocationErrorInterface & InsertAssetCatalogueItemErrorInterface & InsertAssetCatalogueItemPropertyErrorInterface & InsertAssetErrorInterface & InsertAssetLogErrorInterface & InsertAssetLogReasonErrorInterface & InsertLocationErrorInterface & NodeErrorInterface & RefreshTokenErrorInterface & UpdateAssetErrorInterface & UpdateLocationErrorInterface & UpdateSensorErrorInterface & {
   __typename: 'DatabaseError';
   description: Scalars['String']['output'];
   fullError: Scalars['String']['output'];
@@ -1490,105 +1483,6 @@ export type DeleteStocktakeResponseWithId = {
   response: DeleteStocktakeResponse;
 };
 
-export type DemographicIndicatorConnector = {
-  __typename: 'DemographicIndicatorConnector';
-  nodes: Array<DemographicIndicatorNode>;
-  totalCount: Scalars['Int']['output'];
-};
-
-export type DemographicIndicatorFilterInput = {
-  baseYear?: InputMaybe<EqualFilterNumberInput>;
-  id?: InputMaybe<EqualFilterStringInput>;
-  name?: InputMaybe<StringFilterInput>;
-};
-
-export type DemographicIndicatorNode = {
-  __typename: 'DemographicIndicatorNode';
-  basePopulation: Scalars['Int']['output'];
-  baseYear: Scalars['Int']['output'];
-  id: Scalars['String']['output'];
-  name: Scalars['String']['output'];
-  populationPercentage: Scalars['Float']['output'];
-  year1Projection: Scalars['Int']['output'];
-  year2Projection: Scalars['Int']['output'];
-  year3Projection: Scalars['Int']['output'];
-  year4Projection: Scalars['Int']['output'];
-  year5Projection: Scalars['Int']['output'];
-};
-
-export enum DemographicIndicatorSortFieldInput {
-  Id = 'id',
-  Name = 'name'
-}
-
-export type DemographicIndicatorSortInput = {
-  desc?: InputMaybe<Scalars['Boolean']['input']>;
-  key: DemographicIndicatorSortFieldInput;
-};
-
-export type DemographicIndicatorsResponse = DemographicIndicatorConnector;
-
-export type DemographicMutations = {
-  __typename: 'DemographicMutations';
-  insertDemographicIndicator: InsertDemographicIndicatorResponse;
-  insertDemographicProjection: InsertDemographicProjectionResponse;
-  updateDemographicIndicator: UpdateDemographicIndicatorResponse;
-  updateDemographicProjection: UpdateDemographicProjectionResponse;
-};
-
-
-export type DemographicMutationsInsertDemographicIndicatorArgs = {
-  input: InsertDemographicIndicatorInput;
-};
-
-
-export type DemographicMutationsInsertDemographicProjectionArgs = {
-  input: InsertDemographicProjectionInput;
-};
-
-
-export type DemographicMutationsUpdateDemographicIndicatorArgs = {
-  input: UpdateDemographicIndicatorInput;
-};
-
-
-export type DemographicMutationsUpdateDemographicProjectionArgs = {
-  input: UpdateDemographicProjectionInput;
-};
-
-export type DemographicProjectionConnector = {
-  __typename: 'DemographicProjectionConnector';
-  nodes: Array<DemographicProjectionNode>;
-  totalCount: Scalars['Int']['output'];
-};
-
-export type DemographicProjectionFilterInput = {
-  baseYear?: InputMaybe<EqualFilterNumberInput>;
-  id?: InputMaybe<EqualFilterStringInput>;
-};
-
-export type DemographicProjectionNode = {
-  __typename: 'DemographicProjectionNode';
-  baseYear: Scalars['Int']['output'];
-  id: Scalars['String']['output'];
-  year1: Scalars['Int']['output'];
-  year2: Scalars['Int']['output'];
-  year3: Scalars['Int']['output'];
-  year4: Scalars['Int']['output'];
-  year5: Scalars['Int']['output'];
-};
-
-export enum DemographicProjectionSortFieldInput {
-  Id = 'id'
-}
-
-export type DemographicProjectionSortInput = {
-  desc?: InputMaybe<Scalars['Boolean']['input']>;
-  key: DemographicProjectionSortFieldInput;
-};
-
-export type DemographicProjectionsResponse = DemographicProjectionConnector;
-
 export type DisplaySettingNode = {
   __typename: 'DisplaySettingNode';
   hash: Scalars['String']['output'];
@@ -1850,14 +1744,12 @@ export type EqualFilterActivityLogTypeInput = {
 
 export type EqualFilterBigFloatingNumberInput = {
   equalAny?: InputMaybe<Array<Scalars['Float']['input']>>;
-  equalAnyOrNull?: InputMaybe<Array<Scalars['Float']['input']>>;
   equalTo?: InputMaybe<Scalars['Float']['input']>;
   notEqualTo?: InputMaybe<Scalars['Float']['input']>;
 };
 
 export type EqualFilterBigNumberInput = {
   equalAny?: InputMaybe<Array<Scalars['Int']['input']>>;
-  equalAnyOrNull?: InputMaybe<Array<Scalars['Int']['input']>>;
   equalTo?: InputMaybe<Scalars['Int']['input']>;
   notEqualTo?: InputMaybe<Scalars['Int']['input']>;
 };
@@ -1912,7 +1804,6 @@ export type EqualFilterItemTypeInput = {
 
 export type EqualFilterNumberInput = {
   equalAny?: InputMaybe<Array<Scalars['Int']['input']>>;
-  equalAnyOrNull?: InputMaybe<Array<Scalars['Int']['input']>>;
   equalTo?: InputMaybe<Scalars['Int']['input']>;
   notEqualTo?: InputMaybe<Scalars['Int']['input']>;
 };
@@ -1955,7 +1846,6 @@ export type EqualFilterStocktakeStatusInput = {
 
 export type EqualFilterStringInput = {
   equalAny?: InputMaybe<Array<Scalars['String']['input']>>;
-  equalAnyOrNull?: InputMaybe<Array<Scalars['String']['input']>>;
   equalTo?: InputMaybe<Scalars['String']['input']>;
   notEqualTo?: InputMaybe<Scalars['String']['input']>;
 };
@@ -2121,7 +2011,7 @@ export type InboundReturnLineInput = {
   itemId: Scalars['String']['input'];
   note?: InputMaybe<Scalars['String']['input']>;
   numberOfPacksReturned: Scalars['Float']['input'];
-  packSize: Scalars['Float']['input'];
+  packSize: Scalars['Int']['input'];
   reasonId?: InputMaybe<Scalars['String']['input']>;
 };
 
@@ -2136,7 +2026,7 @@ export type InboundReturnLineNode = {
   note?: Maybe<Scalars['String']['output']>;
   numberOfPacksIssued?: Maybe<Scalars['Float']['output']>;
   numberOfPacksReturned: Scalars['Float']['output'];
-  packSize: Scalars['Float']['output'];
+  packSize: Scalars['Int']['output'];
   reasonId?: Maybe<Scalars['String']['output']>;
   stockLineId?: Maybe<Scalars['String']['output']>;
 };
@@ -2171,11 +2061,31 @@ export type InsertAssetCatalogueItemInput = {
   id: Scalars['String']['input'];
   manufacturer?: InputMaybe<Scalars['String']['input']>;
   model: Scalars['String']['input'];
-  properties?: InputMaybe<Scalars['String']['input']>;
   subCatalogue: Scalars['String']['input'];
   typeId: Scalars['String']['input'];
 };
 
+export type InsertAssetCatalogueItemPropertyError = {
+  __typename: 'InsertAssetCatalogueItemPropertyError';
+  error: InsertAssetCatalogueItemPropertyErrorInterface;
+};
+
+export type InsertAssetCatalogueItemPropertyErrorInterface = {
+  description: Scalars['String']['output'];
+};
+
+export type InsertAssetCatalogueItemPropertyInput = {
+  catalogueItemId: Scalars['String']['input'];
+  cataloguePropertyId: Scalars['String']['input'];
+  id: Scalars['String']['input'];
+  valueBool?: InputMaybe<Scalars['Boolean']['input']>;
+  valueFloat?: InputMaybe<Scalars['Float']['input']>;
+  valueInt?: InputMaybe<Scalars['Int']['input']>;
+  valueString?: InputMaybe<Scalars['String']['input']>;
+};
+
+export type InsertAssetCatalogueItemPropertyResponse = AssetCatalogueItemPropertyNode | InsertAssetCatalogueItemPropertyError;
+
 export type InsertAssetCatalogueItemResponse = AssetCatalogueItemNode | InsertAssetCatalogueItemError;
 
 export type InsertAssetError = {
@@ -2192,18 +2102,13 @@ export type InsertAssetInput = {
   catalogueItemId?: InputMaybe<Scalars['String']['input']>;
   categoryId?: InputMaybe<Scalars['String']['input']>;
   classId?: InputMaybe<Scalars['String']['input']>;
-  donorNameId?: InputMaybe<Scalars['String']['input']>;
   id: Scalars['String']['input'];
   installationDate?: InputMaybe<Scalars['NaiveDate']['input']>;
-  needsReplacement?: InputMaybe<Scalars['Boolean']['input']>;
   notes?: InputMaybe<Scalars['String']['input']>;
-  properties?: InputMaybe<Scalars['String']['input']>;
   replacementDate?: InputMaybe<Scalars['NaiveDate']['input']>;
   serialNumber?: InputMaybe<Scalars['String']['input']>;
   storeId?: InputMaybe<Scalars['String']['input']>;
   typeId?: InputMaybe<Scalars['String']['input']>;
-  warrantyEnd?: InputMaybe<Scalars['NaiveDate']['input']>;
-  warrantyStart?: InputMaybe<Scalars['NaiveDate']['input']>;
 };
 
 export type InsertAssetLogError = {
@@ -2248,7 +2153,7 @@ export type InsertAssetResponse = AssetNode | InsertAssetError;
 export type InsertBarcodeInput = {
   gtin: Scalars['String']['input'];
   itemId: Scalars['String']['input'];
-  packSize?: InputMaybe<Scalars['Float']['input']>;
+  packSize?: InputMaybe<Scalars['Int']['input']>;
 };
 
 export type InsertBarcodeResponse = BarcodeNode;
@@ -2266,51 +2171,6 @@ export type InsertContactTraceInput = {
 
 export type InsertContactTraceResponse = ContactTraceNode;
 
-export type InsertDemographicIndicatorError = {
-  __typename: 'InsertDemographicIndicatorError';
-  error: InsertDemographicIndicatorErrorInterface;
-};
-
-export type InsertDemographicIndicatorErrorInterface = {
-  description: Scalars['String']['output'];
-};
-
-export type InsertDemographicIndicatorInput = {
-  basePopulation?: InputMaybe<Scalars['Int']['input']>;
-  baseYear: Scalars['Int']['input'];
-  id: Scalars['String']['input'];
-  name: Scalars['String']['input'];
-  populationPercentage?: InputMaybe<Scalars['Float']['input']>;
-  year1Projection?: InputMaybe<Scalars['Int']['input']>;
-  year2Projection?: InputMaybe<Scalars['Int']['input']>;
-  year3Projection?: InputMaybe<Scalars['Int']['input']>;
-  year4Projection?: InputMaybe<Scalars['Int']['input']>;
-  year5Projection?: InputMaybe<Scalars['Int']['input']>;
-};
-
-export type InsertDemographicIndicatorResponse = DemographicIndicatorNode | InsertDemographicIndicatorError;
-
-export type InsertDemographicProjectionError = {
-  __typename: 'InsertDemographicProjectionError';
-  error: InsertDemographicProjectionErrorInterface;
-};
-
-export type InsertDemographicProjectionErrorInterface = {
-  description: Scalars['String']['output'];
-};
-
-export type InsertDemographicProjectionInput = {
-  baseYear: Scalars['Int']['input'];
-  id: Scalars['String']['input'];
-  year1?: InputMaybe<Scalars['Int']['input']>;
-  year2?: InputMaybe<Scalars['Int']['input']>;
-  year3?: InputMaybe<Scalars['Int']['input']>;
-  year4?: InputMaybe<Scalars['Int']['input']>;
-  year5?: InputMaybe<Scalars['Int']['input']>;
-};
-
-export type InsertDemographicProjectionResponse = DemographicProjectionNode | InsertDemographicProjectionError;
-
 export type InsertDocumentRegistryInput = {
   category: DocumentRegistryCategoryNode;
   contextId: Scalars['String']['input'];
@@ -2347,22 +2207,6 @@ export type InsertFormSchemaInput = {
 
 export type InsertFormSchemaResponse = FormSchemaNode;
 
-export type InsertImmunisationProgramError = {
-  __typename: 'InsertImmunisationProgramError';
-  error: InsertImmunisationProgramErrorInterface;
-};
-
-export type InsertImmunisationProgramErrorInterface = {
-  description: Scalars['String']['output'];
-};
-
-export type InsertImmunisationProgramInput = {
-  id: Scalars['String']['input'];
-  name: Scalars['String']['input'];
-};
-
-export type InsertImmunisationProgramResponse = InsertImmunisationProgramError | ProgramNode;
-
 export type InsertInboundReturnError = {
   __typename: 'InsertInboundReturnError';
   error: InsertInboundReturnErrorInterface;
@@ -2410,7 +2254,7 @@ export type InsertInboundShipmentLineInput = {
   itemId: Scalars['String']['input'];
   location?: InputMaybe<NullableStringUpdate>;
   numberOfPacks: Scalars['Float']['input'];
-  packSize: Scalars['Float']['input'];
+  packSize: Scalars['Int']['input'];
   sellPricePerPack: Scalars['Float']['input'];
   taxPercentage?: InputMaybe<Scalars['Float']['input']>;
   totalBeforeTax?: InputMaybe<Scalars['Float']['input']>;
@@ -2606,7 +2450,7 @@ export type InsertPackVariantInput = {
   id: Scalars['String']['input'];
   itemId: Scalars['String']['input'];
   longName: Scalars['String']['input'];
-  packSize: Scalars['Float']['input'];
+  packSize: Scalars['Int']['input'];
   shortName: Scalars['String']['input'];
 };
 
@@ -2740,7 +2584,7 @@ export type InsertRepackErrorInterface = {
 
 export type InsertRepackInput = {
   newLocationId?: InputMaybe<Scalars['String']['input']>;
-  newPackSize: Scalars['Float']['input'];
+  newPackSize: Scalars['Int']['input'];
   numberOfPacks: Scalars['Float']['input'];
   stockLineId: Scalars['String']['input'];
 };
@@ -2781,7 +2625,7 @@ export type InsertRequestRequisitionLineInput = {
   comment?: InputMaybe<Scalars['String']['input']>;
   id: Scalars['String']['input'];
   itemId: Scalars['String']['input'];
-  requestedQuantity?: InputMaybe<Scalars['Float']['input']>;
+  requestedQuantity?: InputMaybe<Scalars['Int']['input']>;
   requisitionId: Scalars['String']['input'];
 };
 
@@ -2813,7 +2657,7 @@ export type InsertStockLineInput = {
   location?: InputMaybe<NullableStringUpdate>;
   numberOfPacks: Scalars['Float']['input'];
   onHold: Scalars['Boolean']['input'];
-  packSize: Scalars['Float']['input'];
+  packSize: Scalars['Int']['input'];
   sellPricePerPack: Scalars['Float']['input'];
 };
 
@@ -2851,7 +2695,7 @@ export type InsertStocktakeLineInput = {
   itemId?: InputMaybe<Scalars['String']['input']>;
   location?: InputMaybe<NullableStringUpdate>;
   note?: InputMaybe<Scalars['String']['input']>;
-  packSize?: InputMaybe<Scalars['Float']['input']>;
+  packSize?: InputMaybe<Scalars['Int']['input']>;
   sellPricePerPack?: InputMaybe<Scalars['Float']['input']>;
   stockLineId?: InputMaybe<Scalars['String']['input']>;
   stocktakeId: Scalars['String']['input'];
@@ -2873,25 +2717,7 @@ export type InsertStocktakeResponseWithId = {
   response: InsertStocktakeResponse;
 };
 
-export type InsertVaccineCourseError = {
-  __typename: 'InsertVaccineCourseError';
-  error: InsertVaccineCourseErrorInterface;
-};
-
-export type InsertVaccineCourseErrorInterface = {
-  description: Scalars['String']['output'];
-};
-
-export type InsertVaccineCourseInput = {
-  demographicIndicatorId: Scalars['String']['input'];
-  id: Scalars['String']['input'];
-  name: Scalars['String']['input'];
-  programId: Scalars['String']['input'];
-};
-
-export type InsertVaccineCourseResponse = InsertVaccineCourseError | VaccineCourseNode;
-
-export type InternalError = InsertAssetCatalogueItemErrorInterface & InsertAssetErrorInterface & InsertAssetLogErrorInterface & InsertAssetLogReasonErrorInterface & InsertDemographicIndicatorErrorInterface & InsertDemographicProjectionErrorInterface & InsertLocationErrorInterface & RefreshTokenErrorInterface & UpdateAssetErrorInterface & UpdateDemographicIndicatorErrorInterface & UpdateDemographicProjectionErrorInterface & UpdateLocationErrorInterface & UpdateSensorErrorInterface & {
+export type InternalError = InsertAssetCatalogueItemErrorInterface & InsertAssetCatalogueItemPropertyErrorInterface & InsertAssetErrorInterface & InsertAssetLogErrorInterface & InsertAssetLogReasonErrorInterface & InsertLocationErrorInterface & RefreshTokenErrorInterface & UpdateAssetErrorInterface & UpdateLocationErrorInterface & UpdateSensorErrorInterface & {
   __typename: 'InternalError';
   description: Scalars['String']['output'];
   fullError: Scalars['String']['output'];
@@ -3035,7 +2861,7 @@ export type InvoiceLineNode = {
   locationName?: Maybe<Scalars['String']['output']>;
   note?: Maybe<Scalars['String']['output']>;
   numberOfPacks: Scalars['Float']['output'];
-  packSize: Scalars['Float']['output'];
+  packSize: Scalars['Int']['output'];
   pricing: PricingNode;
   returnReasonId?: Maybe<Scalars['String']['output']>;
   sellPricePerPack: Scalars['Float']['output'];
@@ -3222,7 +3048,7 @@ export type ItemNode = {
   availableStockOnHand: Scalars['Int']['output'];
   code: Scalars['String']['output'];
   ddd: Scalars['String']['output'];
-  defaultPackSize: Scalars['Float']['output'];
+  defaultPackSize: Scalars['Int']['output'];
   doses: Scalars['Int']['output'];
   id: Scalars['String']['output'];
   isVaccine: Scalars['Boolean']['output'];
@@ -3294,7 +3120,7 @@ export type ItemSortInput = {
 export type ItemStatsNode = {
   __typename: 'ItemStatsNode';
   availableMonthsOfStockOnHand?: Maybe<Scalars['Float']['output']>;
-  availableStockOnHand: Scalars['Float']['output'];
+  availableStockOnHand: Scalars['Int']['output'];
   averageMonthlyConsumption: Scalars['Float']['output'];
 };
 
@@ -4315,15 +4141,11 @@ export type NameFilterInput = {
   address2?: InputMaybe<StringFilterInput>;
   /** Filter by code */
   code?: InputMaybe<StringFilterInput>;
-  /** Search filter across name or code */
-  codeOrName?: InputMaybe<StringFilterInput>;
   country?: InputMaybe<StringFilterInput>;
   email?: InputMaybe<StringFilterInput>;
   id?: InputMaybe<EqualFilterStringInput>;
   /** Filter by customer property */
   isCustomer?: InputMaybe<Scalars['Boolean']['input']>;
-  /** Filter by donor property */
-  isDonor?: InputMaybe<Scalars['Boolean']['input']>;
   isPatient?: InputMaybe<Scalars['Boolean']['input']>;
   /** Is this name a store */
   isStore?: InputMaybe<Scalars['Boolean']['input']>;
@@ -4386,14 +4208,6 @@ export enum NameNodeType {
   Store = 'STORE'
 }
 
-export type NamePropertyConnector = {
-  __typename: 'NamePropertyConnector';
-  nodes: Array<PropertyNode>;
-  totalCount: Scalars['Int']['output'];
-};
-
-export type NamePropertyResponse = NamePropertyConnector;
-
 export enum NameSortFieldInput {
   Code = 'code',
   Name = 'name'
@@ -4418,7 +4232,7 @@ export type NameStoreJoinNode = {
 
 export type NamesResponse = NameConnector;
 
-export type NoPermissionForThisStore = InsertAssetErrorInterface & InsertDemographicIndicatorErrorInterface & InsertDemographicProjectionErrorInterface & UpdateDemographicIndicatorErrorInterface & UpdateDemographicProjectionErrorInterface & {
+export type NoPermissionForThisStore = InsertAssetErrorInterface & {
   __typename: 'NoPermissionForThisStore';
   description: Scalars['String']['output'];
 };
@@ -4564,7 +4378,7 @@ export type OutboundReturnLineNode = {
   itemName: Scalars['String']['output'];
   note?: Maybe<Scalars['String']['output']>;
   numberOfPacksToReturn: Scalars['Float']['output'];
-  packSize: Scalars['Float']['output'];
+  packSize: Scalars['Int']['output'];
   reasonId?: Maybe<Scalars['String']['output']>;
   stockLineId: Scalars['String']['output'];
 };
@@ -4833,12 +4647,6 @@ export type PrintReportSortInput = {
   key: Scalars['String']['input'];
 };
 
-export type ProgramConnector = {
-  __typename: 'ProgramConnector';
-  nodes: Array<ProgramNode>;
-  totalCount: Scalars['Int']['output'];
-};
-
 export type ProgramEnrolmentConnector = {
   __typename: 'ProgramEnrolmentConnector';
   nodes: Array<ProgramEnrolmentNode>;
@@ -4965,17 +4773,9 @@ export type ProgramEventSortInput = {
   key: ProgramEventSortFieldInput;
 };
 
-export type ProgramFilterInput = {
-  contextId?: InputMaybe<EqualFilterStringInput>;
-  id?: InputMaybe<EqualFilterStringInput>;
-  isImmunisation?: InputMaybe<Scalars['Boolean']['input']>;
-  name?: InputMaybe<StringFilterInput>;
-};
-
 export type ProgramNode = {
   __typename: 'ProgramNode';
   id: Scalars['String']['output'];
-  isImmunisation: Scalars['Boolean']['output'];
   name: Scalars['String']['output'];
 };
 
@@ -4995,31 +4795,6 @@ export type ProgramRequisitionSettingNode = {
   suppliers: Array<NameNode>;
 };
 
-export enum ProgramSortFieldInput {
-  Name = 'name'
-}
-
-export type ProgramSortInput = {
-  /**
-   * 	Sort query result is sorted descending or ascending (if not provided the default is
-   * ascending)
-   */
-  desc?: InputMaybe<Scalars['Boolean']['input']>;
-  /** Sort query result by `key` */
-  key: ProgramSortFieldInput;
-};
-
-export type ProgramsResponse = ProgramConnector;
-
-export type PropertyNode = {
-  __typename: 'PropertyNode';
-  allowedValues?: Maybe<Scalars['String']['output']>;
-  id: Scalars['String']['output'];
-  key: Scalars['String']['output'];
-  name: Scalars['String']['output'];
-  valueType: PropertyNodeValueType;
-};
-
 export enum PropertyNodeValueType {
   Boolean = 'BOOLEAN',
   Float = 'FLOAT',
@@ -5039,13 +4814,13 @@ export type Queries = {
   apiVersion: Scalars['String']['output'];
   assetCatalogueItem: AssetCatalogueItemResponse;
   assetCatalogueItems: AssetCatalogueItemsResponse;
+  assetCatalogueProperties: AssetCataloguePropertyResponse;
   assetCategories: AssetCategoriesResponse;
   assetCategory: AssetCategoryResponse;
   assetClass: AssetClassResponse;
   assetClasses: AssetClassesResponse;
   assetLogReasons: AssetLogReasonsResponse;
   assetLogs: AssetLogsResponse;
-  assetProperties: AssetPropertiesResponse;
   assetType: AssetTypeResponse;
   assetTypes: AssetTypesResponse;
   /** Query omSupply "assets" entries */
@@ -5061,8 +4836,6 @@ export type Queries = {
   contactTraces: ContactTraceResponse;
   currencies: CurrenciesResponse;
   databaseSettings: DatabaseSettingsNode;
-  demographicIndicators: DemographicIndicatorsResponse;
-  demographicProjections: DemographicProjectionsResponse;
   displaySettings: DisplaySettingsNode;
   document?: Maybe<DocumentNode>;
   documentHistory: DocumentHistoryResponse;
@@ -5110,7 +4883,6 @@ export type Queries = {
   /** Query omSupply "master_lists" entries */
   masterLists: MasterListsResponse;
   me: UserResponse;
-  nameProperties: NamePropertyResponse;
   /** Query omSupply "name" entries */
   names: NamesResponse;
   numberOfRecordsInPushQueue: Scalars['Int']['output'];
@@ -5136,7 +4908,6 @@ export type Queries = {
   programEnrolments: ProgramEnrolmentResponse;
   programEvents: ProgramEventResponse;
   programRequisitionSettings: Array<ProgramRequisitionSettingNode>;
-  programs: ProgramsResponse;
   /**
    * Retrieves a new auth bearer and refresh token
    * The refresh token is returned as a cookie
@@ -5172,8 +4943,6 @@ export type Queries = {
   temperatureLogs: TemperatureLogsResponse;
   /** Query omSupply temperature notification entries */
   temperatureNotifications: TemperatureNotificationsResponse;
-  vaccineCourse: VaccineCourseResponse;
-  vaccineCourses: VaccineCoursesResponse;
 };
 
 
@@ -5205,6 +4974,11 @@ export type QueriesAssetCatalogueItemsArgs = {
 };
 
 
+export type QueriesAssetCataloguePropertiesArgs = {
+  filter?: InputMaybe<AssetCataloguePropertyFilterInput>;
+};
+
+
 export type QueriesAssetCategoriesArgs = {
   filter?: InputMaybe<AssetCategoryFilterInput>;
   page?: InputMaybe<PaginationInput>;
@@ -5245,11 +5019,6 @@ export type QueriesAssetLogsArgs = {
 };
 
 
-export type QueriesAssetPropertiesArgs = {
-  filter?: InputMaybe<AssetPropertyFilterInput>;
-};
-
-
 export type QueriesAssetTypeArgs = {
   id: Scalars['String']['input'];
 };
@@ -5310,20 +5079,6 @@ export type QueriesCurrenciesArgs = {
 };
 
 
-export type QueriesDemographicIndicatorsArgs = {
-  filter?: InputMaybe<DemographicIndicatorFilterInput>;
-  page?: InputMaybe<PaginationInput>;
-  sort?: InputMaybe<Array<DemographicIndicatorSortInput>>;
-};
-
-
-export type QueriesDemographicProjectionsArgs = {
-  filter?: InputMaybe<DemographicProjectionFilterInput>;
-  page?: InputMaybe<PaginationInput>;
-  sort?: InputMaybe<Array<DemographicProjectionSortInput>>;
-};
-
-
 export type QueriesDisplaySettingsArgs = {
   input: DisplaySettingsHash;
 };
@@ -5573,14 +5328,6 @@ export type QueriesProgramRequisitionSettingsArgs = {
 };
 
 
-export type QueriesProgramsArgs = {
-  filter?: InputMaybe<ProgramFilterInput>;
-  page?: InputMaybe<PaginationInput>;
-  sort?: InputMaybe<ProgramSortInput>;
-  storeId: Scalars['String']['input'];
-};
-
-
 export type QueriesRepackArgs = {
   invoiceId: Scalars['String']['input'];
   storeId: Scalars['String']['input'];
@@ -5739,18 +5486,6 @@ export type QueriesTemperatureNotificationsArgs = {
   storeId: Scalars['String']['input'];
 };
 
-
-export type QueriesVaccineCourseArgs = {
-  id: Scalars['String']['input'];
-};
-
-
-export type QueriesVaccineCoursesArgs = {
-  filter?: InputMaybe<VaccineCourseFilterInput>;
-  page?: InputMaybe<PaginationInput>;
-  sort?: InputMaybe<Array<VaccineCourseSortInput>>;
-};
-
 export type RawDocumentNode = {
   __typename: 'RawDocumentNode';
   author: Scalars['String']['output'];
@@ -5762,7 +5497,7 @@ export type RawDocumentNode = {
   type: Scalars['String']['output'];
 };
 
-export type RecordAlreadyExist = InsertAssetCatalogueItemErrorInterface & InsertAssetErrorInterface & InsertAssetLogErrorInterface & InsertAssetLogReasonErrorInterface & InsertDemographicIndicatorErrorInterface & InsertDemographicProjectionErrorInterface & InsertImmunisationProgramErrorInterface & InsertLocationErrorInterface & InsertVaccineCourseErrorInterface & UpdateDemographicIndicatorErrorInterface & UpdateDemographicProjectionErrorInterface & {
+export type RecordAlreadyExist = InsertAssetCatalogueItemErrorInterface & InsertAssetCatalogueItemPropertyErrorInterface & InsertAssetErrorInterface & InsertAssetLogErrorInterface & InsertAssetLogReasonErrorInterface & InsertLocationErrorInterface & {
   __typename: 'RecordAlreadyExist';
   description: Scalars['String']['output'];
 };
@@ -5821,7 +5556,7 @@ export type RepackStockLineNode = {
   __typename: 'RepackStockLineNode';
   location?: Maybe<LocationNode>;
   numberOfPacks: Scalars['Float']['output'];
-  packSize: Scalars['Float']['output'];
+  packSize: Scalars['Int']['output'];
   stockLine?: Maybe<StockLineNode>;
 };
 
@@ -5886,10 +5621,10 @@ export type RequestRequisitionCounts = {
 
 export type RequestStoreStatsNode = {
   __typename: 'RequestStoreStatsNode';
-  averageMonthlyConsumption: Scalars['Float']['output'];
+  averageMonthlyConsumption: Scalars['Int']['output'];
   maxMonthsOfStock: Scalars['Float']['output'];
-  stockOnHand: Scalars['Float']['output'];
-  suggestedQuantity: Scalars['Float']['output'];
+  stockOnHand: Scalars['Int']['output'];
+  suggestedQuantity: Scalars['Int']['output'];
 };
 
 export type RequisitionConnector = {
@@ -5944,7 +5679,7 @@ export type RequisitionLineNode = {
   /** Quantity already issued in outbound shipments */
   alreadyIssued: Scalars['Float']['output'];
   approvalComment?: Maybe<Scalars['String']['output']>;
-  approvedQuantity: Scalars['Float']['output'];
+  approvedQuantity: Scalars['Int']['output'];
   comment?: Maybe<Scalars['String']['output']>;
   id: Scalars['String']['output'];
   /** InboundShipment lines linked to requisitions line */
@@ -5967,14 +5702,14 @@ export type RequisitionLineNode = {
    */
   remainingQuantityToSupply: Scalars['Float']['output'];
   /** Quantity requested */
-  requestedQuantity: Scalars['Float']['output'];
+  requestedQuantity: Scalars['Int']['output'];
   /**
    * Calculated quantity
    * When months_of_stock < requisition.min_months_of_stock, calculated = average_monthly_consumption * requisition.max_months_of_stock - months_of_stock
    */
-  suggestedQuantity: Scalars['Float']['output'];
+  suggestedQuantity: Scalars['Int']['output'];
   /** Quantity to be supplied in the next shipment, only used in response requisition */
-  supplyQuantity: Scalars['Float']['output'];
+  supplyQuantity: Scalars['Int']['output'];
 };
 
 
@@ -6117,10 +5852,10 @@ export type ResponseRequisitionStatsNode = {
 export type ResponseStoreStatsNode = {
   __typename: 'ResponseStoreStatsNode';
   incomingStock: Scalars['Int']['output'];
-  otherRequestedQuantity: Scalars['Float']['output'];
-  requestedQuantity: Scalars['Float']['output'];
+  otherRequestedQuantity: Scalars['Int']['output'];
+  requestedQuantity: Scalars['Int']['output'];
   stockOnHand: Scalars['Float']['output'];
-  stockOnOrder: Scalars['Float']['output'];
+  stockOnOrder: Scalars['Int']['output'];
 };
 
 export type ReturnReasonConnector = {
@@ -6297,7 +6032,7 @@ export type StockLineNode = {
   locationName?: Maybe<Scalars['String']['output']>;
   note?: Maybe<Scalars['String']['output']>;
   onHold: Scalars['Boolean']['output'];
-  packSize: Scalars['Float']['output'];
+  packSize: Scalars['Int']['output'];
   sellPricePerPack: Scalars['Float']['output'];
   storeId: Scalars['String']['output'];
   supplierName?: Maybe<Scalars['String']['output']>;
@@ -6393,7 +6128,7 @@ export type StocktakeLineNode = {
   itemName: Scalars['String']['output'];
   location?: Maybe<LocationNode>;
   note?: Maybe<Scalars['String']['output']>;
-  packSize?: Maybe<Scalars['Float']['output']>;
+  packSize?: Maybe<Scalars['Int']['output']>;
   sellPricePerPack?: Maybe<Scalars['Float']['output']>;
   snapshotNumberOfPacks: Scalars['Float']['output'];
   stockLine?: Maybe<StockLineNode>;
@@ -6596,8 +6331,7 @@ export enum SyncErrorVariant {
   SiteHasNoStore = 'SITE_HAS_NO_STORE',
   SiteNameNotFound = 'SITE_NAME_NOT_FOUND',
   SiteUuidIsBeingChanged = 'SITE_UUID_IS_BEING_CHANGED',
-  Unknown = 'UNKNOWN',
-  V6ApiVersionIncompatible = 'V6_API_VERSION_INCOMPATIBLE'
+  Unknown = 'UNKNOWN'
 }
 
 export type SyncFileReferenceConnector = {
@@ -6806,7 +6540,7 @@ export enum UniqueValueKey {
   Serial = 'serial'
 }
 
-export type UniqueValueViolation = InsertAssetCatalogueItemErrorInterface & InsertAssetErrorInterface & InsertAssetLogErrorInterface & InsertAssetLogReasonErrorInterface & InsertDemographicIndicatorErrorInterface & InsertDemographicProjectionErrorInterface & InsertLocationErrorInterface & UpdateAssetErrorInterface & UpdateDemographicIndicatorErrorInterface & UpdateDemographicProjectionErrorInterface & UpdateLocationErrorInterface & UpdateSensorErrorInterface & {
+export type UniqueValueViolation = InsertAssetCatalogueItemErrorInterface & InsertAssetErrorInterface & InsertAssetLogErrorInterface & InsertAssetLogReasonErrorInterface & InsertLocationErrorInterface & UpdateAssetErrorInterface & UpdateLocationErrorInterface & UpdateSensorErrorInterface & {
   __typename: 'UniqueValueViolation';
   description: Scalars['String']['output'];
   field: UniqueValueKey;
@@ -6824,18 +6558,13 @@ export type UpdateAssetErrorInterface = {
 export type UpdateAssetInput = {
   assetNumber?: InputMaybe<Scalars['String']['input']>;
   catalogueItemId?: InputMaybe<NullableStringUpdate>;
-  donorNameId?: InputMaybe<NullableStringUpdate>;
   id: Scalars['String']['input'];
   installationDate?: InputMaybe<NullableDateUpdate>;
   locationIds?: InputMaybe<Array<Scalars['String']['input']>>;
-  needsReplacement?: InputMaybe<Scalars['Boolean']['input']>;
   notes?: InputMaybe<Scalars['String']['input']>;
-  properties?: InputMaybe<Scalars['String']['input']>;
   replacementDate?: InputMaybe<NullableDateUpdate>;
   serialNumber?: InputMaybe<NullableStringUpdate>;
   storeId?: InputMaybe<NullableStringUpdate>;
-  warrantyEnd?: InputMaybe<NullableDateUpdate>;
-  warrantyStart?: InputMaybe<NullableDateUpdate>;
 };
 
 export type UpdateAssetResponse = AssetNode | UpdateAssetError;
@@ -6855,51 +6584,6 @@ export type UpdateContactTraceInput = {
 
 export type UpdateContactTraceResponse = ContactTraceNode;
 
-export type UpdateDemographicIndicatorError = {
-  __typename: 'UpdateDemographicIndicatorError';
-  error: UpdateDemographicIndicatorErrorInterface;
-};
-
-export type UpdateDemographicIndicatorErrorInterface = {
-  description: Scalars['String']['output'];
-};
-
-export type UpdateDemographicIndicatorInput = {
-  basePopulation?: InputMaybe<Scalars['Int']['input']>;
-  baseYear?: InputMaybe<Scalars['Int']['input']>;
-  id: Scalars['String']['input'];
-  name?: InputMaybe<Scalars['String']['input']>;
-  populationPercentage?: InputMaybe<Scalars['Float']['input']>;
-  year1Projection?: InputMaybe<Scalars['Int']['input']>;
-  year2Projection?: InputMaybe<Scalars['Int']['input']>;
-  year3Projection?: InputMaybe<Scalars['Int']['input']>;
-  year4Projection?: InputMaybe<Scalars['Int']['input']>;
-  year5Projection?: InputMaybe<Scalars['Int']['input']>;
-};
-
-export type UpdateDemographicIndicatorResponse = DemographicIndicatorNode | UpdateDemographicIndicatorError;
-
-export type UpdateDemographicProjectionError = {
-  __typename: 'UpdateDemographicProjectionError';
-  error: UpdateDemographicProjectionErrorInterface;
-};
-
-export type UpdateDemographicProjectionErrorInterface = {
-  description: Scalars['String']['output'];
-};
-
-export type UpdateDemographicProjectionInput = {
-  baseYear?: InputMaybe<Scalars['Int']['input']>;
-  id: Scalars['String']['input'];
-  year1?: InputMaybe<Scalars['Int']['input']>;
-  year2?: InputMaybe<Scalars['Int']['input']>;
-  year3?: InputMaybe<Scalars['Int']['input']>;
-  year4?: InputMaybe<Scalars['Int']['input']>;
-  year5?: InputMaybe<Scalars['Int']['input']>;
-};
-
-export type UpdateDemographicProjectionResponse = DemographicProjectionNode | UpdateDemographicProjectionError;
-
 export type UpdateDisplaySettingsError = {
   __typename: 'UpdateDisplaySettingsError';
   error: Scalars['String']['output'];
@@ -7008,7 +6692,7 @@ export type UpdateInboundShipmentLineInput = {
   itemId?: InputMaybe<Scalars['String']['input']>;
   location?: InputMaybe<NullableStringUpdate>;
   numberOfPacks?: InputMaybe<Scalars['Float']['input']>;
-  packSize?: InputMaybe<Scalars['Float']['input']>;
+  packSize?: InputMaybe<Scalars['Int']['input']>;
   sellPricePerPack?: InputMaybe<Scalars['Float']['input']>;
   tax?: InputMaybe<TaxInput>;
   totalBeforeTax?: InputMaybe<Scalars['Float']['input']>;
@@ -7226,7 +6910,7 @@ export type UpdateOutboundShipmentUnallocatedLineErrorInterface = {
 
 export type UpdateOutboundShipmentUnallocatedLineInput = {
   id: Scalars['String']['input'];
-  quantity: Scalars['Float']['input'];
+  quantity: Scalars['Int']['input'];
 };
 
 export type UpdateOutboundShipmentUnallocatedLineResponse = InvoiceLineNode | UpdateOutboundShipmentUnallocatedLineError;
@@ -7396,7 +7080,7 @@ export type UpdateRequestRequisitionLineErrorInterface = {
 export type UpdateRequestRequisitionLineInput = {
   comment?: InputMaybe<Scalars['String']['input']>;
   id: Scalars['String']['input'];
-  requestedQuantity?: InputMaybe<Scalars['Float']['input']>;
+  requestedQuantity?: InputMaybe<Scalars['Int']['input']>;
 };
 
 export type UpdateRequestRequisitionLineResponse = RequisitionLineNode | UpdateRequestRequisitionLineError;
@@ -7448,7 +7132,7 @@ export type UpdateResponseRequisitionLineErrorInterface = {
 export type UpdateResponseRequisitionLineInput = {
   comment?: InputMaybe<Scalars['String']['input']>;
   id: Scalars['String']['input'];
-  supplyQuantity?: InputMaybe<Scalars['Float']['input']>;
+  supplyQuantity?: InputMaybe<Scalars['Int']['input']>;
 };
 
 export type UpdateResponseRequisitionLineResponse = RequisitionLineNode | UpdateResponseRequisitionLineError;
@@ -7543,7 +7227,7 @@ export type UpdateStocktakeLineInput = {
   inventoryAdjustmentReasonId?: InputMaybe<Scalars['String']['input']>;
   location?: InputMaybe<NullableStringUpdate>;
   note?: InputMaybe<Scalars['String']['input']>;
-  packSize?: InputMaybe<Scalars['Float']['input']>;
+  packSize?: InputMaybe<Scalars['Int']['input']>;
   sellPricePerPack?: InputMaybe<Scalars['Float']['input']>;
   snapshotNumberOfPacks?: InputMaybe<Scalars['Float']['input']>;
 };
@@ -7646,7 +7330,6 @@ export enum UserPermission {
   AssetQuery = 'ASSET_QUERY',
   ColdChainApi = 'COLD_CHAIN_API',
   CreateRepack = 'CREATE_REPACK',
-  DemographicQuery = 'DEMOGRAPHIC_QUERY',
   DocumentMutate = 'DOCUMENT_MUTATE',
   DocumentQuery = 'DOCUMENT_QUERY',
   InboundReturnMutate = 'INBOUND_RETURN_MUTATE',
@@ -7679,8 +7362,7 @@ export enum UserPermission {
   StockLineQuery = 'STOCK_LINE_QUERY',
   StoreAccess = 'STORE_ACCESS',
   TemperatureBreachQuery = 'TEMPERATURE_BREACH_QUERY',
-  TemperatureLogQuery = 'TEMPERATURE_LOG_QUERY',
-  VaccineCourseMutate = 'VACCINE_COURSE_MUTATE'
+  TemperatureLogQuery = 'TEMPERATURE_LOG_QUERY'
 }
 
 export type UserResponse = UserNode;
@@ -7715,57 +7397,13 @@ export type UserStorePermissionNode = {
   storeId: Scalars['String']['output'];
 };
 
-export type VaccineCourseConnector = {
-  __typename: 'VaccineCourseConnector';
-  nodes: Array<VaccineCourseNode>;
-  totalCount: Scalars['Int']['output'];
-};
-
-export type VaccineCourseFilterInput = {
-  id?: InputMaybe<EqualFilterStringInput>;
-  name?: InputMaybe<StringFilterInput>;
-  programId?: InputMaybe<EqualFilterStringInput>;
-};
-
-export type VaccineCourseMutations = {
-  __typename: 'VaccineCourseMutations';
-  insertVaccineCourse: InsertVaccineCourseResponse;
-};
-
-
-export type VaccineCourseMutationsInsertVaccineCourseArgs = {
-  input: InsertVaccineCourseInput;
-  storeId: Scalars['String']['input'];
-};
-
-export type VaccineCourseNode = {
-  __typename: 'VaccineCourseNode';
-  demographicIndicatorId: Scalars['String']['output'];
-  id: Scalars['String']['output'];
-  name: Scalars['String']['output'];
-  programId: Scalars['String']['output'];
-};
-
-export type VaccineCourseResponse = NodeError | VaccineCourseNode;
-
-export enum VaccineCourseSortFieldInput {
-  Name = 'name'
-}
-
-export type VaccineCourseSortInput = {
-  desc?: InputMaybe<Scalars['Boolean']['input']>;
-  key: VaccineCourseSortFieldInput;
-};
-
-export type VaccineCoursesResponse = VaccineCourseConnector;
-
 export type VariantNode = {
   __typename: 'VariantNode';
   id: Scalars['String']['output'];
   isActive: Scalars['Boolean']['output'];
   itemId: Scalars['String']['output'];
   longName: Scalars['String']['output'];
-  packSize: Scalars['Float']['output'];
+  packSize: Scalars['Int']['output'];
   shortName: Scalars['String']['output'];
 };
 
diff --git a/client/packages/common/src/ui/components/inputs/PropertyInput/PropertyInput.tsx b/client/packages/common/src/ui/components/inputs/PropertyInput/PropertyInput.tsx
deleted file mode 100644
index be05cf30d..000000000
--- a/client/packages/common/src/ui/components/inputs/PropertyInput/PropertyInput.tsx
+++ /dev/null
@@ -1,85 +0,0 @@
-import React, { FC } from 'react';
-import {
-  Autocomplete,
-  BasicTextInput,
-  Checkbox,
-  NumericTextInput,
-} from '@common/components';
-import { PropertyNodeValueType } from '@common/types';
-
-type PropertyValue = string | number | boolean | undefined;
-type PropertyInput = {
-  valueType: PropertyNodeValueType;
-  allowedValues?: string[];
-  value: PropertyValue | null;
-  onChange: (value: PropertyValue) => void;
-  disabled?: boolean;
-};
-
-const mapValueToOption = (value: PropertyValue | null) =>
-  value === null
-    ? undefined
-    : {
-        label: value as string,
-        id: value as string,
-        value,
-      };
-
-export const PropertyInput: FC<PropertyInput> = ({
-  valueType,
-  allowedValues,
-  value,
-  onChange,
-  disabled,
-}) => {
-  switch (valueType) {
-    case PropertyNodeValueType.Boolean:
-      return (
-        <Checkbox
-          checked={value as boolean}
-          onChange={e => onChange(e.target.checked)}
-          disabled={disabled}
-        />
-      );
-    case PropertyNodeValueType.Integer:
-    case PropertyNodeValueType.Float:
-      const valueInt = value as number;
-      return (
-        <NumericTextInput
-          value={valueInt ?? 0}
-          fullWidth
-          allowNegative
-          onChange={n => {
-            onChange(n);
-          }}
-          decimalLimit={valueType === PropertyNodeValueType.Float ? 5 : 0}
-          disabled={disabled}
-        />
-      );
-    case PropertyNodeValueType.String:
-      if (allowedValues && allowedValues.length > 0) {
-        return (
-          <Autocomplete
-            options={allowedValues.map(mapValueToOption)}
-            value={mapValueToOption(value)}
-            onChange={(_, value) => {
-              onChange(value?.value);
-            }}
-            disabled={disabled}
-          />
-        );
-      }
-      return (
-        <BasicTextInput
-          value={value}
-          fullWidth
-          onChange={e => {
-            onChange(e.target.value);
-          }}
-          disabled={disabled}
-        />
-      );
-  }
-
-  return <div>{value}</div>;
-};
diff --git a/client/packages/common/src/ui/components/inputs/PropertyInput/index.ts b/client/packages/common/src/ui/components/inputs/PropertyInput/index.ts
deleted file mode 100644
index b4c08dc0b..000000000
--- a/client/packages/common/src/ui/components/inputs/PropertyInput/index.ts
+++ /dev/null
@@ -1 +0,0 @@
-export * from './PropertyInput';
diff --git a/client/packages/common/src/ui/components/inputs/TextInput/NumericTextInput.tsx b/client/packages/common/src/ui/components/inputs/TextInput/NumericTextInput.tsx
index 4bebb005d..ee36df9b0 100644
--- a/client/packages/common/src/ui/components/inputs/TextInput/NumericTextInput.tsx
+++ b/client/packages/common/src/ui/components/inputs/TextInput/NumericTextInput.tsx
@@ -1,171 +1,26 @@
-/**
- * PLEASE READ AND UNDERSTAND THE FOLLOWING BEFORE MAKING ANY CHANGES TO THIS
- * COMPONENT:
- *
- * A general component for numeric input. Provides a wrapper around
- * <BasicTextInput> to replicate (and extend) the functionality of using a text
- * input without the `type="number"` attribute. We want to avoid this attribute
- * as it causes numerous problems, as outlined here:
- * https://stackoverflow.blog/2022/12/26/why-the-number-input-is-the-worst-input/
- *
- * And is officially recommended to avoid by Material-UI:
- * https://mui.com/material-ui/react-text-field/#type-quot-number-quot
- *
- * A useful numeric input component must meet several requirements:
- * - don't allow invalid (i.e. letters) input
- * - allow *some* invalid input if it's typed as part of a valid number, (e.g. a
- *   single `-` symbol to start inputting negative numbers, or a decimal point
- *   without the following digits), but NOT send invalid values in its
- *   `onChange` event
- * - allow the user to clear their input, even in a controlled component (so the
- *   value will be `undefined`)
- * - handle minimum and maximum value restrictions
- * - handle maximum precision restrictions (e.g. integers only, or maximum of
- *   2d.p.)
- * - handle minimum precision restrictions (e.g. if 2 d.p required, then an
- *   input of "4" will be re-formatted as "4.00")
- * - handle the fact that different locales use different symbols for
- *   "negative", "decimal point" and "separators"
- * - format large numbers (e.g. 10000 => 10,000) for easier readability
- * - parse formatted input (e.g. 10,000) into a meaningful number value
- * - NOT format large numbers when explicitly specified
- * - allow user to increment/decrement numbers using their keyboard
- * - respond to external value changes and update its value and text
- *   representation accordingly
- *
- * To meet all these requirements results in fairly complex component, which
- * makes it somewhat fragile and hard to fully understand some of the logic. So
- * here is a basic overview of the internal logic it follows:
- *
- * - The `value` (the actual number) is managed in the calling component, and
- *   this component just updates it on (valid) onChange or onBlur events. But
- *   internally we store a `textValue` state, which is the string representation
- *   of the current `value`, and what is actually displayed in the UI. It's
- *   important to note that the `textValue` can be an *incomplete* entry (e.g.
- *   "1." or "-") whereas the actual `value` is only updated when there is a
- *   valid "complete" number that can be parsed from the user input.
- *
- * - Because the user can erase their input (`textValue = ''`), the number value
- *   is set to `undefined`. Any component that uses this component must be able
- *   to handle an `undefined` value as its `onChange` input.
- *
- * - on `onChange` events, the following internal processing is applied:
- *   - strip any "separator" characters (e.g. "," in English) - these are valid
- *     input, but not parseable as number (they'll be put back in onBlur).
- *   - strip negative or decimal characters if not allowed (based on min/max and
- *     precision props)
- *   - if what remains passes a comparison against a regex (for valid number
- *     input), we set this as the current `textValue`. If not, do nothing and
- *     return, which prevents any invalid characters from being input at all.
- *   - check if what remains is valid but "incomplete" (i.e a lone "-", decimal
- *     or trailing 0) and return if so -- this means the `textValue` correctly
- *     displays the user input, but not yet parsed as a number.
- *   - if "complete", attempt to parse the text as a number and update the
- *     `value` by calling the supplied `onChange` method (from props)
- *   - a `useEffect` hook responds to changes in `value`/`textValue` and, in the
- *     event they represent different numbers, updates the `textValue`
- *     accordingly -- this would mean that the `value` has been changed
- *     externally so the UI should be updated to reflect this.
- *
- * - onKeyDown events:
- *   - if the user typed an up or down arrow key, increment or decrement the
- *     number according to the `step` and `multiplier` props, and format
- *     accordingly (limited by min/max)
- *
- * - onBlur events:
- *   - when the user exits the input, it's possible that the `textValue` is
- *     "incomplete" (as detailed above), or should display a certain number of
- *     decimals, so we format the current value according to these rules, which
- *     ensures the UI will always display a correctly formatted version of the
- *     current number value.
- *   - this only happens if the user has made any changes to the starting value
- *     (checking against `isDirty`), which means it's possible for the user to
- *     click into a number input and exit it without triggering *any* `onChange`
- *     calls to the parent, which can prevent unnecessary actions being called
- *     that should only occur on *actual* changes.
- *
- * - the `format` methods:
- *   - there are two different versions of the `format` function used. The one
- *     called on `onChange` events doesn't add additional decimal padding (cos
- *     that would be annoying as you were typing), whereas the one called for
- *     `onBlur` and `onKeyDown` events *does* add any specified decimal padding.
- *
- * See prop definitions and inline comments for further detail.
- *
- * There is a test suite for this component in `NumericTextInput.test.tsx`.
- * Please ensure the tests all pass after any changes are made in here, and feel
- * free to add more test cases to account for additional use cases.
- *
- * There are also several example inputs in the storybook (TextInputs ->
- * Numeric), so please check these all behave as expected as well.
- */
-
 import React, { FC, useCallback, useEffect, useRef, useState } from 'react';
-import { BasicTextInput, BasicTextInputProps } from './BasicTextInput';
+import { StandardTextFieldProps } from '@common/components';
+import { BasicTextInput } from './BasicTextInput';
 import { NumUtils, RegexUtils } from '@common/utils';
 import { useFormatNumber, useCurrency } from '@common/intl';
 
 export interface NumericInputProps {
-  /**
-   * Width of the input in pixels or other CSS value. Default 75px
-   */
   width?: number | string;
-  /**
-   * Set an initial value for the input. Will be overridden by an externally
-   * initialised `value`
-   */
   defaultValue?: number;
-  /** If `true`, negative numbers can be entered. A shorthand for `min` that
-   * doesn't require a specific value. Default `false`
-   */
   allowNegative?: boolean;
-  /**
-   * Min value, default -999999999
-   */
   min?: number;
-  /**
-   * Min value, default 999999999
-   */
   max?: number;
-  /**
-   * Input will be restricted to this many decimal places. Default 0, so only
-   * integers are accepted unless explicitly specified
-   */
   decimalLimit?: number;
-  /**
-   * Input will be padded with 0s if user doesn't enter up to this many decimal
-   * places. Useful for things like currency values where "1" should be
-   * displayed as "1.00".
-   */
   decimalMin?: number;
-  /**
-   * When using the up/down arrow keys, the number will be
-   * incremented/decremented in units of this size. Default 1
-   */
   step?: number;
-  /**
-   * When using up/down arrow keys in conjunction with "Shift", the above `step`
-   * value is multiplied by this value. Default 10
-   */
   multiplier?: number;
-  /**
-   * The actual number value, passed down from calling component
-   */
   value?: number | undefined;
-  /**
-   * If `true`, no additional localised formatting will be applied. e.g. the
-   * input `1234` *won't* be displayed as `1,234`.
-   */
+  focusOnRender?: boolean;
   noFormatting?: boolean;
-
-  /**
-   * This component can also take any props used by `BasicTextInput`, or its
-   * child, Mui's `TextField` -- they will be passed through unmodified.
-   */
 }
 
 export type NumericTextInputProps = NumericInputProps &
-  Omit<BasicTextInputProps, 'onChange'> & {
+  Omit<StandardTextFieldProps, 'onChange'> & {
     onChange?: (value: number | undefined) => void;
   };
 
@@ -188,7 +43,6 @@ export const NumericTextInput: FC<NumericTextInputProps> = React.forwardRef(
       multiplier = 10,
       value,
       noFormatting = false,
-      fullWidth,
       ...props
     },
     ref
@@ -261,10 +115,7 @@ export const NumericTextInput: FC<NumericTextInputProps> = React.forwardRef(
       <BasicTextInput
         ref={ref}
         sx={{
-          '& .MuiInput-input': {
-            textAlign: 'right',
-            width: fullWidth ? undefined : `${width}px`,
-          },
+          '& .MuiInput-input': { textAlign: 'right', width: `${width}px` },
           ...sx,
         }}
         inputMode="numeric"
@@ -322,16 +173,12 @@ export const NumericTextInput: FC<NumericTextInputProps> = React.forwardRef(
         onBlur={() => {
           if (isDirty) {
             const parsed = parse(textValue ?? '');
-            const val = Number.isNaN(parsed) ? defaultValue : parsed;
-            // This onChange shouldn't be necessary here -- the component
-            // behaves as expected without it. However, removing it causes some
-            // of the tests fail, so 🤷‍♂️
+            const val = Number.isNaN(parsed) ? undefined : parsed;
             onChange(val);
             setTextValue(formatValue(val));
           }
         }}
         onFocus={e => e.target.select()}
-        fullWidth={fullWidth}
         {...props}
         value={textValue}
       />
diff --git a/client/packages/common/src/ui/components/inputs/index.ts b/client/packages/common/src/ui/components/inputs/index.ts
index 6c95a6c0c..5d1da2217 100644
--- a/client/packages/common/src/ui/components/inputs/index.ts
+++ b/client/packages/common/src/ui/components/inputs/index.ts
@@ -10,4 +10,3 @@ export * from './TimePickers';
 export * from './Switch';
 export * from './Filters';
 export * from './Upload';
-export * from './PropertyInput';
diff --git a/client/packages/common/src/ui/components/navigation/Breadcrumbs/Breadcrumbs.tsx b/client/packages/common/src/ui/components/navigation/Breadcrumbs/Breadcrumbs.tsx
index 5dceafd04..6532a3cd6 100644
--- a/client/packages/common/src/ui/components/navigation/Breadcrumbs/Breadcrumbs.tsx
+++ b/client/packages/common/src/ui/components/navigation/Breadcrumbs/Breadcrumbs.tsx
@@ -5,7 +5,6 @@ import { Link } from 'react-router-dom';
 import { useRegisterActions, useBreadcrumbs } from '@openmsupply-client/common';
 import { useTranslation } from '@common/intl';
 import { UrlPart } from '@common/hooks';
-import { AppRoute } from '@openmsupply-client/config';
 
 export const Breadcrumb = styled(Link)({
   color: 'inherit',
@@ -15,7 +14,7 @@ export const Breadcrumb = styled(Link)({
 });
 
 export const Breadcrumbs = ({
-  topLevelPaths = [AppRoute.Settings, AppRoute.Sync],
+  topLevelPaths = ['admin', 'sync'],
 }: {
   topLevelPaths?: string[];
 }) => {
diff --git a/client/packages/common/src/ui/components/navigation/Tabs/DetailTabs.tsx b/client/packages/common/src/ui/components/navigation/Tabs/DetailTabs.tsx
index 3307d4cdb..851ebf539 100644
--- a/client/packages/common/src/ui/components/navigation/Tabs/DetailTabs.tsx
+++ b/client/packages/common/src/ui/components/navigation/Tabs/DetailTabs.tsx
@@ -23,15 +23,11 @@ export type TabDefinition = {
 interface DetailTabsProps {
   tabs: TabDefinition[];
   requiresConfirmation?: (tab: string) => boolean;
-  overwriteQuery?: boolean;
-  restoreTabQuery?: boolean;
 }
 
 export const DetailTabs: FC<DetailTabsProps> = ({
   tabs,
   requiresConfirmation = () => false,
-  overwriteQuery = true,
-  restoreTabQuery = true,
 }) => {
   const isValidTab = useCallback(
     (tab?: string): tab is string =>
@@ -73,16 +69,14 @@ export const DetailTabs: FC<DetailTabsProps> = ({
 
   const onChange = (_: React.SyntheticEvent, tab: string) => {
     const tabConfirm = tabs.find(({ value }) => value === currentTab);
-
     // restore the query params for the tab
-    const query: UrlQueryObject = restoreTabQuery
-      ? tabQueryParams[tab] ?? getDefaultTabQueryParams(tab)
-      : { tab };
+    const query: UrlQueryObject =
+      tabQueryParams[tab] ?? getDefaultTabQueryParams(tab);
 
     if (!!tabConfirm?.confirmOnLeaving && requiresConfirmation(currentTab)) {
-      showConfirmation(() => updateQuery(query, overwriteQuery));
+      showConfirmation(() => updateQuery(query, true));
     } else {
-      updateQuery(query, overwriteQuery);
+      updateQuery(query, true);
     }
   };
 
diff --git a/client/packages/common/src/ui/icons/BarChart2.tsx b/client/packages/common/src/ui/icons/BarChart2.tsx
deleted file mode 100644
index 4c9ac2c2d..000000000
--- a/client/packages/common/src/ui/icons/BarChart2.tsx
+++ /dev/null
@@ -1,17 +0,0 @@
-import React from 'react';
-import SvgIcon, { SvgIconProps } from '@mui/material/SvgIcon';
-
-export const BarChart2Icon = (props: SvgIconProps): JSX.Element => {
-  return (
-    <SvgIcon
-      {...props}
-      viewBox="0 0 24 24"
-      stroke="currentColor"
-      stroke-width="2"
-    >
-      <line x1="18" y1="20" x2="18" y2="10"></line>
-      <line x1="12" y1="20" x2="12" y2="4"></line>
-      <line x1="6" y1="20" x2="6" y2="14"></line>
-    </SvgIcon>
-  );
-};
diff --git a/client/packages/common/src/ui/icons/Icon.stories.tsx b/client/packages/common/src/ui/icons/Icon.stories.tsx
index 67e0b7b7f..0054ea46b 100644
--- a/client/packages/common/src/ui/icons/Icon.stories.tsx
+++ b/client/packages/common/src/ui/icons/Icon.stories.tsx
@@ -1,5 +1,3 @@
-// Icons sourced from https://feathericons.com/
-
 import React, { ChangeEvent, useState } from 'react';
 import { ComponentStory, ComponentMeta } from '@storybook/react';
 
@@ -60,7 +58,6 @@ import { SearchIcon } from './Search';
 import { SettingsIcon } from './Settings';
 import { SettingsCircleIcon } from './SettingsCircle';
 import { SidebarIcon } from './Sidebar';
-import { SlidersIcon } from './Sliders';
 import { SnowflakeIcon } from './Snowflake';
 import { SortAscIcon } from './SortAsc';
 import { SortDescIcon } from './SortDesc';
@@ -70,7 +67,6 @@ import { SuppliersIcon } from './Suppliers';
 import { ThermometerIcon } from './Thermometer';
 import { ToolsIcon } from './Tools';
 import { TranslateIcon } from './Translate';
-import { BarChart2Icon } from './BarChart2';
 import { TruckIcon } from './Truck';
 import { UploadIcon } from './Upload';
 import { UserCircleIcon } from './UserCircle';
@@ -164,7 +160,6 @@ const Template: ComponentStory<React.FC<SvgIconProps>> = args => {
     { icon: <SettingsIcon {...args} />, name: 'Settings' },
     { icon: <SettingsCircleIcon {...args} />, name: 'SettingsCircle' },
     { icon: <SidebarIcon {...args} />, name: 'Sidebar' },
-    { icon: <SlidersIcon {...args} />, name: 'Sliders' },
     { icon: <SnowflakeIcon {...args} />, name: 'Snowflake' },
     { icon: <SortAscIcon {...args} />, name: 'SortAsc' },
     { icon: <SortDescIcon {...args} />, name: 'SortDesc' },
@@ -174,7 +169,6 @@ const Template: ComponentStory<React.FC<SvgIconProps>> = args => {
     { icon: <ThermometerIcon {...args} />, name: 'Thermometer' },
     { icon: <ToolsIcon {...args} />, name: 'Tools' },
     { icon: <TranslateIcon {...args} />, name: 'Translate' },
-    { icon: <BarChart2Icon {...args} />, name: 'BarChart2Icon' },
     { icon: <TruckIcon {...args} />, name: 'Truck' },
     { icon: <UploadIcon {...args} />, name: 'Upload' },
     { icon: <UserCircleIcon {...args} />, name: 'UserCircle' },
diff --git a/client/packages/common/src/ui/icons/Sliders.tsx b/client/packages/common/src/ui/icons/Sliders.tsx
deleted file mode 100644
index 2bfc4ba61..000000000
--- a/client/packages/common/src/ui/icons/Sliders.tsx
+++ /dev/null
@@ -1,26 +0,0 @@
-import React from 'react';
-import SvgIcon, { SvgIconProps } from '@mui/material/SvgIcon';
-
-export const SlidersIcon = (props: SvgIconProps): JSX.Element => {
-  return (
-    <SvgIcon
-      {...props}
-      viewBox="0 0 24 24"
-      stroke="currentColor"
-      strokeWidth="2"
-      strokeLinecap="round"
-      strokeLinejoin="round"
-      style={{ fill: 'none' }}
-    >
-      <line x1="4" y1="21" x2="4" y2="14" />
-      <line x1="4" y1="10" x2="4" y2="3" />
-      <line x1="12" y1="21" x2="12" y2="12" />
-      <line x1="12" y1="8" x2="12" y2="3" />
-      <line x1="20" y1="21" x2="20" y2="16" />
-      <line x1="20" y1="12" x2="20" y2="3" />
-      <line x1="1" y1="14" x2="7" y2="14" />
-      <line x1="9" y1="8" x2="15" y2="8" />
-      <line x1="17" y1="16" x2="23" y2="16" />
-    </SvgIcon>
-  );
-};
diff --git a/client/packages/common/src/ui/icons/index.ts b/client/packages/common/src/ui/icons/index.ts
index 49c1d6789..f285cdd2e 100644
--- a/client/packages/common/src/ui/icons/index.ts
+++ b/client/packages/common/src/ui/icons/index.ts
@@ -1,5 +1,3 @@
-// Icons sourced from https://feathericons.com/
-
 export { AlertIcon } from './Alert';
 export { ArrowLeftIcon } from './ArrowLeft';
 export { ArrowRightIcon } from './ArrowRight';
@@ -56,7 +54,6 @@ export { SearchIcon } from './Search';
 export { SettingsIcon } from './Settings';
 export { SettingsCircleIcon } from './SettingsCircle';
 export { SidebarIcon } from './Sidebar';
-export { SlidersIcon } from './Sliders';
 export { SnowflakeIcon } from './Snowflake';
 export { SortAscIcon } from './SortAsc';
 export { SortDescIcon } from './SortDesc';
@@ -66,7 +63,6 @@ export { SuppliersIcon } from './Suppliers';
 export { ThermometerIcon } from './Thermometer';
 export { ToolsIcon } from './Tools';
 export { TranslateIcon } from './Translate';
-export { BarChart2Icon } from './BarChart2';
 export { TruckIcon } from './Truck';
 export { UnhappyMan } from './UnhappyMan';
 export { UploadIcon } from './Upload';
diff --git a/client/packages/common/src/ui/layout/tables/columns/CheckboxSelectionColumn.tsx b/client/packages/common/src/ui/layout/tables/columns/CheckboxSelectionColumn.tsx
index aaf127c1e..f2f50fdc4 100644
--- a/client/packages/common/src/ui/layout/tables/columns/CheckboxSelectionColumn.tsx
+++ b/client/packages/common/src/ui/layout/tables/columns/CheckboxSelectionColumn.tsx
@@ -32,13 +32,12 @@ const useCheckbox = (rowId: string) => {
 };
 
 export const getCheckboxSelectionColumn = <
-  T extends RecordWithId,
+  T extends RecordWithId
 >(): ColumnDefinition<T> => ({
   key: GenericColumnKey.Selection,
   sortable: false,
   align: ColumnAlign.Right,
   width: 60,
-  label: 'table.select-unselect-all-columns',
   Header: () => {
     const { toggleAll, allSelected, someSelected } = useTableStore(state => {
       const allSelected =
diff --git a/client/packages/common/src/ui/layout/tables/components/Cells/CurrencyCell.tsx b/client/packages/common/src/ui/layout/tables/components/Cells/CurrencyCell.tsx
index 5ccd615d4..fe71cec9c 100644
--- a/client/packages/common/src/ui/layout/tables/components/Cells/CurrencyCell.tsx
+++ b/client/packages/common/src/ui/layout/tables/components/Cells/CurrencyCell.tsx
@@ -27,7 +27,7 @@ export const CurrencyCell = <T extends RecordWithId>({
   CellProps<T>
 > => {
   const { c } = useCurrency(currencyCode);
-  const price = Number(column.accessor({ rowData }) ?? 0);
+  const price = Number(column.accessor({ rowData })) ?? 0;
   // format prices > 1 with default precision
   const precision = price < 1 ? 10 : undefined;
   const fullText = c(price, precision).format();
diff --git a/client/packages/common/src/ui/layout/tables/components/Cells/CurrencyInputCell/CurrencyInputCell.tsx b/client/packages/common/src/ui/layout/tables/components/Cells/CurrencyInputCell/CurrencyInputCell.tsx
index 2ce1e5678..7333e391f 100644
--- a/client/packages/common/src/ui/layout/tables/components/Cells/CurrencyInputCell/CurrencyInputCell.tsx
+++ b/client/packages/common/src/ui/layout/tables/components/Cells/CurrencyInputCell/CurrencyInputCell.tsx
@@ -20,7 +20,7 @@ export const CurrencyInputCell = <T extends RecordWithId>({
       disabled={isDisabled}
       autoFocus={autoFocus}
       maxWidth={column.width}
-      defaultValue={String(column.accessor({ rowData }) ?? 0)}
+      defaultValue={String(column.accessor({ rowData }))}
       onChangeNumber={newValue =>
         updater({ ...rowData, [column.key]: newValue })
       }
diff --git a/client/packages/common/src/ui/layout/tables/components/Cells/NumberInputCell/NumberInputCell.tsx b/client/packages/common/src/ui/layout/tables/components/Cells/NumberInputCell/NumberInputCell.tsx
index 4f963e0fe..b9ddcee5c 100644
--- a/client/packages/common/src/ui/layout/tables/components/Cells/NumberInputCell/NumberInputCell.tsx
+++ b/client/packages/common/src/ui/layout/tables/components/Cells/NumberInputCell/NumberInputCell.tsx
@@ -14,9 +14,9 @@ export const NumberInputCell = <T extends RecordWithId>({
   rowIndex,
   columnIndex,
   isDisabled = false,
-  // Make the default min=0 as this is the typical implementation
+  // Make the default min=1 as this is the typical implementation
   // in Data Tables
-  min = 0,
+  min = 1,
   max,
   decimalLimit,
   step,
diff --git a/client/packages/common/src/ui/layout/tables/components/Cells/TooltipTextCell/TooltipTextCell.tsx b/client/packages/common/src/ui/layout/tables/components/Cells/TooltipTextCell/TooltipTextCell.tsx
index c827d9519..bb7f21b5d 100644
--- a/client/packages/common/src/ui/layout/tables/components/Cells/TooltipTextCell/TooltipTextCell.tsx
+++ b/client/packages/common/src/ui/layout/tables/components/Cells/TooltipTextCell/TooltipTextCell.tsx
@@ -1,6 +1,5 @@
 import React from 'react';
 import { CellProps, RecordWithId, Tooltip } from '@openmsupply-client/common';
-import { tooltipPlacement } from '../../tooltipPlacement';
 
 export const TooltipTextCell = <T extends RecordWithId>({
   column,
@@ -8,7 +7,7 @@ export const TooltipTextCell = <T extends RecordWithId>({
 }: CellProps<T>): React.ReactElement<CellProps<T>> => {
   const text = String(column.accessor({ rowData }) ?? '');
   return (
-    <Tooltip title={text} placement={tooltipPlacement(column.align)}>
+    <Tooltip title={text} placement="bottom-start">
       <div
         style={{
           overflow: 'hidden',
diff --git a/client/packages/common/src/ui/layout/tables/components/Header/Header.tsx b/client/packages/common/src/ui/layout/tables/components/Header/Header.tsx
index d99a9e3b0..ebac452e4 100644
--- a/client/packages/common/src/ui/layout/tables/components/Header/Header.tsx
+++ b/client/packages/common/src/ui/layout/tables/components/Header/Header.tsx
@@ -5,7 +5,6 @@ import { InfoOutlineIcon, SortDescIcon } from '@common/icons';
 import { RecordWithId } from '@common/types';
 import { useDebounceCallback } from '@common/hooks';
 import { useTranslation } from '@common/intl';
-import { tooltipPlacement } from '../tooltipPlacement';
 
 export const HeaderRow: FC<PropsWithChildren<{ dense?: boolean }>> = ({
   dense,
@@ -65,20 +64,19 @@ export const HeaderCell = <T extends RecordWithId>({
 
   const columnLabel =
     column.label === '' ? '' : t(column.label, column.labelProps);
-  const tooltip =
-    !description && !sortable && !columnLabel ? null : (
-      <>
-        {!!description && <div>{t(description)}</div>}
-        {sortable ? (
-          <div>
-            {t('label.click-to-sort')}
-            {` ${columnLabel}`}
-          </div>
-        ) : (
-          columnLabel
-        )}
-      </>
-    );
+  const tooltip = (
+    <>
+      {!!description && <div>{t(description)}</div>}
+      {sortable ? (
+        <div>
+          {t('label.click-to-sort')}
+          {` ${columnLabel}`}
+        </div>
+      ) : (
+        columnLabel
+      )}
+    </>
+  );
 
   const infoIcon = !!description ? (
     <InfoOutlineIcon
@@ -141,7 +139,7 @@ export const HeaderCell = <T extends RecordWithId>({
     >
       <Tooltip
         title={tooltip}
-        placement={tooltipPlacement(align)}
+        placement="bottom"
         style={{ whiteSpace: 'pre-line' }}
       >
         {HeaderLabel}
diff --git a/client/packages/common/src/ui/layout/tables/components/tooltipPlacement.ts b/client/packages/common/src/ui/layout/tables/components/tooltipPlacement.ts
deleted file mode 100644
index ac0e34acd..000000000
--- a/client/packages/common/src/ui/layout/tables/components/tooltipPlacement.ts
+++ /dev/null
@@ -1,21 +0,0 @@
-import { noOtherVariants } from '@common/utils';
-import { ColumnAlign } from '../columns';
-
-/**
- * Returns tooltip placement depending on the column alignment, e.g. to have the tooltip on the
- * correct side of the column.
- */
-export const tooltipPlacement = (
-  align: ColumnAlign
-): 'bottom-end' | 'bottom-start' | 'bottom' => {
-  switch (align) {
-    case ColumnAlign.Left:
-      return 'bottom-start';
-    case ColumnAlign.Right:
-      return 'bottom-end';
-    case ColumnAlign.Center:
-      return 'bottom';
-    default:
-      return noOtherVariants(align);
-  }
-};
diff --git a/client/packages/common/src/ui/layout/tables/utils/ColumnDefinitionSetBuilder.ts b/client/packages/common/src/ui/layout/tables/utils/ColumnDefinitionSetBuilder.ts
index fd7730eb7..9175859fd 100644
--- a/client/packages/common/src/ui/layout/tables/utils/ColumnDefinitionSetBuilder.ts
+++ b/client/packages/common/src/ui/layout/tables/utils/ColumnDefinitionSetBuilder.ts
@@ -185,7 +185,7 @@ const getColumnLookup = <T extends RecordWithId>(): Record<
   code: {
     label: 'label.code',
     key: 'code',
-    width: 100,
+    width: 20,
     Cell: TooltipTextCell,
   },
   packSize: {
diff --git a/client/packages/common/src/utils/arrays/ArrayUtils.ts b/client/packages/common/src/utils/arrays/ArrayUtils.ts
index fb005c065..24c93d7c7 100644
--- a/client/packages/common/src/utils/arrays/ArrayUtils.ts
+++ b/client/packages/common/src/utils/arrays/ArrayUtils.ts
@@ -54,9 +54,4 @@ export const ArrayUtils = {
   uniqBy,
   keyBy,
   flatMap,
-  toObject: <T extends RecordWithId>(arr: T[]) => {
-    const obj: Record<string, T> = {};
-    arr.forEach(t => (obj[t.id] = { ...t }));
-    return obj;
-  },
 };
diff --git a/client/packages/common/src/utils/environment/EnvUtils.ts b/client/packages/common/src/utils/environment/EnvUtils.ts
index 64958a9dd..0e1e8a142 100644
--- a/client/packages/common/src/utils/environment/EnvUtils.ts
+++ b/client/packages/common/src/utils/environment/EnvUtils.ts
@@ -1,6 +1,5 @@
 import { LocaleKey } from '@common/intl';
 import { PrintFormat } from '@common/types';
-import { AppRoute } from '@openmsupply-client/config';
 
 export enum Platform {
   Android,
@@ -16,78 +15,65 @@ interface RouteMapping {
 const mapRoute = (route: string): RouteMapping => {
   const inRoute = (sub: string) => new RegExp(`/${sub}/|/${sub}\$`).test(route);
   switch (true) {
-    case inRoute(AppRoute.Dashboard):
-      return { title: 'dashboard', docs: '/getting_started/dashboard/' };
-    case inRoute(AppRoute.OutboundShipment):
+    case inRoute('dashboard'):
+      return { title: 'dashboard', docs: '/introduction/dashboard/' };
+    case inRoute('outbound-shipment'):
       return {
         title: 'outbound-shipments',
         docs: '/distribution/outbound-shipments/',
       };
-    case inRoute(AppRoute.CustomerRequisition):
+    case inRoute('customer-requisition'):
       return {
         title: 'customer-requisition',
         docs: '/distribution/requisitions/',
       };
-    case inRoute(AppRoute.Customer):
+    case inRoute('customers'):
       return { title: 'customers', docs: '/distribution/customers/' };
-    case inRoute(AppRoute.InboundShipment):
+    case inRoute('inbound-shipment'):
       return {
         title: 'inbound-shipments',
         docs: '/replenishment/inbound-shipments/',
       };
-    case inRoute(AppRoute.OutboundReturn):
+    case inRoute('outbound-return'):
       return {
         title: 'outbound-return',
         docs: '/replenishment/outbound-returns/',
       };
-    case inRoute(AppRoute.InboundReturn):
+    case inRoute('inbound-return'):
       return {
         title: 'inbound-return',
         docs: '/distribution/inbound-returns/',
       };
-    case inRoute(AppRoute.InternalOrder):
+    case inRoute('internal-order'):
       return {
         title: 'internal-order',
         docs: '/replenishment/internal-orders/',
       };
-    case inRoute(AppRoute.Suppliers):
+    case inRoute('suppliers'):
       return { title: 'suppliers', docs: '/replenishment/suppliers/' };
-    case inRoute(AppRoute.Assets):
-      return { title: 'assets', docs: '/catalogue/assets/' };
-    case inRoute(AppRoute.Items):
+    case inRoute('items'):
       return { title: 'items', docs: '/catalogue/items/' };
-    case inRoute(AppRoute.MasterLists):
+    case inRoute('master-lists'):
       return { title: 'master-lists', docs: '/catalogue/master-list/' };
-    case inRoute(AppRoute.Locations):
+    case inRoute('locations'):
       return { title: 'locations', docs: '/inventory/locations/' };
-    case inRoute(AppRoute.Stock):
+    case inRoute('stock'):
       return { title: 'stock', docs: '/inventory/stock-view/' };
-    case inRoute(AppRoute.Stocktakes):
+    case inRoute('stocktakes'):
       return { title: 'stocktakes', docs: '/inventory/stock-takes/' };
-    case inRoute(AppRoute.Sync):
+    case inRoute('sync'):
       return { title: 'sync', docs: '/sync/synchronisation/' };
-    case inRoute(AppRoute.Settings):
-      return { title: 'settings', docs: '/administration/' };
-    case inRoute(AppRoute.Patients):
+    case inRoute('admin'):
+      return { title: 'admin', docs: '/administration/' };
+    case inRoute('patients'):
       return { title: 'patients', docs: '/dispensary/patients/' };
-    case inRoute(AppRoute.Prescription):
+    case inRoute('prescription'):
       return { title: 'prescription', docs: '/dispensary/prescriptions/' };
-    case inRoute(AppRoute.Encounter):
+    case inRoute('encounter'):
       return {
         title: 'encounter',
         docs: '/programs/program-module/#encounter',
       };
-    case inRoute(AppRoute.Monitoring):
-      return {
-        title: 'monitoring',
-        docs: '/coldchain/monitoring/',
-      };
-    case inRoute(AppRoute.Sensors):
-      return { title: 'sensors', docs: '/coldchain/sensors/' };
-    case inRoute(AppRoute.Equipment):
-      return { title: 'equipment', docs: '/coldchain/equipment/' };
-    case inRoute(AppRoute.Facilities):
-      return { title: 'facilities', docs: '/manage/facilities/' };
     default:
       return { title: undefined, docs: '/introduction/' };
   }
diff --git a/client/packages/common/src/utils/functions/FnUtils.ts b/client/packages/common/src/utils/functions/FnUtils.ts
index fcdfaff58..b58e560db 100644
--- a/client/packages/common/src/utils/functions/FnUtils.ts
+++ b/client/packages/common/src/utils/functions/FnUtils.ts
@@ -1,8 +1,8 @@
 import { UUID } from '@common/types';
-import { uuidv7 } from 'uuidv7';
+import { v4 } from 'uuid';
 
 export const FnUtils = {
-  generateUUID: (): UUID => uuidv7(),
+  generateUUID: (): UUID => v4(),
   // eslint-disable-next-line @typescript-eslint/no-explicit-any
   debounce: <T extends (...args: any[]) => any>(
     callback: T,
diff --git a/client/packages/common/src/utils/numbers/NumUtils.test.ts b/client/packages/common/src/utils/numbers/NumUtils.test.ts
index c4cef0435..4d63e0395 100644
--- a/client/packages/common/src/utils/numbers/NumUtils.test.ts
+++ b/client/packages/common/src/utils/numbers/NumUtils.test.ts
@@ -20,9 +20,4 @@ describe('NumUtils', () => {
     expect(NumUtils.parseString('40', 1, 10)).toBe(10);
     expect(NumUtils.parseString('4.56')).toBe(4.56);
   });
-
-  it('floatMultiply', () => {
-    expect(NumUtils.floatMultiply(110.4, 29)).toBe(3201.6);
-    expect(NumUtils.floatMultiply(1.001, 1000)).toBe(1001);
-  });
 });
diff --git a/client/packages/common/src/utils/numbers/NumUtils.ts b/client/packages/common/src/utils/numbers/NumUtils.ts
index 096f2de19..5ad41e45a 100644
--- a/client/packages/common/src/utils/numbers/NumUtils.ts
+++ b/client/packages/common/src/utils/numbers/NumUtils.ts
@@ -19,25 +19,11 @@ export const NumUtils = {
 
     return constrain(parsed, min, max);
   },
-  /**
-   * Round a value to a given precision.
-   *
-   * For example, round(10.232, 2) gives 10.23
-   */
   round: (value: number, dp = 0): number => {
     if (dp === Infinity) return value;
     const multiplier = 10 ** dp;
     return Math.round(value * multiplier) / multiplier;
   },
-  /**
-   * Multiplies two float numbers avoiding "float artefacts".
-   * For example: 110.4 * 29 = 3201.6000000000004
-   * while floatMultiply(110.4, 29) = 3201.6
-   */
-  floatMultiply: (left: number, right: number): number => {
-    // Use a hacky(?) correction factor of 100:
-    return (100 * left * right) / 100;
-  },
   /**
    * This constant should be used for values that are potentially send to a backend API that expects
    * an unsigned 32 bit integer and thus would reject Number.MAX_SAFE_INTEGER.
diff --git a/client/packages/common/src/utils/object/ObjUtils.ts b/client/packages/common/src/utils/object/ObjUtils.ts
index c836b06a6..968c56744 100644
--- a/client/packages/common/src/utils/object/ObjUtils.ts
+++ b/client/packages/common/src/utils/object/ObjUtils.ts
@@ -1,7 +1,5 @@
 import isEqual from 'lodash/isEqual';
 
-type ParsedObject = Record<string, string | number | boolean | null>;
-
 export const ObjUtils = {
   // Performs a deep comparison between two values to determine if they are equivalent.
   isEqual,
@@ -9,11 +7,4 @@ export const ObjUtils = {
   // Checks is input is an actual object (i.e. key-vals)
   isObject: (input: unknown): input is Record<string, unknown> =>
     typeof input === 'object' && input !== null && !Array.isArray(input),
-  // Turns an object into a Record<string, string | number | boolean | null>
-  parse: (input: string | null | undefined): ParsedObject => {
-    if (!input) return {};
-
-    const maybeObject = JSON.parse(input) as ParsedObject;
-    return !!maybeObject && ObjUtils.isObject(maybeObject) ? maybeObject : {};
-  },
 };
diff --git a/client/packages/config/src/config.ts b/client/packages/config/src/config.ts
index de4d47e27..a17aafaa8 100644
--- a/client/packages/config/src/config.ts
+++ b/client/packages/config/src/config.ts
@@ -1,6 +1,5 @@
 declare const API_HOST: string;
 declare const FEATURE_PACK_VARIANTS: boolean;
-declare const FEATURE_GAPS: boolean;
 
 // For production, API is on the same domain/ip and port as web app, available through sub-route
 // i.e. web app is on https://my.openmsupply.com/, then graphql will be available https://my.openmsupply.com/graphql
@@ -45,7 +44,6 @@ export const Environment = {
     typeof FEATURE_PACK_VARIANTS === 'undefined'
       ? false
       : FEATURE_PACK_VARIANTS,
-  FEATURE_GAPS: typeof FEATURE_GAPS === 'undefined' ? false : FEATURE_GAPS,
 };
 
 export default Environment;
diff --git a/client/packages/config/src/routes.ts b/client/packages/config/src/routes.ts
index b75b189c0..181e1e904 100644
--- a/client/packages/config/src/routes.ts
+++ b/client/packages/config/src/routes.ts
@@ -34,11 +34,6 @@ export enum AppRoute {
   Stocktakes = 'stocktakes',
   Locations = 'locations',
   MasterLists = 'master-lists',
-  IndicatorsDemographics = 'indicators-demographics',
-
-  Manage = 'manage',
-  Programs = 'programs',
-  Facilities = 'facilities',
 
   Tools = 'tools',
 
@@ -48,7 +43,7 @@ export enum AppRoute {
 
   Sync = 'sync',
 
-  Settings = 'settings',
+  Admin = 'admin',
 
   Logout = 'logout',
 
@@ -56,7 +51,6 @@ export enum AppRoute {
   Items = 'items',
   Assets = 'assets',
   LogReasons = 'log-reasons',
-  ImmunisationPrograms = 'immunisations',
 
   PageNotFound = 'page-not-found',
 }
diff --git a/client/packages/host/src/CommandK.tsx b/client/packages/host/src/CommandK.tsx
index 825474af8..dcba44a15 100644
--- a/client/packages/host/src/CommandK.tsx
+++ b/client/packages/host/src/CommandK.tsx
@@ -263,11 +263,11 @@ const Actions = () => {
 
   if (userHasPermission(UserPermission.ServerAdmin)) {
     actions.push({
-      id: 'navigation:settings',
-      name: `${t('settings')} (a)`,
+      id: 'navigation:admin',
+      name: `${t('admin')} (a)`,
       shortcut: ['a'],
-      keywords: 'settings',
-      perform: () => navigate(RouteBuilder.create(AppRoute.Settings).build()),
+      keywords: 'admin',
+      perform: () => navigate(RouteBuilder.create(AppRoute.Admin).build()),
     });
   }
 
diff --git a/client/packages/host/src/Site.tsx b/client/packages/host/src/Site.tsx
index 7d3c0e936..969c4d255 100644
--- a/client/packages/host/src/Site.tsx
+++ b/client/packages/host/src/Site.tsx
@@ -30,8 +30,6 @@ import {
   InventoryRouter,
   DispensaryRouter,
   ColdChainRouter,
-  ManageRouter,
-  ProgramsRouter,
 } from './routers';
 import { RequireAuthentication } from './components/Navigation/RequireAuthentication';
 import { QueryErrorHandler } from './QueryErrorHandler';
@@ -126,7 +124,7 @@ export const Site: FC = () => {
                       element={<ColdChainRouter />}
                     />
                     <Route
-                      path={RouteBuilder.create(AppRoute.Settings)
+                      path={RouteBuilder.create(AppRoute.Admin)
                         .addWildCard()
                         .build()}
                       element={<Settings />}
@@ -137,18 +135,6 @@ export const Site: FC = () => {
                         .build()}
                       element={<Sync />}
                     />
-                    <Route
-                      path={RouteBuilder.create(AppRoute.Manage)
-                        .addWildCard()
-                        .build()}
-                      element={<ManageRouter />}
-                    />
-                    <Route
-                      path={RouteBuilder.create(AppRoute.Programs)
-                        .addWildCard()
-                        .build()}
-                      element={<ProgramsRouter />}
-                    />
                     <Route
                       path="/"
                       element={
diff --git a/client/packages/host/src/components/AppBar/SectionIcon.tsx b/client/packages/host/src/components/AppBar/SectionIcon.tsx
index c01d71143..91c2f87ce 100644
--- a/client/packages/host/src/components/AppBar/SectionIcon.tsx
+++ b/client/packages/host/src/components/AppBar/SectionIcon.tsx
@@ -8,7 +8,6 @@ import {
   ReportsIcon,
   RouteBuilder,
   SettingsIcon,
-  SlidersIcon,
   StockIcon,
   SuppliersIcon,
   ThermometerIcon,
@@ -26,7 +25,7 @@ type Section = {
 
 const getIcon = (section?: AppRoute) => {
   switch (section) {
-    case AppRoute.Settings:
+    case AppRoute.Admin:
       return <SettingsIcon color="primary" fontSize="small" />;
     case AppRoute.Catalogue:
       return <ListIcon color="primary" fontSize="small" />;
@@ -44,8 +43,6 @@ const getIcon = (section?: AppRoute) => {
       return <ReportsIcon color="primary" fontSize="small" />;
     case AppRoute.Sync:
       return <RadioIcon color="primary" fontSize="small" />;
-    case AppRoute.Manage:
-      return <SlidersIcon color="primary" fontSize="small" />;
     default:
       return undefined;
   }
@@ -53,7 +50,7 @@ const getIcon = (section?: AppRoute) => {
 
 const useSection = (): Section | undefined => {
   const routes = [
-    AppRoute.Settings,
+    AppRoute.Admin,
     AppRoute.Catalogue,
     AppRoute.Coldchain,
     AppRoute.Dispensary,
@@ -62,7 +59,6 @@ const useSection = (): Section | undefined => {
     AppRoute.Replenishment,
     AppRoute.Reports,
     AppRoute.Sync,
-    AppRoute.Manage,
   ];
   const location = useLocation();
 
diff --git a/client/packages/host/src/components/AppDrawer/AppDrawer.tsx b/client/packages/host/src/components/AppDrawer/AppDrawer.tsx
index a361e1f29..26cf850c3 100644
--- a/client/packages/host/src/components/AppDrawer/AppDrawer.tsx
+++ b/client/packages/host/src/components/AppDrawer/AppDrawer.tsx
@@ -24,16 +24,15 @@ import {
   UserPermission,
   RouteBuilder,
   useConfirmationModal,
+  useIsCentralServerApi,
 } from '@openmsupply-client/common';
-import { AppRoute, Environment, ExternalURL } from '@openmsupply-client/config';
+import { AppRoute, ExternalURL } from '@openmsupply-client/config';
 import {
   CatalogueNav,
   DistributionNav,
   InventoryNav,
   DispensaryNav,
   ReplenishmentNav,
-  ManageNav,
-  ProgramsNav,
 } from '../Navigation';
 import { AppDrawerIcon } from './AppDrawerIcon';
 import { SyncNavLink } from './SyncNavLink';
@@ -150,6 +149,7 @@ export const AppDrawer: React.FC = () => {
   const { logout, userHasPermission, store } = useAuthContext();
   const location = useLocation();
   const navigate = useNavigate();
+  const isCentralServer = useIsCentralServerApi();
 
   React.useEffect(() => {
     if (drawer.hasUserSet) return;
@@ -197,6 +197,20 @@ export const AppDrawer: React.FC = () => {
       isOpen={drawer.isOpen}
     >
       <ToolbarIconContainer>
+        {isCentralServer ? (
+          <Box
+            style={{
+              float: 'left',
+              position: 'absolute',
+              zIndex: 99,
+              top: 40,
+              backgroundColor: '#fff',
+              opacity: 0.75,
+            }}
+          >
+            {t(drawer.isOpen ? 'label.central-server' : 'label.central')}
+          </Box>
+        ) : null}
         <IconButton
           label={t(
             drawer.isOpen ? 'button.close-the-menu' : 'button.open-the-menu'
@@ -219,8 +233,6 @@ export const AppDrawer: React.FC = () => {
           <InventoryNav />
           <DispensaryNav store={store} />
           <ColdChainNav store={store} />
-          {Environment.FEATURE_GAPS && <ManageNav />}
-          {Environment.FEATURE_GAPS && <ProgramsNav />}
 
           {/* <AppNavLink
             to={AppRoute.Tools}
@@ -250,9 +262,9 @@ export const AppDrawer: React.FC = () => {
           />
           <SyncNavLink />
           <AppNavLink
-            to={AppRoute.Settings}
+            to={AppRoute.Admin}
             icon={<SettingsIcon fontSize="small" color="primary" />}
-            text={t('settings')}
+            text={t('admin')}
             visible={userHasPermission(UserPermission.ServerAdmin)}
           />
           <AppNavLink
diff --git a/client/packages/host/src/components/Navigation/CatalogueNav.tsx b/client/packages/host/src/components/Navigation/CatalogueNav.tsx
index a17843e78..32ec8d2d7 100644
--- a/client/packages/host/src/components/Navigation/CatalogueNav.tsx
+++ b/client/packages/host/src/components/Navigation/CatalogueNav.tsx
@@ -7,9 +7,7 @@ import {
   AppNavLink,
   ListIcon,
   AppNavSection,
-  useIsCentralServerApi,
 } from '@openmsupply-client/common';
-import { Environment } from '@openmsupply-client/config';
 import { AppRoute } from '@openmsupply-client/config';
 import { useNestedNav } from './useNestedNav';
 
@@ -18,7 +16,6 @@ export const CatalogueNav: FC = () => {
     RouteBuilder.create(AppRoute.Catalogue).addWildCard().build()
   );
   const t = useTranslation('app');
-  const isCentralServer = useIsCentralServerApi();
 
   return (
     <AppNavSection isActive={isActive} to={AppRoute.Catalogue}>
@@ -52,14 +49,6 @@ export const CatalogueNav: FC = () => {
               .build()}
             text={t('master-lists')}
           />
-          <AppNavLink
-            visible={isCentralServer && Environment.FEATURE_GAPS}
-            end
-            to={RouteBuilder.create(AppRoute.Catalogue)
-              .addPart(AppRoute.IndicatorsDemographics)
-              .build()}
-            text={t('indicators-demographics')}
-          />
         </List>
       </Collapse>
     </AppNavSection>
diff --git a/client/packages/host/src/components/Navigation/ManageNav.tsx b/client/packages/host/src/components/Navigation/ManageNav.tsx
deleted file mode 100644
index ffcc89d7b..000000000
--- a/client/packages/host/src/components/Navigation/ManageNav.tsx
+++ /dev/null
@@ -1,47 +0,0 @@
-import React, { FC } from 'react';
-import {
-  Collapse,
-  List,
-  useTranslation,
-  RouteBuilder,
-  AppNavLink,
-  AppNavSection,
-  useIsCentralServerApi,
-} from '@openmsupply-client/common';
-import { SlidersIcon } from '@common/icons';
-import { AppRoute } from '@openmsupply-client/config';
-import { useNestedNav } from './useNestedNav';
-
-export const ManageNav: FC = () => {
-  const { isActive } = useNestedNav(
-    RouteBuilder.create(AppRoute.Manage).addWildCard().build()
-  );
-  const t = useTranslation('app');
-  const isCentralServer = useIsCentralServerApi();
-  const visible = isCentralServer;
-
-  return (
-    <AppNavSection isActive={isActive} to={AppRoute.Manage}>
-      <AppNavLink
-        visible={visible}
-        end={false}
-        to={AppRoute.Manage}
-        icon={<SlidersIcon color="primary" fontSize="small" />}
-        text={t('manage')}
-        inactive
-      />
-      <Collapse in={isActive}>
-        <List>
-          <AppNavLink
-            visible={visible}
-            end
-            to={RouteBuilder.create(AppRoute.Manage)
-              .addPart(AppRoute.Facilities)
-              .build()}
-            text={t('facilities')}
-          />
-        </List>
-      </Collapse>
-    </AppNavSection>
-  );
-};
diff --git a/client/packages/host/src/components/Navigation/ProgramsNav.tsx b/client/packages/host/src/components/Navigation/ProgramsNav.tsx
deleted file mode 100644
index 0c11eae08..000000000
--- a/client/packages/host/src/components/Navigation/ProgramsNav.tsx
+++ /dev/null
@@ -1,47 +0,0 @@
-import React, { FC } from 'react';
-import {
-  Collapse,
-  List,
-  useTranslation,
-  RouteBuilder,
-  AppNavLink,
-  AppNavSection,
-  useIsCentralServerApi,
-} from '@openmsupply-client/common';
-import { AppRoute, Environment } from '@openmsupply-client/config';
-import { useNestedNav } from './useNestedNav';
-import { PowerIcon } from '@openmsupply-client/common/src/ui/icons/Power';
-
-export const ProgramsNav: FC = () => {
-  const { isActive } = useNestedNav(
-    RouteBuilder.create(AppRoute.Programs).addWildCard().build()
-  );
-  const t = useTranslation('app');
-  const isCentralServer = useIsCentralServerApi();
-  const visible = isCentralServer;
-
-  return (
-    <AppNavSection isActive={isActive} to={AppRoute.Programs}>
-      <AppNavLink
-        visible={visible}
-        end={false}
-        to={AppRoute.Programs}
-        icon={<PowerIcon color="primary" fontSize="small" />}
-        text={t('programs')}
-        inactive
-      />
-      <Collapse in={isActive}>
-        <List>
-          <AppNavLink
-            visible={isCentralServer && Environment.FEATURE_GAPS}
-            end
-            to={RouteBuilder.create(AppRoute.Programs)
-              .addPart(AppRoute.ImmunisationPrograms)
-              .build()}
-            text={t('label.programs-immunisations')}
-          />
-        </List>
-      </Collapse>
-    </AppNavSection>
-  );
-};
diff --git a/client/packages/host/src/components/Navigation/index.ts b/client/packages/host/src/components/Navigation/index.ts
index b5ee697d5..00c046885 100644
--- a/client/packages/host/src/components/Navigation/index.ts
+++ b/client/packages/host/src/components/Navigation/index.ts
@@ -3,5 +3,3 @@ export * from './CatalogueNav';
 export * from './InventoryNav';
 export * from './ReplenishmentNav';
 export * from './DispensaryNav';
-export * from './ManageNav';
-export * from './ProgramsNav';
diff --git a/client/packages/host/src/routers/CatalogueRouter.tsx b/client/packages/host/src/routers/CatalogueRouter.tsx
index 9403d1b93..f5c791877 100644
--- a/client/packages/host/src/routers/CatalogueRouter.tsx
+++ b/client/packages/host/src/routers/CatalogueRouter.tsx
@@ -14,13 +14,6 @@ const MasterListService = React.lazy(
   () => import('@openmsupply-client/system/src/MasterList/Service/Service')
 );
 
-const IndicatorsDemographicsService = React.lazy(
-  () =>
-    import(
-      '@openmsupply-client/system/src/IndicatorsDemographics/Service/Service'
-    )
-);
-
 const fullAssetPath = RouteBuilder.create(AppRoute.Catalogue)
   .addPart(AppRoute.Assets)
   .addWildCard()
@@ -36,16 +29,10 @@ const fullMasterListPath = RouteBuilder.create(AppRoute.Catalogue)
   .addWildCard()
   .build();
 
-const fullIndicatorsDemographicsPath = RouteBuilder.create(AppRoute.Catalogue)
-  .addPart(AppRoute.IndicatorsDemographics)
-  .addWildCard()
-  .build();
-
 export const CatalogueRouter: FC = () => {
   const gotoAssets = useMatch(fullAssetPath);
   const gotoItems = useMatch(fullItemPath);
   const gotoMasterLists = useMatch(fullMasterListPath);
-  const gotoIndicatorsDemographics = useMatch(fullIndicatorsDemographicsPath);
 
   if (gotoAssets) {
     return <AssetService />;
@@ -58,10 +45,6 @@ export const CatalogueRouter: FC = () => {
     return <MasterListService />;
   }
 
-  if (gotoIndicatorsDemographics) {
-    return <IndicatorsDemographicsService />;
-  }
-
   const notFoundRoute = RouteBuilder.create(AppRoute.PageNotFound).build();
   return <Navigate to={notFoundRoute} />;
 };
diff --git a/client/packages/host/src/routers/ImmunisationProgramRouter.tsx b/client/packages/host/src/routers/ImmunisationProgramRouter.tsx
deleted file mode 100644
index 4ae048781..000000000
--- a/client/packages/host/src/routers/ImmunisationProgramRouter.tsx
+++ /dev/null
@@ -1,23 +0,0 @@
-import React, { FC } from 'react';
-import { RouteBuilder, Navigate, useMatch } from '@openmsupply-client/common';
-import { AppRoute } from '@openmsupply-client/config';
-
-const ImmunisationProgramService = React.lazy(
-  () => import('@openmsupply-client/system/src/Immunisation/Service/Service')
-);
-
-const immunisationFullPath = RouteBuilder.create(AppRoute.Programs)
-  .addPart(AppRoute.ImmunisationPrograms)
-  .addWildCard()
-  .build();
-
-export const ProgramsRouter: FC = () => {
-  const gotoImmunisations = useMatch(immunisationFullPath);
-
-  if (gotoImmunisations) {
-    return <ImmunisationProgramService />;
-  }
-
-  const notFoundRoute = RouteBuilder.create(AppRoute.PageNotFound).build();
-  return <Navigate to={notFoundRoute} />;
-};
diff --git a/client/packages/host/src/routers/ManageRouter.tsx b/client/packages/host/src/routers/ManageRouter.tsx
deleted file mode 100644
index 3a09f7641..000000000
--- a/client/packages/host/src/routers/ManageRouter.tsx
+++ /dev/null
@@ -1,23 +0,0 @@
-import React, { FC } from 'react';
-import { RouteBuilder, Navigate, useMatch } from '@openmsupply-client/common';
-import { AppRoute } from '@openmsupply-client/config';
-
-const NameService = React.lazy(
-  () => import('@openmsupply-client/system/src/Name/Service')
-);
-
-const fullFacilitiesPath = RouteBuilder.create(AppRoute.Manage)
-  .addPart(AppRoute.Facilities)
-  .addWildCard()
-  .build();
-
-export const ManageRouter: FC = () => {
-  const gotoFacilities = useMatch(fullFacilitiesPath);
-
-  if (gotoFacilities) {
-    return <NameService />;
-  }
-
-  const notFoundRoute = RouteBuilder.create(AppRoute.PageNotFound).build();
-  return <Navigate to={notFoundRoute} />;
-};
diff --git a/client/packages/host/src/routers/index.ts b/client/packages/host/src/routers/index.ts
index d83c78668..0b42a60b5 100644
--- a/client/packages/host/src/routers/index.ts
+++ b/client/packages/host/src/routers/index.ts
@@ -5,5 +5,3 @@ export * from './InventoryRouter';
 export * from './ReplenishmentRouter';
 export * from './DispensaryRouter';
 export * from './ColdChainRouter';
-export * from './ManageRouter';
-export * from './ImmunisationProgramRouter';
diff --git a/client/packages/host/webpack.config.js b/client/packages/host/webpack.config.js
index 1ed79f1b4..71952ac99 100644
--- a/client/packages/host/webpack.config.js
+++ b/client/packages/host/webpack.config.js
@@ -145,7 +145,6 @@ module.exports = env => {
       new ReactRefreshWebpackPlugin(),
       new webpack.DefinePlugin({
         FEATURE_PACK_VARIANTS: env.FEATURE_PACK_VARIANTS,
-        FEATURE_GAPS: env.FEATURE_GAPS,
         API_HOST: JSON.stringify(env.API_HOST),
         LOCAL_PLUGINS: JSON.stringify(localPlugins()),
         LANG_VERSION: Date.now(),
diff --git a/client/packages/inventory/src/Stocktake/DetailView/SidePanel.tsx b/client/packages/inventory/src/Stocktake/DetailView/SidePanel.tsx
index 2fc0923da..bb3247635 100644
--- a/client/packages/inventory/src/Stocktake/DetailView/SidePanel.tsx
+++ b/client/packages/inventory/src/Stocktake/DetailView/SidePanel.tsx
@@ -37,7 +37,7 @@ const AdditionalInfoSection: FC = () => {
       <Grid container gap={0.5} key="additional-info">
         <PanelRow>
           <PanelLabel>{t('label.entered-by')}</PanelLabel>
-          <PanelField>{user?.username ?? '-'}</PanelField>
+          <PanelField>{user?.username}</PanelField>
           {user?.email ? <InfoTooltipIcon title={user.email} /> : null}
         </PanelRow>
         <PanelRow>
diff --git a/client/packages/invoices/src/InboundShipment/DetailView/ContentArea/columns.ts b/client/packages/invoices/src/InboundShipment/DetailView/ContentArea/columns.ts
index 90a4badf7..082a84b77 100644
--- a/client/packages/invoices/src/InboundShipment/DetailView/ContentArea/columns.ts
+++ b/client/packages/invoices/src/InboundShipment/DetailView/ContentArea/columns.ts
@@ -11,7 +11,6 @@ import {
   useColumnUtils,
   CurrencyCell,
   ColumnDescription,
-  NumUtils,
 } from '@openmsupply-client/common';
 import {
   getPackVariantCell,
@@ -26,7 +25,7 @@ type InboundShipmentColumnDescription = ColumnDescription<
 >;
 
 const getUnitQuantity = (row: InboundLineFragment) =>
-  NumUtils.floatMultiply(row.packSize, row.numberOfPacks);
+  row.packSize * row.numberOfPacks;
 
 export const useInboundShipmentColumns = () => {
   const {
diff --git a/client/packages/invoices/src/InboundShipment/DetailView/Footer/OnHoldButton.tsx b/client/packages/invoices/src/InboundShipment/DetailView/Footer/OnHoldButton.tsx
index 780969f3d..c92e392c8 100644
--- a/client/packages/invoices/src/InboundShipment/DetailView/Footer/OnHoldButton.tsx
+++ b/client/packages/invoices/src/InboundShipment/DetailView/Footer/OnHoldButton.tsx
@@ -9,7 +9,7 @@ import { useInbound } from '../../api';
 export const OnHoldButtonComponent = memo(() => {
   const t = useTranslation('replenishment');
   const { onHold, update } = useInbound.document.fields('onHold');
-  const isHoldable = useInbound.utils.isHoldable();
+  const isDisabled = useInbound.utils.isDisabled();
   const getConfirmation = useConfirmationModal({
     message: t(
       onHold
@@ -22,7 +22,7 @@ export const OnHoldButtonComponent = memo(() => {
 
   return (
     <ToggleButton
-      disabled={!isHoldable}
+      disabled={isDisabled}
       value={onHold}
       selected={onHold}
       onClick={() => getConfirmation()}
diff --git a/client/packages/invoices/src/InboundShipment/DetailView/SidePanel/AdditionalInfoSection.tsx b/client/packages/invoices/src/InboundShipment/DetailView/SidePanel/AdditionalInfoSection.tsx
index 529ee371d..e96c70835 100644
--- a/client/packages/invoices/src/InboundShipment/DetailView/SidePanel/AdditionalInfoSection.tsx
+++ b/client/packages/invoices/src/InboundShipment/DetailView/SidePanel/AdditionalInfoSection.tsx
@@ -32,7 +32,7 @@ export const AdditionalInfoSectionComponent = () => {
       <Grid container gap={0.5} key="additional-info">
         <PanelRow>
           <PanelLabel>{t('label.edited-by')}</PanelLabel>
-          <PanelField>{user?.username ?? '-'}</PanelField>
+          <PanelField>{user?.username}</PanelField>
           {user?.email ? <InfoTooltipIcon title={user?.email} /> : null}
         </PanelRow>
         <PanelRow>
diff --git a/client/packages/invoices/src/InboundShipment/DetailView/SidePanel/RelatedDocumentsSection.tsx b/client/packages/invoices/src/InboundShipment/DetailView/SidePanel/RelatedDocumentsSection.tsx
index d83d9f24c..da878bf29 100644
--- a/client/packages/invoices/src/InboundShipment/DetailView/SidePanel/RelatedDocumentsSection.tsx
+++ b/client/packages/invoices/src/InboundShipment/DetailView/SidePanel/RelatedDocumentsSection.tsx
@@ -25,9 +25,11 @@ export const RelatedDocumentsSectionComponent = () => {
     tooltip = t('messages.internal-order-created-on', {
       date: d(new Date(createdDatetime)),
     });
-    tooltip += ` ${t('messages.by-user', {
-      username: user?.username ?? '-',
-    })}`;
+    if (user?.username && user.username !== 'unknown') {
+      tooltip += ` ${t('messages.by-user', {
+        username: user?.username,
+      })}`;
+    }
   }
 
   return (
diff --git a/client/packages/invoices/src/InboundShipment/DetailView/modals/InboundLineEdit/TabTables.tsx b/client/packages/invoices/src/InboundShipment/DetailView/modals/InboundLineEdit/TabTables.tsx
index a57b63727..2457468db 100644
--- a/client/packages/invoices/src/InboundShipment/DetailView/modals/InboundLineEdit/TabTables.tsx
+++ b/client/packages/invoices/src/InboundShipment/DetailView/modals/InboundLineEdit/TabTables.tsx
@@ -18,7 +18,6 @@ import {
   Currencies,
   useCurrencyCell,
   useAuthContext,
-  NumUtils,
 } from '@openmsupply-client/common';
 import { DraftInboundLine } from '../../../../types';
 import {
@@ -121,8 +120,7 @@ export const QuantityTableComponent: FC<
       [
         'unitQuantity',
         {
-          accessor: ({ rowData }) =>
-            NumUtils.floatMultiply(rowData.packSize, rowData.numberOfPacks),
+          accessor: ({ rowData }) => rowData.numberOfPacks * rowData.packSize,
         },
       ],
     ],
diff --git a/client/packages/invoices/src/InboundShipment/api/api.ts b/client/packages/invoices/src/InboundShipment/api/api.ts
index 05393ab40..3d3631a5d 100644
--- a/client/packages/invoices/src/InboundShipment/api/api.ts
+++ b/client/packages/invoices/src/InboundShipment/api/api.ts
@@ -13,9 +13,6 @@ import {
   Formatter,
   UpdateInboundShipmentStatusInput,
   setNullableInput,
-  InsertInboundShipmentServiceLineInput,
-  UpdateInboundShipmentServiceLineInput,
-  DeleteInboundShipmentServiceLineInput,
 } from '@openmsupply-client/common';
 import { DraftInboundLine } from './../../types';
 import { isA } from '../../utils';
@@ -122,28 +119,22 @@ const inboundParsers = {
   toDeleteLine: (line: { id: string }): DeleteInboundShipmentLineInput => {
     return { id: line.id };
   },
-  toInsertServiceCharge: (
-    line: DraftInboundLine
-  ): InsertInboundShipmentServiceLineInput => ({
+  toInsertServiceCharge: (line: DraftInboundLine) => ({
     id: line.id,
     invoiceId: line.invoiceId,
     itemId: line.item.id,
     totalBeforeTax: line.totalBeforeTax,
-    taxPercentage: line.taxPercentage,
+    tax: line.taxPercentage,
     note: line.note,
   }),
-  toUpdateServiceCharge: (
-    line: DraftInboundLine
-  ): UpdateInboundShipmentServiceLineInput => ({
+  toUpdateServiceCharge: (line: DraftInboundLine) => ({
     id: line.id,
     itemId: line.item.id,
     totalBeforeTax: line.totalBeforeTax,
     tax: { percentage: line.taxPercentage },
     note: line.note,
   }),
-  toDeleteServiceCharge: (
-    line: DraftInboundLine
-  ): DeleteInboundShipmentServiceLineInput => ({
+  toDeleteServiceCharge: (line: DraftInboundLine) => ({
     id: line.id,
   }),
 };
diff --git a/client/packages/invoices/src/InboundShipment/api/hooks/index.ts b/client/packages/invoices/src/InboundShipment/api/hooks/index.ts
index 3a3e619d5..b3969e8a3 100644
--- a/client/packages/invoices/src/InboundShipment/api/hooks/index.ts
+++ b/client/packages/invoices/src/InboundShipment/api/hooks/index.ts
@@ -33,7 +33,6 @@ export const useInbound = {
     addFromMasterList: Utils.useAddFromMasterList,
     api: Utils.useInboundApi,
     isDisabled: Utils.useIsInboundDisabled,
-    isHoldable: Utils.useIsInboundHoldable,
     isStatusChangeDisabled: Utils.useIsStatusChangeDisabled,
     selectedLines: Utils.useSelectedLines,
   },
diff --git a/client/packages/invoices/src/InboundShipment/api/hooks/utils/index.ts b/client/packages/invoices/src/InboundShipment/api/hooks/utils/index.ts
index 6a0d3e894..ad767dd81 100644
--- a/client/packages/invoices/src/InboundShipment/api/hooks/utils/index.ts
+++ b/client/packages/invoices/src/InboundShipment/api/hooks/utils/index.ts
@@ -3,12 +3,10 @@ import { useIsInboundDisabled } from './useIsInboundDisabled';
 import { useIsStatusChangeDisabled } from './useIsStatusChangeDisabled';
 import { useAddFromMasterList } from './useAddFromMasterList';
 import { useSelectedLines } from './useSelectedLines';
-import { useIsInboundHoldable } from './useIsInboundHoldable';
 
 export const Utils = {
   useInboundApi,
   useIsInboundDisabled,
-  useIsInboundHoldable,
   useIsStatusChangeDisabled,
   useAddFromMasterList,
   useSelectedLines,
diff --git a/client/packages/invoices/src/InboundShipment/api/hooks/utils/useIsInboundHoldable.ts b/client/packages/invoices/src/InboundShipment/api/hooks/utils/useIsInboundHoldable.ts
deleted file mode 100644
index a4bcad7c4..000000000
--- a/client/packages/invoices/src/InboundShipment/api/hooks/utils/useIsInboundHoldable.ts
+++ /dev/null
@@ -1,8 +0,0 @@
-import { useInbound } from '../document/useInbound';
-import { isInboundHoldable } from './../../../../utils';
-
-export const useIsInboundHoldable = (): boolean => {
-  const { data } = useInbound();
-  if (!data) return true;
-  return isInboundHoldable(data);
-};
diff --git a/client/packages/invoices/src/OutboundShipment/DetailView/ContentArea.tsx b/client/packages/invoices/src/OutboundShipment/DetailView/ContentArea.tsx
index a1ba42401..698b00cb0 100644
--- a/client/packages/invoices/src/OutboundShipment/DetailView/ContentArea.tsx
+++ b/client/packages/invoices/src/OutboundShipment/DetailView/ContentArea.tsx
@@ -101,23 +101,25 @@ export const ContentAreaComponent: FC<ContentAreaProps> = ({
   if (!rows) return null;
 
   return (
-    <Box flexDirection="column" display="flex" flex={1}>
-      <DataTable
-        id="outbound-detail"
-        onRowClick={onRowClick}
-        ExpandContent={Expand}
-        columns={columns}
-        data={rows}
-        enableColumnSelection
-        noDataElement={
-          <NothingHere
-            body={t('error.no-outbound-items')}
-            onCreate={isDisabled ? undefined : () => onAddItem()}
-            buttonText={t('button.add-item')}
-          />
-        }
-        isRowAnimated={true}
-      />
+    <Box flexDirection="column" style={{ width: '100%' }} display="flex">
+      <Box flex={1} style={{ overflowY: 'auto' }}>
+        <DataTable
+          id="outbound-detail"
+          onRowClick={onRowClick}
+          ExpandContent={Expand}
+          columns={columns}
+          data={rows}
+          enableColumnSelection
+          noDataElement={
+            <NothingHere
+              body={t('error.no-outbound-items')}
+              onCreate={isDisabled ? undefined : () => onAddItem()}
+              buttonText={t('button.add-item')}
+            />
+          }
+          isRowAnimated={true}
+        />
+      </Box>
     </Box>
   );
 };
diff --git a/client/packages/invoices/src/OutboundShipment/DetailView/OutboundLineEdit/columns.ts b/client/packages/invoices/src/OutboundShipment/DetailView/OutboundLineEdit/columns.ts
index b4660d713..d3fc9910a 100644
--- a/client/packages/invoices/src/OutboundShipment/DetailView/OutboundLineEdit/columns.ts
+++ b/client/packages/invoices/src/OutboundShipment/DetailView/OutboundLineEdit/columns.ts
@@ -11,7 +11,6 @@ import {
   useCurrencyCell,
   Currencies,
   CurrencyCell,
-  NumUtils,
 } from '@openmsupply-client/common';
 import { DraftStockOutLine } from '../../../types';
 import { PackQuantityCell, StockOutLineFragment } from '../../../StockOut';
@@ -133,8 +132,7 @@ export const useOutboundLineEditColumns = ({
       {
         label: 'label.unit-quantity-issued',
         labelProps: { unit },
-        accessor: ({ rowData }) =>
-          NumUtils.floatMultiply(rowData.numberOfPacks, rowData.packSize),
+        accessor: ({ rowData }) => rowData.numberOfPacks * rowData.packSize,
         width: 90,
       },
     ],
@@ -198,8 +196,7 @@ export const useExpansionColumns = (): Column<StockOutLineFragment>[] => {
     [
       'unitQuantity',
       {
-        accessor: ({ rowData }) =>
-          NumUtils.floatMultiply(rowData.packSize, rowData.numberOfPacks),
+        accessor: ({ rowData }) => rowData.packSize * rowData.numberOfPacks,
       },
     ],
     [
diff --git a/client/packages/invoices/src/OutboundShipment/DetailView/SidePanel/AdditionalInfoSection.tsx b/client/packages/invoices/src/OutboundShipment/DetailView/SidePanel/AdditionalInfoSection.tsx
index f1b37963a..46784fb23 100644
--- a/client/packages/invoices/src/OutboundShipment/DetailView/SidePanel/AdditionalInfoSection.tsx
+++ b/client/packages/invoices/src/OutboundShipment/DetailView/SidePanel/AdditionalInfoSection.tsx
@@ -33,7 +33,7 @@ export const AdditionalInfoSectionComponent: FC = () => {
       <Grid container gap={0.5} key="additional-info">
         <PanelRow>
           <PanelLabel>{t('label.entered-by')}</PanelLabel>
-          <PanelField>{user?.username ?? '-'}</PanelField>
+          <PanelField>{user?.username}</PanelField>
           {user?.email ? <InfoTooltipIcon title={user?.email} /> : null}
         </PanelRow>
         <PanelRow>
diff --git a/client/packages/invoices/src/OutboundShipment/DetailView/SidePanel/RelatedDocumentsSection.tsx b/client/packages/invoices/src/OutboundShipment/DetailView/SidePanel/RelatedDocumentsSection.tsx
index fcda0eb1a..5ccaed89b 100644
--- a/client/packages/invoices/src/OutboundShipment/DetailView/SidePanel/RelatedDocumentsSection.tsx
+++ b/client/packages/invoices/src/OutboundShipment/DetailView/SidePanel/RelatedDocumentsSection.tsx
@@ -23,7 +23,11 @@ const RelatedDocumentsSectionComponent = () => {
     let tooltip = t('messages.customer-requisition-created-on', {
       date: d(createdDatetime),
     });
-    return (tooltip += ` ${t('messages.by-user', { username })}`);
+    if (username && username !== 'unknown') {
+      tooltip += ` ${t('messages.by-user', { username })}`;
+    }
+
+    return tooltip;
   };
 
   return (
@@ -32,12 +36,7 @@ const RelatedDocumentsSectionComponent = () => {
         {!requisition ? (
           <PanelLabel>{t('messages.no-related-documents')}</PanelLabel>
         ) : (
-          <Tooltip
-            title={getTooltip(
-              requisition.createdDatetime,
-              requisition.user?.username ?? '-'
-            )}
-          >
+          <Tooltip title={getTooltip(requisition.createdDatetime, requisition.user?.username)}>
             <Grid item>
               <PanelRow>
                 <PanelLabel>{t('label.requisition')}</PanelLabel>
diff --git a/client/packages/invoices/src/OutboundShipment/DetailView/columns.ts b/client/packages/invoices/src/OutboundShipment/DetailView/columns.ts
index dcd81320f..a76a86924 100644
--- a/client/packages/invoices/src/OutboundShipment/DetailView/columns.ts
+++ b/client/packages/invoices/src/OutboundShipment/DetailView/columns.ts
@@ -13,7 +13,6 @@ import {
   NumberCell,
   CurrencyCell,
   ColumnDescription,
-  NumUtils,
 } from '@openmsupply-client/common';
 import {
   getPackVariantCell,
@@ -44,9 +43,7 @@ const getNumberOfPacks = (row: StockOutLineFragment) =>
   isDefaultPlaceholderRow(row) ? '' : row.numberOfPacks;
 
 const getUnitQuantity = (row: StockOutLineFragment) =>
-  isDefaultPlaceholderRow(row)
-    ? ''
-    : NumUtils.floatMultiply(row.packSize, row.numberOfPacks);
+  isDefaultPlaceholderRow(row) ? '' : row.packSize * row.numberOfPacks;
 
 export const useOutboundColumns = ({
   sortBy,
@@ -152,7 +149,6 @@ export const useOutboundColumns = ({
             { path: ['lines', 'location', 'code'] },
             { path: ['location', 'code'], default: '' },
           ]),
-        width: 100,
       },
     ],
   ];
diff --git a/client/packages/invoices/src/OutboundShipment/api/api.ts b/client/packages/invoices/src/OutboundShipment/api/api.ts
index 4aeff5617..ca1ae68a3 100644
--- a/client/packages/invoices/src/OutboundShipment/api/api.ts
+++ b/client/packages/invoices/src/OutboundShipment/api/api.ts
@@ -14,9 +14,6 @@ import {
   InvoiceLineNodeType,
   InvoiceSortFieldInput,
   UpdateOutboundShipmentNameInput,
-  InsertOutboundShipmentServiceLineInput,
-  UpdateOutboundShipmentServiceLineInput,
-  DeleteOutboundShipmentServiceLineInput,
 } from '@openmsupply-client/common';
 import { DraftStockOutLine } from '../../types';
 import { get, isA } from '../../utils';
@@ -140,28 +137,22 @@ const outboundParsers = {
   toDeletePlaceholder: (line: DraftStockOutLine) => ({
     id: line.id,
   }),
-  toInsertServiceCharge: (
-    line: DraftStockOutLine
-  ): InsertOutboundShipmentServiceLineInput => ({
+  toInsertServiceCharge: (line: DraftStockOutLine) => ({
     id: line.id,
     invoiceId: line.invoiceId,
     itemId: line.item.id,
-    taxPercentage: line.taxPercentage,
+    tax: line.taxPercentage,
     totalBeforeTax: line.totalBeforeTax,
     note: line.note,
   }),
-  toUpdateServiceCharge: (
-    line: DraftStockOutLine
-  ): UpdateOutboundShipmentServiceLineInput => ({
+  toUpdateServiceCharge: (line: DraftStockOutLine) => ({
     id: line.id,
     itemId: line.item.id,
     tax: { percentage: line.taxPercentage },
     totalBeforeTax: line.totalBeforeTax,
     note: line.note,
   }),
-  toDeleteServiceCharge: (
-    line: DraftStockOutLine
-  ): DeleteOutboundShipmentServiceLineInput => ({
+  toDeleteServiceCharge: (line: DraftStockOutLine) => ({
     id: line.id,
   }),
 };
diff --git a/client/packages/invoices/src/Prescriptions/DetailView/PrescriptionLineEdit/columns.ts b/client/packages/invoices/src/Prescriptions/DetailView/PrescriptionLineEdit/columns.ts
index d2154653e..4983ccdbf 100644
--- a/client/packages/invoices/src/Prescriptions/DetailView/PrescriptionLineEdit/columns.ts
+++ b/client/packages/invoices/src/Prescriptions/DetailView/PrescriptionLineEdit/columns.ts
@@ -5,7 +5,6 @@ import {
   ColumnDescription,
   ExpiryDateCell,
   LocationCell,
-  NumUtils,
   NumberCell,
   useColumns,
 } from '@openmsupply-client/common';
@@ -95,8 +94,7 @@ export const usePrescriptionLineEditColumns = ({
       {
         label: 'label.unit-quantity-issued',
         labelProps: { unit },
-        accessor: ({ rowData }) =>
-          NumUtils.floatMultiply(rowData.numberOfPacks, rowData.packSize),
+        accessor: ({ rowData }) => rowData.numberOfPacks * rowData.packSize,
         width: 120,
       },
     ],
@@ -136,8 +134,7 @@ export const useExpansionColumns = (): Column<StockOutLineFragment>[] =>
     [
       'unitQuantity',
       {
-        accessor: ({ rowData }) =>
-          NumUtils.floatMultiply(rowData.packSize, rowData.numberOfPacks),
+        accessor: ({ rowData }) => rowData.packSize * rowData.numberOfPacks,
       },
     ],
   ]);
diff --git a/client/packages/invoices/src/Prescriptions/DetailView/SidePanel/AdditionalInfoSection.tsx b/client/packages/invoices/src/Prescriptions/DetailView/SidePanel/AdditionalInfoSection.tsx
index 3cf80beda..07358fe78 100644
--- a/client/packages/invoices/src/Prescriptions/DetailView/SidePanel/AdditionalInfoSection.tsx
+++ b/client/packages/invoices/src/Prescriptions/DetailView/SidePanel/AdditionalInfoSection.tsx
@@ -33,7 +33,7 @@ export const AdditionalInfoSectionComponent: FC = () => {
       <Grid container gap={0.5} key="additional-info">
         <PanelRow>
           <PanelLabel>{t('label.entered-by')}</PanelLabel>
-          <PanelField>{user?.username ?? '-'}</PanelField>
+          <PanelField>{user?.username}</PanelField>
           {user?.email ? <InfoTooltipIcon title={user?.email} /> : null}
         </PanelRow>
         <PanelRow>
diff --git a/client/packages/invoices/src/Prescriptions/DetailView/columns.ts b/client/packages/invoices/src/Prescriptions/DetailView/columns.ts
index e8e86a282..4e825fc45 100644
--- a/client/packages/invoices/src/Prescriptions/DetailView/columns.ts
+++ b/client/packages/invoices/src/Prescriptions/DetailView/columns.ts
@@ -12,7 +12,6 @@ import {
   NumberCell,
   CurrencyCell,
   ColumnDescription,
-  NumUtils,
 } from '@openmsupply-client/common';
 import {
   getPackVariantCell,
@@ -126,7 +125,6 @@ export const usePrescriptionColumn = ({
     [
       'location',
       {
-        width: 100,
         getSortValue: row =>
           getColumnPropertyAsString(row, [
             { path: ['lines', 'location', 'code'] },
@@ -207,10 +205,7 @@ export const usePrescriptionColumn = ({
             const { lines } = rowData;
             return ArrayUtils.getUnitQuantity(lines);
           } else {
-            return NumUtils.floatMultiply(
-              rowData.packSize,
-              rowData.numberOfPacks
-            );
+            return rowData.packSize * rowData.numberOfPacks;
           }
         },
         getSortValue: rowData => {
@@ -218,10 +213,7 @@ export const usePrescriptionColumn = ({
             const { lines } = rowData;
             return ArrayUtils.getUnitQuantity(lines);
           } else {
-            return NumUtils.floatMultiply(
-              rowData.packSize,
-              rowData.numberOfPacks
-            );
+            return rowData.packSize * rowData.numberOfPacks;
           }
         },
       },
diff --git a/client/packages/invoices/src/Returns/InboundDetailView/SidePanel/AdditionalInfoSection.tsx b/client/packages/invoices/src/Returns/InboundDetailView/SidePanel/AdditionalInfoSection.tsx
index e344aacfc..a91d797f5 100644
--- a/client/packages/invoices/src/Returns/InboundDetailView/SidePanel/AdditionalInfoSection.tsx
+++ b/client/packages/invoices/src/Returns/InboundDetailView/SidePanel/AdditionalInfoSection.tsx
@@ -32,7 +32,7 @@ export const AdditionalInfoSectionComponent = () => {
       <Grid container gap={0.5} key="additional-info">
         <PanelRow>
           <PanelLabel>{t('label.edited-by')}</PanelLabel>
-          <PanelField>{user?.username ?? '-'}</PanelField>
+          <PanelField>{user?.username}</PanelField>
           {user?.email ? <InfoTooltipIcon title={user?.email} /> : null}
         </PanelRow>
 
diff --git a/client/packages/invoices/src/Returns/InboundDetailView/SidePanel/RelatedDocumentsSection.tsx b/client/packages/invoices/src/Returns/InboundDetailView/SidePanel/RelatedDocumentsSection.tsx
index e3d756fb5..04d9ce254 100644
--- a/client/packages/invoices/src/Returns/InboundDetailView/SidePanel/RelatedDocumentsSection.tsx
+++ b/client/packages/invoices/src/Returns/InboundDetailView/SidePanel/RelatedDocumentsSection.tsx
@@ -24,7 +24,9 @@ export const RelatedDocumentsSectionComponent = () => {
       date: d(new Date(createdDatetime)),
     });
 
-    return `${label} ${t('messages.by-user', { username })}`;
+    return username && username !== 'unknown'
+      ? `${label} ${t('messages.by-user', { username })}`
+      : label;
   };
 
   return (
@@ -38,7 +40,7 @@ export const RelatedDocumentsSectionComponent = () => {
               <PanelLabel>
                 {getLabel(
                   originalShipment.createdDatetime,
-                  originalShipment.user?.username ?? '-'
+                  originalShipment.user?.username
                 )}
               </PanelLabel>
               <PanelField>
diff --git a/client/packages/invoices/src/Returns/InboundDetailView/columns.ts b/client/packages/invoices/src/Returns/InboundDetailView/columns.ts
index a4ca09de9..0411042bf 100644
--- a/client/packages/invoices/src/Returns/InboundDetailView/columns.ts
+++ b/client/packages/invoices/src/Returns/InboundDetailView/columns.ts
@@ -10,7 +10,6 @@ import {
   getRowExpandColumn,
   ArrayUtils,
   ColumnDescription,
-  NumUtils,
 } from '@openmsupply-client/common';
 import { InboundReturnLineFragment } from '../api';
 import { InboundReturnItem } from '../../types';
@@ -33,7 +32,7 @@ const expansionColumn = getRowExpandColumn<
 // >();
 
 const getUnitQuantity = (row: InboundReturnLineFragment) =>
-  NumUtils.floatMultiply(row.packSize, row.numberOfPacks);
+  row.packSize * row.numberOfPacks;
 
 export const useInboundReturnColumns = ({
   sortBy,
diff --git a/client/packages/invoices/src/Returns/OutboundDetailView/ContentArea.tsx b/client/packages/invoices/src/Returns/OutboundDetailView/ContentArea.tsx
index 289b87855..beca15ea4 100644
--- a/client/packages/invoices/src/Returns/OutboundDetailView/ContentArea.tsx
+++ b/client/packages/invoices/src/Returns/OutboundDetailView/ContentArea.tsx
@@ -51,23 +51,25 @@ export const ContentAreaComponent: FC<ContentAreaProps> = ({
   if (!rows) return null;
 
   return (
-    <Box flexDirection="column" display="flex" flex={1}>
-      <DataTable
-        id="outbound-detail"
-        onRowClick={onRowClick}
-        ExpandContent={Expand}
-        columns={columns}
-        data={rows}
-        enableColumnSelection
-        noDataElement={
-          <NothingHere
-            body={t('error.no-outbound-items')}
-            onCreate={isDisabled ? undefined : () => onAddItem()}
-            buttonText={t('button.add-item')}
-          />
-        }
-        isRowAnimated={true}
-      />
+    <Box flexDirection="column" style={{ width: '100%' }} display="flex">
+      <Box flex={1} style={{ overflowY: 'auto' }}>
+        <DataTable
+          id="outbound-detail"
+          onRowClick={onRowClick}
+          ExpandContent={Expand}
+          columns={columns}
+          data={rows}
+          enableColumnSelection
+          noDataElement={
+            <NothingHere
+              body={t('error.no-outbound-items')}
+              onCreate={isDisabled ? undefined : () => onAddItem()}
+              buttonText={t('button.add-item')}
+            />
+          }
+          isRowAnimated={true}
+        />
+      </Box>
     </Box>
   );
 };
diff --git a/client/packages/invoices/src/Returns/OutboundDetailView/SidePanel/AdditionalInfoSection.tsx b/client/packages/invoices/src/Returns/OutboundDetailView/SidePanel/AdditionalInfoSection.tsx
index 5c5cea4b4..112703c98 100644
--- a/client/packages/invoices/src/Returns/OutboundDetailView/SidePanel/AdditionalInfoSection.tsx
+++ b/client/packages/invoices/src/Returns/OutboundDetailView/SidePanel/AdditionalInfoSection.tsx
@@ -33,7 +33,7 @@ export const AdditionalInfoSectionComponent: FC = () => {
       <Grid container gap={0.5} key="additional-info">
         <PanelRow>
           <PanelLabel>{t('label.entered-by')}</PanelLabel>
-          <PanelField>{user?.username ?? '-'}</PanelField>
+          <PanelField>{user?.username}</PanelField>
           {user?.email ? <InfoTooltipIcon title={user?.email} /> : null}
         </PanelRow>
 
diff --git a/client/packages/invoices/src/Returns/OutboundDetailView/SidePanel/RelatedDocumentsSection.tsx b/client/packages/invoices/src/Returns/OutboundDetailView/SidePanel/RelatedDocumentsSection.tsx
index 185d6aa21..f74bf61f5 100644
--- a/client/packages/invoices/src/Returns/OutboundDetailView/SidePanel/RelatedDocumentsSection.tsx
+++ b/client/packages/invoices/src/Returns/OutboundDetailView/SidePanel/RelatedDocumentsSection.tsx
@@ -24,7 +24,9 @@ export const RelatedDocumentsSectionComponent = () => {
       date: d(new Date(createdDatetime)),
     });
 
-    return `${label} ${t('messages.by-user', { username })}`;
+    return username && username !== 'unknown'
+      ? `${label} ${t('messages.by-user', { username })}`
+      : label;
   };
 
   return (
@@ -38,7 +40,7 @@ export const RelatedDocumentsSectionComponent = () => {
               <PanelLabel>
                 {getLabel(
                   originalShipment.createdDatetime,
-                  originalShipment.user?.username ?? '-'
+                  originalShipment.user?.username
                 )}
               </PanelLabel>
               <PanelField>
diff --git a/client/packages/invoices/src/Returns/OutboundDetailView/columns.ts b/client/packages/invoices/src/Returns/OutboundDetailView/columns.ts
index a8b627b6e..4c7d86df3 100644
--- a/client/packages/invoices/src/Returns/OutboundDetailView/columns.ts
+++ b/client/packages/invoices/src/Returns/OutboundDetailView/columns.ts
@@ -11,7 +11,6 @@ import {
   ArrayUtils,
   ColumnAlign,
   ColumnDescription,
-  NumUtils,
 } from '@openmsupply-client/common';
 import { OutboundReturnLineFragment } from '../api';
 import { OutboundReturnItem } from '../../types';
@@ -33,7 +32,7 @@ const expansionColumn = getRowExpandColumn<
 // >();
 
 const getUnitQuantity = (row: OutboundReturnLineFragment) =>
-  NumUtils.floatMultiply(row.packSize, row.numberOfPacks);
+  row.packSize * row.numberOfPacks;
 
 export const useOutboundReturnColumns = ({
   sortBy,
diff --git a/client/packages/invoices/src/Returns/modals/InboundReturn/ReturnQuantitiesTable.tsx b/client/packages/invoices/src/Returns/modals/InboundReturn/ReturnQuantitiesTable.tsx
index 6423e3fda..0ca909e17 100644
--- a/client/packages/invoices/src/Returns/modals/InboundReturn/ReturnQuantitiesTable.tsx
+++ b/client/packages/invoices/src/Returns/modals/InboundReturn/ReturnQuantitiesTable.tsx
@@ -127,6 +127,7 @@ const NumberOfPacksReturnedInputCell: React.FC<
     {...props}
     isRequired
     max={props.rowData.numberOfPacksIssued ?? undefined}
+    min={0}
   />
 );
 const expiryInputColumn =
diff --git a/client/packages/invoices/src/Returns/modals/OutboundReturn/ReturnQuantitiesTable.tsx b/client/packages/invoices/src/Returns/modals/OutboundReturn/ReturnQuantitiesTable.tsx
index b2a79e6af..8955303ba 100644
--- a/client/packages/invoices/src/Returns/modals/OutboundReturn/ReturnQuantitiesTable.tsx
+++ b/client/packages/invoices/src/Returns/modals/OutboundReturn/ReturnQuantitiesTable.tsx
@@ -101,6 +101,7 @@ const NumberOfPacksToReturnReturnInputCell: React.FC<
     {...props}
     isRequired
     max={props.rowData.availableNumberOfPacks}
+    min={0}
   />
 );
 
diff --git a/client/packages/invoices/src/StockOut/utils.tsx b/client/packages/invoices/src/StockOut/utils.tsx
index 7b3257478..164869dc2 100644
--- a/client/packages/invoices/src/StockOut/utils.tsx
+++ b/client/packages/invoices/src/StockOut/utils.tsx
@@ -344,6 +344,7 @@ export const PackQuantityCell = (props: CellProps<DraftStockOutLine>) => (
     {...props}
     max={props.rowData.stockLine?.availableNumberOfPacks}
     id={getPackQuantityCellId(props.rowData.stockLine?.batch)}
+    min={0}
   />
 );
 
diff --git a/client/packages/invoices/src/utils.ts b/client/packages/invoices/src/utils.ts
index 9db421b8b..64ac5cb1b 100644
--- a/client/packages/invoices/src/utils.ts
+++ b/client/packages/invoices/src/utils.ts
@@ -10,7 +10,6 @@ import {
   ArrayUtils,
   Formatter,
   TypedTFunction,
-  noOtherVariants,
 } from '@openmsupply-client/common';
 import { OutboundFragment, OutboundRowFragment } from './OutboundShipment/api';
 import { InboundLineFragment } from './InboundShipment/api';
@@ -177,31 +176,15 @@ export const isOutboundDisabled = (
   );
 };
 
-/** Returns true if the inbound shipment cannot be edited */
 export const isInboundDisabled = (inbound: InboundRowFragment): boolean => {
   const isManuallyCreated = !inbound.linkedShipment?.id;
-  if (isManuallyCreated) {
-    return inbound.status === InvoiceNodeStatus.Verified;
-  }
-  switch (inbound.status) {
-    case InvoiceNodeStatus.New:
-    case InvoiceNodeStatus.Allocated:
-    // Inbound shipments can be edited when having been delivered
-    case InvoiceNodeStatus.Delivered:
-      return false;
-    case InvoiceNodeStatus.Picked:
-    case InvoiceNodeStatus.Shipped:
-    case InvoiceNodeStatus.Verified:
-      return true;
-    default:
-      return noOtherVariants(inbound.status);
-  }
+  return isManuallyCreated
+    ? inbound.status === InvoiceNodeStatus.Verified
+    : inbound.status === InvoiceNodeStatus.Picked ||
+        inbound.status === InvoiceNodeStatus.Shipped ||
+        inbound.status === InvoiceNodeStatus.Verified;
 };
 
-/** Returns true if the inbound shipment can be put on hold */
-export const isInboundHoldable = (inbound: InboundRowFragment): boolean =>
-  inbound.status !== InvoiceNodeStatus.Verified;
-
 export const isInboundReturnDisabled = (
   inboundReturn: InboundReturnRowFragment
 ): boolean => {
diff --git a/client/packages/programs/src/JsonForms/common/JsonForm.tsx b/client/packages/programs/src/JsonForms/common/JsonForm.tsx
index fefbf7479..b85bc9d7e 100644
--- a/client/packages/programs/src/JsonForms/common/JsonForm.tsx
+++ b/client/packages/programs/src/JsonForms/common/JsonForm.tsx
@@ -6,7 +6,7 @@ import {
   UserStoreNodeFragment,
 } from '@openmsupply-client/common';
 import { Box, useTranslation, BasicSpinner } from '@openmsupply-client/common';
-import { JsonForms, JsonFormsReactProps } from '@jsonforms/react';
+import { JsonForms } from '@jsonforms/react';
 import {
   JsonFormsRendererRegistryEntry,
   JsonSchema,
@@ -122,8 +122,7 @@ const FormComponent = ({
   setError,
   renderers,
   config,
-  onChange,
-}: JsonFormsComponentProps & JsonFormsReactProps) => {
+}: JsonFormsComponentProps) => {
   const { user, store } = useAuthContext();
   const fullConfig: JsonFormsConfig = {
     store,
@@ -170,7 +169,6 @@ const FormComponent = ({
         } else {
           setError?.(false);
         }
-        onChange?.({ errors, data });
       }}
       ajv={handleDefaultsAjv}
     />
@@ -201,9 +199,7 @@ const renderers = [
   ...materialRenderers,
 ];
 
-export const JsonForm: FC<
-  PropsWithChildren<JsonFormProps> & JsonFormsReactProps
-> = ({
+export const JsonForm: FC<PropsWithChildren<JsonFormProps>> = ({
   children,
   data,
   jsonSchema,
@@ -214,7 +210,6 @@ export const JsonForm: FC<
   updateData,
   additionalRenderers,
   config,
-  onChange,
 }) => {
   const t = useTranslation();
 
@@ -267,7 +262,6 @@ export const JsonForm: FC<
           setError={setError}
           renderers={[...renderers, ...(additionalRenderers ?? [])]}
           config={config}
-          onChange={onChange}
         />
       )}
       {children}
diff --git a/client/packages/programs/src/JsonForms/index.ts b/client/packages/programs/src/JsonForms/index.ts
index 0019876a8..bbbd362ba 100644
--- a/client/packages/programs/src/JsonForms/index.ts
+++ b/client/packages/programs/src/JsonForms/index.ts
@@ -2,5 +2,3 @@ export * from './common';
 export * from './useJsonForms';
 export * from './useDocumentFormData';
 export * from './components';
-
-export { JsonFormsReactProps } from '@jsonforms/react';
diff --git a/client/packages/requisitions/src/RequestRequisition/DetailView/RequestLineEdit/RequestLineEditForm.tsx b/client/packages/requisitions/src/RequestRequisition/DetailView/RequestLineEdit/RequestLineEditForm.tsx
index 787a73a93..495bf99fd 100644
--- a/client/packages/requisitions/src/RequestRequisition/DetailView/RequestLineEdit/RequestLineEditForm.tsx
+++ b/client/packages/requisitions/src/RequestRequisition/DetailView/RequestLineEdit/RequestLineEditForm.tsx
@@ -267,9 +267,10 @@ export const RequestLineEditForm = ({
                     )}
                     width={100}
                     onChange={quantity => {
+                      if (quantity === undefined) return;
                       update({
                         requestedQuantity:
-                          (quantity ?? 0) * currentItem.defaultPackSize,
+                          quantity * currentItem.defaultPackSize,
                       });
                     }}
                   />
diff --git a/client/packages/requisitions/src/RequestRequisition/DetailView/SidePanel.tsx b/client/packages/requisitions/src/RequestRequisition/DetailView/SidePanel.tsx
index 11df1b240..90e668e9f 100644
--- a/client/packages/requisitions/src/RequestRequisition/DetailView/SidePanel.tsx
+++ b/client/packages/requisitions/src/RequestRequisition/DetailView/SidePanel.tsx
@@ -44,7 +44,7 @@ const AdditionalInfoSection: FC = () => {
       <Grid container gap={0.5} key="additional-info">
         <PanelRow>
           <PanelLabel>{t('label.entered-by')}</PanelLabel>
-          <PanelField>{user?.username ?? '-'}</PanelField>
+          <PanelField>{user?.username}</PanelField>
           {user?.email ? <InfoTooltipIcon title={user?.email} /> : null}
         </PanelRow>
         <PanelRow>
@@ -98,7 +98,11 @@ const RelatedDocumentsSection: FC = () => {
       date: d(new Date(createdDatetime)),
     });
 
-    return (tooltip += ` ${t('messages.by-user', { username })}`);
+    if (username && username !== 'unknown') {
+      tooltip += ` ${t('messages.by-user', { username })}`;
+    }
+
+    return tooltip;
   };
 
   return (
@@ -112,7 +116,7 @@ const RelatedDocumentsSection: FC = () => {
             key={shipment.id}
             title={getTooltip(
               shipment.createdDatetime,
-              shipment.user?.username ?? '-'
+              shipment.user?.username
             )}
           >
             <Grid item>
diff --git a/client/packages/requisitions/src/RequestRequisition/ListView/ListView.tsx b/client/packages/requisitions/src/RequestRequisition/ListView/ListView.tsx
index cf9ea7620..e9e6338d7 100644
--- a/client/packages/requisitions/src/RequestRequisition/ListView/ListView.tsx
+++ b/client/packages/requisitions/src/RequestRequisition/ListView/ListView.tsx
@@ -62,7 +62,7 @@ export const RequestRequisitionListView: FC = () => {
     {
       key: 'requisitionNumber',
       label: 'label.number',
-      width: 90,
+      width: 75,
     },
     ['createdDatetime', { width: 150 }],
     {
diff --git a/client/packages/requisitions/src/ResponseRequisition/DetailView/AdditionalInfoSection.tsx b/client/packages/requisitions/src/ResponseRequisition/DetailView/AdditionalInfoSection.tsx
index f8ea9efbf..22e32d35a 100644
--- a/client/packages/requisitions/src/ResponseRequisition/DetailView/AdditionalInfoSection.tsx
+++ b/client/packages/requisitions/src/ResponseRequisition/DetailView/AdditionalInfoSection.tsx
@@ -32,7 +32,7 @@ export const AdditionalInfoSection: FC = () => {
       <Grid container gap={0.5} key="additional-info">
         <PanelRow>
           <PanelLabel>{t('label.edited-by')}</PanelLabel>
-          <PanelField>{user?.username ?? '-'}</PanelField>
+          <PanelField>{user?.username}</PanelField>
           {user?.email ? <InfoTooltipIcon title={user?.email} /> : null}
         </PanelRow>
         <PanelRow>
diff --git a/client/packages/requisitions/src/ResponseRequisition/DetailView/RelatedDocumentsSection.tsx b/client/packages/requisitions/src/ResponseRequisition/DetailView/RelatedDocumentsSection.tsx
index ee4bb9aba..01487982b 100644
--- a/client/packages/requisitions/src/ResponseRequisition/DetailView/RelatedDocumentsSection.tsx
+++ b/client/packages/requisitions/src/ResponseRequisition/DetailView/RelatedDocumentsSection.tsx
@@ -37,7 +37,11 @@ export const RelatedDocumentsSection: FC = () => {
       date: d(createdDatetime),
     });
 
-    return (tooltip += ` ${t('messages.by-user', { username })}`);
+    if (username && username !== 'unknown') {
+      tooltip += ` ${t('messages.by-user', { username })}`;
+    }
+
+    return tooltip;
   };
 
   return (
@@ -50,7 +54,7 @@ export const RelatedDocumentsSection: FC = () => {
           <Tooltip
             title={getTooltip(
               shipment.createdDatetime,
-              shipment.user?.username ?? '-'
+              shipment.user?.username
             )}
             key={shipment.id}
           >
diff --git a/client/packages/system/src/Asset/ImportCatalogueItem/CatalogueItemImportModal.tsx b/client/packages/system/src/Asset/ImportCatalogueItem/CatalogueItemImportModal.tsx
index c1b957585..d80ad4bbf 100644
--- a/client/packages/system/src/Asset/ImportCatalogueItem/CatalogueItemImportModal.tsx
+++ b/client/packages/system/src/Asset/ImportCatalogueItem/CatalogueItemImportModal.tsx
@@ -22,6 +22,7 @@ import {
   AssetCatalogueItemFragment,
   useAssetData,
 } from '@openmsupply-client/system';
+import { AssetProperty } from '../api/api';
 
 interface AssetItemImportModalProps {
   isOpen: boolean;
@@ -47,7 +48,7 @@ export type ImportRow = {
   type: string;
   typeId?: string;
   errorMessage?: string;
-  properties: Record<string, string>;
+  properties: Record<string, AssetProperty>;
 };
 
 export type LineNumber = {
@@ -64,7 +65,6 @@ const toInsertAssetItemInput = (row: ImportRow): AssetCatalogueItemFragment => {
     assetClassId: row.classId ?? '',
     assetCategoryId: row.categoryId ?? '',
     assetTypeId: row.typeId ?? '',
-    properties: JSON.stringify(row.properties),
   };
 };
 
@@ -101,6 +101,9 @@ export const AssetCatalogueItemImportModal: FC<AssetItemImportModalProps> = ({
   const { insertAssetCatalogueItem, invalidateQueries } =
     useAssetData.document.insert();
 
+  const { insertAssetCatalogueItemProperty } =
+    useAssetData.document.insertProperty();
+
   const [bufferedAssetItem, setBufferedAssetItem] = useState<ImportRow[]>(
     () => []
   );
@@ -181,6 +184,17 @@ export const AssetCatalogueItemImportModal: FC<AssetItemImportModalProps> = ({
                   });
                   return;
                 }
+
+                await Promise.all(
+                  Object.values(asset.properties).map(async property => {
+                    await insertAssetCatalogueItemProperty({
+                      catalogueItemId: result.id,
+                      property,
+                    });
+                  })
+                );
+
+                invalidateQueries();
               })
               .catch(err => {
                 if (!err) {
@@ -200,7 +214,6 @@ export const AssetCatalogueItemImportModal: FC<AssetItemImportModalProps> = ({
           setImportErrorCount(importErrorRows.length);
         });
       }
-      invalidateQueries();
       if (importErrorRows.length === 0) {
         const importMessage = t('messages.import-generic', {
           count: numberImportRecords,
diff --git a/client/packages/system/src/Asset/ImportCatalogueItem/UploadTab.tsx b/client/packages/system/src/Asset/ImportCatalogueItem/UploadTab.tsx
index 53a81a076..d9dd27ea0 100644
--- a/client/packages/system/src/Asset/ImportCatalogueItem/UploadTab.tsx
+++ b/client/packages/system/src/Asset/ImportCatalogueItem/UploadTab.tsx
@@ -66,7 +66,8 @@ const processProperties = (
   t: TypedTFunction<LocaleKey>
 ) => {
   properties?.forEach(property => {
-    const value = row[property.name] ?? row[property.key];
+    const value = row[property.name];
+
     if (!!value?.trim()) {
       if (!!property.allowedValues) {
         const allowedValues = property.allowedValues.split(',');
@@ -90,15 +91,18 @@ const processProperties = (
               })
             );
           }
-          importRow.properties[property.key] = value;
+          importRow.properties[property.id] = { ...property, value };
           break;
         case 'BOOLEAN':
           const isTrue =
             value.toLowerCase() === 'true' || value.toLowerCase() === 'yes';
-          importRow.properties[property.key] = isTrue ? 'true' : 'false';
+          importRow.properties[property.id] = {
+            ...property,
+            value: isTrue ? 'true' : 'false',
+          };
           break;
         default:
-          importRow.properties[property.key] = value;
+          importRow.properties[property.id] = { ...property, value };
       }
     }
   });
@@ -156,11 +160,9 @@ export const AssetItemUploadTab: FC<ImportPanel & AssetItemUploadTabProps> = ({
     if (csvFile) {
       setIsLoading(true);
       Papa.parse(csvFile, {
-        delimiter: ',',
         header: true,
         worker: true,
         skipEmptyLines: true,
-        fastMode: false,
         chunkSize: 100 * 1024, // 100kb
         chunk: processUploadedDataChunk,
         complete: () => {
@@ -175,19 +177,7 @@ export const AssetItemUploadTab: FC<ImportPanel & AssetItemUploadTabProps> = ({
 
   const processUploadedDataChunk = (data: ParseResult<ParsedImport>) => {
     if (!data.data || !Array.isArray(data.data)) {
-      setErrorMessage(
-        t('messages.upload-error', {
-          error: t('messages.no-data-found'),
-        })
-      );
-    }
-
-    if (data.errors.length > 0) {
-      setErrorMessage(
-        t('messages.upload-error', {
-          error: data.errors[0]?.message + ' ROW: ' + data.errors[0]?.row,
-        })
-      );
+      setErrorMessage(t('messages.import-error'));
     }
 
     const csvRows = data.data;
diff --git a/client/packages/system/src/Asset/ListView/EditableInput.tsx b/client/packages/system/src/Asset/ListView/EditableInput.tsx
deleted file mode 100644
index 057bc93ea..000000000
--- a/client/packages/system/src/Asset/ListView/EditableInput.tsx
+++ /dev/null
@@ -1,11 +0,0 @@
-import React from 'react';
-import { CellProps, Input, RecordWithId } from '@openmsupply-client/common';
-
-export const EditableInput = <T extends RecordWithId>({
-  column,
-  rowData,
-}: CellProps<T>): React.ReactElement<CellProps<T>> => {
-  const text = String(column.accessor({ rowData }) ?? '');
-
-  return <Input title={text} defaultValue={text}></Input>;
-};
diff --git a/client/packages/system/src/Asset/ListView/ListView.tsx b/client/packages/system/src/Asset/ListView/ListView.tsx
index ecf35774a..00c02b67c 100644
--- a/client/packages/system/src/Asset/ListView/ListView.tsx
+++ b/client/packages/system/src/Asset/ListView/ListView.tsx
@@ -1,5 +1,6 @@
 import React, { FC } from 'react';
 import {
+  // useNavigate,
   TableProvider,
   DataTable,
   useColumns,
@@ -14,7 +15,6 @@ import { AssetCatalogueItemFragment, useAssetData } from '../api';
 import { Toolbar } from './Toolbar';
 import { AppBarButtons } from './AppBarButtons';
 import { AssetCatalogueItemImportModal } from '../ImportCatalogueItem';
-import { EditableInput } from './EditableInput';
 
 const AssetListComponent: FC = () => {
   const {
@@ -34,6 +34,7 @@ const AssetListComponent: FC = () => {
   });
   const { data, isError, isLoading } = useAssetData.document.list();
   const pagination = { page, first, offset };
+  // const navigate = useNavigate();
   const t = useTranslation('catalogue');
   const importModalController = useToggle();
 
@@ -59,7 +60,7 @@ const AssetListComponent: FC = () => {
         label: 'label.manufacturer',
       },
       {
-        Cell: EditableInput,
+        Cell: TooltipTextCell,
         key: 'model',
         label: 'label.model',
         width: 200,
@@ -102,6 +103,9 @@ const AssetListComponent: FC = () => {
         data={data?.nodes}
         isError={isError}
         isLoading={isLoading}
+        // onRowClick={row => {
+        //   navigate(`/catalogue/assets/${row.id}`);
+        // }}
         noDataElement={<NothingHere body={t('error.no-items')} />}
         enableColumnSelection
       />
diff --git a/client/packages/system/src/Asset/api/api.ts b/client/packages/system/src/Asset/api/api.ts
index 0dfb0f481..891e5d081 100644
--- a/client/packages/system/src/Asset/api/api.ts
+++ b/client/packages/system/src/Asset/api/api.ts
@@ -11,9 +11,18 @@ import {
   AssetLogStatusInput,
   AssetLogReasonFilterInput,
   InsertAssetCatalogueItemInput,
-  AssetPropertyFilterInput,
+  AssetCataloguePropertyFilterInput,
+  InsertAssetCatalogueItemPropertyInput,
 } from '@openmsupply-client/common';
-import { Sdk, AssetCatalogueItemFragment } from './operations.generated';
+import {
+  Sdk,
+  AssetCatalogueItemFragment,
+  AssetPropertyFragment,
+} from './operations.generated';
+
+export type AssetProperty = Omit<AssetPropertyFragment, '__typename'> & {
+  value?: string;
+};
 
 export type ListParams<T> = {
   first: number;
@@ -44,8 +53,34 @@ const itemParsers = {
     classId: input.assetClassId,
     categoryId: input.assetCategoryId,
     typeId: input.assetTypeId,
-    properties: input.properties,
   }),
+  toInsertProperty: (
+    catalogueItemId: string,
+    input: AssetProperty
+  ): InsertAssetCatalogueItemPropertyInput => {
+    const insertProperty: InsertAssetCatalogueItemPropertyInput = {
+      id: input.id ?? '',
+      catalogueItemId,
+      cataloguePropertyId: input.id,
+    };
+
+    switch (input.valueType) {
+      case 'STRING':
+        insertProperty.valueString = input.value;
+        break;
+      case 'INTEGER':
+        insertProperty.valueInt = Number(input.value);
+        break;
+      case 'FLOAT':
+        insertProperty.valueFloat = Number(input.value);
+        break;
+      case 'BOOLEAN':
+        insertProperty.valueBool = input.value === 'true';
+        break;
+    }
+
+    return insertProperty;
+  },
 };
 
 const logReasonParsers = {
@@ -146,13 +181,18 @@ export const getAssetQueries = (sdk: Sdk, currentStoreId: string) => ({
 
       return types;
     },
-    properties: async (filter: AssetPropertyFilterInput | undefined) => {
-      const result = await sdk.assetProperties({
+    properties: async (
+      filter: AssetCataloguePropertyFilterInput | undefined
+    ) => {
+      const result = await sdk.assetCatalogueProperties({
         filter,
       });
 
-      if (result?.assetProperties?.__typename === 'AssetPropertyConnector') {
-        return result?.assetProperties?.nodes;
+      if (
+        result?.assetCatalogueProperties?.__typename ===
+        'AssetCataloguePropertyConnector'
+      ) {
+        return result?.assetCatalogueProperties?.nodes;
       }
 
       throw new Error('Unable to fetch properties');
@@ -201,6 +241,20 @@ export const getAssetQueries = (sdk: Sdk, currentStoreId: string) => ({
 
     return insertAssetCatalogueItem;
   },
+  insertProperty: async (
+    catalogueItemId: string,
+    input: AssetProperty,
+    storeId: string
+  ) => {
+    const result = await sdk.insertAssetCatalogueItemProperty({
+      input: itemParsers.toInsertProperty(catalogueItemId, input),
+      storeId,
+    });
+    const insertAssetCatalogueItemProperty =
+      result.centralServer.assetCatalogue.insertAssetCatalogueItemProperty;
+
+    return insertAssetCatalogueItemProperty;
+  },
   delete: async (id: string) => {
     const result = await sdk.deleteAssetCatalogueItem({
       assetCatalogueItemId: id,
@@ -215,19 +269,3 @@ export const getAssetQueries = (sdk: Sdk, currentStoreId: string) => ({
     throw new Error('Could not delete asset catalogue item');
   },
 });
-
-export const getAssetPropertyQueries = (sdk: Sdk) => ({
-  get: {
-    properties: async (filter: AssetPropertyFilterInput | undefined) => {
-      const result = await sdk.assetProperties({
-        filter,
-      });
-
-      if (result?.assetProperties?.__typename === 'AssetPropertyConnector') {
-        return result?.assetProperties?.nodes;
-      }
-
-      throw new Error('Unable to fetch properties');
-    },
-  },
-});
diff --git a/client/packages/system/src/Asset/api/hooks/document/index.ts b/client/packages/system/src/Asset/api/hooks/document/index.ts
index f04aef170..83999f814 100644
--- a/client/packages/system/src/Asset/api/hooks/document/index.ts
+++ b/client/packages/system/src/Asset/api/hooks/document/index.ts
@@ -5,6 +5,7 @@ import { useAssetsAll } from './useAssetsAll';
 import { useInfiniteAssets } from './useInfiniteAssets';
 import { useAssetItemInsert } from './useAssetItemInsert';
 import { useAssetsDelete } from './useAssetsDelete';
+import { useAssetItemPropertyInsert } from './useAssetItemPropertyInsert';
 
 export const Document = {
   useAsset,
@@ -14,4 +15,5 @@ export const Document = {
   useInfiniteAssets,
   useAssetItemInsert,
   useAssetsDelete,
+  useAssetItemPropertyInsert,
 };
diff --git a/client/packages/system/src/Asset/api/hooks/document/useAssetItemPropertyInsert.ts b/client/packages/system/src/Asset/api/hooks/document/useAssetItemPropertyInsert.ts
new file mode 100644
index 000000000..8a32680e6
--- /dev/null
+++ b/client/packages/system/src/Asset/api/hooks/document/useAssetItemPropertyInsert.ts
@@ -0,0 +1,33 @@
+import {
+  useAuthContext,
+  useMutation,
+  useQueryClient,
+} from '@openmsupply-client/common';
+import { useAssetApi } from '../utils/useAssetApi';
+import { AssetProperty } from '../../api';
+
+export const useAssetItemPropertyInsert = () => {
+  const queryClient = useQueryClient();
+  const api = useAssetApi();
+  const storeId = useAuthContext().storeId;
+
+  const invalidateQueries = () =>
+    queryClient.invalidateQueries(api.keys.base());
+
+  const { mutateAsync: insertAssetCatalogueItemProperty } = useMutation(
+    async ({
+      catalogueItemId,
+      property,
+    }: {
+      catalogueItemId: string;
+      property: AssetProperty;
+    }) => api.insertProperty(catalogueItemId, property, storeId),
+    {
+      onError: e => {
+        console.error(e);
+      },
+    }
+  );
+
+  return { invalidateQueries, insertAssetCatalogueItemProperty };
+};
diff --git a/client/packages/system/src/Asset/api/hooks/index.ts b/client/packages/system/src/Asset/api/hooks/index.ts
index 79d154d3a..ce64053ca 100644
--- a/client/packages/system/src/Asset/api/hooks/index.ts
+++ b/client/packages/system/src/Asset/api/hooks/index.ts
@@ -7,7 +7,7 @@ export const useAssetData = {
     classes: Utils.useAssetClasses,
     categories: Utils.useAssetCategories,
     types: Utils.useAssetTypes,
-    properties: Utils.useAssetProperties,
+    properties: Utils.useAssetCatalogueProperties,
   },
 
   document: {
@@ -18,6 +18,7 @@ export const useAssetData = {
 
     fields: Document.useAssetFields,
     insert: Document.useAssetItemInsert,
+    insertProperty: Document.useAssetItemPropertyInsert,
     delete: Document.useAssetsDelete,
   },
 
diff --git a/client/packages/system/src/Asset/api/hooks/utils/index.ts b/client/packages/system/src/Asset/api/hooks/utils/index.ts
index 7e761dec4..06ac58f6a 100644
--- a/client/packages/system/src/Asset/api/hooks/utils/index.ts
+++ b/client/packages/system/src/Asset/api/hooks/utils/index.ts
@@ -1,11 +1,11 @@
 import { useAssetCategories } from './useAssetCategories';
 import { useAssetClasses } from './useAssetClasses';
 import { useAssetTypes } from './useAssetTypes';
-import { useAssetProperties } from './useAssetProperties';
+import { useAssetCatalogueProperties } from './useAssetCatalogueProperties';
 
 export const Utils = {
+  useAssetCatalogueProperties,
   useAssetCategories,
   useAssetClasses,
   useAssetTypes,
-  useAssetProperties,
 };
diff --git a/client/packages/system/src/Asset/api/hooks/utils/useAssetApi.ts b/client/packages/system/src/Asset/api/hooks/utils/useAssetApi.ts
index e72876efc..4f8b17d36 100644
--- a/client/packages/system/src/Asset/api/hooks/utils/useAssetApi.ts
+++ b/client/packages/system/src/Asset/api/hooks/utils/useAssetApi.ts
@@ -1,6 +1,6 @@
 import { getAssetQueries, ListParams } from '../../api';
 import {
-  AssetPropertyFilterInput,
+  AssetCataloguePropertyFilterInput,
   AssetTypeFilterInput,
   SortBy,
   useAuthContext,
@@ -31,7 +31,7 @@ export const useAssetApi = () => {
     classes: () => [...keys.base(), 'classes'] as const,
     types: (filter?: AssetTypeFilterInput) =>
       [...keys.base(), filter, 'types'] as const,
-    properties: (filter?: AssetPropertyFilterInput) =>
+    properties: (filter?: AssetCataloguePropertyFilterInput) =>
       [filter, 'properties'] as const,
   };
 
diff --git a/client/packages/system/src/Asset/api/hooks/utils/useAssetCatalogueProperties.ts b/client/packages/system/src/Asset/api/hooks/utils/useAssetCatalogueProperties.ts
new file mode 100644
index 000000000..11de7f87b
--- /dev/null
+++ b/client/packages/system/src/Asset/api/hooks/utils/useAssetCatalogueProperties.ts
@@ -0,0 +1,14 @@
+import {
+  AssetCataloguePropertyFilterInput,
+  useQuery,
+} from '@openmsupply-client/common';
+import { useAssetApi } from '../utils/useAssetApi';
+
+export const useAssetCatalogueProperties = (
+  filter?: AssetCataloguePropertyFilterInput
+) => {
+  const api = useAssetApi();
+  return useQuery(api.keys.properties(filter), () =>
+    api.get.properties(filter)
+  );
+};
diff --git a/client/packages/system/src/Asset/api/hooks/utils/useAssetProperties.ts b/client/packages/system/src/Asset/api/hooks/utils/useAssetProperties.ts
deleted file mode 100644
index 012a6dce4..000000000
--- a/client/packages/system/src/Asset/api/hooks/utils/useAssetProperties.ts
+++ /dev/null
@@ -1,9 +0,0 @@
-import { AssetPropertyFilterInput, useQuery } from '@openmsupply-client/common';
-import { useAssetApi } from './useAssetApi';
-
-export const useAssetProperties = (filter?: AssetPropertyFilterInput) => {
-  const api = useAssetApi();
-  return useQuery(api.keys.properties(filter), () =>
-    api.get.properties(filter)
-  );
-};
diff --git a/client/packages/system/src/Asset/api/operations.generated.ts b/client/packages/system/src/Asset/api/operations.generated.ts
index 292c2e661..7a46426ec 100644
--- a/client/packages/system/src/Asset/api/operations.generated.ts
+++ b/client/packages/system/src/Asset/api/operations.generated.ts
@@ -4,9 +4,9 @@ import { GraphQLClient } from 'graphql-request';
 import { GraphQLClientRequestHeaders } from 'graphql-request/build/cjs/types';
 import gql from 'graphql-tag';
 import { graphql, ResponseResolver, GraphQLRequest, GraphQLContext } from 'msw'
-export type AssetCatalogueItemFragment = { __typename: 'AssetCatalogueItemNode', assetCategoryId: string, assetClassId: string, assetTypeId: string, code: string, id: string, manufacturer?: string | null, model: string, subCatalogue: string, properties: string, assetClass?: { __typename: 'AssetClassNode', name: string } | null, assetCategory?: { __typename: 'AssetCategoryNode', name: string } | null, assetType?: { __typename: 'AssetTypeNode', name: string } | null };
+export type AssetCatalogueItemFragment = { __typename: 'AssetCatalogueItemNode', assetCategoryId: string, assetClassId: string, assetTypeId: string, code: string, id: string, manufacturer?: string | null, model: string, subCatalogue: string, assetClass?: { __typename: 'AssetClassNode', name: string } | null, assetCategory?: { __typename: 'AssetCategoryNode', name: string } | null, assetType?: { __typename: 'AssetTypeNode', name: string } | null };
 
-export type AssetPropertyFragment = { __typename: 'AssetPropertyNode', id: string, key: string, name: string, allowedValues?: string | null, valueType: Types.PropertyNodeValueType };
+export type AssetPropertyFragment = { __typename: 'AssetCataloguePropertyNode', id: string, allowedValues?: string | null, name: string, valueType: Types.PropertyNodeValueType };
 
 export type AssetLogFragment = { __typename: 'AssetLogNode', comment?: string | null, id: string, logDatetime: any, status?: Types.StatusType | null, type?: string | null, reason?: { __typename: 'AssetLogReasonNode', reason: string } | null, user?: { __typename: 'UserNode', firstName?: string | null, lastName?: string | null, username: string, jobTitle?: string | null } | null };
 
@@ -21,14 +21,14 @@ export type AssetCatalogueItemsQueryVariables = Types.Exact<{
 }>;
 
 
-export type AssetCatalogueItemsQuery = { __typename: 'Queries', assetCatalogueItems: { __typename: 'AssetCatalogueItemConnector', totalCount: number, nodes: Array<{ __typename: 'AssetCatalogueItemNode', assetCategoryId: string, assetClassId: string, assetTypeId: string, code: string, id: string, manufacturer?: string | null, model: string, subCatalogue: string, properties: string, assetClass?: { __typename: 'AssetClassNode', name: string } | null, assetCategory?: { __typename: 'AssetCategoryNode', name: string } | null, assetType?: { __typename: 'AssetTypeNode', name: string } | null }> } };
+export type AssetCatalogueItemsQuery = { __typename: 'Queries', assetCatalogueItems: { __typename: 'AssetCatalogueItemConnector', totalCount: number, nodes: Array<{ __typename: 'AssetCatalogueItemNode', assetCategoryId: string, assetClassId: string, assetTypeId: string, code: string, id: string, manufacturer?: string | null, model: string, subCatalogue: string, assetClass?: { __typename: 'AssetClassNode', name: string } | null, assetCategory?: { __typename: 'AssetCategoryNode', name: string } | null, assetType?: { __typename: 'AssetTypeNode', name: string } | null }> } };
 
 export type AssetCatalogueItemByIdQueryVariables = Types.Exact<{
   assetCatalogueItemId: Types.Scalars['String']['input'];
 }>;
 
 
-export type AssetCatalogueItemByIdQuery = { __typename: 'Queries', assetCatalogueItems: { __typename: 'AssetCatalogueItemConnector', totalCount: number, nodes: Array<{ __typename: 'AssetCatalogueItemNode', assetCategoryId: string, assetClassId: string, assetTypeId: string, code: string, id: string, manufacturer?: string | null, model: string, subCatalogue: string, properties: string, assetClass?: { __typename: 'AssetClassNode', name: string } | null, assetCategory?: { __typename: 'AssetCategoryNode', name: string } | null, assetType?: { __typename: 'AssetTypeNode', name: string } | null }> } };
+export type AssetCatalogueItemByIdQuery = { __typename: 'Queries', assetCatalogueItems: { __typename: 'AssetCatalogueItemConnector', totalCount: number, nodes: Array<{ __typename: 'AssetCatalogueItemNode', assetCategoryId: string, assetClassId: string, assetTypeId: string, code: string, id: string, manufacturer?: string | null, model: string, subCatalogue: string, assetClass?: { __typename: 'AssetClassNode', name: string } | null, assetCategory?: { __typename: 'AssetCategoryNode', name: string } | null, assetType?: { __typename: 'AssetTypeNode', name: string } | null }> } };
 
 export type AssetClassesQueryVariables = Types.Exact<{
   sort?: Types.InputMaybe<Types.AssetClassSortInput>;
@@ -53,12 +53,12 @@ export type AssetCategoriesQueryVariables = Types.Exact<{
 
 export type AssetCategoriesQuery = { __typename: 'Queries', assetCategories: { __typename: 'AssetCategoryConnector', totalCount: number, nodes: Array<{ __typename: 'AssetCategoryNode', id: string, name: string, classId: string }> } };
 
-export type AssetPropertiesQueryVariables = Types.Exact<{
-  filter?: Types.InputMaybe<Types.AssetPropertyFilterInput>;
+export type AssetCataloguePropertiesQueryVariables = Types.Exact<{
+  filter?: Types.InputMaybe<Types.AssetCataloguePropertyFilterInput>;
 }>;
 
 
-export type AssetPropertiesQuery = { __typename: 'Queries', assetProperties: { __typename: 'AssetPropertyConnector', nodes: Array<{ __typename: 'AssetPropertyNode', id: string, key: string, name: string, allowedValues?: string | null, valueType: Types.PropertyNodeValueType }> } };
+export type AssetCataloguePropertiesQuery = { __typename: 'Queries', assetCatalogueProperties: { __typename: 'AssetCataloguePropertyConnector', nodes: Array<{ __typename: 'AssetCataloguePropertyNode', id: string, allowedValues?: string | null, name: string, valueType: Types.PropertyNodeValueType }> } | { __typename: 'NodeError' } };
 
 export type AssetLogReasonsQueryVariables = Types.Exact<{
   filter?: Types.InputMaybe<Types.AssetLogReasonFilterInput>;
@@ -84,6 +84,14 @@ export type DeleteAssetCatalogueItemMutationVariables = Types.Exact<{
 
 export type DeleteAssetCatalogueItemMutation = { __typename: 'Mutations', centralServer: { __typename: 'CentralServerMutationNode', assetCatalogue: { __typename: 'AssetCatalogueMutations', deleteAssetCatalogueItem: { __typename: 'DeleteAssetCatalogueItemError', error: { __typename: 'DatabaseError', description: string } | { __typename: 'RecordNotFound', description: string } } | { __typename: 'DeleteResponse', id: string } } } };
 
+export type InsertAssetCatalogueItemPropertyMutationVariables = Types.Exact<{
+  storeId: Types.Scalars['String']['input'];
+  input: Types.InsertAssetCatalogueItemPropertyInput;
+}>;
+
+
+export type InsertAssetCatalogueItemPropertyMutation = { __typename: 'Mutations', centralServer: { __typename: 'CentralServerMutationNode', assetCatalogue: { __typename: 'AssetCatalogueMutations', insertAssetCatalogueItemProperty: { __typename: 'AssetCatalogueItemPropertyNode', id: string } | { __typename: 'InsertAssetCatalogueItemPropertyError', error: { __typename: 'DatabaseError', description: string } | { __typename: 'InternalError', description: string } | { __typename: 'RecordAlreadyExist', description: string } } } } };
+
 export type InsertAssetLogReasonMutationVariables = Types.Exact<{
   input: Types.InsertAssetLogReasonInput;
 }>;
@@ -117,15 +125,13 @@ export const AssetCatalogueItemFragmentDoc = gql`
   assetType {
     name
   }
-  properties
 }
     `;
 export const AssetPropertyFragmentDoc = gql`
-    fragment AssetProperty on AssetPropertyNode {
+    fragment AssetProperty on AssetCataloguePropertyNode {
   id
-  key
-  name
   allowedValues
+  name
   valueType
 }
     `;
@@ -223,16 +229,19 @@ export const AssetCategoriesDocument = gql`
   }
 }
     `;
-export const AssetPropertiesDocument = gql`
-    query assetProperties($filter: AssetPropertyFilterInput) {
-  assetProperties(filter: $filter) {
-    ... on AssetPropertyConnector {
+export const AssetCataloguePropertiesDocument = gql`
+    query assetCatalogueProperties($filter: AssetCataloguePropertyFilterInput) {
+  assetCatalogueProperties(filter: $filter) {
+    ... on AssetCataloguePropertyConnector {
       __typename
       nodes {
         __typename
         ...AssetProperty
       }
     }
+    ... on NodeError {
+      __typename
+    }
   }
 }
     ${AssetPropertyFragmentDoc}`;
@@ -302,6 +311,26 @@ export const DeleteAssetCatalogueItemDocument = gql`
   }
 }
     `;
+export const InsertAssetCatalogueItemPropertyDocument = gql`
+    mutation insertAssetCatalogueItemProperty($storeId: String!, $input: InsertAssetCatalogueItemPropertyInput!) {
+  centralServer {
+    assetCatalogue {
+      insertAssetCatalogueItemProperty(input: $input, storeId: $storeId) {
+        ... on AssetCatalogueItemPropertyNode {
+          __typename
+          id
+        }
+        ... on InsertAssetCatalogueItemPropertyError {
+          __typename
+          error {
+            description
+          }
+        }
+      }
+    }
+  }
+}
+    `;
 export const InsertAssetLogReasonDocument = gql`
     mutation insertAssetLogReason($input: InsertAssetLogReasonInput!) {
   centralServer {
@@ -366,8 +395,8 @@ export function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper =
     assetCategories(variables?: AssetCategoriesQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AssetCategoriesQuery> {
       return withWrapper((wrappedRequestHeaders) => client.request<AssetCategoriesQuery>(AssetCategoriesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'assetCategories', 'query');
     },
-    assetProperties(variables?: AssetPropertiesQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AssetPropertiesQuery> {
-      return withWrapper((wrappedRequestHeaders) => client.request<AssetPropertiesQuery>(AssetPropertiesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'assetProperties', 'query');
+    assetCatalogueProperties(variables?: AssetCataloguePropertiesQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AssetCataloguePropertiesQuery> {
+      return withWrapper((wrappedRequestHeaders) => client.request<AssetCataloguePropertiesQuery>(AssetCataloguePropertiesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'assetCatalogueProperties', 'query');
     },
     assetLogReasons(variables: AssetLogReasonsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AssetLogReasonsQuery> {
       return withWrapper((wrappedRequestHeaders) => client.request<AssetLogReasonsQuery>(AssetLogReasonsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'assetLogReasons', 'query');
@@ -378,6 +407,9 @@ export function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper =
     deleteAssetCatalogueItem(variables: DeleteAssetCatalogueItemMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<DeleteAssetCatalogueItemMutation> {
       return withWrapper((wrappedRequestHeaders) => client.request<DeleteAssetCatalogueItemMutation>(DeleteAssetCatalogueItemDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'deleteAssetCatalogueItem', 'mutation');
     },
+    insertAssetCatalogueItemProperty(variables: InsertAssetCatalogueItemPropertyMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<InsertAssetCatalogueItemPropertyMutation> {
+      return withWrapper((wrappedRequestHeaders) => client.request<InsertAssetCatalogueItemPropertyMutation>(InsertAssetCatalogueItemPropertyDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'insertAssetCatalogueItemProperty', 'mutation');
+    },
     insertAssetLogReason(variables: InsertAssetLogReasonMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<InsertAssetLogReasonMutation> {
       return withWrapper((wrappedRequestHeaders) => client.request<InsertAssetLogReasonMutation>(InsertAssetLogReasonDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'insertAssetLogReason', 'mutation');
     },
@@ -477,16 +509,16 @@ export const mockAssetCategoriesQuery = (resolver: ResponseResolver<GraphQLReque
  * @param resolver a function that accepts a captured request and may return a mocked response.
  * @see https://mswjs.io/docs/basics/response-resolver
  * @example
- * mockAssetPropertiesQuery((req, res, ctx) => {
+ * mockAssetCataloguePropertiesQuery((req, res, ctx) => {
  *   const { filter } = req.variables;
  *   return res(
- *     ctx.data({ assetProperties })
+ *     ctx.data({ assetCatalogueProperties })
  *   )
  * })
  */
-export const mockAssetPropertiesQuery = (resolver: ResponseResolver<GraphQLRequest<AssetPropertiesQueryVariables>, GraphQLContext<AssetPropertiesQuery>, any>) =>
-  graphql.query<AssetPropertiesQuery, AssetPropertiesQueryVariables>(
-    'assetProperties',
+export const mockAssetCataloguePropertiesQuery = (resolver: ResponseResolver<GraphQLRequest<AssetCataloguePropertiesQueryVariables>, GraphQLContext<AssetCataloguePropertiesQuery>, any>) =>
+  graphql.query<AssetCataloguePropertiesQuery, AssetCataloguePropertiesQueryVariables>(
+    'assetCatalogueProperties',
     resolver
   )
 
@@ -541,6 +573,23 @@ export const mockDeleteAssetCatalogueItemMutation = (resolver: ResponseResolver<
     resolver
   )
 
+/**
+ * @param resolver a function that accepts a captured request and may return a mocked response.
+ * @see https://mswjs.io/docs/basics/response-resolver
+ * @example
+ * mockInsertAssetCatalogueItemPropertyMutation((req, res, ctx) => {
+ *   const { storeId, input } = req.variables;
+ *   return res(
+ *     ctx.data({ centralServer })
+ *   )
+ * })
+ */
+export const mockInsertAssetCatalogueItemPropertyMutation = (resolver: ResponseResolver<GraphQLRequest<InsertAssetCatalogueItemPropertyMutationVariables>, GraphQLContext<InsertAssetCatalogueItemPropertyMutation>, any>) =>
+  graphql.mutation<InsertAssetCatalogueItemPropertyMutation, InsertAssetCatalogueItemPropertyMutationVariables>(
+    'insertAssetCatalogueItemProperty',
+    resolver
+  )
+
 /**
  * @param resolver a function that accepts a captured request and may return a mocked response.
  * @see https://mswjs.io/docs/basics/response-resolver
diff --git a/client/packages/system/src/Asset/api/operations.graphql b/client/packages/system/src/Asset/api/operations.graphql
index 758497af8..f0bb3631c 100644
--- a/client/packages/system/src/Asset/api/operations.graphql
+++ b/client/packages/system/src/Asset/api/operations.graphql
@@ -16,14 +16,12 @@ fragment AssetCatalogueItem on AssetCatalogueItemNode {
   assetType {
     name
   }
-  properties
 }
 
-fragment AssetProperty on AssetPropertyNode {
+fragment AssetProperty on AssetCataloguePropertyNode {
   id
-  key
-  name
   allowedValues
+  name
   valueType
 }
 
@@ -123,15 +121,18 @@ query assetCategories(
   }
 }
 
-query assetProperties($filter: AssetPropertyFilterInput) {
-  assetProperties(filter: $filter) {
-    ... on AssetPropertyConnector {
+query assetCatalogueProperties($filter: AssetCataloguePropertyFilterInput) {
+  assetCatalogueProperties(filter: $filter) {
+    ... on AssetCataloguePropertyConnector {
       __typename
       nodes {
         __typename
         ...AssetProperty
       }
     }
+    ... on NodeError {
+      __typename
+    }
   }
 }
 
@@ -205,6 +206,28 @@ mutation deleteAssetCatalogueItem($assetCatalogueItemId: String!) {
   }
 }
 
+mutation insertAssetCatalogueItemProperty(
+  $storeId: String!
+  $input: InsertAssetCatalogueItemPropertyInput!
+) {
+  centralServer {
+    assetCatalogue {
+      insertAssetCatalogueItemProperty(input: $input, storeId: $storeId) {
+        ... on AssetCatalogueItemPropertyNode {
+          __typename
+          id
+        }
+        ... on InsertAssetCatalogueItemPropertyError {
+          __typename
+          error {
+            description
+          }
+        }
+      }
+    }
+  }
+}
+
 mutation insertAssetLogReason($input: InsertAssetLogReasonInput!) {
   centralServer {
     logReason {
diff --git a/client/packages/system/src/Asset/utils.ts b/client/packages/system/src/Asset/utils.ts
index c8cc04d8c..432f0e84d 100644
--- a/client/packages/system/src/Asset/utils.ts
+++ b/client/packages/system/src/Asset/utils.ts
@@ -1,6 +1,6 @@
 import { LocaleKey, TypedTFunction } from '@common/intl';
 import { AssetCatalogueItemFragment } from './api';
-import { ArrayUtils, Formatter } from '@common/utils';
+import { Formatter } from '@common/utils';
 import { ImportRow, LineNumber } from './ImportCatalogueItem';
 import { AssetLogStatusInput, StatusType } from '@common/types';
 
@@ -93,7 +93,9 @@ export const importRowToCsv = (
 ) => {
   const props =
     properties ??
-    ArrayUtils.dedupe(Object.keys(catalogueItems[0]?.properties ?? {}));
+    Object.values(catalogueItems[0]?.properties ?? {}).map(
+      property => property.name
+    );
   const fields = assetCatalogueItemFields(t).concat(props);
   if (includeErrors) fields.push(t('label.error-message'));
 
@@ -106,7 +108,9 @@ export const importRowToCsv = (
       node.model,
       node.class,
       node.category,
-    ].concat(props.map(key => node.properties?.[key] ?? ''));
+    ].concat(
+      Object.values(node?.properties ?? {}).map(property => property.value)
+    );
     row.push(node.errorMessage);
     return row;
   });
diff --git a/client/packages/system/src/Encounter/DetailView/SidePanel.tsx b/client/packages/system/src/Encounter/DetailView/SidePanel.tsx
index 9a92f0009..b5c6e4858 100644
--- a/client/packages/system/src/Encounter/DetailView/SidePanel.tsx
+++ b/client/packages/system/src/Encounter/DetailView/SidePanel.tsx
@@ -39,7 +39,7 @@ export const SidePanel: FC<SidePanelProps> = ({ encounter, onChange }) => {
     encounter.document.data?.notes?.[0]?.text ?? ''
   );
   const [createdBy, setCreatedBy] = useState(
-    encounter?.document?.data?.createdBy?.username ?? '-'
+    encounter?.document?.data?.createdBy?.username ?? ''
   );
   const { user } = useAuthContext();
   const { localisedDate } = useFormatDateTime();
diff --git a/client/packages/system/src/Immunisation/ImmunisationProgramView/AppBarButtons.tsx b/client/packages/system/src/Immunisation/ImmunisationProgramView/AppBarButtons.tsx
deleted file mode 100644
index 4ac7872b6..000000000
--- a/client/packages/system/src/Immunisation/ImmunisationProgramView/AppBarButtons.tsx
+++ /dev/null
@@ -1,28 +0,0 @@
-import React from 'react';
-import {
-  AppBarButtonsPortal,
-  Grid,
-  useTranslation,
-  ButtonWithIcon,
-  PlusCircleIcon,
-} from '@openmsupply-client/common';
-
-interface ProgramAppBarButtonsProps {}
-
-export const AppBarButtons = ({}: ProgramAppBarButtonsProps) => {
-  const t = useTranslation('coldchain');
-
-  return (
-    <AppBarButtonsPortal>
-      <Grid container gap={1}>
-        <ButtonWithIcon
-          Icon={<PlusCircleIcon />}
-          label={t('button.add-new-immunisation')}
-          onClick={() => {
-            console.info('create new immunisation');
-          }}
-        />
-      </Grid>
-    </AppBarButtonsPortal>
-  );
-};
diff --git a/client/packages/system/src/Immunisation/ImmunisationProgramView/ImmunisationProgramView.tsx b/client/packages/system/src/Immunisation/ImmunisationProgramView/ImmunisationProgramView.tsx
deleted file mode 100644
index 259073644..000000000
--- a/client/packages/system/src/Immunisation/ImmunisationProgramView/ImmunisationProgramView.tsx
+++ /dev/null
@@ -1,90 +0,0 @@
-import React, { FC, useEffect, useState } from 'react';
-import {
-  TableProvider,
-  createTableStore,
-  useBreadcrumbs,
-  NothingHere,
-  createQueryParamsStore,
-  DataTable,
-  useNavigate,
-  useTranslation,
-  useUrlQueryParams,
-  useColumns,
-} from '@openmsupply-client/common';
-import { Toolbar } from './Toolbar';
-import { AppBarButtons } from './AppBarButtons';
-
-// dummy data
-const data = {
-  name: 'some program name',
-};
-
-export interface VaccineCourse {
-  id: string;
-  name: string;
-  targetDemographicName: string;
-  doses: number;
-}
-
-export const ImmunisationProgramComponent: FC = () => {
-  const {
-    updateSortQuery,
-    updatePaginationQuery,
-    queryParams: { sortBy, page, first, offset },
-  } = useUrlQueryParams({ filters: [{ key: 'name' }] });
-  const pagination = { page, first, offset };
-  const navigate = useNavigate();
-  const t = useTranslation('catalogue');
-  const { setSuffix } = useBreadcrumbs();
-
-  const draftProgram: Record<string, VaccineCourse> = {};
-
-  const [draft] = useState(draftProgram);
-
-  const columns = useColumns(
-    [
-      'name',
-      { key: 'targetDemographic', label: 'label.target-demographic' },
-      { key: 'doses', label: 'label.doses' },
-    ],
-    {
-      onChangeSortBy: updateSortQuery,
-      sortBy,
-    },
-    [updateSortQuery, sortBy]
-  );
-
-  useEffect(() => {
-    setSuffix(data?.name ?? '');
-  }, [setSuffix]);
-
-  return !!data ? (
-    <>
-      <Toolbar />
-      <AppBarButtons />
-      <DataTable
-        id={'Program list'}
-        pagination={{ ...pagination }}
-        onChangePage={updatePaginationQuery}
-        columns={columns}
-        data={Object.values(draft)}
-        isLoading={false}
-        onRowClick={row => navigate(row.id)}
-        noDataElement={<NothingHere body={t('error.no-master-lists')} />}
-      />
-    </>
-  ) : (
-    <NothingHere />
-  );
-};
-
-export const ImmunisationProgramView: FC = () => (
-  <TableProvider
-    createStore={createTableStore}
-    queryParamsStore={createQueryParamsStore({
-      initialSortBy: { key: 'name' },
-    })}
-  >
-    <ImmunisationProgramComponent></ImmunisationProgramComponent>
-  </TableProvider>
-);
diff --git a/client/packages/system/src/Immunisation/ImmunisationProgramView/Toolbar.tsx b/client/packages/system/src/Immunisation/ImmunisationProgramView/Toolbar.tsx
deleted file mode 100644
index 3b1d456d3..000000000
--- a/client/packages/system/src/Immunisation/ImmunisationProgramView/Toolbar.tsx
+++ /dev/null
@@ -1,25 +0,0 @@
-import React, { FC } from 'react';
-import { AppBarContentPortal, Grid } from '@openmsupply-client/common';
-
-export const Toolbar: FC = () => {
-  return (
-    <AppBarContentPortal sx={{ display: 'flex', flex: 1, marginBottom: 1 }}>
-      <Grid container>
-        <Grid
-          item
-          display="flex"
-          flex={1}
-          flexDirection="column"
-          gap={1}
-        ></Grid>
-        <Grid
-          item
-          flexDirection="column"
-          alignItems="flex-end"
-          display="flex"
-          gap={2}
-        ></Grid>
-      </Grid>
-    </AppBarContentPortal>
-  );
-};
diff --git a/client/packages/system/src/Immunisation/ImmunisationProgramView/index.ts b/client/packages/system/src/Immunisation/ImmunisationProgramView/index.ts
deleted file mode 100644
index 75b632a56..000000000
--- a/client/packages/system/src/Immunisation/ImmunisationProgramView/index.ts
+++ /dev/null
@@ -1 +0,0 @@
-export { ImmunisationProgramView } from './ImmunisationProgramView';
diff --git a/client/packages/system/src/Immunisation/ListView/AppBarButtons.tsx b/client/packages/system/src/Immunisation/ListView/AppBarButtons.tsx
deleted file mode 100644
index 8a26cdda5..000000000
--- a/client/packages/system/src/Immunisation/ListView/AppBarButtons.tsx
+++ /dev/null
@@ -1,34 +0,0 @@
-import React from 'react';
-import {
-  PlusCircleIcon,
-  AppBarButtonsPortal,
-  Grid,
-  useTranslation,
-  ButtonWithIcon,
-} from '@openmsupply-client/common';
-
-interface ImmunisationsAppBarButtonsProps {
-  onCreate: () => void;
-}
-
-export const AppBarButtons = ({
-  onCreate,
-}: ImmunisationsAppBarButtonsProps) => {
-  const t = useTranslation('coldchain');
-
-  return (
-    <AppBarButtonsPortal>
-      <Grid container gap={1}>
-        <ButtonWithIcon
-          startIcon={<PlusCircleIcon />}
-          variant="outlined"
-          onClick={onCreate}
-          Icon={<PlusCircleIcon />}
-          label={t('button.add-new-program')}
-        >
-          {t('button.add-new-program')}
-        </ButtonWithIcon>
-      </Grid>
-    </AppBarButtonsPortal>
-  );
-};
diff --git a/client/packages/system/src/Immunisation/ListView/ImmunisationProgramCreateModal.tsx b/client/packages/system/src/Immunisation/ListView/ImmunisationProgramCreateModal.tsx
deleted file mode 100644
index a986ae83f..000000000
--- a/client/packages/system/src/Immunisation/ListView/ImmunisationProgramCreateModal.tsx
+++ /dev/null
@@ -1,93 +0,0 @@
-import React, { FC, useState } from 'react';
-import {
-  useDialog,
-  Grid,
-  DialogButton,
-  useTranslation,
-  FnUtils,
-  InlineSpinner,
-  BasicTextInput,
-  Box,
-  InputLabel,
-} from '@openmsupply-client/common';
-
-interface ImmunisationProgramCreateModalProps {
-  isOpen: boolean;
-  onClose: () => void;
-}
-
-const createNewProgram = (seed?: any | null): any => ({
-  id: FnUtils.generateUUID(),
-  name: '',
-  ...seed,
-});
-
-interface UseDraftImmunisationControl {
-  draft: any;
-  onUpdate: (patch: Partial<any>) => void;
-  onSave: () => Promise<void>;
-  isLoading: boolean;
-}
-
-const useDraftProgram = (): UseDraftImmunisationControl => {
-  const [program, setProgram] = useState<any>(() => createNewProgram());
-
-  const onUpdate = (patch: Partial<any>) => {
-    setProgram({ ...program, ...patch });
-  };
-
-  const onSave = async () => {
-    console.info('TODO insert program mutation');
-  };
-
-  const isLoading = false;
-
-  return {
-    draft: program,
-    onUpdate,
-    onSave,
-    isLoading,
-  };
-};
-
-export const ImmunisationProgramCreateModal: FC<
-  ImmunisationProgramCreateModalProps
-> = ({ isOpen, onClose }) => {
-  const { Modal } = useDialog({ isOpen, onClose });
-  const t = useTranslation(['coldchain']);
-  const { draft, onUpdate, onSave, isLoading } = useDraftProgram();
-  const isInvalid = !draft.name.trim();
-
-  return (
-    <Modal
-      okButton={
-        <DialogButton
-          variant="ok"
-          disabled={isInvalid}
-          onClick={async () => {
-            await onSave();
-            onClose();
-          }}
-        />
-      }
-      cancelButton={<DialogButton variant="cancel" onClick={onClose} />}
-      title={t('label.create-new-program')}
-    >
-      {!isLoading ? (
-        <Grid flexDirection="column" display="flex" gap={2}>
-          <Box alignItems="center" gap={1}>
-            <InputLabel>{t('label.name')}</InputLabel>
-            <BasicTextInput
-              fullWidth
-              autoFocus
-              value={draft.name}
-              onChange={e => onUpdate({ name: e.target.value })}
-            />
-          </Box>
-        </Grid>
-      ) : (
-        <InlineSpinner />
-      )}
-    </Modal>
-  );
-};
diff --git a/client/packages/system/src/Immunisation/ListView/ListView.tsx b/client/packages/system/src/Immunisation/ListView/ListView.tsx
deleted file mode 100644
index f4d248d71..000000000
--- a/client/packages/system/src/Immunisation/ListView/ListView.tsx
+++ /dev/null
@@ -1,82 +0,0 @@
-import React, { FC } from 'react';
-import {
-  TableProvider,
-  DataTable,
-  useColumns,
-  useUrlQueryParams,
-  useNavigate,
-  NothingHere,
-  useTranslation,
-  createTableStore,
-  createQueryParamsStore,
-  useEditModal,
-} from '@openmsupply-client/common';
-import { Toolbar } from './Toolbar';
-import { AppBarButtons } from './AppBarButtons';
-import { ImmunisationProgramCreateModal } from './ImmunisationProgramCreateModal';
-
-export interface Program {
-  id: string;
-  name: string;
-  immunisations: string[];
-  isNew: boolean;
-}
-
-const ImmunisationProgramListComponent: FC = () => {
-  const {
-    updateSortQuery,
-    updatePaginationQuery,
-    queryParams: { sortBy, page, first, offset },
-  } = useUrlQueryParams({ filters: [{ key: 'name' }] });
-  const pagination = { page, first, offset };
-  const navigate = useNavigate();
-  const t = useTranslation('coldchain');
-
-  // later this will make api call
-  const draft: Program[] = [];
-
-  const columns = useColumns(
-    ['name', 'description'],
-    {
-      onChangeSortBy: updateSortQuery,
-      sortBy,
-    },
-    [updateSortQuery, sortBy]
-  );
-
-  // later create modal will use <InsertImmunisationProgram> type
-  const { isOpen, onClose, onOpen } = useEditModal<any>();
-
-  return (
-    <>
-      {isOpen && (
-        <ImmunisationProgramCreateModal isOpen={isOpen} onClose={onClose} />
-      )}
-      <Toolbar />
-      <AppBarButtons onCreate={onOpen} />
-      <DataTable
-        id={'immunisation-list'}
-        pagination={{ ...pagination }}
-        onChangePage={updatePaginationQuery}
-        columns={columns}
-        data={Object.values(draft)}
-        isLoading={false}
-        onRowClick={row => navigate(row.id)}
-        noDataElement={
-          <NothingHere body={t('error.no-immunisation-programs')} />
-        }
-      />
-    </>
-  );
-};
-
-export const ImmunisationProgramListView: FC = () => (
-  <TableProvider
-    createStore={createTableStore}
-    queryParamsStore={createQueryParamsStore({
-      initialSortBy: { key: 'name' },
-    })}
-  >
-    <ImmunisationProgramListComponent />
-  </TableProvider>
-);
diff --git a/client/packages/system/src/Immunisation/ListView/Toolbar.tsx b/client/packages/system/src/Immunisation/ListView/Toolbar.tsx
deleted file mode 100644
index 042ae1d2e..000000000
--- a/client/packages/system/src/Immunisation/ListView/Toolbar.tsx
+++ /dev/null
@@ -1,15 +0,0 @@
-import React, { FC } from 'react';
-import { AppBarContentPortal } from '@openmsupply-client/common';
-
-export const Toolbar: FC = () => {
-  return (
-    <AppBarContentPortal
-      sx={{
-        paddingBottom: '16px',
-        flex: 1,
-        justifyContent: 'space-between',
-        display: 'flex',
-      }}
-    ></AppBarContentPortal>
-  );
-};
diff --git a/client/packages/system/src/Immunisation/ListView/index.ts b/client/packages/system/src/Immunisation/ListView/index.ts
deleted file mode 100644
index e1e4de2f2..000000000
--- a/client/packages/system/src/Immunisation/ListView/index.ts
+++ /dev/null
@@ -1 +0,0 @@
-export * from './ListView';
diff --git a/client/packages/system/src/Immunisation/Service/Service.tsx b/client/packages/system/src/Immunisation/Service/Service.tsx
deleted file mode 100644
index b94a34459..000000000
--- a/client/packages/system/src/Immunisation/Service/Service.tsx
+++ /dev/null
@@ -1,39 +0,0 @@
-import React, { FC } from 'react';
-import {
-  RouteBuilder,
-  Routes,
-  Route,
-  NothingHere,
-} from '@openmsupply-client/common';
-import { AppRoute, Environment } from '@openmsupply-client/config';
-import { ImmunisationProgramListView } from '../ListView';
-import { ImmunisationProgramView } from '../ImmunisationProgramView';
-
-export const ImmunisationProgramService: FC = () => {
-  const immunisationProgramsRoute = RouteBuilder.create(
-    AppRoute.ImmunisationPrograms
-  ).build();
-  const immunisationProgramRoute = RouteBuilder.create(
-    AppRoute.ImmunisationPrograms
-  )
-    .addPart(':id')
-    .build();
-
-  if (!Environment.FEATURE_GAPS) {
-    return <NothingHere />;
-  }
-  return (
-    <Routes>
-      <Route
-        path={immunisationProgramsRoute}
-        element={<ImmunisationProgramListView />}
-      />
-      <Route
-        path={immunisationProgramRoute}
-        element={<ImmunisationProgramView />}
-      />
-    </Routes>
-  );
-};
-
-export default ImmunisationProgramService;
diff --git a/client/packages/system/src/Immunisation/Service/index.ts b/client/packages/system/src/Immunisation/Service/index.ts
deleted file mode 100644
index 91cd42602..000000000
--- a/client/packages/system/src/Immunisation/Service/index.ts
+++ /dev/null
@@ -1 +0,0 @@
-export * from './Service';
diff --git a/client/packages/system/src/Immunisation/index.ts b/client/packages/system/src/Immunisation/index.ts
deleted file mode 100644
index 91cd42602..000000000
--- a/client/packages/system/src/Immunisation/index.ts
+++ /dev/null
@@ -1 +0,0 @@
-export * from './Service';
diff --git a/client/packages/system/src/IndicatorsDemographics/DetailView/AppBarButtons.tsx b/client/packages/system/src/IndicatorsDemographics/DetailView/AppBarButtons.tsx
deleted file mode 100644
index 6ef2ceb6f..000000000
--- a/client/packages/system/src/IndicatorsDemographics/DetailView/AppBarButtons.tsx
+++ /dev/null
@@ -1,54 +0,0 @@
-import React from 'react';
-import {
-  ButtonWithIcon,
-  FnUtils,
-  PlusCircleIcon,
-  RecordPatch,
-  useTranslation,
-} from '@openmsupply-client/common';
-import { Row } from './IndicatorsDemographics';
-import { AppBarButtonsPortal, Grid } from '@openmsupply-client/common';
-
-interface IndicatorsAppBarButtonsProps {
-  patch: (patch: RecordPatch<Row>) => void;
-  rows: Row[];
-}
-
-export const AppBarButtonsComponent = ({
-  patch,
-  rows,
-}: IndicatorsAppBarButtonsProps) => {
-  const t = useTranslation();
-
-  const handleClick = () => {
-    const id = FnUtils.generateUUID();
-    const newRow = {
-      id,
-      name: '',
-      percentage: 0,
-      isNew: true,
-      baseYear: rows[0]?.baseYear ?? 0,
-      BasePopulation: rows[0]?.basePopulation ?? 0,
-      0: 0,
-      1: 0,
-      2: 0,
-      3: 0,
-      4: 0,
-      5: 0,
-    };
-    patch({ ...newRow });
-  };
-  return (
-    <AppBarButtonsPortal>
-      <Grid container gap={1}>
-        <ButtonWithIcon
-          Icon={<PlusCircleIcon />}
-          onClick={handleClick}
-          label={t('button.add-new-indicator')}
-        />
-      </Grid>
-    </AppBarButtonsPortal>
-  );
-};
-
-export const AppBarButtons = React.memo(AppBarButtonsComponent);
diff --git a/client/packages/system/src/IndicatorsDemographics/DetailView/Footer.tsx b/client/packages/system/src/IndicatorsDemographics/DetailView/Footer.tsx
deleted file mode 100644
index dca9eef93..000000000
--- a/client/packages/system/src/IndicatorsDemographics/DetailView/Footer.tsx
+++ /dev/null
@@ -1,56 +0,0 @@
-import React, { memo } from 'react';
-import {
-  Box,
-  ButtonWithIcon,
-  useTranslation,
-  AppFooterPortal,
-  LoadingButton,
-} from '@openmsupply-client/common';
-import { XCircleIcon } from '@common/icons';
-
-interface DemographicsFooterProps {
-  isDirty: boolean;
-  cancel: () => void;
-  save: () => void;
-}
-
-export const FooterComponent = ({
-  isDirty,
-  save,
-  cancel,
-}: DemographicsFooterProps) => {
-  const t = useTranslation();
-
-  return (
-    <AppFooterPortal
-      Content={
-        <Box
-          gap={2}
-          display="flex"
-          flexDirection="row"
-          alignItems="center"
-          justifyContent="flex-end"
-          padding={2}
-        >
-          <ButtonWithIcon
-            Icon={<XCircleIcon />}
-            onClick={cancel}
-            label={t('button.cancel')}
-            disabled={!isDirty}
-            color="secondary"
-          />
-          <LoadingButton
-            onClick={save}
-            disabled={!isDirty}
-            isLoading={false}
-            color="secondary"
-          >
-            {t('button.save')}
-          </LoadingButton>
-        </Box>
-      }
-    />
-  );
-};
-
-export const Footer = memo(FooterComponent);
diff --git a/client/packages/system/src/IndicatorsDemographics/DetailView/GrowthRow.tsx b/client/packages/system/src/IndicatorsDemographics/DetailView/GrowthRow.tsx
deleted file mode 100644
index dc0b9b6f8..000000000
--- a/client/packages/system/src/IndicatorsDemographics/DetailView/GrowthRow.tsx
+++ /dev/null
@@ -1,123 +0,0 @@
-import React, { useRef } from 'react';
-import { RecordPatch, RecordWithId } from '@common/types';
-import {
-  BasicTextInput,
-  Box,
-  Column,
-  HeaderRow,
-  TableHead,
-  TableContainer,
-  TableCell,
-  Table as MuiTable,
-  BasicSpinner,
-  NothingHere,
-} from '@openmsupply-client/common';
-import { HeaderValue } from './IndicatorsDemographics';
-
-interface GrowthRowProps<T extends RecordWithId> {
-  columns: Column<T>[];
-  isError?: boolean;
-  isLoading?: boolean;
-  data: Record<string, HeaderValue>;
-  setData: (patch: RecordPatch<HeaderValue>) => void;
-  overflowX?:
-    | 'auto'
-    | 'hidden'
-    | 'visible'
-    | 'scroll'
-    | 'inherit'
-    | 'initial'
-    | 'unset';
-}
-export const GrowthRow = <T extends RecordWithId>({
-  columns,
-  isError = false,
-  isLoading = false,
-  overflowX = 'unset',
-  data,
-  setData,
-}: GrowthRowProps<T>) => {
-  const ref = useRef<HTMLDivElement>(null);
-
-  if (isLoading) {
-    return <BasicSpinner />;
-  }
-
-  // don't show if no data
-  if (!data || isError) {
-    return <NothingHere />;
-  }
-
-  return (
-    <TableContainer
-      ref={ref}
-      sx={{
-        display: 'flex',
-        flexDirection: 'column',
-        overflowX,
-        overflowY: 'auto',
-      }}
-    >
-      <MuiTable>
-        <TableHead
-          sx={{
-            backgroundColor: 'background.white',
-            position: 'sticky',
-            top: 0,
-            zIndex: 'tableHeader',
-          }}
-        >
-          <HeaderRow>
-            {columns.map(column => {
-              const { align, width } = column;
-              const columnHeader = Object.values(data).filter(
-                header => header.id === column.key
-              )[0];
-              const hasColumnText = column.key === '0';
-              return (
-                <TableCell
-                  key={String(column.key)}
-                  role="columnheader"
-                  align={align}
-                  padding={'none'}
-                  sx={{
-                    backgroundColor: 'transparent',
-                    borderBottom: '0px',
-                    paddingLeft: '16px',
-                    paddingRight: '16px',
-                    width,
-                    fontWeight: 'bold',
-                    verticalAlign: 'bottom',
-                  }}
-                  aria-label={String(column.key)}
-                >
-                  <Box
-                    sx={{
-                      flexDirection: 'row',
-                      borderBottom: 'none',
-                      alignItems: 'center',
-                      display: 'flex',
-                    }}
-                  >
-                    {hasColumnText ? <>% Growth on previous year</> : null}
-                    {columnHeader ? (
-                      <BasicTextInput
-                        defaultValue={columnHeader.value ?? 0}
-                        onBlur={e =>
-                          setData({
-                            id: columnHeader.id,
-                            value: Number(e.target.value),
-                          })
-                        }
-                      />
-                    ) : null}
-                  </Box>
-                </TableCell>
-              );
-            })}
-          </HeaderRow>
-        </TableHead>
-      </MuiTable>
-    </TableContainer>
-  );
-};
diff --git a/client/packages/system/src/IndicatorsDemographics/DetailView/IndicatorsDemographics.tsx b/client/packages/system/src/IndicatorsDemographics/DetailView/IndicatorsDemographics.tsx
deleted file mode 100644
index 1b5080770..000000000
--- a/client/packages/system/src/IndicatorsDemographics/DetailView/IndicatorsDemographics.tsx
+++ /dev/null
@@ -1,284 +0,0 @@
-import React, { FC, useState } from 'react';
-import { AppBarButtons } from './AppBarButtons';
-import {
-  ArrayUtils,
-  Box,
-  ColumnAlign,
-  DataTable,
-  RecordPatch,
-  TableProvider,
-  createTableStore,
-  useColumns,
-  useUrlQueryParams,
-} from '@openmsupply-client/common';
-
-import { percentageColumn } from './PercentageColumn';
-import { nameColumn } from './NameColumn';
-import { GrowthRow } from './GrowthRow';
-import { populationColumn } from './PopulationColumn';
-import { Footer } from './Footer';
-import { GENERAL_POPULATION_ID, useDemographicData } from '../api';
-import { calculateAcrossRow, toIndicatorFragment } from './utils';
-
-export interface Row {
-  isNew: boolean;
-  id: string;
-  percentage: number;
-  name: string;
-  baseYear: number;
-  basePopulation: number;
-  0: number;
-  1: number;
-  2: number;
-  3: number;
-  4: number;
-}
-
-export interface HeaderValue {
-  id: string;
-  value: number;
-}
-
-// header data (not currently stored)
-const headerData: HeaderValue[] = [
-  { id: '1', value: 1.1 },
-  { id: '2', value: 1.2 },
-  { id: '3', value: 1.2 },
-  { id: '4', value: 1.1 },
-  { id: '5', value: 1.0 },
-];
-
-export const toRow = (row: {
-  __typename?: 'DemographicIndicatorNode';
-  id: string;
-  name: string;
-  baseYear?: number;
-  basePopulation?: number;
-  year1Projection?: number;
-  year2Projection?: number;
-  year3Projection?: number;
-  year4Projection?: number;
-  year5Projection?: number;
-  populationPercentage?: number;
-}): Row => ({
-  isNew: false,
-  id: row.id,
-  percentage: row.populationPercentage ?? 0,
-  name: row.name,
-  baseYear: row.baseYear ?? 0,
-  basePopulation: row.basePopulation ?? 0,
-  0: row.year1Projection ?? 0,
-  1: row.year2Projection ?? 0,
-  2: row.year3Projection ?? 0,
-  3: row.year4Projection ?? 0,
-  4: row.year5Projection ?? 0,
-});
-
-const currentYear = new Date().getFullYear();
-
-const IndicatorsDemographicsComponent: FC = () => {
-  const {
-    updateSortQuery,
-    queryParams: { sortBy },
-  } = useUrlQueryParams({
-    initialSort: { key: 'percentage', dir: 'desc' },
-  });
-  const [indexPopulation, setIndexPopulation] = useState<number>();
-
-  const { draft, setDraft } =
-    useDemographicData.document.listIndicator(headerData);
-
-  const draftHeaders = ArrayUtils.toObject(headerData);
-  const [isDirty, setIsDirty] = useState(false);
-
-  const [headerDraft, setHeaderDraft] =
-    useState<Record<string, HeaderValue>>(draftHeaders);
-
-  const { insertDemographicIndicator, invalidateQueries } =
-    useDemographicData.document.insertIndicator();
-  const { mutateAsync: updateDemographicIndicator } =
-    useDemographicData.document.updateIndicator();
-
-  const PopulationChange = (patch: RecordPatch<Row>) => {
-    setIsDirty(true);
-    const currentDraft = { ...draft, [patch.id]: patch } as Record<string, Row>;
-    let updatedDraft = {} as Record<string, Row>;
-    const indexPopulationChange =
-      patch.basePopulation !== draft[patch.id]?.basePopulation &&
-      patch.id === GENERAL_POPULATION_ID;
-    if (indexPopulationChange) {
-      setIndexPopulation(patch.basePopulation);
-    }
-    Object.keys(currentDraft).forEach(rowKey => {
-      const updatedRow = calculateAcrossRow(
-        currentDraft[rowKey] as Row,
-        draftHeaders,
-        indexPopulationChange ? patch.basePopulation : indexPopulation
-      );
-      updatedDraft = { ...updatedDraft, [updatedRow.id]: updatedRow };
-    });
-    setDraft({ ...currentDraft, ...updatedDraft });
-  };
-
-  const setter = (patch: RecordPatch<Row>) => {
-    const updatedDraft = { ...draft };
-    const percentage = Number(!patch.percentage ? 0 : patch.percentage);
-    const percentageChange = percentage != draft[patch.id]?.percentage;
-
-    setIsDirty(true);
-
-    // change state of name only if only name changes
-    if (!percentageChange) {
-      setDraft({ ...updatedDraft, [patch.id]: { ...patch } as Row });
-      return;
-    }
-
-    const updatedRow = calculateAcrossRow(
-      { ...patch } as Row,
-      headerDraft,
-      indexPopulation
-    );
-    setDraft({ ...updatedDraft, [patch.id]: updatedRow });
-  };
-
-  // generic function for handling percentage change, and then re calculating the values of that year
-  const handleGrowthChange = (patch: RecordPatch<HeaderValue>) => {
-    setIsDirty(true);
-    const updatedHeaderDraft = { ...headerDraft };
-    const updatedPatch = {
-      ...patch,
-      value: patch.value ?? 0,
-    };
-    setHeaderDraft({ ...updatedHeaderDraft, [patch.id]: updatedPatch });
-    calculateDown(patch);
-  };
-
-  const calculateDown = (patch: RecordPatch<HeaderValue>) => {
-    const oldHeaderDraft = { ...headerDraft };
-    const updatedHeader = {
-      ...oldHeaderDraft,
-      [patch.id]: { ...patch } as HeaderValue,
-    };
-    const currentDraft = { ...draft };
-    let updatedDraft = {};
-    Object.keys(currentDraft).forEach(row => {
-      const updatedRow = calculateAcrossRow(
-        currentDraft[row] as Row,
-        updatedHeader,
-        indexPopulation
-      );
-      updatedDraft = { ...updatedDraft, [updatedRow.id]: updatedRow };
-    });
-    setHeaderDraft(updatedHeader);
-    setDraft({ ...currentDraft, ...updatedDraft });
-  };
-
-  const insertIndicator = async (row: Row) => {
-    try {
-      await insertDemographicIndicator(
-        toIndicatorFragment(row, indexPopulation)
-      );
-    } catch (e) {
-      console.error(e);
-    }
-  };
-
-  const updateIndicator = async (row: Row) => {
-    try {
-      await updateDemographicIndicator(
-        toIndicatorFragment(row, indexPopulation)
-      );
-    } catch (e) {
-      console.error(e);
-    }
-  };
-
-  const save = async () => {
-    setIsDirty(false);
-    // save rows excluding generalRow
-
-    const remainingRows = Object.keys(draft)
-      .map(key => draft[key])
-      .filter(row => row?.id !== GENERAL_POPULATION_ID);
-    while (remainingRows.length) {
-      await Promise.all(
-        remainingRows.splice(0).map(async indicator => {
-          if (indicator != undefined) {
-            indicator.isNew
-              ? await insertIndicator(indicator)
-              : await updateIndicator(indicator);
-          }
-        })
-      ).then(() => invalidateQueries());
-    }
-  };
-
-  // TODO cancel changes (re call data from DB)
-  const cancel = () => {
-    setIsDirty(false);
-    console.info('re set data to DB saved (cancel all changes)');
-  };
-
-  const columns = useColumns<Row>(
-    [
-      [percentageColumn(), { setter }],
-      [nameColumn(), { setter }],
-      [populationColumn(), { setter: PopulationChange }],
-      {
-        key: '1',
-        width: 150,
-        align: ColumnAlign.Right,
-        label: undefined,
-        labelProps: { defaultValue: currentYear + 1 },
-      },
-      {
-        key: '2',
-        width: 150,
-        align: ColumnAlign.Right,
-        label: undefined,
-        labelProps: { defaultValue: currentYear + 2 },
-      },
-      {
-        key: '3',
-        width: 150,
-        align: ColumnAlign.Right,
-        label: undefined,
-        labelProps: { defaultValue: currentYear + 3 },
-      },
-      {
-        key: '4',
-        width: 150,
-        align: ColumnAlign.Right,
-        label: undefined,
-        labelProps: { defaultValue: currentYear + 4 },
-      },
-    ],
-    { sortBy, onChangeSortBy: updateSortQuery },
-    [draft]
-  );
-
-  return (
-    <>
-      <AppBarButtons patch={setter} rows={Object.values(draft)}></AppBarButtons>
-      <Box>
-        <GrowthRow
-          columns={columns}
-          data={headerDraft}
-          setData={handleGrowthChange}
-        ></GrowthRow>
-        <DataTable
-          data={Object.values(draft)}
-          columns={columns}
-          id={'indicators-demographics-table'}
-        ></DataTable>
-      </Box>
-      <Footer save={save} cancel={cancel} isDirty={isDirty} />
-    </>
-  );
-};
-
-export const IndicatorsDemographics: FC = () => (
-  <TableProvider createStore={createTableStore}>
-    <IndicatorsDemographicsComponent />
-  </TableProvider>
-);
diff --git a/client/packages/system/src/IndicatorsDemographics/DetailView/NameColumn.tsx b/client/packages/system/src/IndicatorsDemographics/DetailView/NameColumn.tsx
deleted file mode 100644
index 6a9957115..000000000
--- a/client/packages/system/src/IndicatorsDemographics/DetailView/NameColumn.tsx
+++ /dev/null
@@ -1,53 +0,0 @@
-import React from 'react';
-import { BasicTextInput } from '@common/components';
-import {
-  Box,
-  ColumnDefinition,
-  RecordWithId,
-} from '@openmsupply-client/common';
-import { GENERAL_POPULATION_ID } from '../api';
-
-interface RecordWithIdWithRequiredFields extends RecordWithId {
-  name?: number | null | string;
-}
-
-export const nameColumn = <
-  T extends RecordWithIdWithRequiredFields,
->(): ColumnDefinition<T> => ({
-  label: 'label.name',
-  setter: () => {
-    if (process.env['NODE_ENV']) {
-      throw new Error(
-        `The default setter of the NameAndColor column was called.
-          Have you forgotten to provide a custom setter?
-          When setting up your columns, you should provide a setter function
-          const columns = useColumns([ percentageColumn(), { setter }])
-          `
-      );
-    }
-  },
-  accessor: ({ rowData }) => rowData.name,
-  key: 'name',
-  Cell: ({ rowData, column, isDisabled }) => (
-    <Box
-      sx={{
-        flexDirection: 'row',
-        borderBottom: 'none',
-        alignItems: 'center',
-        display: 'flex',
-      }}
-    >
-      <>
-        <BasicTextInput
-          disabled={isDisabled || rowData.id === GENERAL_POPULATION_ID}
-          defaultValue={column.accessor({ rowData })}
-          onBlur={e => {
-            column.setter({ ...rowData, name: e.target.value });
-          }}
-        />
-        <Box ml={1} />
-      </>
-    </Box>
-  ),
-  minWidth: 200,
-});
diff --git a/client/packages/system/src/IndicatorsDemographics/DetailView/PercentageColumn.tsx b/client/packages/system/src/IndicatorsDemographics/DetailView/PercentageColumn.tsx
deleted file mode 100644
index 147976303..000000000
--- a/client/packages/system/src/IndicatorsDemographics/DetailView/PercentageColumn.tsx
+++ /dev/null
@@ -1,55 +0,0 @@
-import React from 'react';
-import { Box } from '@mui/material';
-import { BasicTextInput } from '@common/components';
-import { ColumnDefinition, RecordWithId } from '@openmsupply-client/common';
-import { GENERAL_POPULATION_ID } from '../api';
-
-interface RecordWithIdWithPercentageFields extends RecordWithId {
-  percentage?: number | null;
-  name?: string;
-}
-
-export const percentageColumn = <
-  T extends RecordWithIdWithPercentageFields,
->(): ColumnDefinition<T> => ({
-  label: 'label.percentage',
-  setter: () => {
-    if (process.env['NODE_ENV']) {
-      throw new Error(
-        `The default setter of the NameAndColor column was called.
-        Have you forgotten to provide a custom setter?
-        When setting up your columns, you should provide a setter function
-        const columns = useColumns([ percentageColumn(), { setter }])
-        `
-      );
-    }
-  },
-  accessor: ({ rowData }) => rowData.percentage,
-  key: 'percentage',
-  Cell: ({ rowData, column, isDisabled }) => (
-    <Box
-      sx={{
-        flexDirection: 'row',
-        borderBottom: 'none',
-        alignItems: 'center',
-        display: 'flex',
-      }}
-    >
-      <>
-        <BasicTextInput
-          disabled={isDisabled || rowData.id === GENERAL_POPULATION_ID}
-          defaultValue={column.accessor({ rowData }) as number}
-          onBlur={e => {
-            const updatedRowData = { ...rowData };
-            column.setter({
-              ...updatedRowData,
-              percentage: parseInt(e.target.value),
-            });
-          }}
-        />
-        <Box ml={1} />
-      </>
-    </Box>
-  ),
-  minWidth: 100,
-});
diff --git a/client/packages/system/src/IndicatorsDemographics/DetailView/PopulationColumn.tsx b/client/packages/system/src/IndicatorsDemographics/DetailView/PopulationColumn.tsx
deleted file mode 100644
index 1bf22e0b7..000000000
--- a/client/packages/system/src/IndicatorsDemographics/DetailView/PopulationColumn.tsx
+++ /dev/null
@@ -1,56 +0,0 @@
-import React from 'react';
-import { Box } from '@mui/material';
-import { BasicTextInput } from '@common/components';
-import { ColumnDefinition, RecordWithId } from '@openmsupply-client/common';
-import { GENERAL_POPULATION_ID } from '../api';
-
-interface RecordWithIdWithRequiredFields extends RecordWithId {
-  0?: number | null;
-  name?: string;
-}
-
-export const populationColumn = <
-  T extends RecordWithIdWithRequiredFields,
->(): ColumnDefinition<T> => ({
-  label: 'label.population',
-  setter: () => {
-    if (process.env['NODE_ENV']) {
-      throw new Error(
-        `The default setter of the NameAndColor column was called.
-        Have you forgotten to provide a custom setter?
-        When setting up your columns, you should provide a setter function
-        const columns = useColumns([ percentageColumn(), { setter }])
-        `
-      );
-    }
-  },
-  accessor: ({ rowData }) => rowData[0],
-  key: '0',
-  Cell: ({ rowData, column, isDisabled }) => (
-    <Box
-      sx={{
-        flexDirection: 'row',
-        borderBottom: 'none',
-        alignItems: 'center',
-        display: 'flex',
-      }}
-    >
-      <>
-        <BasicTextInput
-          disabled={isDisabled || rowData.id !== GENERAL_POPULATION_ID}
-          defaultValue={column.accessor({ rowData }) as number}
-          onBlur={e => {
-            const updatedRowData = { ...rowData };
-            column.setter({
-              ...updatedRowData,
-              basePopulation: parseInt(e.target.value),
-              0: parseInt(e.target.value),
-            });
-          }}
-        />
-        <Box ml={1} />
-      </>
-    </Box>
-  ),
-  minWidth: 100,
-});
diff --git a/client/packages/system/src/IndicatorsDemographics/DetailView/utils.test.ts b/client/packages/system/src/IndicatorsDemographics/DetailView/utils.test.ts
deleted file mode 100644
index 263346e90..000000000
--- a/client/packages/system/src/IndicatorsDemographics/DetailView/utils.test.ts
+++ /dev/null
@@ -1,33 +0,0 @@
-import { HeaderValue } from './IndicatorsDemographics';
-import { recursiveCalculate } from './utils';
-
-describe('recursiveCalculate', () => {
-  it('calculates index value', () => {
-    let key = 0;
-    const headerData = [
-      { id: '1', value: 1.1 },
-      { id: '2', value: 1.2 },
-    ];
-    const draftHeaders: Record<string, HeaderValue> = {};
-    headerData.forEach(header => (draftHeaders[header.id] = { ...header }));
-    const row = {
-      isNew: false,
-      id: '1',
-      percentage: 20,
-      name: 'name',
-      baseYear: 2000,
-      basePopulation: 1000,
-      0: 200,
-      1: 202,
-      2: 202,
-      3: 202,
-      4: 202,
-    };
-    const indexValue = 1000;
-    expect(recursiveCalculate(key, draftHeaders, row, indexValue)).toBe(200);
-    key = 1;
-    expect(recursiveCalculate(key, draftHeaders, row, indexValue)).toBe(202);
-    key = 2;
-    expect(recursiveCalculate(key, draftHeaders, row, indexValue)).toBe(204);
-  });
-});
diff --git a/client/packages/system/src/IndicatorsDemographics/DetailView/utils.tsx b/client/packages/system/src/IndicatorsDemographics/DetailView/utils.tsx
deleted file mode 100644
index 17596e86b..000000000
--- a/client/packages/system/src/IndicatorsDemographics/DetailView/utils.tsx
+++ /dev/null
@@ -1,79 +0,0 @@
-import { NumUtils } from '@common/utils';
-import { DemographicIndicatorFragment } from '../api/operations.generated';
-import { HeaderValue, Row } from './IndicatorsDemographics';
-import { GENERAL_POPULATION_ID } from '../api';
-
-export const toIndicatorFragment = (
-  row: Row,
-  indexPopulation?: number
-): DemographicIndicatorFragment => {
-  return {
-    __typename: 'DemographicIndicatorNode',
-    id: row.id,
-    name: row.name,
-    baseYear: row.baseYear,
-    basePopulation: indexPopulation ?? row.basePopulation,
-    populationPercentage: row.percentage ?? 0,
-    year1Projection: row[0],
-    year2Projection: row[1],
-    year3Projection: row[2],
-    year4Projection: row[3],
-    year5Projection: row[4],
-  };
-};
-
-export const recursiveCalculate = (
-  key: number,
-  updatedHeader: { [x: string]: HeaderValue },
-  row: Row,
-  indexValue: number | undefined
-): number => {
-  const headerValue = updatedHeader[key];
-  if (key > 0) {
-    return headerValue
-      ? (NumUtils.round(
-          recursiveCalculate(key - 1, updatedHeader, row, indexValue) *
-            ((headerValue.value ?? 0) / 100 + 1)
-        ) as number)
-      : 0;
-  } else {
-    return NumUtils.round(
-      (indexValue ?? row.basePopulation ?? 0) * ((row?.percentage ?? 0) / 100)
-    );
-  }
-};
-
-export const calculateAcrossRow = (
-  row: Row,
-  updatedHeader: { [x: string]: HeaderValue },
-  indexValue?: number | undefined
-) => {
-  let updatedRow = row;
-
-  // only update numeric entries
-  const rowNumberKeys = Object.keys(row).filter(
-    key =>
-      !isNaN(parseFloat(key)) &&
-      !(row.id === GENERAL_POPULATION_ID && parseFloat(key) == 0)
-  );
-
-  Object.values(rowNumberKeys).forEach(key => {
-    const columnKey = parseInt(key);
-    updatedRow = {
-      ...updatedRow,
-      [columnKey]: recursiveCalculate(
-        columnKey,
-        updatedHeader,
-        row,
-        indexValue
-      ),
-    };
-  });
-  // for case where general population is changed, set this value in row
-  if (row.id === GENERAL_POPULATION_ID) {
-    updatedRow = { ...updatedRow, [0]: indexValue ?? 0 };
-  }
-  updatedRow = { ...updatedRow, basePopulation: indexValue ?? 0 };
-
-  return updatedRow;
-};
diff --git a/client/packages/system/src/IndicatorsDemographics/Service/Service.tsx b/client/packages/system/src/IndicatorsDemographics/Service/Service.tsx
deleted file mode 100644
index c6ebb4595..000000000
--- a/client/packages/system/src/IndicatorsDemographics/Service/Service.tsx
+++ /dev/null
@@ -1,21 +0,0 @@
-import React, { FC } from 'react';
-import { RouteBuilder, Routes, Route } from '@openmsupply-client/common';
-import { AppRoute } from '@openmsupply-client/config';
-import { IndicatorsDemographics } from '../DetailView/IndicatorsDemographics';
-
-export const IndicatorsDemographicsService: FC = () => {
-  const indicatorsDemographicsRoute = RouteBuilder.create(
-    AppRoute.IndicatorsDemographics
-  ).build();
-
-  return (
-    <Routes>
-      <Route
-        path={indicatorsDemographicsRoute}
-        element={<IndicatorsDemographics />}
-      />
-    </Routes>
-  );
-};
-
-export default IndicatorsDemographicsService;
diff --git a/client/packages/system/src/IndicatorsDemographics/Service/index.ts b/client/packages/system/src/IndicatorsDemographics/Service/index.ts
deleted file mode 100644
index 91cd42602..000000000
--- a/client/packages/system/src/IndicatorsDemographics/Service/index.ts
+++ /dev/null
@@ -1 +0,0 @@
-export * from './Service';
diff --git a/client/packages/system/src/IndicatorsDemographics/api/api.ts b/client/packages/system/src/IndicatorsDemographics/api/api.ts
deleted file mode 100644
index 61e07824a..000000000
--- a/client/packages/system/src/IndicatorsDemographics/api/api.ts
+++ /dev/null
@@ -1,203 +0,0 @@
-import {
-  DemographicIndicatorSortFieldInput,
-  DemographicProjectionSortFieldInput,
-  FilterByWithBoolean,
-  InsertDemographicIndicatorInput,
-  InsertDemographicProjectionInput,
-  SortBy,
-  UpdateDemographicIndicatorInput,
-  UpdateDemographicProjectionInput,
-} from '@openmsupply-client/common';
-import {
-  DemographicIndicatorFragment,
-  DemographicProjectionFragment,
-  Sdk,
-} from './operations.generated';
-
-export type ListParams<T> = {
-  first: number;
-  offset: number;
-  sortBy: SortBy<T>;
-  filterBy?: FilterByWithBoolean | null;
-};
-// Leaving this here as probably want to sort by other values in future ie population percentage
-const Parsers = {
-  toIndicatorSortField: (sortBy: SortBy<DemographicIndicatorFragment>) => {
-    const fields: Record<string, DemographicIndicatorSortFieldInput> = {
-      id: DemographicIndicatorSortFieldInput.Id,
-      name: DemographicIndicatorSortFieldInput.Name,
-    };
-    return fields[sortBy.key] ?? DemographicIndicatorSortFieldInput.Id;
-  },
-  toProjectionSortFIeld: (sortBy: SortBy<DemographicProjectionFragment>) => {
-    const fields: Record<string, DemographicIndicatorSortFieldInput> = {
-      id: DemographicIndicatorSortFieldInput.Id,
-    };
-    return fields[sortBy.key] ?? DemographicProjectionSortFieldInput.Id;
-  },
-  toInsertIndicator: (
-    input: DemographicIndicatorFragment
-  ): InsertDemographicIndicatorInput => {
-    return {
-      id: input.id,
-      name: input.name,
-      baseYear: input.baseYear,
-      basePopulation: input.basePopulation,
-      populationPercentage: input.populationPercentage,
-      year1Projection: input.year1Projection,
-      year2Projection: input.year2Projection,
-      year3Projection: input.year3Projection,
-      year4Projection: input.year4Projection,
-      year5Projection: input.year5Projection,
-    };
-  },
-  toUpdateIndicator: (
-    input: DemographicIndicatorFragment
-  ): UpdateDemographicIndicatorInput => {
-    return {
-      id: input.id,
-      name: input.name,
-      baseYear: input.baseYear,
-      populationPercentage: input.populationPercentage,
-      basePopulation: input.basePopulation,
-      year1Projection: input.year1Projection,
-      year2Projection: input.year2Projection,
-      year3Projection: input.year3Projection,
-      year4Projection: input.year4Projection,
-      year5Projection: input.year5Projection,
-    };
-  },
-};
-
-export const getDemographicIndicatorQueries = (sdk: Sdk) => ({
-  getIndicators: {
-    byId: async (demographicIndicatorId: string) => {
-      const result = await sdk.demographicIndicatorById({
-        demographicIndicatorId,
-      });
-      const { demographicIndicators } = result;
-      if (
-        demographicIndicators?.__typename === 'DemographicIndicatorConnector' &&
-        !!demographicIndicators.nodes[0]
-      ) {
-        return demographicIndicators.nodes[0];
-      } else {
-        throw new Error('Could not find encounter');
-      }
-    },
-    list: async ({
-      first,
-      offset,
-      sortBy,
-      filterBy,
-    }: ListParams<DemographicIndicatorFragment>) => {
-      const result = await sdk.demographicIndicators({
-        first,
-        offset,
-        key: Parsers.toIndicatorSortField(sortBy),
-        desc: sortBy.isDesc,
-        filter: filterBy,
-      });
-
-      return result?.demographicIndicators;
-    },
-    listAll: async ({ sortBy }: ListParams<DemographicIndicatorFragment>) => {
-      const result = await sdk.demographicIndicators({
-        key: Parsers.toIndicatorSortField(sortBy),
-        desc: sortBy.isDesc,
-      });
-
-      const demographicIndicators = result?.demographicIndicators;
-      return demographicIndicators;
-    },
-  },
-  getProjections: {
-    byId: async (demographicProjectionId: string) => {
-      const result = await sdk.demographicProjectionById({
-        demographicProjectionId,
-      });
-      const { demographicProjections } = result;
-      if (
-        demographicProjections?.__typename ===
-          'DemographicProjectionConnector' &&
-        !!demographicProjections.nodes[0]
-      ) {
-        return demographicProjections.nodes[0];
-      } else {
-        throw new Error('Could not find encounter');
-      }
-    },
-    list: async ({
-      first,
-      offset,
-      sortBy,
-      filterBy,
-    }: ListParams<DemographicProjectionFragment>) => {
-      const result = await sdk.demographicProjections({
-        first,
-        offset,
-        key: DemographicProjectionSortFieldInput.Id,
-        desc: sortBy.isDesc,
-        filter: filterBy,
-      });
-      const demographicProjections = result?.demographicProjections;
-      return demographicProjections;
-    },
-    listAll: async ({ sortBy }: ListParams<DemographicProjectionFragment>) => {
-      const result = await sdk.demographicProjections({
-        key: DemographicProjectionSortFieldInput.Id,
-        desc: sortBy.isDesc,
-      });
-      const demographicProjections = result?.demographicProjections;
-      return demographicProjections;
-    },
-  },
-  insertIndicator: async (input: DemographicIndicatorFragment) => {
-    const insertInput: InsertDemographicIndicatorInput =
-      Parsers.toInsertIndicator(input);
-    const result = await sdk.insertDemographicIndicator({ input: insertInput });
-    if (
-      result.centralServer.demographic.insertDemographicIndicator.__typename ===
-      'DemographicIndicatorNode'
-    ) {
-      return result.centralServer.demographic.insertDemographicIndicator;
-    }
-    throw new Error('could not insert demographic indicator');
-  },
-  updateIndicator: async (input: DemographicIndicatorFragment) => {
-    const updateInput: UpdateDemographicIndicatorInput =
-      Parsers.toUpdateIndicator(input);
-    const result = await sdk.updateDemographicIndicator({
-      input: updateInput,
-    });
-    if (
-      result.centralServer.demographic.updateDemographicIndicator.__typename ===
-      'DemographicIndicatorNode'
-    ) {
-      return result.centralServer.demographic.updateDemographicIndicator;
-    }
-  },
-  insertProjection: async (input: InsertDemographicProjectionInput) => {
-    const result = await sdk.insertDemographicProjection({
-      input,
-    });
-    if (
-      result.centralServer.demographic.insertDemographicProjection
-        .__typename === 'DemographicProjectionNode'
-    ) {
-      return result.centralServer.demographic.insertDemographicProjection;
-    }
-    throw new Error('could not insert demographic projection');
-  },
-  updateProjection: async (input: UpdateDemographicProjectionInput) => {
-    const result = await sdk.updateDemographicProjection({
-      input,
-    });
-    if (
-      result.centralServer.demographic.updateDemographicProjection
-        .__typename === 'DemographicProjectionNode'
-    ) {
-      return result.centralServer.demographic.updateDemographicProjection;
-    }
-  },
-});
diff --git a/client/packages/system/src/IndicatorsDemographics/api/hooks/document/index.ts b/client/packages/system/src/IndicatorsDemographics/api/hooks/document/index.ts
deleted file mode 100644
index 48b764078..000000000
--- a/client/packages/system/src/IndicatorsDemographics/api/hooks/document/index.ts
+++ /dev/null
@@ -1,19 +0,0 @@
-import { useDemographicIndicator } from './useDemographicIndicator';
-import { useDemographicIndicators } from './useDemographicIndicators';
-import { useDemographicIndicatorInsert } from './useDemographicIndicatorInsert';
-import { useDemographicIndicatorUpdate } from './useDemographicIndicatorUpdate';
-import { useDemographicProjection } from './useDemographicProjection';
-import { useDemographicProjections } from './useDemographicProjections';
-import { useDemographicProjectionInsert } from './useDemographicProjectionInsert';
-import { useDemographicProjectionUpdate } from './useDemographicProjectionUpdate';
-
-export const Document = {
-  useDemographicIndicator,
-  useDemographicIndicators,
-  useDemographicIndicatorInsert,
-  useDemographicIndicatorUpdate,
-  useDemographicProjection,
-  useDemographicProjections,
-  useDemographicProjectionInsert,
-  useDemographicProjectionUpdate,
-};
diff --git a/client/packages/system/src/IndicatorsDemographics/api/hooks/document/useDemographicIndicator.ts b/client/packages/system/src/IndicatorsDemographics/api/hooks/document/useDemographicIndicator.ts
deleted file mode 100644
index e4df24bc1..000000000
--- a/client/packages/system/src/IndicatorsDemographics/api/hooks/document/useDemographicIndicator.ts
+++ /dev/null
@@ -1,24 +0,0 @@
-import { useParams, useQuery } from '@openmsupply-client/common';
-import { useDemographicsApi } from '../utils/useDemographicApi';
-
-export const useDemographicIndicatorId = () => {
-  const { id = '' } = useParams();
-  return id;
-};
-export const useDemographicIndicator = () => {
-  const demographicIndicatorId = useDemographicIndicatorId();
-  return useDemographicIndicatorById(demographicIndicatorId);
-};
-
-export const useDemographicIndicatorById = (
-  demographicIndicatorId: string | undefined
-) => {
-  const api = useDemographicsApi();
-  return useQuery(
-    api.keys.detailIndicator(demographicIndicatorId || ''),
-    () => api.getIndicators.byId(demographicIndicatorId || ''),
-    {
-      enabled: !!demographicIndicatorId,
-    }
-  );
-};
diff --git a/client/packages/system/src/IndicatorsDemographics/api/hooks/document/useDemographicIndicatorInsert.ts b/client/packages/system/src/IndicatorsDemographics/api/hooks/document/useDemographicIndicatorInsert.ts
deleted file mode 100644
index 2a960d1a5..000000000
--- a/client/packages/system/src/IndicatorsDemographics/api/hooks/document/useDemographicIndicatorInsert.ts
+++ /dev/null
@@ -1,23 +0,0 @@
-import { useMutation, useQueryClient } from 'react-query';
-import { DemographicIndicatorFragment } from '../../operations.generated';
-import { useDemographicsApi } from '../utils/useDemographicApi';
-
-export const useDemographicIndicatorInsert = () => {
-  const queryClient = useQueryClient();
-  const api = useDemographicsApi();
-
-  const invalidateQueries = () =>
-    queryClient.invalidateQueries(api.keys.baseIndicator());
-  const { mutateAsync: insertDemographicIndicator } = useMutation(
-    async (demographicIndicator: DemographicIndicatorFragment) =>
-      api.insertIndicator(demographicIndicator),
-    {
-      onSettled: () => queryClient.invalidateQueries(api.keys.baseIndicator()),
-      onError: e => {
-        console.error(e);
-      },
-    }
-  );
-
-  return { insertDemographicIndicator, invalidateQueries };
-};
diff --git a/client/packages/system/src/IndicatorsDemographics/api/hooks/document/useDemographicIndicatorUpdate.ts b/client/packages/system/src/IndicatorsDemographics/api/hooks/document/useDemographicIndicatorUpdate.ts
deleted file mode 100644
index 8b788e7e2..000000000
--- a/client/packages/system/src/IndicatorsDemographics/api/hooks/document/useDemographicIndicatorUpdate.ts
+++ /dev/null
@@ -1,14 +0,0 @@
-import { useMutation, useQueryClient } from 'react-query';
-import { DemographicIndicatorFragment } from '../../operations.generated';
-import { useDemographicsApi } from '../utils/useDemographicApi';
-
-export const useDemographicIndicatorUpdate = () => {
-  const queryClient = useQueryClient();
-  const api = useDemographicsApi();
-
-  return useMutation(
-    async (demographicIndicator: DemographicIndicatorFragment) =>
-      api.updateIndicator(demographicIndicator),
-    { onSettled: () => queryClient.invalidateQueries(api.keys.baseIndicator()) }
-  );
-};
diff --git a/client/packages/system/src/IndicatorsDemographics/api/hooks/document/useDemographicIndicators.ts b/client/packages/system/src/IndicatorsDemographics/api/hooks/document/useDemographicIndicators.ts
deleted file mode 100644
index 49cb8cb0e..000000000
--- a/client/packages/system/src/IndicatorsDemographics/api/hooks/document/useDemographicIndicators.ts
+++ /dev/null
@@ -1,73 +0,0 @@
-import {
-  useUrlQueryParams,
-  useQuery,
-  useTranslation,
-  DemographicIndicatorNode,
-  uniqBy,
-  ArrayUtils,
-} from '@openmsupply-client/common';
-import { useDemographicsApi } from '../utils/useDemographicApi';
-import {
-  HeaderValue,
-  Row,
-  toRow,
-} from '../../../DetailView/IndicatorsDemographics';
-import { useEffect, useState } from 'react';
-import { GENERAL_POPULATION_ID } from '../..';
-import { calculateAcrossRow } from '../../../DetailView/utils';
-
-export const useDemographicIndicators = (headerData: HeaderValue[]) => {
-  const t = useTranslation();
-
-  const { queryParams } = useUrlQueryParams({
-    filters: [{ key: 'name' }, { key: 'basePopulation' }, { key: 'id' }],
-  });
-
-  const api = useDemographicsApi();
-  const filterBy = queryParams.filterBy;
-  const params = { ...queryParams, filterBy };
-  const { data, isLoading } = useQuery(
-    api.keys.paramIndicatorList(params),
-    () => api.getIndicators.list(params)
-  );
-
-  const [draft, setDraft] = useState<Record<string, Row>>({});
-
-  useEffect(() => {
-    if (!data) {
-      return;
-    }
-
-    // generate index row dynamically from basePopulation and baseYear
-    const generalRow: DemographicIndicatorNode = {
-      __typename: 'DemographicIndicatorNode',
-      id: GENERAL_POPULATION_ID,
-      populationPercentage: 100,
-      name: t('label.general-population'),
-      baseYear: data?.nodes[0]?.baseYear ?? 2024,
-      // calculate basePopulation based on first matching row's base population
-      // later we could save generalPopulationRows in the database which are unique for anygivenyear? Their id could be something
-      // like GENERAL_POPULATION_ID_<year>
-      basePopulation: data?.nodes[0]?.basePopulation ?? 0,
-      year1Projection: data?.nodes[0]?.basePopulation ?? 0,
-      year2Projection: 0,
-      year3Projection: 0,
-      year4Projection: 0,
-      year5Projection: 0,
-    };
-
-    const generalRowCalculated = calculateAcrossRow(
-      toRow(generalRow),
-      ArrayUtils.toObject(headerData),
-      generalRow.basePopulation
-    );
-
-    const nodes = [...data?.nodes];
-    const nodesAsRow = nodes.map(row => toRow(row));
-    const nodesFiltered = uniqBy([generalRowCalculated, ...nodesAsRow], 'id');
-    const draftRows = ArrayUtils.toObject(nodesFiltered);
-    setDraft(draftRows);
-  }, [data, t]);
-
-  return { draft, setDraft, isLoading };
-};
diff --git a/client/packages/system/src/IndicatorsDemographics/api/hooks/document/useDemographicProjection.ts b/client/packages/system/src/IndicatorsDemographics/api/hooks/document/useDemographicProjection.ts
deleted file mode 100644
index bc0df1dab..000000000
--- a/client/packages/system/src/IndicatorsDemographics/api/hooks/document/useDemographicProjection.ts
+++ /dev/null
@@ -1,24 +0,0 @@
-import { useParams, useQuery } from '@openmsupply-client/common';
-import { useDemographicsApi } from '../utils/useDemographicApi';
-
-export const useDemographicProjectionId = () => {
-  const { id = '' } = useParams();
-  return id;
-};
-export const useDemographicProjection = () => {
-  const demographicProjectionId = useDemographicProjectionId();
-  return useDemographicProjectionById(demographicProjectionId);
-};
-
-export const useDemographicProjectionById = (
-  demographicProjectionId: string | undefined
-) => {
-  const api = useDemographicsApi();
-  return useQuery(
-    api.keys.detailProjection(demographicProjectionId || ''),
-    () => api.getProjections.byId(demographicProjectionId || ''),
-    {
-      enabled: !!demographicProjectionId,
-    }
-  );
-};
diff --git a/client/packages/system/src/IndicatorsDemographics/api/hooks/document/useDemographicProjectionInsert.ts b/client/packages/system/src/IndicatorsDemographics/api/hooks/document/useDemographicProjectionInsert.ts
deleted file mode 100644
index 594bb575b..000000000
--- a/client/packages/system/src/IndicatorsDemographics/api/hooks/document/useDemographicProjectionInsert.ts
+++ /dev/null
@@ -1,23 +0,0 @@
-import { useMutation, useQueryClient } from 'react-query';
-import { DemographicProjectionFragment } from '../../operations.generated';
-import { useDemographicsApi } from '../utils/useDemographicApi';
-
-export const useDemographicProjectionInsert = () => {
-  const queryClient = useQueryClient();
-  const api = useDemographicsApi();
-
-  const invalidateQueries = () =>
-    queryClient.invalidateQueries(api.keys.baseProjection());
-  const { mutateAsync: insertDemographicProjection } = useMutation(
-    async (demographicProjection: DemographicProjectionFragment) =>
-      api.insertProjection(demographicProjection),
-    {
-      onSettled: () => queryClient.invalidateQueries(api.keys.baseProjection()),
-      onError: e => {
-        console.error(e);
-      },
-    }
-  );
-
-  return { insertDemographicProjection, invalidateQueries };
-};
diff --git a/client/packages/system/src/IndicatorsDemographics/api/hooks/document/useDemographicProjectionUpdate.ts b/client/packages/system/src/IndicatorsDemographics/api/hooks/document/useDemographicProjectionUpdate.ts
deleted file mode 100644
index d678e1cba..000000000
--- a/client/packages/system/src/IndicatorsDemographics/api/hooks/document/useDemographicProjectionUpdate.ts
+++ /dev/null
@@ -1,16 +0,0 @@
-import { useMutation, useQueryClient } from 'react-query';
-import { DemographicProjectionFragment } from '../../operations.generated';
-import { useDemographicsApi } from '../utils/useDemographicApi';
-
-export const useDemographicProjectionUpdate = () => {
-  const queryClient = useQueryClient();
-  const api = useDemographicsApi();
-
-  return useMutation(
-    async (demographicProjection: DemographicProjectionFragment) =>
-      api.updateProjection(demographicProjection),
-    {
-      onSettled: () => queryClient.invalidateQueries(api.keys.baseProjection()),
-    }
-  );
-};
diff --git a/client/packages/system/src/IndicatorsDemographics/api/hooks/document/useDemographicProjections.ts b/client/packages/system/src/IndicatorsDemographics/api/hooks/document/useDemographicProjections.ts
deleted file mode 100644
index b452f6af7..000000000
--- a/client/packages/system/src/IndicatorsDemographics/api/hooks/document/useDemographicProjections.ts
+++ /dev/null
@@ -1,14 +0,0 @@
-import { useUrlQueryParams, useQuery } from '@openmsupply-client/common';
-import { useDemographicsApi } from '../utils/useDemographicApi';
-
-export const useDemographicProjections = () => {
-  const { queryParams } = useUrlQueryParams({
-    filters: [{ key: 'name' }, { key: 'basePopulation' }, { key: 'id' }],
-  });
-  const api = useDemographicsApi();
-  const filterBy = queryParams.filterBy;
-  const params = { ...queryParams, filterBy };
-  return useQuery(api.keys.paramProjectionList(params), () =>
-    api.getProjections.list(params)
-  );
-};
diff --git a/client/packages/system/src/IndicatorsDemographics/api/hooks/index.ts b/client/packages/system/src/IndicatorsDemographics/api/hooks/index.ts
deleted file mode 100644
index 0bf25360e..000000000
--- a/client/packages/system/src/IndicatorsDemographics/api/hooks/index.ts
+++ /dev/null
@@ -1,20 +0,0 @@
-import { Utils } from './utils';
-import { Document } from './document';
-
-export const useDemographicData = {
-  utils: {
-    demographics: Utils.useDemographicsApi,
-  },
-
-  document: {
-    getIndicator: Document.useDemographicIndicator,
-    listIndicator: Document.useDemographicIndicators,
-    insertIndicator: Document.useDemographicIndicatorInsert,
-    updateIndicator: Document.useDemographicIndicatorUpdate,
-
-    getProjection: Document.useDemographicProjection,
-    listProjection: Document.useDemographicProjections,
-    insertProjection: Document.useDemographicProjectionInsert,
-    updateProjection: Document.useDemographicProjectionUpdate,
-  },
-};
diff --git a/client/packages/system/src/IndicatorsDemographics/api/hooks/utils/index.ts b/client/packages/system/src/IndicatorsDemographics/api/hooks/utils/index.ts
deleted file mode 100644
index 84418f67b..000000000
--- a/client/packages/system/src/IndicatorsDemographics/api/hooks/utils/index.ts
+++ /dev/null
@@ -1,5 +0,0 @@
-import { useDemographicsApi } from './useDemographicApi';
-
-export const Utils = {
-  useDemographicsApi,
-};
diff --git a/client/packages/system/src/IndicatorsDemographics/api/hooks/utils/useDemographicApi.ts b/client/packages/system/src/IndicatorsDemographics/api/hooks/utils/useDemographicApi.ts
deleted file mode 100644
index 47faa3de7..000000000
--- a/client/packages/system/src/IndicatorsDemographics/api/hooks/utils/useDemographicApi.ts
+++ /dev/null
@@ -1,30 +0,0 @@
-import { SortBy, useGql } from '@openmsupply-client/common';
-import { ListParams, getDemographicIndicatorQueries } from '../../api';
-import {
-  DemographicIndicatorFragment,
-  DemographicProjectionFragment,
-  getSdk,
-} from '../../operations.generated';
-export const useDemographicsApi = () => {
-  const { client } = useGql();
-
-  const keys = {
-    baseIndicator: () => ['demographic indicator'] as const,
-    detailIndicator: (id: string) => [...keys.baseIndicator(), id] as const,
-    indicatorList: () => [...keys.baseIndicator(), 'list'] as const,
-    paramIndicatorList: (params: ListParams<DemographicIndicatorFragment>) =>
-      [...keys.indicatorList(), params] as const,
-    sortedIndicatorList: (sortBy: SortBy<DemographicIndicatorFragment>) =>
-      [...keys.indicatorList(), sortBy] as const,
-    baseProjection: () => ['demographic projection'] as const,
-    detailProjection: (id: string) => [...keys.baseProjection(), id] as const,
-    projectionList: () => [...keys.baseProjection(), 'list'] as const,
-    paramProjectionList: (params: ListParams<DemographicProjectionFragment>) =>
-      [...keys.projectionList(), params] as const,
-    sortedProjectionList: (sortBy: SortBy<DemographicProjectionFragment>) =>
-      [...keys.projectionList(), sortBy] as const,
-  };
-
-  const queries = getDemographicIndicatorQueries(getSdk(client));
-  return { ...queries, keys };
-};
diff --git a/client/packages/system/src/IndicatorsDemographics/api/index.ts b/client/packages/system/src/IndicatorsDemographics/api/index.ts
deleted file mode 100644
index 3d43fdf05..000000000
--- a/client/packages/system/src/IndicatorsDemographics/api/index.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-export * from './hooks';
-export const GENERAL_POPULATION_ID = 'generalRow';
diff --git a/client/packages/system/src/IndicatorsDemographics/api/operations.generated.ts b/client/packages/system/src/IndicatorsDemographics/api/operations.generated.ts
deleted file mode 100644
index d65cc3522..000000000
--- a/client/packages/system/src/IndicatorsDemographics/api/operations.generated.ts
+++ /dev/null
@@ -1,396 +0,0 @@
-import * as Types from '@openmsupply-client/common';
-
-import { GraphQLClient } from 'graphql-request';
-import { GraphQLClientRequestHeaders } from 'graphql-request/build/cjs/types';
-import gql from 'graphql-tag';
-import { graphql, ResponseResolver, GraphQLRequest, GraphQLContext } from 'msw'
-export type DemographicIndicatorFragment = { __typename: 'DemographicIndicatorNode', id: string, name: string, baseYear: number, basePopulation: number, populationPercentage: number, year1Projection: number, year2Projection: number, year3Projection: number, year4Projection: number, year5Projection: number };
-
-export type DemographicProjectionFragment = { __typename: 'DemographicProjectionNode', id: string, baseYear: number, year1: number, year2: number, year3: number, year4: number, year5: number };
-
-export type DemographicIndicatorsQueryVariables = Types.Exact<{
-  first?: Types.InputMaybe<Types.Scalars['Int']['input']>;
-  offset?: Types.InputMaybe<Types.Scalars['Int']['input']>;
-  key: Types.DemographicIndicatorSortFieldInput;
-  desc?: Types.InputMaybe<Types.Scalars['Boolean']['input']>;
-  filter?: Types.InputMaybe<Types.DemographicIndicatorFilterInput>;
-}>;
-
-
-export type DemographicIndicatorsQuery = { __typename: 'Queries', demographicIndicators: { __typename: 'DemographicIndicatorConnector', totalCount: number, nodes: Array<{ __typename: 'DemographicIndicatorNode', id: string, name: string, baseYear: number, basePopulation: number, populationPercentage: number, year1Projection: number, year2Projection: number, year3Projection: number, year4Projection: number, year5Projection: number }> } };
-
-export type DemographicProjectionsQueryVariables = Types.Exact<{
-  first?: Types.InputMaybe<Types.Scalars['Int']['input']>;
-  offset?: Types.InputMaybe<Types.Scalars['Int']['input']>;
-  key: Types.DemographicProjectionSortFieldInput;
-  desc?: Types.InputMaybe<Types.Scalars['Boolean']['input']>;
-  filter?: Types.InputMaybe<Types.DemographicProjectionFilterInput>;
-}>;
-
-
-export type DemographicProjectionsQuery = { __typename: 'Queries', demographicProjections: { __typename: 'DemographicProjectionConnector', totalCount: number, nodes: Array<{ __typename: 'DemographicProjectionNode', id: string, baseYear: number, year1: number, year2: number, year3: number, year4: number, year5: number }> } };
-
-export type DemographicIndicatorByIdQueryVariables = Types.Exact<{
-  demographicIndicatorId: Types.Scalars['String']['input'];
-}>;
-
-
-export type DemographicIndicatorByIdQuery = { __typename: 'Queries', demographicIndicators: { __typename: 'DemographicIndicatorConnector', nodes: Array<{ __typename: 'DemographicIndicatorNode', id: string, name: string, baseYear: number, basePopulation: number, populationPercentage: number, year1Projection: number, year2Projection: number, year3Projection: number, year4Projection: number, year5Projection: number }> } };
-
-export type DemographicProjectionByIdQueryVariables = Types.Exact<{
-  demographicProjectionId: Types.Scalars['String']['input'];
-}>;
-
-
-export type DemographicProjectionByIdQuery = { __typename: 'Queries', demographicProjections: { __typename: 'DemographicProjectionConnector', nodes: Array<{ __typename: 'DemographicProjectionNode', id: string, baseYear: number, year1: number, year2: number, year3: number, year4: number, year5: number }> } };
-
-export type InsertDemographicIndicatorMutationVariables = Types.Exact<{
-  input: Types.InsertDemographicIndicatorInput;
-}>;
-
-
-export type InsertDemographicIndicatorMutation = { __typename: 'Mutations', centralServer: { __typename: 'CentralServerMutationNode', demographic: { __typename: 'DemographicMutations', insertDemographicIndicator: { __typename: 'DemographicIndicatorNode', id: string } | { __typename: 'InsertDemographicIndicatorError', error: { __typename: 'DatabaseError', description: string } | { __typename: 'InternalError', description: string } | { __typename: 'NoPermissionForThisStore', description: string } | { __typename: 'RecordAlreadyExist', description: string } | { __typename: 'UniqueValueViolation', description: string } } } } };
-
-export type InsertDemographicProjectionMutationVariables = Types.Exact<{
-  input: Types.InsertDemographicProjectionInput;
-}>;
-
-
-export type InsertDemographicProjectionMutation = { __typename: 'Mutations', centralServer: { __typename: 'CentralServerMutationNode', demographic: { __typename: 'DemographicMutations', insertDemographicProjection: { __typename: 'DemographicProjectionNode', id: string } | { __typename: 'InsertDemographicProjectionError', error: { __typename: 'DatabaseError', description: string } | { __typename: 'InternalError', description: string } | { __typename: 'NoPermissionForThisStore', description: string } | { __typename: 'RecordAlreadyExist', description: string } | { __typename: 'UniqueValueViolation', description: string } } } } };
-
-export type UpdateDemographicIndicatorMutationVariables = Types.Exact<{
-  input: Types.UpdateDemographicIndicatorInput;
-}>;
-
-
-export type UpdateDemographicIndicatorMutation = { __typename: 'Mutations', centralServer: { __typename: 'CentralServerMutationNode', demographic: { __typename: 'DemographicMutations', updateDemographicIndicator: { __typename: 'DemographicIndicatorNode', id: string } | { __typename: 'UpdateDemographicIndicatorError', error: { __typename: 'DatabaseError', description: string } | { __typename: 'InternalError', description: string } | { __typename: 'NoPermissionForThisStore', description: string } | { __typename: 'RecordAlreadyExist', description: string } | { __typename: 'UniqueValueViolation', description: string } } } } };
-
-export type UpdateDemographicProjectionMutationVariables = Types.Exact<{
-  input: Types.UpdateDemographicProjectionInput;
-}>;
-
-
-export type UpdateDemographicProjectionMutation = { __typename: 'Mutations', centralServer: { __typename: 'CentralServerMutationNode', demographic: { __typename: 'DemographicMutations', updateDemographicProjection: { __typename: 'DemographicProjectionNode', id: string } | { __typename: 'UpdateDemographicProjectionError', error: { __typename: 'DatabaseError', description: string } | { __typename: 'InternalError', description: string } | { __typename: 'NoPermissionForThisStore', description: string } | { __typename: 'RecordAlreadyExist', description: string } | { __typename: 'UniqueValueViolation', description: string } } } } };
-
-export const DemographicIndicatorFragmentDoc = gql`
-    fragment DemographicIndicator on DemographicIndicatorNode {
-  id
-  name
-  baseYear
-  basePopulation
-  populationPercentage
-  year1Projection
-  year2Projection
-  year3Projection
-  year4Projection
-  year5Projection
-}
-    `;
-export const DemographicProjectionFragmentDoc = gql`
-    fragment DemographicProjection on DemographicProjectionNode {
-  id
-  baseYear
-  year1
-  year2
-  year3
-  year4
-  year5
-}
-    `;
-export const DemographicIndicatorsDocument = gql`
-    query demographicIndicators($first: Int, $offset: Int, $key: DemographicIndicatorSortFieldInput!, $desc: Boolean, $filter: DemographicIndicatorFilterInput) {
-  demographicIndicators(
-    page: {first: $first, offset: $offset}
-    sort: {key: $key, desc: $desc}
-    filter: $filter
-  ) {
-    ... on DemographicIndicatorConnector {
-      nodes {
-        ...DemographicIndicator
-      }
-      totalCount
-    }
-  }
-}
-    ${DemographicIndicatorFragmentDoc}`;
-export const DemographicProjectionsDocument = gql`
-    query demographicProjections($first: Int, $offset: Int, $key: DemographicProjectionSortFieldInput!, $desc: Boolean, $filter: DemographicProjectionFilterInput) {
-  demographicProjections(
-    page: {first: $first, offset: $offset}
-    sort: {key: $key, desc: $desc}
-    filter: $filter
-  ) {
-    ... on DemographicProjectionConnector {
-      nodes {
-        ...DemographicProjection
-      }
-      totalCount
-    }
-  }
-}
-    ${DemographicProjectionFragmentDoc}`;
-export const DemographicIndicatorByIdDocument = gql`
-    query demographicIndicatorById($demographicIndicatorId: String!) {
-  demographicIndicators(filter: {id: {equalTo: $demographicIndicatorId}}) {
-    ... on DemographicIndicatorConnector {
-      nodes {
-        ...DemographicIndicator
-      }
-    }
-  }
-}
-    ${DemographicIndicatorFragmentDoc}`;
-export const DemographicProjectionByIdDocument = gql`
-    query demographicProjectionById($demographicProjectionId: String!) {
-  demographicProjections(filter: {id: {equalTo: $demographicProjectionId}}) {
-    ... on DemographicProjectionConnector {
-      nodes {
-        ...DemographicProjection
-      }
-    }
-  }
-}
-    ${DemographicProjectionFragmentDoc}`;
-export const InsertDemographicIndicatorDocument = gql`
-    mutation insertDemographicIndicator($input: InsertDemographicIndicatorInput!) {
-  centralServer {
-    demographic {
-      insertDemographicIndicator(input: $input) {
-        ... on DemographicIndicatorNode {
-          id
-        }
-        ... on InsertDemographicIndicatorError {
-          error {
-            description
-          }
-        }
-      }
-    }
-  }
-}
-    `;
-export const InsertDemographicProjectionDocument = gql`
-    mutation insertDemographicProjection($input: InsertDemographicProjectionInput!) {
-  centralServer {
-    demographic {
-      insertDemographicProjection(input: $input) {
-        ... on DemographicProjectionNode {
-          id
-        }
-        ... on InsertDemographicProjectionError {
-          error {
-            description
-          }
-        }
-      }
-    }
-  }
-}
-    `;
-export const UpdateDemographicIndicatorDocument = gql`
-    mutation updateDemographicIndicator($input: UpdateDemographicIndicatorInput!) {
-  centralServer {
-    demographic {
-      updateDemographicIndicator(input: $input) {
-        ... on DemographicIndicatorNode {
-          id
-        }
-        ... on UpdateDemographicIndicatorError {
-          error {
-            description
-          }
-        }
-      }
-    }
-  }
-}
-    `;
-export const UpdateDemographicProjectionDocument = gql`
-    mutation updateDemographicProjection($input: UpdateDemographicProjectionInput!) {
-  centralServer {
-    demographic {
-      updateDemographicProjection(input: $input) {
-        ... on DemographicProjectionNode {
-          id
-        }
-        ... on InsertDemographicProjectionError {
-          error {
-            description
-          }
-        }
-      }
-    }
-  }
-}
-    `;
-
-export type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;
-
-
-const defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType) => action();
-
-export function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {
-  return {
-    demographicIndicators(variables: DemographicIndicatorsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<DemographicIndicatorsQuery> {
-      return withWrapper((wrappedRequestHeaders) => client.request<DemographicIndicatorsQuery>(DemographicIndicatorsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'demographicIndicators', 'query');
-    },
-    demographicProjections(variables: DemographicProjectionsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<DemographicProjectionsQuery> {
-      return withWrapper((wrappedRequestHeaders) => client.request<DemographicProjectionsQuery>(DemographicProjectionsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'demographicProjections', 'query');
-    },
-    demographicIndicatorById(variables: DemographicIndicatorByIdQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<DemographicIndicatorByIdQuery> {
-      return withWrapper((wrappedRequestHeaders) => client.request<DemographicIndicatorByIdQuery>(DemographicIndicatorByIdDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'demographicIndicatorById', 'query');
-    },
-    demographicProjectionById(variables: DemographicProjectionByIdQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<DemographicProjectionByIdQuery> {
-      return withWrapper((wrappedRequestHeaders) => client.request<DemographicProjectionByIdQuery>(DemographicProjectionByIdDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'demographicProjectionById', 'query');
-    },
-    insertDemographicIndicator(variables: InsertDemographicIndicatorMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<InsertDemographicIndicatorMutation> {
-      return withWrapper((wrappedRequestHeaders) => client.request<InsertDemographicIndicatorMutation>(InsertDemographicIndicatorDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'insertDemographicIndicator', 'mutation');
-    },
-    insertDemographicProjection(variables: InsertDemographicProjectionMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<InsertDemographicProjectionMutation> {
-      return withWrapper((wrappedRequestHeaders) => client.request<InsertDemographicProjectionMutation>(InsertDemographicProjectionDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'insertDemographicProjection', 'mutation');
-    },
-    updateDemographicIndicator(variables: UpdateDemographicIndicatorMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<UpdateDemographicIndicatorMutation> {
-      return withWrapper((wrappedRequestHeaders) => client.request<UpdateDemographicIndicatorMutation>(UpdateDemographicIndicatorDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'updateDemographicIndicator', 'mutation');
-    },
-    updateDemographicProjection(variables: UpdateDemographicProjectionMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<UpdateDemographicProjectionMutation> {
-      return withWrapper((wrappedRequestHeaders) => client.request<UpdateDemographicProjectionMutation>(UpdateDemographicProjectionDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'updateDemographicProjection', 'mutation');
-    }
-  };
-}
-export type Sdk = ReturnType<typeof getSdk>;
-
-/**
- * @param resolver a function that accepts a captured request and may return a mocked response.
- * @see https://mswjs.io/docs/basics/response-resolver
- * @example
- * mockDemographicIndicatorsQuery((req, res, ctx) => {
- *   const { first, offset, key, desc, filter } = req.variables;
- *   return res(
- *     ctx.data({ demographicIndicators })
- *   )
- * })
- */
-export const mockDemographicIndicatorsQuery = (resolver: ResponseResolver<GraphQLRequest<DemographicIndicatorsQueryVariables>, GraphQLContext<DemographicIndicatorsQuery>, any>) =>
-  graphql.query<DemographicIndicatorsQuery, DemographicIndicatorsQueryVariables>(
-    'demographicIndicators',
-    resolver
-  )
-
-/**
- * @param resolver a function that accepts a captured request and may return a mocked response.
- * @see https://mswjs.io/docs/basics/response-resolver
- * @example
- * mockDemographicProjectionsQuery((req, res, ctx) => {
- *   const { first, offset, key, desc, filter } = req.variables;
- *   return res(
- *     ctx.data({ demographicProjections })
- *   )
- * })
- */
-export const mockDemographicProjectionsQuery = (resolver: ResponseResolver<GraphQLRequest<DemographicProjectionsQueryVariables>, GraphQLContext<DemographicProjectionsQuery>, any>) =>
-  graphql.query<DemographicProjectionsQuery, DemographicProjectionsQueryVariables>(
-    'demographicProjections',
-    resolver
-  )
-
-/**
- * @param resolver a function that accepts a captured request and may return a mocked response.
- * @see https://mswjs.io/docs/basics/response-resolver
- * @example
- * mockDemographicIndicatorByIdQuery((req, res, ctx) => {
- *   const { demographicIndicatorId } = req.variables;
- *   return res(
- *     ctx.data({ demographicIndicators })
- *   )
- * })
- */
-export const mockDemographicIndicatorByIdQuery = (resolver: ResponseResolver<GraphQLRequest<DemographicIndicatorByIdQueryVariables>, GraphQLContext<DemographicIndicatorByIdQuery>, any>) =>
-  graphql.query<DemographicIndicatorByIdQuery, DemographicIndicatorByIdQueryVariables>(
-    'demographicIndicatorById',
-    resolver
-  )
-
-/**
- * @param resolver a function that accepts a captured request and may return a mocked response.
- * @see https://mswjs.io/docs/basics/response-resolver
- * @example
- * mockDemographicProjectionByIdQuery((req, res, ctx) => {
- *   const { demographicProjectionId } = req.variables;
- *   return res(
- *     ctx.data({ demographicProjections })
- *   )
- * })
- */
-export const mockDemographicProjectionByIdQuery = (resolver: ResponseResolver<GraphQLRequest<DemographicProjectionByIdQueryVariables>, GraphQLContext<DemographicProjectionByIdQuery>, any>) =>
-  graphql.query<DemographicProjectionByIdQuery, DemographicProjectionByIdQueryVariables>(
-    'demographicProjectionById',
-    resolver
-  )
-
-/**
- * @param resolver a function that accepts a captured request and may return a mocked response.
- * @see https://mswjs.io/docs/basics/response-resolver
- * @example
- * mockInsertDemographicIndicatorMutation((req, res, ctx) => {
- *   const { input } = req.variables;
- *   return res(
- *     ctx.data({ centralServer })
- *   )
- * })
- */
-export const mockInsertDemographicIndicatorMutation = (resolver: ResponseResolver<GraphQLRequest<InsertDemographicIndicatorMutationVariables>, GraphQLContext<InsertDemographicIndicatorMutation>, any>) =>
-  graphql.mutation<InsertDemographicIndicatorMutation, InsertDemographicIndicatorMutationVariables>(
-    'insertDemographicIndicator',
-    resolver
-  )
-
-/**
- * @param resolver a function that accepts a captured request and may return a mocked response.
- * @see https://mswjs.io/docs/basics/response-resolver
- * @example
- * mockInsertDemographicProjectionMutation((req, res, ctx) => {
- *   const { input } = req.variables;
- *   return res(
- *     ctx.data({ centralServer })
- *   )
- * })
- */
-export const mockInsertDemographicProjectionMutation = (resolver: ResponseResolver<GraphQLRequest<InsertDemographicProjectionMutationVariables>, GraphQLContext<InsertDemographicProjectionMutation>, any>) =>
-  graphql.mutation<InsertDemographicProjectionMutation, InsertDemographicProjectionMutationVariables>(
-    'insertDemographicProjection',
-    resolver
-  )
-
-/**
- * @param resolver a function that accepts a captured request and may return a mocked response.
- * @see https://mswjs.io/docs/basics/response-resolver
- * @example
- * mockUpdateDemographicIndicatorMutation((req, res, ctx) => {
- *   const { input } = req.variables;
- *   return res(
- *     ctx.data({ centralServer })
- *   )
- * })
- */
-export const mockUpdateDemographicIndicatorMutation = (resolver: ResponseResolver<GraphQLRequest<UpdateDemographicIndicatorMutationVariables>, GraphQLContext<UpdateDemographicIndicatorMutation>, any>) =>
-  graphql.mutation<UpdateDemographicIndicatorMutation, UpdateDemographicIndicatorMutationVariables>(
-    'updateDemographicIndicator',
-    resolver
-  )
-
-/**
- * @param resolver a function that accepts a captured request and may return a mocked response.
- * @see https://mswjs.io/docs/basics/response-resolver
- * @example
- * mockUpdateDemographicProjectionMutation((req, res, ctx) => {
- *   const { input } = req.variables;
- *   return res(
- *     ctx.data({ centralServer })
- *   )
- * })
- */
-export const mockUpdateDemographicProjectionMutation = (resolver: ResponseResolver<GraphQLRequest<UpdateDemographicProjectionMutationVariables>, GraphQLContext<UpdateDemographicProjectionMutation>, any>) =>
-  graphql.mutation<UpdateDemographicProjectionMutation, UpdateDemographicProjectionMutationVariables>(
-    'updateDemographicProjection',
-    resolver
-  )
diff --git a/client/packages/system/src/IndicatorsDemographics/api/operations.graphql b/client/packages/system/src/IndicatorsDemographics/api/operations.graphql
deleted file mode 100644
index 2055f5314..000000000
--- a/client/packages/system/src/IndicatorsDemographics/api/operations.graphql
+++ /dev/null
@@ -1,158 +0,0 @@
-fragment DemographicIndicator on DemographicIndicatorNode {
-  id
-  name
-  baseYear
-  basePopulation
-  populationPercentage
-  year1Projection
-  year2Projection
-  year3Projection
-  year4Projection
-  year5Projection
-}
-
-fragment DemographicProjection on DemographicProjectionNode {
-  id
-  baseYear
-  year1
-  year2
-  year3
-  year4
-  year5
-}
-
-query demographicIndicators(
-  $first: Int
-  $offset: Int
-  $key: DemographicIndicatorSortFieldInput!
-  $desc: Boolean
-  $filter: DemographicIndicatorFilterInput
-) {
-  demographicIndicators(
-    page: { first: $first, offset: $offset }
-    sort: { key: $key, desc: $desc }
-    filter: $filter
-  ) {
-    ... on DemographicIndicatorConnector {
-      nodes {
-        ...DemographicIndicator
-      }
-      totalCount
-    }
-  }
-}
-
-query demographicProjections(
-  $first: Int
-  $offset: Int
-  $key: DemographicProjectionSortFieldInput!
-  $desc: Boolean
-  $filter: DemographicProjectionFilterInput
-) {
-  demographicProjections(
-    page: { first: $first, offset: $offset }
-    sort: { key: $key, desc: $desc }
-    filter: $filter
-  ) {
-    ... on DemographicProjectionConnector {
-      nodes {
-        ...DemographicProjection
-      }
-      totalCount
-    }
-  }
-}
-
-query demographicIndicatorById($demographicIndicatorId: String!) {
-  demographicIndicators(filter: { id: { equalTo: $demographicIndicatorId } }) {
-    ... on DemographicIndicatorConnector {
-      nodes {
-        ...DemographicIndicator
-      }
-    }
-  }
-}
-
-query demographicProjectionById($demographicProjectionId: String!) {
-  demographicProjections(
-    filter: { id: { equalTo: $demographicProjectionId } }
-  ) {
-    ... on DemographicProjectionConnector {
-      nodes {
-        ...DemographicProjection
-      }
-    }
-  }
-}
-
-mutation insertDemographicIndicator($input: InsertDemographicIndicatorInput!) {
-  centralServer {
-    demographic {
-      insertDemographicIndicator(input: $input) {
-        ... on DemographicIndicatorNode {
-          id
-        }
-        ... on InsertDemographicIndicatorError {
-          error {
-            description
-          }
-        }
-      }
-    }
-  }
-}
-
-mutation insertDemographicProjection(
-  $input: InsertDemographicProjectionInput!
-) {
-  centralServer {
-    demographic {
-      insertDemographicProjection(input: $input) {
-        ... on DemographicProjectionNode {
-          id
-        }
-        ... on InsertDemographicProjectionError {
-          error {
-            description
-          }
-        }
-      }
-    }
-  }
-}
-
-mutation updateDemographicIndicator($input: UpdateDemographicIndicatorInput!) {
-  centralServer {
-    demographic {
-      updateDemographicIndicator(input: $input) {
-        ... on DemographicIndicatorNode {
-          id
-        }
-        ... on UpdateDemographicIndicatorError {
-          error {
-            description
-          }
-        }
-      }
-    }
-  }
-}
-
-mutation updateDemographicProjection(
-  $input: UpdateDemographicProjectionInput!
-) {
-  centralServer {
-    demographic {
-      updateDemographicProjection(input: $input) {
-        ... on DemographicProjectionNode {
-          id
-        }
-        ... on InsertDemographicProjectionError {
-          error {
-            description
-          }
-        }
-      }
-    }
-  }
-}
diff --git a/client/packages/system/src/IndicatorsDemographics/index.ts b/client/packages/system/src/IndicatorsDemographics/index.ts
deleted file mode 100644
index f9f838d4f..000000000
--- a/client/packages/system/src/IndicatorsDemographics/index.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-// export * from './types';
-export * from './Service';
diff --git a/client/packages/system/src/IndicatorsDemographics/types.ts b/client/packages/system/src/IndicatorsDemographics/types.ts
deleted file mode 100644
index e69de29bb..000000000
diff --git a/client/packages/system/src/Item/Components/PackVariant/PackVariantEntryCell.tsx b/client/packages/system/src/Item/Components/PackVariant/PackVariantEntryCell.tsx
index 9445c0228..4515a1680 100644
--- a/client/packages/system/src/Item/Components/PackVariant/PackVariantEntryCell.tsx
+++ b/client/packages/system/src/Item/Components/PackVariant/PackVariantEntryCell.tsx
@@ -36,7 +36,7 @@ export const PackVariantEntryCell =
     const t = useTranslation();
     const [isEnterPackSize, setIsEnterPackSize] = useState(false);
     const [shouldFocusInput, setShouldFocusInput] = useState(false);
-    const [packSize, setPackSize] = useState<number | undefined>(
+    const [packSize, setPackSize] = useState(
       Number(column.accessor({ rowData }))
     );
 
@@ -65,18 +65,10 @@ export const PackVariantEntryCell =
       return (
         <NumericTextInput
           focusOnRender={shouldFocusInput}
-          min={1}
-          defaultValue={1}
           value={packSize}
           onChange={newValue => {
-            // newValue could be undefined, while the user is inputting
-            // (e.g. they clear the field to enter a new pack size)
-            // In that case, we keep the packSize local state as undefined
-            // but set the row value to 1 (so we always have valid state to save)
-
-            // NumericTextInput will reset to our default (1) on blur if the field is empty!
-            setPackSize(newValue);
-            updater({ ...rowData, [column.key]: newValue ?? 1 });
+            setPackSize(newValue || 1);
+            updater({ ...rowData, [column.key]: newValue });
           }}
           disabled={disabled}
         />
diff --git a/client/packages/system/src/Name/Components/DonorSearchInput/DonorSearchInput.tsx b/client/packages/system/src/Name/Components/DonorSearchInput/DonorSearchInput.tsx
deleted file mode 100644
index 114f64780..000000000
--- a/client/packages/system/src/Name/Components/DonorSearchInput/DonorSearchInput.tsx
+++ /dev/null
@@ -1,50 +0,0 @@
-import React, { FC } from 'react';
-import {
-  Autocomplete,
-  useBufferState,
-  useTranslation,
-} from '@openmsupply-client/common';
-import { NameRowFragment, useName } from '../../api';
-import {
-  basicFilterOptions,
-  filterByNameAndCode,
-  NameSearchInputProps,
-} from '../../utils';
-import { getNameOptionRenderer } from '../NameOptionRenderer';
-
-export const DonorSearchInput: FC<NameSearchInputProps> = ({
-  onChange,
-  onInputChange,
-  width = 250,
-  value,
-  disabled = false,
-  clearable = false,
-}) => {
-  const { data, isLoading } = useName.document.donors();
-  const [buffer, setBuffer] = useBufferState(value);
-  const t = useTranslation();
-  const NameOptionRenderer = getNameOptionRenderer(t('label.on-hold'));
-
-  return (
-    <Autocomplete
-      disabled={disabled}
-      clearable={clearable}
-      value={buffer && { ...buffer, label: buffer.name }}
-      filterOptionConfig={basicFilterOptions}
-      loading={isLoading}
-      onChange={(_, name) => {
-        setBuffer(name);
-        name && onChange(name);
-      }}
-      onInputChange={onInputChange}
-      options={data?.nodes ?? []}
-      renderOption={NameOptionRenderer}
-      getOptionLabel={(option: NameRowFragment) => option.name}
-      filterOptions={filterByNameAndCode}
-      width={`${width}px`}
-      popperMinWidth={width}
-      isOptionEqualToValue={(option, value) => option?.id === value?.id}
-      getOptionDisabled={option => option.isOnHold}
-    />
-  );
-};
diff --git a/client/packages/system/src/Name/Components/DonorSearchInput/index.ts b/client/packages/system/src/Name/Components/DonorSearchInput/index.ts
deleted file mode 100644
index e8a8898db..000000000
--- a/client/packages/system/src/Name/Components/DonorSearchInput/index.ts
+++ /dev/null
@@ -1 +0,0 @@
-export * from './DonorSearchInput';
diff --git a/client/packages/system/src/Name/Components/index.ts b/client/packages/system/src/Name/Components/index.ts
index f42a2ebd7..118669ca0 100644
--- a/client/packages/system/src/Name/Components/index.ts
+++ b/client/packages/system/src/Name/Components/index.ts
@@ -1,4 +1,3 @@
-export * from './DonorSearchInput';
 export * from './SupplierSearchInput';
 export * from './SupplierSearchModal';
 export * from './CustomerSearchInput';
diff --git a/client/packages/system/src/Name/ListView/Facilities/FacilityEditModal.tsx b/client/packages/system/src/Name/ListView/Facilities/FacilityEditModal.tsx
deleted file mode 100644
index 8590f6dc4..000000000
--- a/client/packages/system/src/Name/ListView/Facilities/FacilityEditModal.tsx
+++ /dev/null
@@ -1,153 +0,0 @@
-import React, { FC, useState } from 'react';
-import {
-  useTranslation,
-  DetailContainer,
-  DetailSection,
-  Box,
-  BasicSpinner,
-  useDialog,
-  DialogButton,
-  useKeyboardHeightAdjustment,
-  Typography,
-  PropertyInput,
-  InputWithLabelRow,
-} from '@openmsupply-client/common';
-import { useName } from '../../api';
-import { NameRenderer } from '../..';
-
-interface FacilityEditModalProps {
-  nameId: string;
-  isOpen: boolean;
-  onClose: () => void;
-  setNextFacility: (nameId: string) => void;
-}
-
-// todo: next PR - populate existing from name
-const useDraftFacilityProperties = () => {
-  const [draftProperties, setDraftProperties] = useState<
-    Record<string, string | number | boolean | null>
-  >({});
-
-  return {
-    draftProperties,
-    setDraftProperties,
-  };
-};
-
-export const FacilityEditModal: FC<FacilityEditModalProps> = ({
-  nameId,
-  isOpen,
-  onClose,
-  setNextFacility,
-}) => {
-  const t = useTranslation();
-
-  const { data, isLoading } = useName.document.get(nameId);
-  const { data: properties, isLoading: propertiesLoading } =
-    useName.document.properties();
-  const { Modal } = useDialog({ isOpen, onClose, disableBackdrop: true });
-
-  const height = useKeyboardHeightAdjustment(600);
-
-  const { draftProperties, setDraftProperties } = useDraftFacilityProperties();
-
-  const nextId = useName.utils.nextFacilityId(nameId);
-
-  const save = async () => {
-    // TODO
-    console.log(draftProperties);
-  };
-
-  if (isLoading || propertiesLoading) return <BasicSpinner />;
-
-  return !!data ? (
-    <Modal
-      title=""
-      cancelButton={<DialogButton variant="cancel" onClick={onClose} />}
-      okButton={
-        <DialogButton
-          variant="ok"
-          onClick={async () => {
-            await save();
-            onClose();
-          }}
-        />
-      }
-      nextButton={
-        <DialogButton
-          disabled={!nextId}
-          variant="next"
-          onClick={async () => {
-            await save();
-            nextId && setNextFacility(nextId);
-            // Returning true triggers the animation/slide out
-            return true;
-          }}
-        />
-      }
-      height={height}
-      width={700}
-    >
-      <DetailContainer>
-        <Box display="flex" flexDirection="column" alignItems="center" gap={2}>
-          <NameRenderer
-            isStore={!!data.store}
-            label={data.name}
-            sx={{ fontWeight: 'bold', fontSize: 18 }}
-          />
-
-          <Box display="flex">
-            <Typography fontWeight="bold">{t('label.code')}:</Typography>
-            <Typography paddingX={1}>{data.code}</Typography>
-          </Box>
-          <DetailSection title="">
-            {!properties?.length ? (
-              <Typography sx={{ textAlign: 'center' }}>
-                {t('messages.no-properties')}
-              </Typography>
-            ) : (
-              <Box
-                sx={{
-                  width: '500px',
-                  display: 'grid',
-                  gap: 1,
-                }}
-              >
-                {properties.map(property => (
-                  <InputWithLabelRow
-                    key={property.key}
-                    label={property.name}
-                    sx={{ width: '100%' }}
-                    labelProps={{
-                      sx: {
-                        width: '250px',
-                        fontSize: '16px',
-                        paddingRight: 2,
-                        textAlign: 'right',
-                      },
-                    }}
-                    Input={
-                      <Box flex={1}>
-                        <PropertyInput
-                          valueType={property.valueType}
-                          allowedValues={property.allowedValues?.split(',')}
-                          value={draftProperties[property.key]}
-                          onChange={v =>
-                            setDraftProperties({
-                              ...draftProperties,
-                              [property.key]: v ?? null,
-                            })
-                          }
-                        />
-                      </Box>
-                    }
-                  />
-                ))}
-              </Box>
-            )}
-          </DetailSection>
-        </Box>
-      </DetailContainer>
-    </Modal>
-  ) : null;
-};
diff --git a/client/packages/system/src/Name/ListView/Facilities/ListView.tsx b/client/packages/system/src/Name/ListView/Facilities/ListView.tsx
deleted file mode 100644
index 57649f996..000000000
--- a/client/packages/system/src/Name/ListView/Facilities/ListView.tsx
+++ /dev/null
@@ -1,109 +0,0 @@
-import React, { useState } from 'react';
-import {
-  TableProvider,
-  DataTable,
-  useColumns,
-  createTableStore,
-  NothingHere,
-  useUrlQueryParams,
-  DotCell,
-  ColumnAlign,
-  useEditModal,
-} from '@openmsupply-client/common';
-import { useName, NameRowFragment } from '../../api';
-import { NameRenderer } from '../../Components';
-import { Toolbar } from './Toolbar';
-import { FacilityEditModal } from './FacilityEditModal';
-
-const FacilitiesListComponent = () => {
-  const [selectedId, setSelectedId] = useState('');
-  const {
-    filter,
-    updateSortQuery,
-    updatePaginationQuery,
-    queryParams: { sortBy, page, first, offset },
-  } = useUrlQueryParams();
-  const { data, isError, isLoading } = useName.document.facilities();
-  const pagination = { page, first, offset };
-
-  const { isOpen, onClose, onOpen } = useEditModal<NameRowFragment>();
-
-  const onRowClick = (row: NameRowFragment) => {
-    setSelectedId(row.id);
-    onOpen();
-  };
-
-  const columns = useColumns<NameRowFragment>(
-    [
-      {
-        key: 'code',
-        label: 'label.code',
-        Cell: ({ rowData }) => (
-          <NameRenderer label={rowData.code} isStore={!!rowData.store} />
-        ),
-        width: 100,
-      },
-      'name',
-      {
-        key: 'isSupplier',
-        label: 'label.supplier',
-        align: ColumnAlign.Center,
-        Cell: DotCell,
-        width: 75,
-        sortable: false,
-      },
-      {
-        key: 'isCustomer',
-        label: 'label.customer',
-        align: ColumnAlign.Center,
-        Cell: DotCell,
-        width: 75,
-        sortable: false,
-      },
-      {
-        key: 'isDonor',
-        label: 'label.donor',
-        align: ColumnAlign.Center,
-        Cell: DotCell,
-        width: 75,
-        sortable: false,
-      },
-    ],
-    {
-      sortBy,
-      onChangeSortBy: updateSortQuery,
-    },
-    [sortBy]
-  );
-
-  return (
-    <>
-      <Toolbar filter={filter} />
-      {isOpen && (
-        <FacilityEditModal
-          isOpen={isOpen}
-          nameId={selectedId}
-          onClose={onClose}
-          setNextFacility={setSelectedId}
-        />
-      )}
-      <DataTable
-        id="name-list"
-        pagination={{ ...pagination, total: data?.totalCount ?? 0 }}
-        onChangePage={updatePaginationQuery}
-        columns={columns}
-        data={data?.nodes}
-        isLoading={isLoading}
-        isError={isError}
-        noDataElement={<NothingHere />}
-        onRowClick={onRowClick}
-      />
-    </>
-  );
-};
-
-export const FacilitiesListView = () => (
-  <TableProvider createStore={createTableStore}>
-    <FacilitiesListComponent />
-  </TableProvider>
-);
diff --git a/client/packages/system/src/Name/ListView/Facilities/Toolbar.tsx b/client/packages/system/src/Name/ListView/Facilities/Toolbar.tsx
deleted file mode 100644
index 98d264154..000000000
--- a/client/packages/system/src/Name/ListView/Facilities/Toolbar.tsx
+++ /dev/null
@@ -1,44 +0,0 @@
-import React, { FC } from 'react';
-import {
-  AppBarContentPortal,
-  useTranslation,
-  SearchBar,
-  FilterController,
-  FilterRule,
-} from '@openmsupply-client/common';
-
-interface ToolbarProps {
-  filter: FilterController;
-}
-
-export const Toolbar: FC<ToolbarProps> = ({ filter }) => {
-  const t = useTranslation('manage');
-  const filterString =
-    ((filter.filterBy?.['codeOrName'] as FilterRule)?.like as string) || '';
-
-  return (
-    <AppBarContentPortal
-      sx={{
-        paddingBottom: '16px',
-        flex: 1,
-        justifyContent: 'space-between',
-        display: 'flex',
-      }}
-    >
-      <SearchBar
-        placeholder={t('placeholder.enter-facility-code-or-name')}
-        value={filterString ?? ''}
-        onChange={newValue => {
-          if (!newValue) {
-            return filter.onClearFilterRule('codeOrName');
-          }
-          return filter.onChangeStringFilterRule(
-            'codeOrName',
-            'like',
-            newValue
-          );
-        }}
-      />
-    </AppBarContentPortal>
-  );
-};
diff --git a/client/packages/system/src/Name/ListView/ListView.tsx b/client/packages/system/src/Name/ListView/ListView.tsx
index 0fb16a5c5..a9517623a 100644
--- a/client/packages/system/src/Name/ListView/ListView.tsx
+++ b/client/packages/system/src/Name/ListView/ListView.tsx
@@ -15,9 +15,7 @@ import { DetailModal } from '../DetailModal';
 import { useName, NameRowFragment } from '../api';
 import { NameRenderer } from '../Components';
 
-const NameListComponent: FC<{
-  type: 'customer' | 'supplier';
-}> = ({ type }) => {
+const NameListComponent: FC<{ type: 'customer' | 'supplier' }> = ({ type }) => {
   const [selectedId, setSelectedId] = useState<string>('');
   const {
     updateSortQuery,
@@ -86,9 +84,9 @@ const NameListComponent: FC<{
   );
 };
 
-export const NameListView: FC<{
-  type: 'customer' | 'supplier';
-}> = ({ type }) => (
+export const NameListView: FC<{ type: 'customer' | 'supplier' }> = ({
+  type,
+}) => (
   <TableProvider createStore={createTableStore}>
     <NameListComponent type={type} />
   </TableProvider>
diff --git a/client/packages/system/src/Name/Service/Service.tsx b/client/packages/system/src/Name/Service/Service.tsx
index 7f09ab962..0581eb904 100644
--- a/client/packages/system/src/Name/Service/Service.tsx
+++ b/client/packages/system/src/Name/Service/Service.tsx
@@ -2,18 +2,16 @@ import React, { FC } from 'react';
 import { RouteBuilder, Routes, Route } from '@openmsupply-client/common';
 import { AppRoute } from '@openmsupply-client/config';
 import { NameListView } from '../ListView';
-import { FacilitiesListView } from '../ListView/Facilities/ListView';
 
 export const Service: FC = () => {
   const customersRoute = RouteBuilder.create(AppRoute.Customer).build();
+
   const suppliersRoute = RouteBuilder.create(AppRoute.Suppliers).build();
-  const facilitiesRoute = RouteBuilder.create(AppRoute.Facilities).build();
 
   return (
     <Routes>
       <Route path={customersRoute} element={<NameListView type="customer" />} />
       <Route path={suppliersRoute} element={<NameListView type="supplier" />} />
-      <Route path={facilitiesRoute} element={<FacilitiesListView />} />
     </Routes>
   );
 };
diff --git a/client/packages/system/src/Name/api/api.ts b/client/packages/system/src/Name/api/api.ts
index 160a6f7cc..cd29f6357 100644
--- a/client/packages/system/src/Name/api/api.ts
+++ b/client/packages/system/src/Name/api/api.ts
@@ -2,7 +2,6 @@ import {
   SortBy,
   NameSortFieldInput,
   NameNodeType,
-  FilterByWithBoolean,
 } from '@openmsupply-client/common';
 import { Sdk, NameRowFragment } from './operations.generated';
 
@@ -47,17 +46,6 @@ export const getNameQueries = (sdk: Sdk, storeId: string) => ({
 
       return result?.names;
     },
-    donors: async () => {
-      const result = await sdk.names({
-        key: NameSortFieldInput.Name,
-        desc: false,
-        storeId,
-        filter: { isDonor: true },
-        first: 1000,
-      });
-
-      return result?.names;
-    },
     suppliers: async ({ sortBy }: ListParams) => {
       const key = nameParsers.toSort(sortBy?.key ?? '');
 
@@ -90,39 +78,7 @@ export const getNameQueries = (sdk: Sdk, storeId: string) => ({
 
       return result?.names;
     },
-    facilities: async ({
-      first,
-      offset,
-      sortBy,
-      filterBy,
-    }: {
-      offset?: number;
-      first?: number;
-      sortBy?: SortBy<NameRowFragment>;
-      filterBy?: FilterByWithBoolean | null;
-    }): Promise<{
-      nodes: NameRowFragment[];
-      totalCount: number;
-    }> => {
-      const key =
-        sortBy?.key === 'name'
-          ? NameSortFieldInput.Name
-          : NameSortFieldInput.Code;
 
-      const result = await sdk.names({
-        first,
-        offset,
-        key,
-        desc: !!sortBy?.isDesc,
-        storeId,
-        filter: {
-          ...filterBy,
-          type: { equalAny: [NameNodeType.Facility, NameNodeType.Store] },
-        },
-      });
-
-      return result?.names;
-    },
     list: async ({
       type = 'supplier',
       first,
@@ -151,13 +107,5 @@ export const getNameQueries = (sdk: Sdk, storeId: string) => ({
 
       return result?.names;
     },
-    properties: async () => {
-      const result = await sdk.nameProperties();
-
-      if (result?.nameProperties?.__typename === 'NamePropertyConnector') {
-        return result?.nameProperties?.nodes;
-      }
-      throw new Error('Unable to fetch properties');
-    },
   },
 });
diff --git a/client/packages/system/src/Name/api/hooks/document/index.ts b/client/packages/system/src/Name/api/hooks/document/index.ts
index e85ff90d4..2b94752a8 100644
--- a/client/packages/system/src/Name/api/hooks/document/index.ts
+++ b/client/packages/system/src/Name/api/hooks/document/index.ts
@@ -3,17 +3,11 @@ import { useSuppliers } from './useSuppliers';
 import { useInternalSuppliers } from './useInternalSuppliers';
 import { useName } from './useName';
 import { useNames } from './useNames';
-import { useFacilities } from './useFacilities';
-import { useDonors } from './useDonors';
-import { useNameProperties } from './useNameProperties';
 
 export const Document = {
   useCustomers,
-  useFacilities,
   useSuppliers,
   useInternalSuppliers,
   useName,
   useNames,
-  useDonors,
-  useNameProperties,
 };
diff --git a/client/packages/system/src/Name/api/hooks/document/useDonors.ts b/client/packages/system/src/Name/api/hooks/document/useDonors.ts
deleted file mode 100644
index 520457912..000000000
--- a/client/packages/system/src/Name/api/hooks/document/useDonors.ts
+++ /dev/null
@@ -1,8 +0,0 @@
-import { useQuery } from '@openmsupply-client/common';
-import { useNameApi } from '../utils/useNameApi';
-
-export const useDonors = () => {
-  const api = useNameApi();
-
-  return useQuery(api.keys.donors(), () => api.get.donors());
-};
diff --git a/client/packages/system/src/Name/api/hooks/document/useFacilities.ts b/client/packages/system/src/Name/api/hooks/document/useFacilities.ts
deleted file mode 100644
index 583ab8db1..000000000
--- a/client/packages/system/src/Name/api/hooks/document/useFacilities.ts
+++ /dev/null
@@ -1,14 +0,0 @@
-import { useQuery, useUrlQueryParams } from '@openmsupply-client/common';
-import { useNameApi } from '../utils/useNameApi';
-
-export const useFacilities = () => {
-  const api = useNameApi();
-  const { queryParams } = useUrlQueryParams({
-    initialSort: { key: 'name', dir: 'asc' },
-    filters: [{ key: 'codeOrName' }],
-  });
-
-  return useQuery(api.keys.paramList(queryParams), () =>
-    api.get.facilities(queryParams)
-  );
-};
diff --git a/client/packages/system/src/Name/api/hooks/document/useNameProperties.ts b/client/packages/system/src/Name/api/hooks/document/useNameProperties.ts
deleted file mode 100644
index a1c39d3b1..000000000
--- a/client/packages/system/src/Name/api/hooks/document/useNameProperties.ts
+++ /dev/null
@@ -1,7 +0,0 @@
-import { useQuery } from '@openmsupply-client/common';
-import { useNameApi } from '../utils/useNameApi';
-
-export const useNameProperties = () => {
-  const api = useNameApi();
-  return useQuery(api.keys.properties(), () => api.get.properties());
-};
diff --git a/client/packages/system/src/Name/api/hooks/document/useNames.ts b/client/packages/system/src/Name/api/hooks/document/useNames.ts
index b786bb112..793494b4e 100644
--- a/client/packages/system/src/Name/api/hooks/document/useNames.ts
+++ b/client/packages/system/src/Name/api/hooks/document/useNames.ts
@@ -12,7 +12,7 @@ export const useNames = (type: 'customer' | 'supplier') => {
         first: queryParams.first,
         offset: queryParams.offset,
         sortBy: queryParams.sortBy,
-        type,
+        type: type === 'customer' ? 'customer' : 'supplier',
       })
     ),
   };
diff --git a/client/packages/system/src/Name/api/hooks/index.ts b/client/packages/system/src/Name/api/hooks/index.ts
index 0feb590c2..313b68818 100644
--- a/client/packages/system/src/Name/api/hooks/index.ts
+++ b/client/packages/system/src/Name/api/hooks/index.ts
@@ -9,11 +9,5 @@ export const useName = {
     internalSuppliers: Document.useInternalSuppliers,
     list: Document.useNames,
     suppliers: Document.useSuppliers,
-    facilities: Document.useFacilities,
-    donors: Document.useDonors,
-    properties: Document.useNameProperties,
-  },
-  utils: {
-    nextFacilityId: Utils.useNextFacilityId,
   },
 };
diff --git a/client/packages/system/src/Name/api/hooks/utils/index.ts b/client/packages/system/src/Name/api/hooks/utils/index.ts
index cc5917d8f..e18b8502d 100644
--- a/client/packages/system/src/Name/api/hooks/utils/index.ts
+++ b/client/packages/system/src/Name/api/hooks/utils/index.ts
@@ -1,7 +1,5 @@
 import { useNameApi } from './useNameApi';
-import { useNextFacilityId } from './useNextFacilityId';
 
 export const Utils = {
   useNameApi,
-  useNextFacilityId,
 };
diff --git a/client/packages/system/src/Name/api/hooks/utils/useNameApi.ts b/client/packages/system/src/Name/api/hooks/utils/useNameApi.ts
index aecd64231..670b5c489 100644
--- a/client/packages/system/src/Name/api/hooks/utils/useNameApi.ts
+++ b/client/packages/system/src/Name/api/hooks/utils/useNameApi.ts
@@ -9,8 +9,6 @@ export const useNameApi = () => {
     detail: (id: string) => [...keys.base(), storeId, id] as const,
     list: () => [...keys.base(), storeId, 'list'] as const,
     paramList: (params: ListParams) => [...keys.list(), params] as const,
-    donors: () => [...keys.base(), storeId, 'donors'] as const,
-    properties: () => ['name-properties'] as const,
   };
   const { client } = useGql();
   const queries = getNameQueries(getSdk(client), storeId);
diff --git a/client/packages/system/src/Name/api/hooks/utils/useNextFacilityId.ts b/client/packages/system/src/Name/api/hooks/utils/useNextFacilityId.ts
deleted file mode 100644
index 2a510b41e..000000000
--- a/client/packages/system/src/Name/api/hooks/utils/useNextFacilityId.ts
+++ /dev/null
@@ -1,13 +0,0 @@
-import { useFacilities } from '../document/useFacilities';
-
-export const useNextFacilityId = (currentId: string): string | undefined => {
-  const { data } = useFacilities();
-
-  const rows = data?.nodes ?? [];
-
-  const idx = rows.findIndex(r => r.id === currentId);
-
-  const next = rows[idx + 1];
-
-  return next?.id;
-};
diff --git a/client/packages/system/src/Name/api/operations.generated.ts b/client/packages/system/src/Name/api/operations.generated.ts
index b75b2c2d4..cad683edc 100644
--- a/client/packages/system/src/Name/api/operations.generated.ts
+++ b/client/packages/system/src/Name/api/operations.generated.ts
@@ -8,8 +8,6 @@ export type NameRowFragment = { __typename: 'NameNode', code: string, id: string
 
 export type NameFragment = { __typename: 'NameNode', address1?: string | null, address2?: string | null, chargeCode?: string | null, code: string, comment?: string | null, country?: string | null, createdDatetime?: string | null, email?: string | null, id: string, isCustomer: boolean, isDonor: boolean, isManufacturer: boolean, isOnHold: boolean, isSupplier: boolean, isSystemName: boolean, name: string, phone?: string | null, website?: string | null, store?: { __typename: 'StoreNode', id: string, code: string } | null };
 
-export type PropertyFragment = { __typename: 'PropertyNode', id: string, key: string, name: string, allowedValues?: string | null, valueType: Types.PropertyNodeValueType };
-
 export type NamesQueryVariables = Types.Exact<{
   storeId: Types.Scalars['String']['input'];
   key: Types.NameSortFieldInput;
@@ -30,11 +28,6 @@ export type NameByIdQueryVariables = Types.Exact<{
 
 export type NameByIdQuery = { __typename: 'Queries', names: { __typename: 'NameConnector', totalCount: number, nodes: Array<{ __typename: 'NameNode', address1?: string | null, address2?: string | null, chargeCode?: string | null, code: string, comment?: string | null, country?: string | null, createdDatetime?: string | null, email?: string | null, id: string, isCustomer: boolean, isDonor: boolean, isManufacturer: boolean, isOnHold: boolean, isSupplier: boolean, isSystemName: boolean, name: string, phone?: string | null, website?: string | null, store?: { __typename: 'StoreNode', id: string, code: string } | null }> } };
 
-export type NamePropertiesQueryVariables = Types.Exact<{ [key: string]: never; }>;
-
-
-export type NamePropertiesQuery = { __typename: 'Queries', nameProperties: { __typename: 'NamePropertyConnector', nodes: Array<{ __typename: 'PropertyNode', id: string, key: string, name: string, allowedValues?: string | null, valueType: Types.PropertyNodeValueType }> } };
-
 export const NameRowFragmentDoc = gql`
     fragment NameRow on NameNode {
   code
@@ -75,15 +68,6 @@ export const NameFragmentDoc = gql`
   }
 }
     `;
-export const PropertyFragmentDoc = gql`
-    fragment Property on PropertyNode {
-  id
-  key
-  name
-  allowedValues
-  valueType
-}
-    `;
 export const NamesDocument = gql`
     query names($storeId: String!, $key: NameSortFieldInput!, $desc: Boolean, $first: Int, $offset: Int, $filter: NameFilterInput) {
   names(
@@ -115,19 +99,6 @@ export const NameByIdDocument = gql`
   }
 }
     ${NameFragmentDoc}`;
-export const NamePropertiesDocument = gql`
-    query nameProperties {
-  nameProperties {
-    ... on NamePropertyConnector {
-      __typename
-      nodes {
-        __typename
-        ...Property
-      }
-    }
-  }
-}
-    ${PropertyFragmentDoc}`;
 
 export type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;
 
@@ -141,9 +112,6 @@ export function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper =
     },
     nameById(variables: NameByIdQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<NameByIdQuery> {
       return withWrapper((wrappedRequestHeaders) => client.request<NameByIdQuery>(NameByIdDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'nameById', 'query');
-    },
-    nameProperties(variables?: NamePropertiesQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<NamePropertiesQuery> {
-      return withWrapper((wrappedRequestHeaders) => client.request<NamePropertiesQuery>(NamePropertiesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'nameProperties', 'query');
     }
   };
 }
@@ -182,19 +150,3 @@ export const mockNameByIdQuery = (resolver: ResponseResolver<GraphQLRequest<Name
     'nameById',
     resolver
   )
-
-/**
- * @param resolver a function that accepts a captured request and may return a mocked response.
- * @see https://mswjs.io/docs/basics/response-resolver
- * @example
- * mockNamePropertiesQuery((req, res, ctx) => {
- *   return res(
- *     ctx.data({ nameProperties })
- *   )
- * })
- */
-export const mockNamePropertiesQuery = (resolver: ResponseResolver<GraphQLRequest<NamePropertiesQueryVariables>, GraphQLContext<NamePropertiesQuery>, any>) =>
-  graphql.query<NamePropertiesQuery, NamePropertiesQueryVariables>(
-    'nameProperties',
-    resolver
-  )
diff --git a/client/packages/system/src/Name/api/operations.graphql b/client/packages/system/src/Name/api/operations.graphql
index 8b4201a13..6f269b7dd 100644
--- a/client/packages/system/src/Name/api/operations.graphql
+++ b/client/packages/system/src/Name/api/operations.graphql
@@ -36,14 +36,6 @@ fragment Name on NameNode {
   }
 }
 
-fragment Property on PropertyNode {
-  id
-  key
-  name
-  allowedValues
-  valueType
-}
-
 query names(
   $storeId: String!
   $key: NameSortFieldInput!
@@ -79,15 +71,3 @@ query nameById($storeId: String!, $nameId: String!) {
     }
   }
 }
-
-query nameProperties {
-  nameProperties {
-    ... on NamePropertyConnector {
-      __typename
-      nodes {
-        __typename
-        ...Property
-      }
-    }
-  }
-}
diff --git a/client/packages/system/src/Name/utils.ts b/client/packages/system/src/Name/utils.ts
index e47be8be0..9f3326b79 100644
--- a/client/packages/system/src/Name/utils.ts
+++ b/client/packages/system/src/Name/utils.ts
@@ -16,15 +16,9 @@ interface NameSearchListProps {
 
 export interface NameSearchInputProps {
   onChange: (name: NameRowFragment) => void;
-  onInputChange?: (
-    event: React.SyntheticEvent,
-    value: string,
-    reason: string
-  ) => void;
   width?: number;
   value: NameRowFragment | null;
   disabled?: boolean;
-  clearable?: boolean;
 }
 
 export const basicFilterOptions = {
diff --git a/client/packages/system/src/Patient/CreatePatientModal/CreatePatientModal.tsx b/client/packages/system/src/Patient/CreatePatientModal/CreatePatientModal.tsx
index b331135bd..270525137 100644
--- a/client/packages/system/src/Patient/CreatePatientModal/CreatePatientModal.tsx
+++ b/client/packages/system/src/Patient/CreatePatientModal/CreatePatientModal.tsx
@@ -37,8 +37,6 @@ export const CreatePatientModal: FC<CreatePatientModal> = ({ onClose }) => {
       filter: { category: { equalTo: DocumentRegistryCategoryNode.Patient } },
     });
 
-  const [hasError, setHasError] = useState(false);
-
   const [, setDocumentRegistry] = useState<
     DocumentRegistryFragment | undefined
   >();
@@ -114,7 +112,15 @@ export const CreatePatientModal: FC<CreatePatientModal> = ({ onClose }) => {
       }
       nextButton={
         currentTab !== Tabs.SearchResults ? (
-          <DialogButton variant="next" onClick={onNext} disabled={hasError} />
+          <DialogButton
+            variant="next"
+            onClick={onNext}
+            disabled={
+              !createNewPatient?.firstName ||
+              !createNewPatient?.lastName ||
+              !createNewPatient?.code
+            }
+          />
         ) : undefined
       }
       cancelButton={
@@ -137,13 +143,7 @@ export const CreatePatientModal: FC<CreatePatientModal> = ({ onClose }) => {
           />
           <TabContext value={currentTab}>
             <DetailSection title="">
-              <PatientFormTab
-                value={Tabs.Form}
-                patient={createNewPatient}
-                onChange={errors => {
-                  setHasError((errors.errors?.length ?? 0) > 0);
-                }}
-              />
+              <PatientFormTab value={Tabs.Form} patient={createNewPatient} />
               <PatientResultsTab
                 value={Tabs.SearchResults}
                 patient={createNewPatient}
diff --git a/client/packages/system/src/Patient/CreatePatientModal/DefaultCreatePatientSchema.json b/client/packages/system/src/Patient/CreatePatientModal/DefaultCreatePatientSchema.json
deleted file mode 100644
index 263a62a1d..000000000
--- a/client/packages/system/src/Patient/CreatePatientModal/DefaultCreatePatientSchema.json
+++ /dev/null
@@ -1,54 +0,0 @@
-{
-  "$schema": "http://json-schema.org/draft-07/schema#",
-  "definitions": {
-    "Gender": {
-      "enum": [
-        "FEMALE",
-        "MALE",
-        "TRANSGENDER",
-        "TRANSGENDER_MALE",
-        "TRANSGENDER_FEMALE",
-        "UNKNOWN",
-        "NON_BINARY"
-      ],
-      "type": "string"
-    },
-
-    "Patient": {
-      "properties": {
-        "dateOfBirth": {
-          "description": "Date of birth",
-          "format": "date",
-          "type": "string"
-        },
-        "firstName": {
-          "type": "string"
-        },
-        "gender": {
-          "$ref": "#/definitions/Gender",
-          "description": "Gender unspecified"
-        },
-        "lastName": {
-          "description": "Patient Surname",
-          "type": "string"
-        },
-        "address1": {
-          "description": "Address",
-          "type": "string"
-        },
-        "phone": {
-          "description": "Phone number",
-          "type": "string"
-        }
-      },
-      "required": ["firstName", "lastName"],
-      "type": "object"
-    }
-  },
-  "type": "object",
-  "allOf": [
-    {
-      "$ref": "#/definitions/Patient"
-    }
-  ]
-}
diff --git a/client/packages/system/src/Patient/CreatePatientModal/DefaultCreatePatientUISchema.json b/client/packages/system/src/Patient/CreatePatientModal/DefaultCreatePatientUISchema.json
deleted file mode 100644
index 2ac231e15..000000000
--- a/client/packages/system/src/Patient/CreatePatientModal/DefaultCreatePatientUISchema.json
+++ /dev/null
@@ -1,54 +0,0 @@
-{
-  "type": "VerticalLayout",
-  "elements": [
-    {
-      "type": "Group",
-      "label": "Patient Information",
-      "elements": [
-        {
-          "type": "Control",
-          "scope": "#/properties/firstName",
-          "label": "First Name"
-        },
-        {
-          "type": "Control",
-          "scope": "#/properties/lastName",
-          "label": "Last Name"
-        },
-        {
-          "type": "Control",
-          "label": "Date of Birth",
-          "scope": "#/properties/dateOfBirth",
-          "options": {
-            "disableFuture": true
-          }
-        },
-        {
-          "type": "Control",
-          "scope": "#/properties/gender",
-          "label": "Gender",
-          "options": {
-            "show": [
-              ["MALE", "Male"],
-              ["FEMALE", "Female"],
-              ["TRANSGENDER_MALE", "Transgender Male"],
-              ["TRANSGENDER_FEMALE", "Transgender Female"],
-              ["NON_BINARY", "Non-binary"],
-              ["UNKOWN", "Unknown"]
-            ]
-          }
-        },
-        {
-          "type": "Control",
-          "scope": "#/properties/address1",
-          "label": "Address"
-        },
-        {
-          "type": "Control",
-          "scope": "#/properties/phone",
-          "label": "Phone"
-        }
-      ]
-    }
-  ]
-}
diff --git a/client/packages/system/src/Patient/CreatePatientModal/PatientFormTab.tsx b/client/packages/system/src/Patient/CreatePatientModal/PatientFormTab.tsx
index fd5786a84..f57fd0010 100644
--- a/client/packages/system/src/Patient/CreatePatientModal/PatientFormTab.tsx
+++ b/client/packages/system/src/Patient/CreatePatientModal/PatientFormTab.tsx
@@ -3,15 +3,14 @@ import {
   Gender,
   JsonData,
   JsonForm,
-  JsonFormsReactProps,
   useFormSchema,
   usePatientStore,
 } from '@openmsupply-client/programs';
 import { PatientPanel } from './PatientPanel';
 import { ObjUtils } from '@common/utils';
 
-import defaultPatientSchema from './DefaultCreatePatientSchema.json';
-import defaultPatientUISchema from './DefaultCreatePatientUISchema.json';
+import defaultPatientSchema from '../DefaultPatientSchema.json';
+import defaultPatientUISchema from '../DefaultPatientUISchema.json';
 import { BasicSpinner } from '@openmsupply-client/common';
 import { IdGenerator, idGeneratorTester } from '@openmsupply-client/programs';
 
@@ -26,11 +25,7 @@ type Patient = {
   phone?: string;
 };
 
-export const PatientFormTab: FC<PatientPanel & JsonFormsReactProps> = ({
-  patient,
-  value,
-  onChange,
-}) => {
+export const PatientFormTab: FC<PatientPanel> = ({ patient, value }) => {
   const { updateCreateNewPatient } = usePatientStore();
   const {
     data: patientCreationUI,
@@ -76,7 +71,6 @@ export const PatientFormTab: FC<PatientPanel & JsonFormsReactProps> = ({
         additionalRenderers={[
           { tester: idGeneratorTester, renderer: IdGenerator },
         ]}
-        onChange={onChange}
       />
     </PatientPanel>
   );
diff --git a/client/packages/system/src/Patient/PatientView/DefaultPatientSchema.json b/client/packages/system/src/Patient/DefaultPatientSchema.json
similarity index 100%
rename from client/packages/system/src/Patient/PatientView/DefaultPatientSchema.json
rename to client/packages/system/src/Patient/DefaultPatientSchema.json
diff --git a/client/packages/system/src/Patient/PatientView/DefaultPatientUISchema.json b/client/packages/system/src/Patient/DefaultPatientUISchema.json
similarity index 100%
rename from client/packages/system/src/Patient/PatientView/DefaultPatientUISchema.json
rename to client/packages/system/src/Patient/DefaultPatientUISchema.json
diff --git a/client/packages/system/src/Patient/PatientView/PatientView.tsx b/client/packages/system/src/Patient/PatientView/PatientView.tsx
index 82a185b83..b76e7e619 100644
--- a/client/packages/system/src/Patient/PatientView/PatientView.tsx
+++ b/client/packages/system/src/Patient/PatientView/PatientView.tsx
@@ -37,8 +37,8 @@ import {
 import { Footer } from './Footer';
 import { ContactTraceListView, CreateContactTraceModal } from '../ContactTrace';
 
-import defaultPatientSchema from './DefaultPatientSchema.json';
-import defaultPatientUISchema from './DefaultPatientUISchema.json';
+import defaultPatientSchema from '../DefaultPatientSchema.json';
+import defaultPatientUISchema from '../DefaultPatientUISchema.json';
 
 const DEFAULT_SCHEMA: SchemaData = {
   formSchemaId: undefined,
diff --git a/client/packages/system/src/Report/ListView/ListView.tsx b/client/packages/system/src/Report/ListView/ListView.tsx
index f93d6b3ae..94606b065 100644
--- a/client/packages/system/src/Report/ListView/ListView.tsx
+++ b/client/packages/system/src/Report/ListView/ListView.tsx
@@ -13,7 +13,6 @@ import {
   useDialog,
   BasicSpinner,
   useDebouncedValue,
-  TooltipTextCell,
 } from '@openmsupply-client/common';
 import { JsonData } from '@openmsupply-client/programs';
 import { useReport, ReportRowFragment } from '../api';
@@ -29,7 +28,7 @@ const PrintingDialog: React.FC<{ isPrinting: boolean }> = ({ isPrinting }) => {
     } else {
       hideDialog();
     }
-  }, [hideDialog, isPrinting, showDialog]);
+  }, [isPrinting]);
 
   return (
     <Modal title="" height={200}>
@@ -92,13 +91,13 @@ const ReportListComponent = ({ context }: { context: ReportContext }) => {
 
   const columns = useColumns<ReportRowFragment>(
     [
-    ['name', { width: 300, Cell: TooltipTextCell }],
+      'name',
       {
         accessor: ({ rowData }) => rowData.context,
         key: 'context',
         label: 'label.context',
         sortable: false,
-        width: 60,
+        width: 250,
       },
       {
         Cell: ({ rowData }) => (
@@ -119,13 +118,6 @@ const ReportListComponent = ({ context }: { context: ReportContext }) => {
     [sortBy]
   );
 
-  const printReport = useCallback(
-    (report: ReportRowFragment, args: JsonData | undefined) => {
-      print({ reportId: report.id, dataId: '', args });
-    },
-    [print]
-  );
-
   const onReportSelected = useCallback(
     (report: ReportRowFragment | undefined) => {
       if (report === undefined) {
@@ -137,9 +129,16 @@ const ReportListComponent = ({ context }: { context: ReportContext }) => {
         printReport(report, undefined);
       }
     },
-    [printReport]
+    []
   );
 
+  const printReport = (
+    report: ReportRowFragment,
+    args: JsonData | undefined
+  ) => {
+    print({ reportId: report.id, dataId: '', args });
+  };
+
   return (
     <>
       <Toolbar filter={filter} />
diff --git a/client/packages/system/src/Stock/Components/InventoryAdjustment/InventoryAdjustmentForm.tsx b/client/packages/system/src/Stock/Components/InventoryAdjustment/InventoryAdjustmentForm.tsx
new file mode 100644
index 000000000..cd7055c83
--- /dev/null
+++ b/client/packages/system/src/Stock/Components/InventoryAdjustment/InventoryAdjustmentForm.tsx
@@ -0,0 +1,140 @@
+import React, { FC } from 'react';
+import {
+  TextWithLabelRow,
+  useTranslation,
+  Box,
+  NumericTextInput,
+  DialogButton,
+  useNotification,
+  AdjustmentTypeInput,
+} from '@openmsupply-client/common';
+import { StockLineRowFragment, useInventoryAdjustment } from '../../api';
+import { InventoryAdjustmentReasonSearchInput, usePackVariant } from '../../..';
+import { InventoryAdjustmentDirectionInput } from './InventoryAdjustmentDirectionSearchInput';
+import { INPUT_WIDTH, StyledInputRow } from '../StyledInputRow';
+
+interface InventoryAdjustmentFormProps {
+  stockLine: StockLineRowFragment;
+  onUpdate: (patch: Partial<StockLineRowFragment>) => void;
+}
+export const InventoryAdjustmentForm: FC<InventoryAdjustmentFormProps> = ({
+  stockLine,
+}) => {
+  const t = useTranslation('inventory');
+  const { success } = useNotification();
+
+  const { draft, setDraft, create } = useInventoryAdjustment(stockLine);
+
+  const { asPackVariant } = usePackVariant(
+    stockLine.itemId,
+    stockLine.item.unitName ?? null
+  );
+  const packUnit = asPackVariant(stockLine.packSize);
+
+  const saveDisabled = draft.adjustment === 0;
+
+  const save = async () => {
+    try {
+      await create();
+      const successSnack = success(t('messages.inventory-adjustment-saved'));
+      successSnack();
+    } catch {
+      // TODO: handle error if no reason selected when reasons required
+    }
+  };
+
+  return (
+    <Box display="flex">
+      <Box display="flex" flexDirection="column" padding={2} gap={2} flex={1}>
+        <TextWithLabelRow
+          label={t('label.pack')}
+          text={packUnit}
+          textProps={{ textAlign: 'end' }}
+        />
+        <Box display="flex" justifyContent={'end'}>
+          <InventoryAdjustmentDirectionInput
+            value={draft.adjustmentType}
+            onChange={adjustmentType => {
+              setDraft({
+                adjustmentType: adjustmentType ?? AdjustmentTypeInput.Addition,
+                reason: null,
+                adjustment: 0,
+              });
+            }}
+          />
+        </Box>
+
+        <StyledInputRow
+          label={t('label.reason')}
+          Input={
+            <Box display="flex" width={INPUT_WIDTH}>
+              <InventoryAdjustmentReasonSearchInput
+                onChange={reason => setDraft(state => ({ ...state, reason }))}
+                value={draft.reason}
+                adjustmentType={draft.adjustmentType}
+                width={INPUT_WIDTH}
+              />
+            </Box>
+          }
+        />
+      </Box>
+      <Box
+        display="flex"
+        flexDirection="column"
+        gap={2}
+        paddingTop={2}
+        flex={1}
+      >
+        <TextWithLabelRow
+          label={t('label.num-packs')}
+          text={String(stockLine.totalNumberOfPacks)}
+          textProps={{ textAlign: 'end' }}
+          labelProps={{ sx: { textWrap: 'wrap' } }}
+        />
+        <StyledInputRow
+          label={t('label.adjust-by')}
+          Input={
+            <NumericTextInput
+              width={INPUT_WIDTH}
+              max={
+                draft.adjustmentType === AdjustmentTypeInput.Reduction
+                  ? stockLine.totalNumberOfPacks
+                  : undefined
+              }
+              value={draft.adjustment}
+              onChange={value =>
+                setDraft(state => ({
+                  ...state,
+                  adjustment: value ?? 0,
+                }))
+              }
+            />
+          }
+        />
+        <StyledInputRow
+          label={t('label.new-pack-qty')}
+          Input={
+            <NumericTextInput
+              width={INPUT_WIDTH}
+              disabled={true}
+              value={
+                stockLine.totalNumberOfPacks +
+                (draft.adjustmentType === AdjustmentTypeInput.Addition
+                  ? draft.adjustment
+                  : -draft.adjustment)
+              }
+            />
+          }
+        />
+        <Box sx={{ display: 'flex', justifyContent: 'end', marginTop: '14px' }}>
+          <DialogButton
+            variant="save"
+            color="primary"
+            disabled={saveDisabled}
+            onClick={save}
+          />
+        </Box>
+      </Box>
+    </Box>
+  );
+};
diff --git a/client/packages/system/src/Stock/Components/InventoryAdjustment/InventoryAdjustmentModal.tsx b/client/packages/system/src/Stock/Components/InventoryAdjustment/InventoryAdjustmentModal.tsx
deleted file mode 100644
index fbf4de01c..000000000
--- a/client/packages/system/src/Stock/Components/InventoryAdjustment/InventoryAdjustmentModal.tsx
+++ /dev/null
@@ -1,148 +0,0 @@
-import React, { FC } from 'react';
-import {
-  TextWithLabelRow,
-  useTranslation,
-  Box,
-  NumericTextInput,
-  DialogButton,
-  useNotification,
-  AdjustmentTypeInput,
-  useDialog,
-} from '@openmsupply-client/common';
-import { StockLineRowFragment, useInventoryAdjustment } from '../../api';
-import { InventoryAdjustmentReasonSearchInput, usePackVariant } from '../../..';
-import { InventoryAdjustmentDirectionInput } from './InventoryAdjustmentDirectionSearchInput';
-import { INPUT_WIDTH, StyledInputRow } from '../StyledInputRow';
-
-interface InventoryAdjustmentModalProps {
-  stockLine: StockLineRowFragment;
-  isOpen: boolean;
-  onClose: () => void;
-}
-export const InventoryAdjustmentModal: FC<InventoryAdjustmentModalProps> = ({
-  stockLine,
-  isOpen,
-  onClose,
-}) => {
-  const t = useTranslation('inventory');
-  const { success } = useNotification();
-  const { Modal } = useDialog({ isOpen, onClose });
-
-  const { draft, setDraft, create } = useInventoryAdjustment(stockLine);
-
-  const { asPackVariant } = usePackVariant(
-    stockLine.itemId,
-    stockLine.item.unitName ?? null
-  );
-  const packUnit = asPackVariant(stockLine.packSize);
-
-  const saveDisabled = draft.adjustment === 0;
-
-  const save = async () => {
-    try {
-      await create();
-      const successSnack = success(t('messages.inventory-adjustment-saved'));
-      successSnack();
-      onClose();
-    } catch {
-      // TODO: handle error if no reason selected when reasons required
-    }
-  };
-
-  return (
-    <Modal
-      sx={{ maxWidth: 'unset', minWidth: 700, minHeight: 575 }}
-      slideAnimation={false}
-      title={t('title.adjustment-details')}
-      okButton={
-        <DialogButton variant="ok" disabled={saveDisabled} onClick={save} />
-      }
-      cancelButton={<DialogButton variant="cancel" onClick={onClose} />}
-    >
-      <Box display="flex" paddingRight={4} gap={2}>
-        <Box display="flex" flexDirection="column" padding={2} gap={2} flex={1}>
-          <TextWithLabelRow
-            label={t('label.pack')}
-            text={packUnit}
-            textProps={{ textAlign: 'end' }}
-          />
-          <Box display="flex" justifyContent={'end'}>
-            <InventoryAdjustmentDirectionInput
-              value={draft.adjustmentType}
-              onChange={adjustmentType => {
-                setDraft({
-                  adjustmentType:
-                    adjustmentType ?? AdjustmentTypeInput.Addition,
-                  reason: null,
-                  adjustment: 0,
-                });
-              }}
-            />
-          </Box>
-          <StyledInputRow
-            label={t('label.reason')}
-            Input={
-              <Box display="flex" width={INPUT_WIDTH}>
-                <InventoryAdjustmentReasonSearchInput
-                  onChange={reason => setDraft(state => ({ ...state, reason }))}
-                  value={draft.reason}
-                  adjustmentType={draft.adjustmentType}
-                  width={INPUT_WIDTH}
-                />
-              </Box>
-            }
-          />
-        </Box>
-        <Box
-          display="flex"
-          flexDirection="column"
-          gap={2}
-          paddingTop={2}
-          flex={1}
-        >
-          <TextWithLabelRow
-            label={t('label.num-packs')}
-            text={String(stockLine.totalNumberOfPacks)}
-            textProps={{ textAlign: 'end' }}
-            labelProps={{ sx: { textWrap: 'wrap' } }}
-          />
-          <StyledInputRow
-            label={t('label.adjust-by')}
-            Input={
-              <NumericTextInput
-                width={INPUT_WIDTH}
-                max={
-                  draft.adjustmentType === AdjustmentTypeInput.Reduction
-                    ? stockLine.totalNumberOfPacks
-                    : undefined
-                }
-                value={draft.adjustment}
-                onChange={value =>
-                  setDraft(state => ({
-                    ...state,
-                    adjustment: value ?? 0,
-                  }))
-                }
-              />
-            }
-          />
-          <StyledInputRow
-            label={t('label.new-pack-qty')}
-            Input={
-              <NumericTextInput
-                width={INPUT_WIDTH}
-                disabled={true}
-                value={
-                  stockLine.totalNumberOfPacks +
-                  (draft.adjustmentType === AdjustmentTypeInput.Addition
-                    ? draft.adjustment
-                    : -draft.adjustment)
-                }
-              />
-            }
-          />
-        </Box>
-      </Box>
-    </Modal>
-  );
-};
diff --git a/client/packages/system/src/Stock/Components/InventoryAdjustment/index.ts b/client/packages/system/src/Stock/Components/InventoryAdjustment/index.ts
index fc1f0bcfa..be1bac019 100644
--- a/client/packages/system/src/Stock/Components/InventoryAdjustment/index.ts
+++ b/client/packages/system/src/Stock/Components/InventoryAdjustment/index.ts
@@ -1 +1 @@
-export * from './InventoryAdjustmentModal';
+export * from './InventoryAdjustmentForm';
diff --git a/client/packages/system/src/Stock/Components/Ledger/LedgerTable.tsx b/client/packages/system/src/Stock/Components/Ledger/LedgerForm.tsx
similarity index 60%
rename from client/packages/system/src/Stock/Components/Ledger/LedgerTable.tsx
rename to client/packages/system/src/Stock/Components/Ledger/LedgerForm.tsx
index e2ee098f3..b13f62bf9 100644
--- a/client/packages/system/src/Stock/Components/Ledger/LedgerTable.tsx
+++ b/client/packages/system/src/Stock/Components/Ledger/LedgerForm.tsx
@@ -1,6 +1,7 @@
 import React, { FC, useState } from 'react';
 import {
   useTranslation,
+  Box,
   TableProvider,
   createTableStore,
   DataTable,
@@ -10,10 +11,10 @@ import { LedgerRowFragment, StockLineRowFragment } from '../../api';
 import { useStockLedger } from '../../api/hooks/useStockLedger';
 import { ColumnKey, useLedgerColumns } from './useLedgerColumns';
 
-interface LedgerTableProps {
+interface LedgerFormProps {
   stockLine: StockLineRowFragment;
 }
-export const LedgerTable: FC<LedgerTableProps> = ({ stockLine }) => {
+export const LedgerForm: FC<LedgerFormProps> = ({ stockLine }) => {
   const t = useTranslation('inventory');
 
   const [sortBy, setSortBy] = useState<SortBy<LedgerRowFragment>>({
@@ -26,16 +27,18 @@ export const LedgerTable: FC<LedgerTableProps> = ({ stockLine }) => {
   });
 
   return (
-    <TableProvider createStore={createTableStore}>
-      <DataTable
-        id="stockline-ledger"
-        columns={columns}
-        data={data?.nodes}
-        isLoading={isLoading}
-        isError={isError}
-        noDataMessage={t('messages.no-ledger')}
-        overflowX="auto"
-      />
-    </TableProvider>
+    <Box display="flex" sx={{ overflowY: 'auto', maxHeight: 400 }}>
+      <TableProvider createStore={createTableStore}>
+        <DataTable
+          id="stockline-ledger"
+          columns={columns}
+          data={data?.nodes}
+          isLoading={isLoading}
+          isError={isError}
+          noDataMessage={t('messages.no-ledger')}
+          overflowX="auto"
+        />
+      </TableProvider>
+    </Box>
   );
 };
diff --git a/client/packages/system/src/Stock/Components/Ledger/index.ts b/client/packages/system/src/Stock/Components/Ledger/index.ts
index baee7acb0..63adaad9b 100644
--- a/client/packages/system/src/Stock/Components/Ledger/index.ts
+++ b/client/packages/system/src/Stock/Components/Ledger/index.ts
@@ -1 +1 @@
-export * from './LedgerTable';
+export * from './LedgerForm';
diff --git a/client/packages/system/src/Stock/Components/NewStockLineModal.tsx b/client/packages/system/src/Stock/Components/NewStockLineModal.tsx
index 2137d3784..88281c7b8 100644
--- a/client/packages/system/src/Stock/Components/NewStockLineModal.tsx
+++ b/client/packages/system/src/Stock/Components/NewStockLineModal.tsx
@@ -10,17 +10,14 @@ import {
   Box,
   useNotification,
   AdjustmentTypeInput,
-  useNavigate,
-  RouteBuilder,
 } from '@openmsupply-client/common';
-import { useStockLine } from '../api';
+import { DraftStockLine, useStockLine } from '../api';
 import { StockLineForm } from './StockLineForm';
 import {
   InventoryAdjustmentReasonSearchInput,
   StockItemSearchInput,
 } from '../..';
 import { INPUT_WIDTH, StyledInputRow } from './StyledInputRow';
-import { AppRoute } from '@openmsupply-client/config';
 
 interface NewStockLineModalProps {
   isOpen: boolean;
@@ -32,33 +29,25 @@ export const NewStockLineModal: FC<NewStockLineModalProps> = ({
   onClose,
 }) => {
   const t = useTranslation('inventory');
-  const navigate = useNavigate();
   const { success } = useNotification();
 
   const { Modal } = useDialog({ isOpen, onClose });
 
-  const {
-    query: { isLoading },
-    draft,
-    updatePatch,
-    create: { create },
-  } = useStockLine();
+  const { draft, setDraft, create } = useStockLine();
+
+  const onUpdate = (patch: Partial<DraftStockLine>) => {
+    setDraft({ ...draft, ...patch });
+  };
 
   const isDisabled =
     !draft.itemId || !draft.packSize || !draft.totalNumberOfPacks;
 
   const save = async () => {
     try {
-      const result = await create();
+      await create();
       const successSnack = success(t('messages.stock-line-saved'));
       successSnack();
       onClose();
-      navigate(
-        RouteBuilder.create(AppRoute.Inventory)
-          .addPart(AppRoute.Stock)
-          .addPart(result.insertStockLine.id)
-          .build()
-      );
     } catch {
       // todo
     }
@@ -94,7 +83,7 @@ export const NewStockLineModal: FC<NewStockLineModalProps> = ({
               disabled={!!draft.itemId}
               currentItemId={draft.itemId}
               onChange={newItem =>
-                newItem && updatePatch({ itemId: newItem.id, item: newItem })
+                newItem && onUpdate({ itemId: newItem.id, item: newItem })
               }
             />
           </Grid>
@@ -103,13 +92,7 @@ export const NewStockLineModal: FC<NewStockLineModalProps> = ({
 
         {draft.itemId && (
           <Grid item width={'100%'}>
-            <StockLineForm
-              draft={draft}
-              loading={isLoading}
-              onUpdate={updatePatch}
-              packEditable
-              isInModal
-            />
+            <StockLineForm draft={draft} onUpdate={onUpdate} packEditable />
 
             <Grid item width={'50%'}>
               <StyledInputRow
@@ -121,7 +104,7 @@ export const NewStockLineModal: FC<NewStockLineModalProps> = ({
                       adjustmentType={AdjustmentTypeInput.Addition}
                       value={draft.inventoryAdjustmentReason}
                       onChange={reason =>
-                        updatePatch({ inventoryAdjustmentReason: reason })
+                        onUpdate({ inventoryAdjustmentReason: reason })
                       }
                     />
                   </Box>
diff --git a/client/packages/system/src/Stock/Components/Repack/RepackModal.tsx b/client/packages/system/src/Stock/Components/Repack/RepackModal.tsx
index dc2f44e3a..5f135e341 100644
--- a/client/packages/system/src/Stock/Components/Repack/RepackModal.tsx
+++ b/client/packages/system/src/Stock/Components/Repack/RepackModal.tsx
@@ -16,26 +16,47 @@ import {
   ReportContext,
   LoadingButton,
   PrinterIcon,
-  StockLineNode,
 } from '@openmsupply-client/common';
 import { PlusCircleIcon } from '@common/icons';
 import { RepackEditForm } from './RepackEditForm';
 import {
+  Repack,
   ReportRowFragment,
   ReportSelector,
   useActivityLog,
   useReport,
+  useStock,
 } from '@openmsupply-client/system';
-import { RepackFragment } from '../../api';
+import { RepackFragment, StockLineRowFragment } from '../../api';
 import { useRepackColumns } from './column';
-import { useRepackEdit } from '../../api/hooks/useRepack';
 
 interface RepackModalControlProps {
   isOpen: boolean;
   onClose: () => void;
-  stockLine: StockLineNode;
+  stockLine: StockLineRowFragment | null;
 }
 
+const useDraftRepack = (seed: Repack) => {
+  const [repack, setRepack] = useState<Repack>(() => ({ ...seed }));
+  const { mutateAsync, isLoading, isError } = useStock.repack.insert(
+    seed.stockLineId ?? ''
+  );
+
+  const onChange = (patch: Partial<Repack>) => {
+    setRepack({ ...repack, ...patch });
+  };
+
+  const onInsert = async () => mutateAsync(repack);
+
+  return {
+    onChange,
+    onInsert,
+    isLoading,
+    draft: repack,
+    isError,
+  };
+};
+
 export const RepackModal: FC<RepackModalControlProps> = ({
   isOpen,
   onClose,
@@ -53,23 +74,26 @@ export const RepackModal: FC<RepackModalControlProps> = ({
     numberOfPacks: 0,
   };
 
+  const { data, isError, isLoading } = useStock.repack.list(
+    stockLine?.id ?? ''
+  );
   const { data: logData } = useActivityLog.document.listByRecord(
     stockLine?.id ?? ''
   );
 
-  const { repacks, isError, isLoading, draft, onChange, onInsert } =
-    useRepackEdit(defaultRepack);
+  const { draft, onChange, onInsert } = useDraftRepack(defaultRepack);
   const { columns } = useRepackColumns();
   // only display the message if there are lines to click on
   // if there are no lines, the 'click new' message is displayed closer to the action
-  const displayMessage = invoiceId == undefined && !isNew && !!repacks?.length;
+  const displayMessage =
+    invoiceId == undefined && !isNew && !!data?.nodes.length;
   const showRepackDetail = invoiceId || isNew;
   const showLogEvent = !!logData?.nodes.length;
 
   const { print, isPrinting } = useReport.utils.print();
 
   const printReport = (report: ReportRowFragment) => {
-    if (!repacks) return;
+    if (!data) return;
     print({ reportId: report.id, dataId: invoiceId || '' });
   };
 
@@ -191,14 +215,14 @@ export const RepackModal: FC<RepackModalControlProps> = ({
             <Typography>{t('messages.no-repack-detail')}</Typography>
           </Box>
         )}
-        <Box display="flex" flexDirection="column">
+        <Box display="flex" flexDirection="column" height={435}>
           <Box display="flex" flexDirection="column" flex={1}>
             <Box sx={{ maxHeight: 260, overflowY: 'auto' }}>
               <TableProvider createStore={createTableStore}>
                 <DataTable
                   id="repack-list"
                   columns={columns}
-                  data={repacks}
+                  data={data?.nodes}
                   isLoading={isLoading}
                   isError={isError}
                   noDataMessage={t('messages.no-repacks')}
diff --git a/client/packages/system/src/Stock/Components/StockLineEditModal.tsx b/client/packages/system/src/Stock/Components/StockLineEditModal.tsx
new file mode 100644
index 000000000..a40356e8b
--- /dev/null
+++ b/client/packages/system/src/Stock/Components/StockLineEditModal.tsx
@@ -0,0 +1,151 @@
+import React, { FC, useEffect, useState } from 'react';
+import {
+  useTranslation,
+  Grid,
+  Typography,
+  DialogButton,
+  useDialog,
+  ObjUtils,
+  useConfirmationModal,
+  ModalTabs,
+  usePluginEvents,
+  usePluginElements,
+  PluginEventListener,
+} from '@openmsupply-client/common';
+import { StockLineRowFragment, useStock } from '../api';
+import { ActivityLogList } from '../../ActivityLog';
+import { StockLineForm } from './StockLineForm';
+import { InventoryAdjustmentForm } from './InventoryAdjustment';
+import { LedgerForm } from './Ledger';
+
+interface StockLineEditModalProps {
+  isOpen: boolean;
+  onClose: () => void;
+
+  stockLine: StockLineRowFragment;
+}
+
+interface UseDraftStockLineControl {
+  draft: StockLineRowFragment;
+  onUpdate: (patch: Partial<StockLineRowFragment>) => void;
+  onSave: () => Promise<void>;
+  isLoading: boolean;
+}
+
+const useDraftStockLine = (
+  seed: StockLineRowFragment
+): UseDraftStockLineControl => {
+  const [stockLine, setStockLine] = useState<StockLineRowFragment>({ ...seed });
+  const { mutate, isLoading } = useStock.line.update();
+
+  useEffect(() => {
+    setStockLine(seed);
+  }, [seed]);
+
+  const onUpdate = (patch: Partial<StockLineRowFragment>) => {
+    const newStockLine = { ...stockLine, ...patch };
+    if (ObjUtils.isEqual(stockLine, newStockLine)) return;
+    setStockLine(newStockLine);
+  };
+
+  const onSave = async () => mutate(stockLine);
+
+  return {
+    draft: stockLine,
+    onUpdate,
+    onSave,
+    isLoading,
+  };
+};
+
+export const StockLineEditModal: FC<StockLineEditModalProps> = ({
+  stockLine,
+  isOpen,
+  onClose,
+}) => {
+  const t = useTranslation('inventory');
+  const { Modal } = useDialog({ isOpen, onClose });
+  const getConfirmation = useConfirmationModal({
+    title: t('heading.are-you-sure'),
+    message: t('messages.confirm-save-stock-line'),
+  });
+
+  const { draft, onUpdate, onSave } = useDraftStockLine(stockLine);
+  const { dispatchEvent, addEventListener, removeEventListener } =
+    usePluginEvents();
+  const [hasChanged, setHasChanged] = useState(false);
+  const plugins = usePluginElements({
+    type: 'StockEditForm',
+    data: stockLine,
+  });
+
+  const tabs = [
+    {
+      Component: (
+        <StockLineForm draft={draft} onUpdate={onUpdate} plugins={plugins} />
+      ),
+      value: 'label.details',
+    },
+    {
+      Component: (
+        <InventoryAdjustmentForm stockLine={draft} onUpdate={onUpdate} />
+      ),
+      value: 'label.adjust',
+    },
+    {
+      Component: <ActivityLogList recordId={draft?.id ?? ''} />,
+      value: 'label.log',
+    },
+    {
+      Component: <LedgerForm stockLine={draft} />,
+      value: 'label.ledger',
+    },
+  ];
+
+  const onChange = () => setHasChanged(true);
+
+  useEffect(() => {
+    const listener: PluginEventListener = {
+      eventType: 'onChangeStockEditForm',
+      listener: onChange,
+    };
+
+    addEventListener(listener);
+
+    return () => removeEventListener(listener);
+  }, [addEventListener, removeEventListener]);
+
+  return (
+    <Modal
+      sx={{ maxWidth: 'unset', minWidth: 700, minHeight: 575 }}
+      slideAnimation={false}
+      title={t('title.stock-line-details')}
+      okButton={
+        <DialogButton
+          variant="ok"
+          disabled={ObjUtils.isEqual(draft, stockLine) && !hasChanged}
+          onClick={() =>
+            getConfirmation({
+              onConfirm: async () => {
+                await onSave();
+                dispatchEvent('onSaveStockEditForm', new Event(draft.id));
+                onClose();
+              },
+            })
+          }
+        />
+      }
+      cancelButton={<DialogButton variant="cancel" onClick={onClose} />}
+    >
+      <Grid container alignItems="center" flexDirection="column">
+        <Typography sx={{ fontWeight: 'bold' }} variant="h6">
+          {stockLine.item.name}
+        </Typography>
+        <Typography sx={{ fontWeight: 'bold', marginBottom: 3 }}>
+          {`${t('label.code')} : ${stockLine.item.code}`}
+        </Typography>
+        <ModalTabs tabs={tabs} />
+      </Grid>
+    </Modal>
+  );
+};
diff --git a/client/packages/system/src/Stock/Components/StockLineForm.tsx b/client/packages/system/src/Stock/Components/StockLineForm.tsx
index 412708558..8d21da2f0 100644
--- a/client/packages/system/src/Stock/Components/StockLineForm.tsx
+++ b/client/packages/system/src/Stock/Components/StockLineForm.tsx
@@ -15,9 +15,9 @@ import {
   CircularProgress,
   useNotification,
   Tooltip,
+  useDebounceCallback,
   NumericTextInput,
   BufferedTextInput,
-  DetailContainer,
 } from '@openmsupply-client/common';
 import { StockLineRowFragment } from '../api';
 import { LocationSearchInput } from '../../Location/Components/LocationSearchInput';
@@ -30,19 +30,15 @@ import { StyledInputRow } from './StyledInputRow';
 
 interface StockLineFormProps {
   draft: StockLineRowFragment;
-  loading: boolean;
   onUpdate: (patch: Partial<StockLineRowFragment>) => void;
   plugins?: JSX.Element[];
   packEditable?: boolean;
-  isInModal?: boolean;
 }
 export const StockLineForm: FC<StockLineFormProps> = ({
   draft,
-  loading,
   onUpdate,
   plugins,
   packEditable,
-  isInModal = false,
 }) => {
   const t = useTranslation('inventory');
   const { error } = useNotification();
@@ -78,6 +74,12 @@ export const StockLineForm: FC<StockLineFormProps> = ({
     }
   };
 
+  const debouncedUpdate = useDebounceCallback(
+    (patch: Partial<StockLineRowFragment>) => onUpdate(patch),
+    [onUpdate],
+    500
+  );
+
   useEffect(() => {
     function handleKeyDown(this: HTMLElement, ev: KeyboardEvent) {
       if (ev.ctrlKey && ev.key === 's') {
@@ -88,182 +90,173 @@ export const StockLineForm: FC<StockLineFormProps> = ({
     return () => document.body.removeEventListener('keydown', handleKeyDown);
   }, []);
 
-  if (loading) return null;
-
   return (
-    <DetailContainer>
+    <Grid
+      display="flex"
+      flex={1}
+      container
+      paddingTop={2}
+      paddingBottom={1}
+      width="100%"
+      flexWrap="nowrap"
+    >
       <Grid
+        container
         display="flex"
         flex={1}
-        container
-        paddingTop={2}
-        paddingBottom={1}
-        width="100%"
-        flexWrap="nowrap"
-        maxWidth={900}
-        gap={isInModal ? undefined : 10}
+        flexBasis="50%"
+        flexDirection="column"
+        gap={1}
       >
-        <Grid
-          container
-          display="flex"
-          flex={1}
-          flexBasis="50%"
-          flexDirection="column"
-          gap={1}
-        >
-          <StyledInputRow
-            label={t('label.num-packs')}
-            Input={
-              <NumericTextInput
-                autoFocus
-                disabled={!packEditable}
-                width={160}
-                value={draft.totalNumberOfPacks}
-                onChange={totalNumberOfPacks =>
-                  onUpdate({ totalNumberOfPacks })
-                }
-              />
-            }
-          />
-          <StyledInputRow
-            label={t('label.cost-price')}
-            Input={
-              <CurrencyInput
-                autoFocus={!packEditable}
-                defaultValue={draft.costPricePerPack}
-                onChangeNumber={costPricePerPack =>
-                  onUpdate({ costPricePerPack })
-                }
-              />
-            }
-          />
-          <StyledInputRow
-            label={t('label.sell-price')}
-            Input={
-              <CurrencyInput
-                defaultValue={draft.sellPricePerPack}
-                onChangeNumber={sellPricePerPack =>
-                  onUpdate({ sellPricePerPack })
-                }
-              />
-            }
-          />
-          <StyledInputRow
-            label={t('label.expiry')}
-            Input={
-              <ExpiryDateInput
-                value={DateUtils.getDateOrNull(draft.expiryDate)}
-                onChange={date =>
-                  onUpdate({ expiryDate: Formatter.naiveDate(date) })
-                }
-              />
-            }
-          />
-          <StyledInputRow
-            label={t('label.batch')}
-            Input={
-              <BufferedTextInput
-                value={draft.batch ?? ''}
-                onChange={e => onUpdate({ batch: e.target.value })}
-              />
-            }
-          />
-          {plugins}
-        </Grid>
-        <Grid
-          container
-          display="flex"
-          flex={1}
-          flexBasis="50%"
-          flexDirection="column"
-          gap={1}
-        >
-          {packEditable ? (
-            <StyledInputRow
-              label={
-                isPackVariantsEnabled ? t('label.pack') : t('label.pack-size')
+        <StyledInputRow
+          label={t('label.num-packs')}
+          Input={
+            <NumericTextInput
+              autoFocus
+              disabled={!packEditable}
+              width={160}
+              value={draft.totalNumberOfPacks}
+              onChange={totalNumberOfPacks => onUpdate({ totalNumberOfPacks })}
+            />
+          }
+        />
+        <StyledInputRow
+          label={t('label.cost-price')}
+          Input={
+            <CurrencyInput
+              autoFocus={!packEditable}
+              defaultValue={draft.costPricePerPack}
+              onChangeNumber={costPricePerPack =>
+                debouncedUpdate({ costPricePerPack })
               }
-              Input={
-                <PackVariantInput
-                  isDisabled={!packEditable}
-                  packSize={draft.packSize}
-                  itemId={draft.itemId}
-                  unitName={draft.item.unitName ?? null}
-                  onChange={packSize => onUpdate({ packSize })}
-                />
+            />
+          }
+        />
+        <StyledInputRow
+          label={t('label.sell-price')}
+          Input={
+            <CurrencyInput
+              defaultValue={draft.sellPricePerPack}
+              onChangeNumber={sellPricePerPack =>
+                debouncedUpdate({ sellPricePerPack })
               }
             />
-          ) : (
-            <TextWithLabelRow
-              label={
-                isPackVariantsEnabled ? t('label.pack') : t('label.pack-size')
+          }
+        />
+        <StyledInputRow
+          label={t('label.expiry')}
+          Input={
+            <ExpiryDateInput
+              value={DateUtils.getDateOrNull(draft.expiryDate)}
+              onChange={date =>
+                onUpdate({ expiryDate: Formatter.naiveDate(date) })
               }
-              text={String(isPackVariantsEnabled ? packUnit : draft.packSize)}
-              textProps={{ textAlign: 'end' }}
             />
-          )}
+          }
+        />
+        <StyledInputRow
+          label={t('label.batch')}
+          Input={
+            <BufferedTextInput
+              value={draft.batch ?? ''}
+              onChange={e => onUpdate({ batch: e.target.value })}
+            />
+          }
+        />
+        {plugins}
+      </Grid>
+      <Grid
+        container
+        display="flex"
+        flex={1}
+        flexBasis="50%"
+        flexDirection="column"
+        gap={1}
+      >
+        {packEditable ? (
           <StyledInputRow
-            label={t('label.on-hold')}
-            Input={
-              <Checkbox
-                checked={draft.onHold}
-                onChange={(_, onHold) => onUpdate({ onHold })}
-              />
+            label={
+              isPackVariantsEnabled ? t('label.pack') : t('label.pack-size')
             }
-          />
-          <StyledInputRow
-            label={t('label.location')}
             Input={
-              <LocationSearchInput
-                autoFocus={false}
-                disabled={false}
-                selectedLocation={location}
-                width={160}
-                onChange={location => {
-                  onUpdate({ location, locationId: location?.id });
-                }}
+              <PackVariantInput
+                isDisabled={!packEditable}
+                packSize={draft.packSize}
+                itemId={draft.itemId}
+                unitName={draft.item.unitName ?? null}
+                onChange={packSize => onUpdate({ packSize })}
               />
             }
           />
-          <StyledInputRow
-            label={t('label.barcode')}
-            Input={
-              <Box display="flex" style={{ width: 162 }}>
-                <BufferedTextInput
-                  value={draft.barcode ?? ''}
-                  onChange={e => onUpdate({ barcode: e.target.value })}
-                />
-                {isEnabled && (
-                  <Tooltip
-                    title={isConnected ? '' : t('error.scanner-not-connected')}
-                  >
-                    <Box>
-                      <IconButton
-                        disabled={isScanning || !isConnected}
-                        onClick={scanBarcode}
-                        icon={
-                          isScanning ? (
-                            <CircularProgress size={20} color="secondary" />
-                          ) : (
-                            <ScanIcon />
-                          )
-                        }
-                        label={t('button.scan')}
-                      />
-                    </Box>
-                  </Tooltip>
-                )}
-              </Box>
-            }
-          />
+        ) : (
           <TextWithLabelRow
-            label={t('label.supplier')}
-            text={String(supplierName)}
+            label={
+              isPackVariantsEnabled ? t('label.pack') : t('label.pack-size')
+            }
+            text={String(isPackVariantsEnabled ? packUnit : draft.packSize)}
             textProps={{ textAlign: 'end' }}
           />
-        </Grid>
+        )}
+        <StyledInputRow
+          label={t('label.on-hold')}
+          Input={
+            <Checkbox
+              checked={draft.onHold}
+              onChange={(_, onHold) => onUpdate({ onHold })}
+            />
+          }
+        />
+        <StyledInputRow
+          label={t('label.location')}
+          Input={
+            <LocationSearchInput
+              autoFocus={false}
+              disabled={false}
+              selectedLocation={location}
+              width={160}
+              onChange={location => {
+                onUpdate({ location, locationId: location?.id });
+              }}
+            />
+          }
+        />
+        <StyledInputRow
+          label={t('label.barcode')}
+          Input={
+            <Box display="flex" style={{ width: 162 }}>
+              <BufferedTextInput
+                value={draft.barcode ?? ''}
+                onChange={e => onUpdate({ barcode: e.target.value })}
+              />
+              {isEnabled && (
+                <Tooltip
+                  title={isConnected ? '' : t('error.scanner-not-connected')}
+                >
+                  <Box>
+                    <IconButton
+                      disabled={isScanning || !isConnected}
+                      onClick={scanBarcode}
+                      icon={
+                        isScanning ? (
+                          <CircularProgress size={20} color="secondary" />
+                        ) : (
+                          <ScanIcon />
+                        )
+                      }
+                      label={t('button.scan')}
+                    />
+                  </Box>
+                </Tooltip>
+              )}
+            </Box>
+          }
+        />
+        <TextWithLabelRow
+          label={t('label.supplier')}
+          text={String(supplierName)}
+          textProps={{ textAlign: 'end' }}
+        />
       </Grid>
-      {/* {footerProps && <Footer {...footerProps} />} */}
-    </DetailContainer>
+    </Grid>
   );
 };
diff --git a/client/packages/system/src/Stock/Components/index.ts b/client/packages/system/src/Stock/Components/index.ts
index 21b464509..ab9d1556c 100644
--- a/client/packages/system/src/Stock/Components/index.ts
+++ b/client/packages/system/src/Stock/Components/index.ts
@@ -1,2 +1,2 @@
+export * from './StockLineEditModal';
 export * from './Repack';
-export * from './InventoryAdjustment';
diff --git a/client/packages/system/src/Stock/DetailView/AppBarButtons.tsx b/client/packages/system/src/Stock/DetailView/AppBarButtons.tsx
deleted file mode 100644
index a432cc4db..000000000
--- a/client/packages/system/src/Stock/DetailView/AppBarButtons.tsx
+++ /dev/null
@@ -1,42 +0,0 @@
-import React, { FC } from 'react';
-import {
-  AppBarButtonsPortal,
-  ButtonWithIcon,
-  Grid,
-  useTranslation,
-  StockIcon,
-  BarChart2Icon,
-} from '@openmsupply-client/common';
-
-interface AppBarButtonProps {
-  openRepack: () => void;
-  openAdjust: () => void;
-}
-
-export const AppBarButtonsComponent: FC<AppBarButtonProps> = ({
-  openRepack,
-  openAdjust,
-}) => {
-  const t = useTranslation('inventory');
-
-  return (
-    <AppBarButtonsPortal>
-      <Grid container gap={1}>
-        <ButtonWithIcon
-          // disabled={isDisabled}
-          label={t('button.repack')}
-          Icon={<StockIcon />}
-          onClick={openRepack}
-        />
-        <ButtonWithIcon
-          // disabled={isDisabled}
-          label={t('button.adjust')}
-          Icon={<BarChart2Icon />}
-          onClick={openAdjust}
-        />
-      </Grid>
-    </AppBarButtonsPortal>
-  );
-};
-
-export const AppBarButtons = React.memo(AppBarButtonsComponent);
diff --git a/client/packages/system/src/Stock/DetailView/DetailView.tsx b/client/packages/system/src/Stock/DetailView/DetailView.tsx
deleted file mode 100644
index 68c4b6028..000000000
--- a/client/packages/system/src/Stock/DetailView/DetailView.tsx
+++ /dev/null
@@ -1,150 +0,0 @@
-import React, { useEffect, useState } from 'react';
-import {
-  TableProvider,
-  createTableStore,
-  useTranslation,
-  DetailTabs,
-  usePluginElements,
-  usePluginEvents,
-  PluginEventListener,
-  useBreadcrumbs,
-  useParams,
-  useConfirmationModal,
-  useNotification,
-  useUrlQuery,
-  useToggle,
-  StockLineNode,
-} from '@openmsupply-client/common';
-import { ActivityLogList } from '@openmsupply-client/system';
-import { AppBarButtons } from './AppBarButtons';
-import { useStockLine } from '../api';
-import { StockLineForm } from '../Components/StockLineForm';
-import { LedgerTable } from '../Components/Ledger';
-import { Footer } from './Footer';
-import { RepackModal } from '../Components';
-import { InventoryAdjustmentModal } from '../Components';
-
-export const StockLineDetailView: React.FC = () => {
-  const { id } = useParams();
-  const {
-    query: { data, isLoading },
-    draft,
-    resetDraft,
-    updatePatch,
-    isDirty,
-    update: { update, isUpdating },
-  } = useStockLine(id);
-  const { dispatchEvent, addEventListener, removeEventListener } =
-    usePluginEvents();
-  const {
-    urlQuery: { tab },
-  } = useUrlQuery();
-  const { success, error } = useNotification();
-  const t = useTranslation('inventory');
-  const { setSuffix } = useBreadcrumbs();
-
-  const repackModalController = useToggle();
-  const adjustmentModalController = useToggle();
-
-  const [hasPluginChanged, setHasPluginChanged] = useState(false);
-  const plugins = usePluginElements({
-    type: 'StockEditForm',
-    data,
-  });
-
-  useEffect(() => {
-    if (!data) return;
-    setSuffix(data?.item.name ?? '');
-  }, [data]);
-
-  const onPluginChange = () => setHasPluginChanged(true);
-  useEffect(() => {
-    const listener: PluginEventListener = {
-      eventType: 'onChangeStockEditForm',
-      listener: onPluginChange,
-    };
-
-    addEventListener(listener);
-
-    return () => removeEventListener(listener);
-  }, [addEventListener, removeEventListener]);
-
-  const showSaveConfirmation = useConfirmationModal({
-    onConfirm: () => {
-      update()
-        .then(() => {
-          dispatchEvent('onSaveStockEditForm', new Event(draft.id));
-          const successSnack = success(t('success.data-saved'));
-          successSnack();
-        })
-        .catch(err => {
-          const errorSnack = error(err.message);
-          errorSnack();
-        });
-    },
-    message: t('messages.confirm-save-generic'),
-    title: t('heading.are-you-sure'),
-  });
-
-  const showCancelConfirmation = useConfirmationModal({
-    onConfirm: resetDraft,
-    message: t('messages.confirm-cancel-generic'),
-    title: t('heading.are-you-sure'),
-  });
-
-  const tabs = [
-    {
-      Component: (
-        <StockLineForm
-          loading={isLoading}
-          draft={draft}
-          onUpdate={updatePatch}
-          plugins={plugins}
-        />
-      ),
-      value: t('label.details'),
-    },
-    {
-      Component: <ActivityLogList recordId={data?.id ?? ''} />,
-      value: t('label.log'),
-    },
-    {
-      Component: <LedgerTable stockLine={draft} />,
-      value: t('label.ledger'),
-    },
-  ];
-
-  const footerProps = {
-    isSaving: isUpdating,
-    showSaveConfirmation,
-    showCancelConfirmation,
-    disabled: !isDirty && !hasPluginChanged,
-  };
-
-  return (
-    <>
-      {repackModalController.isOn && data && (
-        <RepackModal
-          isOpen={repackModalController.isOn}
-          onClose={repackModalController.toggleOff}
-          stockLine={data as StockLineNode}
-        />
-      )}
-      {adjustmentModalController.isOn && (
-        <InventoryAdjustmentModal
-          stockLine={data as StockLineNode}
-          isOpen={adjustmentModalController.isOn}
-          onClose={adjustmentModalController.toggleOff}
-        />
-      )}
-      <AppBarButtons
-        openRepack={repackModalController.toggleOn}
-        openAdjust={adjustmentModalController.toggleOn}
-      />
-      <TableProvider createStore={createTableStore}>
-        <DetailTabs tabs={tabs} />
-        {(tab === t('label.details') || !tab) && <Footer {...footerProps} />}
-      </TableProvider>
-    </>
-  );
-};
diff --git a/client/packages/system/src/Stock/DetailView/Footer.tsx b/client/packages/system/src/Stock/DetailView/Footer.tsx
deleted file mode 100644
index 5590b5aab..000000000
--- a/client/packages/system/src/Stock/DetailView/Footer.tsx
+++ /dev/null
@@ -1,64 +0,0 @@
-import React, { FC } from 'react';
-import {
-  Box,
-  useTranslation,
-  AppFooterPortal,
-  DialogButton,
-  LoadingButton,
-} from '@openmsupply-client/common';
-import { FormInputData } from '@openmsupply-client/programs';
-
-interface FooterProps {
-  isSaving: boolean;
-  disabled?: boolean;
-  validationError?: string | boolean;
-  inputData?: FormInputData;
-  showSaveConfirmation: () => void;
-  showCancelConfirmation: () => void;
-}
-
-export const Footer: FC<FooterProps> = ({
-  isSaving,
-  disabled,
-  inputData,
-  showSaveConfirmation,
-  showCancelConfirmation,
-}) => {
-  const t = useTranslation();
-
-  return (
-    <AppFooterPortal
-      Content={
-        <Box
-          gap={2}
-          display="flex"
-          flexDirection="row"
-          alignItems="center"
-          height={64}
-        >
-          <Box
-            flex={1}
-            display="flex"
-            justifyContent="flex-end"
-            gap={2}
-            marginLeft="auto"
-          >
-            <DialogButton
-              variant="cancel"
-              disabled={disabled}
-              onClick={() => showCancelConfirmation()}
-            />
-            <LoadingButton
-              color="secondary"
-              disabled={disabled}
-              isLoading={isSaving}
-              onClick={showSaveConfirmation}
-            >
-              {inputData?.isCreating ? t('button.create') : t('button.save')}
-            </LoadingButton>
-          </Box>
-        </Box>
-      }
-    />
-  );
-};
diff --git a/client/packages/system/src/Stock/DetailView/index.ts b/client/packages/system/src/Stock/DetailView/index.ts
deleted file mode 100644
index 13e7e14fb..000000000
--- a/client/packages/system/src/Stock/DetailView/index.ts
+++ /dev/null
@@ -1 +0,0 @@
-export * from './DetailView';
diff --git a/client/packages/system/src/Stock/ListView/ListView.tsx b/client/packages/system/src/Stock/ListView/ListView.tsx
index 515368cf9..31ab101b2 100644
--- a/client/packages/system/src/Stock/ListView/ListView.tsx
+++ b/client/packages/system/src/Stock/ListView/ListView.tsx
@@ -8,13 +8,17 @@ import {
   NothingHere,
   useUrlQueryParams,
   DateUtils,
+  useEditModal,
+  IconButton,
+  CellProps,
+  useToggle,
+  StockIcon,
+  ColumnAlign,
   ColumnDescription,
   usePluginColumns,
   TooltipTextCell,
-  NumUtils,
-  useNavigate,
-  RouteBuilder,
 } from '@openmsupply-client/common';
+import { RepackModal, StockLineEditModal } from '../Components';
 import { StockLineRowFragment, useStock } from '../api';
 import { AppBarButtons } from './AppBarButtons';
 import {
@@ -22,7 +26,6 @@ import {
   useIsPackVariantsEnabled,
 } from '@openmsupply-client/system';
 import { Toolbar } from './Toolbar';
-import { AppRoute } from '@openmsupply-client/config';
 
 const StockListComponent: FC = () => {
   const {
@@ -43,7 +46,6 @@ const StockListComponent: FC = () => {
       },
     ],
   });
-  const navigate = useNavigate();
   const queryParams = {
     filterBy,
     offset,
@@ -55,9 +57,35 @@ const StockListComponent: FC = () => {
   const pagination = { page, first, offset };
   const t = useTranslation('inventory');
   const { data, isLoading, isError } = useStock.line.list(queryParams);
+  const [repackId, setRepackId] = React.useState<string | null>(null);
   const pluginColumns = usePluginColumns<StockLineRowFragment>({
     type: 'Stock',
   });
+  const EditStockLineCell = <T extends StockLineRowFragment>({
+    rowData,
+    isDisabled,
+  }: CellProps<T>): React.ReactElement<CellProps<T>> => (
+    <IconButton
+      label={t('button.repack')}
+      height="16px"
+      disabled={isDisabled}
+      icon={
+        <StockIcon
+          sx={{
+            color: 'primary.main',
+            width: '12px',
+            cursor: 'pointer',
+          }}
+        />
+      }
+      onClick={e => {
+        e.stopPropagation();
+        repackModalController.toggleOn();
+        setRepackId(rowData.id);
+      }}
+    />
+  );
+
   const packSizeAndUnitColumns: ColumnDescription<StockLineRowFragment>[] =
     isPackVariantsEnabled
       ? [
@@ -87,6 +115,14 @@ const StockListComponent: FC = () => {
         ];
 
   const columnDefinitions: ColumnDescription<StockLineRowFragment>[] = [
+    {
+      key: 'edit',
+      label: 'label.repack',
+      Cell: EditStockLineCell,
+      width: 75,
+      sortable: false,
+      align: ColumnAlign.Center,
+    },
     [
       'itemCode',
       {
@@ -132,7 +168,7 @@ const StockListComponent: FC = () => {
       'stockOnHand',
       {
         accessor: ({ rowData }) =>
-          NumUtils.floatMultiply(rowData.totalNumberOfPacks, rowData.packSize),
+          rowData.totalNumberOfPacks * rowData.packSize,
         label: 'label.soh',
         description: 'description.soh',
         sortable: false,
@@ -160,8 +196,31 @@ const StockListComponent: FC = () => {
     [sortBy, pluginColumns]
   );
 
+  const { isOpen, entity, onClose, onOpen } =
+    useEditModal<StockLineRowFragment>();
+
+  const repackModalController = useToggle();
+
+  const stockLine = entity
+    ? data?.nodes.find(({ id }) => id === entity.id)
+    : undefined;
+
   return (
     <>
+      {repackModalController.isOn && (
+        <RepackModal
+          isOpen={repackModalController.isOn}
+          onClose={repackModalController.toggleOff}
+          stockLine={data?.nodes.find(({ id }) => id === repackId) ?? null}
+        />
+      )}
+      {isOpen && stockLine && (
+        <StockLineEditModal
+          isOpen={isOpen}
+          onClose={onClose}
+          stockLine={stockLine}
+        />
+      )}
       <Toolbar filter={filter} />
       <AppBarButtons />
       <DataTable
@@ -174,14 +233,7 @@ const StockListComponent: FC = () => {
         isError={isError}
         isLoading={isLoading}
         enableColumnSelection
-        onRowClick={stockline => {
-          navigate(
-            RouteBuilder.create(AppRoute.Inventory)
-              .addPart(AppRoute.Stock)
-              .addPart(stockline.id)
-              .build()
-          );
-        }}
+        onRowClick={onOpen}
       />
     </>
   );
diff --git a/client/packages/system/src/Stock/Service/Service.tsx b/client/packages/system/src/Stock/Service/Service.tsx
index af412c03d..a2db4f5f7 100644
--- a/client/packages/system/src/Stock/Service/Service.tsx
+++ b/client/packages/system/src/Stock/Service/Service.tsx
@@ -2,17 +2,12 @@ import React, { FC } from 'react';
 import { RouteBuilder, Routes, Route } from '@openmsupply-client/common';
 import { AppRoute } from '@openmsupply-client/config';
 import { StockListView } from '../ListView';
-import { StockLineDetailView } from '../DetailView';
 
 const Service: FC = () => {
-  const stockListRoute = RouteBuilder.create(AppRoute.Stock).build();
-  const stockLineRoute = RouteBuilder.create(AppRoute.Stock)
-    .addPart(':id')
-    .build();
+  const stockRoute = RouteBuilder.create(AppRoute.Stock).build();
   return (
     <Routes>
-      <Route path={stockListRoute} element={<StockListView />} />
-      <Route path={stockLineRoute} element={<StockLineDetailView />} />
+      <Route path={stockRoute} element={<StockListView />} />
     </Routes>
   );
 };
diff --git a/client/packages/system/src/Stock/api/hooks/keys.ts b/client/packages/system/src/Stock/api/hooks/keys.ts
index 72ba783a9..8dec666bd 100644
--- a/client/packages/system/src/Stock/api/hooks/keys.ts
+++ b/client/packages/system/src/Stock/api/hooks/keys.ts
@@ -1,2 +1 @@
 export const STOCK_LINE = 'stock_line';
-export const REPACK_LIST = 'repack_list';
diff --git a/client/packages/system/src/Stock/api/hooks/useRepack.ts b/client/packages/system/src/Stock/api/hooks/useRepack.ts
deleted file mode 100644
index 4c4154cbe..000000000
--- a/client/packages/system/src/Stock/api/hooks/useRepack.ts
+++ /dev/null
@@ -1,91 +0,0 @@
-import { useMutation, useQuery } from '@openmsupply-client/common';
-import { useStockGraphQL } from '../useStockGraphQL';
-import { useState } from 'react';
-import { Repack } from '../../types';
-import { REPACK_LIST, STOCK_LINE } from './keys';
-
-export const useRepack = (invoiceId: string) => {
-  const { stockApi, storeId } = useStockGraphQL();
-
-  const queryFn = async () => {
-    const result = await stockApi.repack({
-      storeId,
-      invoiceId,
-    });
-
-    if (result.repack.__typename === 'RepackNode') {
-      return result.repack;
-    }
-  };
-
-  const query = useQuery({
-    queryKey: ['stock', invoiceId],
-    queryFn,
-    enabled: invoiceId !== '',
-  });
-
-  return query;
-};
-
-export const useRepackEdit = (init: Repack) => {
-  const { stockApi, storeId, queryClient } = useStockGraphQL();
-  const [repack, setRepack] = useState<Repack>({ ...init });
-  const stockLineId = repack.stockLineId ?? '';
-
-  // FETCH
-  const queryFn = async () => {
-    const result = await stockApi.repacksByStockLine({
-      storeId,
-      stockLineId,
-    });
-
-    return result.repacksByStockLine;
-  };
-
-  const { data, isError, isLoading } = useQuery({
-    queryKey: [STOCK_LINE, storeId, stockLineId],
-    queryFn,
-    enabled: stockLineId !== '',
-  });
-
-  // UPDATE
-  const onChange = (patch: Partial<Repack>) => {
-    setRepack({ ...repack, ...patch });
-  };
-
-  const mutationFn = async () => {
-    const result = await stockApi.insertRepack({
-      storeId,
-      input: {
-        stockLineId: repack.stockLineId ?? '',
-        newPackSize: repack.newPackSize ?? 0,
-        numberOfPacks: repack.numberOfPacks ?? 0,
-        newLocationId: repack.newLocationId ?? undefined,
-      },
-    });
-
-    return result.insertRepack;
-  };
-
-  const mutation = useMutation({
-    mutationFn,
-    onSuccess: () => {
-      // Stock list needs to be re-fetched to load new repacked stock line
-      queryClient.invalidateQueries([STOCK_LINE, storeId, REPACK_LIST]);
-      // Repack list also needs to be re-fetched on insert to show new repack
-      // line
-      queryClient.invalidateQueries([STOCK_LINE, storeId, repack.stockLineId]);
-    },
-  });
-
-  return {
-    // Fetch
-    repacks: data ? data?.nodes : undefined,
-    isError,
-    isLoading,
-    // Update
-    draft: repack,
-    onChange,
-    onInsert: mutation.mutateAsync,
-  };
-};
diff --git a/client/packages/system/src/Stock/api/hooks/useStockLine.ts b/client/packages/system/src/Stock/api/hooks/useStockLine.ts
index f7aa1a85d..1f23fc28a 100644
--- a/client/packages/system/src/Stock/api/hooks/useStockLine.ts
+++ b/client/packages/system/src/Stock/api/hooks/useStockLine.ts
@@ -1,10 +1,8 @@
 import { useState } from 'react';
 import {
   FnUtils,
-  isEqual,
   setNullableInput,
   useMutation,
-  useQuery,
 } from '@openmsupply-client/common';
 import {
   InventoryAdjustmentReasonRowFragment,
@@ -17,187 +15,76 @@ export interface DraftStockLine extends StockLineRowFragment {
   inventoryAdjustmentReason: InventoryAdjustmentReasonRowFragment | null;
 }
 
-const defaultDraftStockLine: DraftStockLine = {
-  __typename: 'StockLineNode',
-  id: '',
-  itemId: '',
-  onHold: false,
-  packSize: 0,
-  sellPricePerPack: 0,
-  costPricePerPack: 0,
-  totalNumberOfPacks: 0,
-  availableNumberOfPacks: 0,
-  storeId: '',
-  item: {
-    __typename: 'ItemNode',
-    code: '',
-    name: '',
-  },
-  inventoryAdjustmentReason: null,
-};
-
-export function useStockLine(id?: string) {
-  const [patch, setPatch] = useState<Partial<DraftStockLine>>({});
-  const [isDirty, setIsDirty] = useState(false);
-  const { data, isLoading, error } = useGet(id ?? '');
-  const {
-    mutateAsync: createMutation,
-    isLoading: isCreating,
-    error: createError,
-  } = useCreate();
-  const {
-    mutateAsync: updateMutation,
-    isLoading: isUpdating,
-    error: updateError,
-  } = useUpdate(id ?? '');
-
-  const draft: DraftStockLine = data
-    ? { ...defaultDraftStockLine, ...data?.nodes[0], ...patch }
-    : { ...defaultDraftStockLine, ...patch };
+export function useStockLine() {
+  const [draft, setDraft] = useState<DraftStockLine>({
+    __typename: 'StockLineNode',
+    id: '',
+    itemId: '',
+    onHold: false,
+    packSize: 0,
+    sellPricePerPack: 0,
+    costPricePerPack: 0,
+    totalNumberOfPacks: 0,
+    availableNumberOfPacks: 0,
+    storeId: '',
+    item: {
+      __typename: 'ItemNode',
+      code: '',
+      name: '',
+    },
+    inventoryAdjustmentReason: null,
+  });
 
-  const updatePatch = (newData: Partial<DraftStockLine>) => {
-    const newPatch = { ...patch, ...newData };
-    setPatch(newPatch);
+  const { mutateAsync: createMutation } = useCreate();
 
-    // Ensures that UI doesn't show in "dirty" state if nothing actually
-    // different from the saved data
-    const updatedData = { ...data?.nodes[0], ...newPatch };
-    if (isEqual(data?.nodes[0], updatedData)) setIsDirty(false);
-    else setIsDirty(true);
-    return;
-  };
-
-  const resetDraft = () => {
-    if (data) {
-      setPatch({});
-      setIsDirty(false);
-    }
-  };
-
-  const create = async () => {
-    const result = await createMutation(draft);
-    setIsDirty(false);
-    return result;
-  };
-  const update = async () => {
-    updateMutation(patch);
-    setIsDirty(false);
-  };
+  const create = () => createMutation(draft);
 
   return {
-    query: { data: data?.nodes[0], isLoading, error },
-    create: { create, isCreating, createError },
-    update: { update, isUpdating, updateError },
     draft,
-    resetDraft,
-    isDirty,
-    updatePatch,
+    setDraft,
+    create,
   };
 }
 
-const useGet = (id: string) => {
-  const { stockApi, storeId } = useStockGraphQL();
-
-  const queryFn = async () => {
-    const result = await stockApi.stockLine({
-      id,
-      storeId,
-    });
-
-    if (result.stockLines.__typename === 'StockLineConnector') {
-      return result.stockLines;
-    }
-  };
-
-  const query = useQuery({
-    queryKey: [STOCK_LINE, id],
-    queryFn,
-    enabled: id !== '',
-  });
-
-  return query;
-};
-
 const useCreate = () => {
   const { stockApi, storeId, queryClient } = useStockGraphQL();
 
-  const mutationFn = async ({
-    itemId,
-    inventoryAdjustmentReason,
-    packSize,
-    totalNumberOfPacks,
-    barcode,
-    batch,
-    expiryDate,
-    sellPricePerPack,
-    costPricePerPack,
-    location,
-    onHold,
-  }: DraftStockLine) => {
-    return await stockApi.insertStockLine({
-      storeId,
-      input: {
-        id: FnUtils.generateUUID(),
-        itemId,
-        packSize,
-        barcode,
-        batch,
-        expiryDate,
-        sellPricePerPack,
-        costPricePerPack,
-        onHold,
-        numberOfPacks: totalNumberOfPacks,
-        location: setNullableInput('id', location),
-        inventoryAdjustmentReasonId: inventoryAdjustmentReason?.id,
-      },
-    });
-  };
-
-  return useMutation({
-    mutationFn,
-    onSuccess: () =>
-      // Stock line list needs to be re-fetched to include the new stock line
-      queryClient.invalidateQueries([STOCK_LINE]),
-  });
-};
-
-const useUpdate = (id: string) => {
-  const { stockApi, storeId, queryClient } = useStockGraphQL();
-
-  const mutationFn = async ({
-    barcode,
-    batch,
-    expiryDate,
-    sellPricePerPack,
-    costPricePerPack,
-    onHold,
-    location,
-  }: Partial<DraftStockLine>) => {
-    const result = await stockApi.updateStockLine({
-      input: {
-        id,
-        barcode,
-        batch,
-        costPricePerPack,
-        expiryDate,
-        onHold,
-        sellPricePerPack,
-        location: setNullableInput('id', location),
-      },
-      storeId,
-    });
-
-    const { updateStockLine } = result;
-
-    if (updateStockLine?.__typename === 'StockLineNode') {
-      return updateStockLine;
+  return useMutation(
+    async ({
+      itemId,
+      inventoryAdjustmentReason,
+      packSize,
+      totalNumberOfPacks,
+      barcode,
+      batch,
+      expiryDate,
+      sellPricePerPack,
+      costPricePerPack,
+      location,
+      onHold,
+    }: DraftStockLine) => {
+      return await stockApi.insertStockLine({
+        storeId,
+        input: {
+          id: FnUtils.generateUUID(),
+          itemId,
+          packSize,
+          barcode,
+          batch,
+          expiryDate,
+          sellPricePerPack,
+          costPricePerPack,
+          onHold,
+          numberOfPacks: totalNumberOfPacks,
+          location: setNullableInput('id', location),
+          inventoryAdjustmentReasonId: inventoryAdjustmentReason?.id,
+        },
+      });
+    },
+    {
+      onSuccess: () =>
+        // Stock line list needs to be refetched to include the new stock line
+        queryClient.invalidateQueries([STOCK_LINE]),
     }
-
-    throw new Error('Unable to update stock line');
-  };
-
-  return useMutation({
-    mutationFn,
-    onSuccess: () => queryClient.invalidateQueries([STOCK_LINE, id]),
-  });
+  );
 };
diff --git a/client/packages/system/src/Sync/api/api.ts b/client/packages/system/src/Sync/api/api.ts
index ead9883fd..b187744cb 100644
--- a/client/packages/system/src/Sync/api/api.ts
+++ b/client/packages/system/src/Sync/api/api.ts
@@ -66,8 +66,6 @@ export function mapSyncError(
     [SyncErrorVariant.InvalidUrl]: 'error.invalid-url',
     [SyncErrorVariant.ApiVersionIncompatible]: 'error.sync-api-incompatible',
     [SyncErrorVariant.CentralV6NotConfigured]: 'error.v6-server-not-configured',
-    [SyncErrorVariant.V6ApiVersionIncompatible]:
-      'error.sync-v6-api-incompatible',
     [SyncErrorVariant.IntegrationError]: 'error.internal-error',
     [SyncErrorVariant.Unknown]: defaultKey || 'error.unknown-sync-error',
   };
@@ -78,8 +76,6 @@ export function mapSyncError(
         return t('error.sync-api-incompatible-hint');
       case SyncErrorVariant.CentralV6NotConfigured:
         return t('error.v6-server-not-configured-hint');
-      case SyncErrorVariant.V6ApiVersionIncompatible:
-        return t('error.sync-v6-api-incompatible-hint');
       default:
         return undefined;
     }
diff --git a/client/packages/system/src/index.ts b/client/packages/system/src/index.ts
index dedd49c71..74b4fa65c 100644
--- a/client/packages/system/src/index.ts
+++ b/client/packages/system/src/index.ts
@@ -16,5 +16,3 @@ export * from './ContactTrace';
 export * from './Log';
 export * from './ReturnReason';
 export * from './Currency';
-export * from './IndicatorsDemographics';
-export * from './Immunisation';
diff --git a/client/tsconfig.json b/client/tsconfig.json
index 139001ab8..a3acdeb8a 100644
--- a/client/tsconfig.json
+++ b/client/tsconfig.json
@@ -2,36 +2,21 @@
   "compilerOptions": {
     "baseUrl": ".",
     "paths": {
-      "@common/components": [
-        "packages/common/src/ui/components"
-      ],
-      "@common/hooks": [
-        "packages/common/src/hooks"
-      ],
-      "@common/icons": [
-        "packages/common/src/ui/icons"
-      ],
-      "@common/intl": [
-        "packages/common/src/intl"
-      ],
-      "@common/intl/*": [
-        "packages/common/src/intl/*"
-      ],
-      "@common/styles": [
-        "packages/common/src/styles"
-      ],
-      "@common/types": [
-        "packages/common/src/types"
-      ],
-      "@common/utils": [
-        "packages/common/src/utils"
-      ]
+      "@common/components": ["packages/common/src/ui/components"],
+      "@common/hooks": ["packages/common/src/hooks"],
+      "@common/icons": ["packages/common/src/ui/icons"],
+      "@common/intl": ["packages/common/src/intl"],
+      "@common/intl/*": ["packages/common/src/intl/*"],
+      "@common/styles": ["packages/common/src/styles"],
+      "@common/types": ["packages/common/src/types"],
+      "@common/utils": ["packages/common/src/utils"]
     },
     "resolveJsonModule": true,
     "target": "es2015",
     "module": "esnext",
     "moduleResolution": "node",
     "jsx": "react",
+
     "sourceMap": true,
     "outDir": "./dist",
     "rootDir": ".",
@@ -43,17 +28,17 @@
     "strictPropertyInitialization": true,
     "noImplicitThis": true,
     "alwaysStrict": true,
+
     "noUnusedLocals": true,
     "noUnusedParameters": true,
+
     "noFallthroughCasesInSwitch": true,
     "noUncheckedIndexedAccess": true,
+
     "noPropertyAccessFromIndexSignature": true,
     "esModuleInterop": true,
     "skipLibCheck": true,
     "forceConsistentCasingInFileNames": true,
-    "typeRoots": [
-      "./typings",
-      "./node_modules/@types"
-    ]
+    "typeRoots": ["./typings", "./node_modules/@types"]
   }
-}
\ No newline at end of file
+}
diff --git a/client/yarn.lock b/client/yarn.lock
index d80bce927..687ba6f00 100644
--- a/client/yarn.lock
+++ b/client/yarn.lock
@@ -5209,6 +5209,11 @@
   resolved "https://registry.yarnpkg.com/@types/unist/-/unist-2.0.7.tgz#5b06ad6894b236a1d2bd6b2f07850ca5c59cf4d6"
   integrity sha512-cputDpIbFgLUaGQn6Vqg3/YsJwxUwHLO13v3i5ouxT4lat0khip9AEWxtERujXV9wxIB1EyF97BSJFt6vpdI8g==
 
+"@types/uuid@^9.0.1":
+  version "9.0.2"
+  resolved "https://registry.yarnpkg.com/@types/uuid/-/uuid-9.0.2.tgz#ede1d1b1e451548d44919dc226253e32a6952c4b"
+  integrity sha512-kNnC1GFBLuhImSnV7w4njQkUiJi0ZXUycu1rUaouPqiKlXkh77JKgdRnTAp1x5eBwcIwbtI+3otwzuIDEuDoxQ==
+
 "@types/ws@^8.0.0", "@types/ws@^8.5.5":
   version "8.5.5"
   resolved "https://registry.yarnpkg.com/@types/ws/-/ws-8.5.5.tgz#af587964aa06682702ee6dcbc7be41a80e4b28eb"
@@ -18332,11 +18337,6 @@ uuid@^9.0.0:
   resolved "https://registry.yarnpkg.com/uuid/-/uuid-9.0.0.tgz#592f550650024a38ceb0c562f2f6aa435761efb5"
   integrity sha512-MXcSTerfPa4uqyzStbRoTgt5XIe3x5+42+q1sDuy3R5MDk66URdLMOZe5aPX/SQd+kuYAh0FdP/pO28IkQyTeg==
 
-uuidv7@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/uuidv7/-/uuidv7-1.0.0.tgz#b097dd0d48c5e48edf661199e033f10ebee08cda"
-  integrity sha512-XkvPwTtSmYwxIE1FSYQTYg79zHL1ZWV5vM/Qyl9ahXCU8enOPPA4bTjzvafvYUB7l2+miv4EqK/qEe75cOXIdA==
-
 v8-compile-cache@2.3.0:
   version "2.3.0"
   resolved "https://registry.yarnpkg.com/v8-compile-cache/-/v8-compile-cache-2.3.0.tgz#2de19618c66dc247dcfb6f99338035d8245a2cee"
diff --git a/cspell.json b/cspell.json
deleted file mode 100644
index 435a55f72..000000000
--- a/cspell.json
+++ /dev/null
@@ -1,16 +0,0 @@
-{
-    "version": "0.2",
-    "ignorePaths": [],
-    "dictionaryDefinitions": [
-        {
-            "name": "projectWords",
-            "path": "./project-words.txt"
-        },
-    ],
-    "dictionaries": [
-        "projectWords"
-    ],
-    "words": [],
-    "ignoreWords": [],
-    "import": []
-}
\ No newline at end of file
diff --git a/diff.it b/diff.it
new file mode 100644
index 000000000..3492a3e62
--- /dev/null
+++ b/diff.it
@@ -0,0 +1,4 @@
+[3883-use-stock-in-abstraction(diff-develop) 59ecf0287] diff develop
+ 1 file changed, 0 insertions(+), 0 deletions(-)
+ create mode 100644 diff.it
+branch '3883-use-stock-in-abstraction(diff-develop)' set up to track 'origin/3883-use-stock-in-abstraction(diff-develop)'.
diff --git a/project-words.txt b/project-words.txt
deleted file mode 100644
index 0e631bd3c..000000000
--- a/project-words.txt
+++ /dev/null
@@ -1,25 +0,0 @@
-upserted
-actix
-chrono
-coldchain
-conforma
-datasource
-datetime
-joinable
-clearable
-Masterlist
-msupply
-openmsupply
-reqwest
-rustls
-serde
-tera
-threadpool
-Upsert
-upserted
-upserts
-zustand
-parseable
-Waterpack
-anymap
-thiserror
diff --git a/server/.gitignore b/server/.gitignore
index be33598c5..8d690c54e 100644
--- a/server/.gitignore
+++ b/server/.gitignore
@@ -18,7 +18,6 @@ schema.graphql
 *.sqlite-shm
 # test template DB marker
 ___template_needs_update.marker
-___template_needs_update_pg.marker
 
 # directories used by the server at runtime
 plugins
diff --git a/server/Cargo.lock b/server/Cargo.lock
index f6f1ea03c..f40ba8066 100644
--- a/server/Cargo.lock
+++ b/server/Cargo.lock
@@ -601,12 +601,6 @@ dependencies = [
  "serde_json",
 ]
 
-[[package]]
-name = "assert_approx_eq"
-version = "1.1.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3c07dab4369547dbe5114677b33fbbf724971019f3818172d59a97a61c774ffd"
-
 [[package]]
 name = "astro-dnssd"
 version = "0.3.4"
@@ -936,12 +930,6 @@ dependencies = [
  "syn 2.0.59",
 ]
 
-[[package]]
-name = "atomic"
-version = "0.5.3"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c59bdb34bc650a32731b31bd8f0829cc15d24a708ee31559e0bb34f2bc320cba"
-
 [[package]]
 name = "atomic-waker"
 version = "1.1.2"
@@ -2310,7 +2298,6 @@ dependencies = [
  "graphql_clinician",
  "graphql_cold_chain",
  "graphql_core",
- "graphql_demographic",
  "graphql_form_schema",
  "graphql_general",
  "graphql_inventory_adjustment",
@@ -2328,7 +2315,6 @@ dependencies = [
  "graphql_stocktake",
  "graphql_stocktake_line",
  "graphql_types",
- "graphql_vaccine_course",
  "repository",
  "serde 1.0.198",
  "serde_json",
@@ -2464,26 +2450,6 @@ dependencies = [
  "util",
 ]
 
-[[package]]
-name = "graphql_demographic"
-version = "0.1.0"
-dependencies = [
- "actix-rt",
- "actix-web",
- "assert-json-diff",
- "async-graphql",
- "async-graphql-actix-web",
- "async-trait",
- "chrono",
- "graphql_core",
- "graphql_types",
- "repository",
- "serde 1.0.198",
- "serde_json",
- "service",
- "util",
-]
-
 [[package]]
 name = "graphql_form_schema"
 version = "0.1.0"
@@ -2829,26 +2795,6 @@ dependencies = [
  "util",
 ]
 
-[[package]]
-name = "graphql_vaccine_course"
-version = "0.1.0"
-dependencies = [
- "actix-rt",
- "actix-web",
- "assert-json-diff",
- "async-graphql",
- "async-graphql-actix-web",
- "async-trait",
- "chrono",
- "graphql_core",
- "graphql_types",
- "repository",
- "serde 1.0.198",
- "serde_json",
- "service",
- "util",
-]
-
 [[package]]
 name = "h2"
 version = "0.3.26"
@@ -5161,7 +5107,6 @@ dependencies = [
  "actix-web",
  "anyhow",
  "assert-json-diff",
- "assert_approx_eq",
  "async-trait",
  "bcrypt",
  "chrono",
@@ -6058,7 +6003,6 @@ version = "1.8.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "a183cf7feeba97b4dd1c0d46788634f6221d87fa961b305bed08c851829efcc0"
 dependencies = [
- "atomic",
  "getrandom",
 ]
 
diff --git a/server/README.md b/server/README.md
index 0b05c571c..c3231434c 100644
--- a/server/README.md
+++ b/server/README.md
@@ -103,8 +103,7 @@ Explore API available on `http://localhost:8000/graphql` with build in playgroun
 
 Open mSupply server can be launched in both modes, this is controlled via `Site is open mSupply central server` configuration in legacy mSupply site settings, more info in [Sync Docs](https://github.com/msupply-foundation/open-msupply/blob/develop/server/service/src/sync/README.md#open-msupply-central-server) and [Integration Test Docs](https://github.com/msupply-foundation/open-msupply/blob/develop/server/service/src/sync/test/integration/README.md#4-open-msupply-central-server).
 
-From version 2.0 omSupply would require both legacy and omSupply central server for full configuration/synchronisation. To start both omSupply central and omSupply remote:
-
+From version 2.0 omSupply would require both legacy and omSupply central server for full configuration/syncrhonisation. To start both omSupply central and omSupply remote:
 - Create two sites as per [above "Set up sync with mSupply central" instructions](https://github.com/msupply-foundation/open-msupply/blob/develop/server/service/src/sync/test/integration/README.md#4-open-msupply-central-server)
 - Configure one site to be central server by checking `Site is open mSupply central server` and entering the URL with which remote sites can reach this site in the field `This site url`
 - `cargo run` twice but change port, database and sync settings in yaml file or overwrite with env variables
@@ -266,10 +265,6 @@ cargo test --features postgres
 
 See [Sync Integration Tests](service/src/sync/test/integration/README.md)
 
-Note, to speed-up tests database templates are used (Sqlite + Postrgres), e.g. to reuse fully migrated databases from previous tests.
-To disable this you can set the environment variable `MSUPPLY_NO_TEST_DB_TEMPLATE=true`.
-However, in general this should not be needed but might be useful if you suspect a bug in the test template code.
-
 ## Building docs
 
 Docs are built via github action, but can build local version with docker: [how to build docs locally](docker/zola_docs/README.md)
diff --git a/server/cli/src/refresh_dates.rs b/server/cli/src/refresh_dates.rs
index f1af52982..e2268862b 100644
--- a/server/cli/src/refresh_dates.rs
+++ b/server/cli/src/refresh_dates.rs
@@ -107,8 +107,6 @@ fn get_date_fields() -> Vec<TableAndFieldName> {
         ("currency", "date_updated"),
         ("asset", "installation_date"),
         ("asset", "replacement_date"),
-        ("asset", "warranty_start"),
-        ("asset", "warranty_end"),
     ]
     .iter()
     .map(|(table_name, field_name)| TableAndFieldName {
@@ -609,7 +607,6 @@ mod tests {
 
         let invoice1_result = InvoiceRowRepository::new(&connection)
             .find_one_by_id(&invoice1().id)
-            .unwrap()
             .unwrap();
 
         assert_eq!(
@@ -625,7 +622,6 @@ mod tests {
 
         let invoice2_result = InvoiceRowRepository::new(&connection)
             .find_one_by_id(&invoice2().id)
-            .unwrap()
             .unwrap();
 
         assert_eq!(
@@ -647,7 +643,6 @@ mod tests {
 
         let stock_line1_result = StockLineRowRepository::new(&connection)
             .find_one_by_id(&stock_line1().id)
-            .unwrap()
             .unwrap();
 
         assert_eq!(
diff --git a/server/graphql/Cargo.toml b/server/graphql/Cargo.toml
index 11d77e2e4..e82610ae2 100644
--- a/server/graphql/Cargo.toml
+++ b/server/graphql/Cargo.toml
@@ -15,14 +15,12 @@ util = { path = "../util" }
 graphql_core = { path = "core" }
 
 graphql_asset = { path = "asset" }
-graphql_demographic = {path = "demographic" }
 graphql_general = { path = "general" }
 graphql_cold_chain = { path = "cold_chain" }
 graphql_asset_catalogue = { path = "asset_catalogue" }
 graphql_inventory_adjustment = { path = "inventory_adjustment" }
 graphql_invoice = { path = "invoice" }
 graphql_invoice_line = { path = "invoice_line" }
-graphql_vaccine_course = { path = "vaccine_course" }
 graphql_location = { path = "location" }
 graphql_pack_variant = { path = "pack_variant" }
 graphql_programs = { path = "programs" }
diff --git a/server/graphql/asset/src/lib.rs b/server/graphql/asset/src/lib.rs
index 1fc06b790..48c039f72 100644
--- a/server/graphql/asset/src/lib.rs
+++ b/server/graphql/asset/src/lib.rs
@@ -1,8 +1,7 @@
 mod mutations;
 use self::mutations::*;
-pub mod logs;
-pub mod property;
-pub mod types;
+mod logs;
+use self::logs::*;
 
 use async_graphql::*;
 use graphql_core::{
@@ -10,9 +9,15 @@ use graphql_core::{
     standard_graphql_error::{validate_auth, StandardGraphqlError},
     ContextExt,
 };
+pub mod types;
 use repository::{assets::asset::AssetFilter, PaginationOption};
 use service::auth::{Resource, ResourceAccessRequest};
-
+use types::AssetLogFilterInput;
+use types::AssetLogReasonFilterInput;
+use types::AssetLogReasonSortInput;
+use types::AssetLogReasonsResponse;
+use types::AssetLogSortInput;
+use types::AssetLogsResponse;
 use types::{AssetConnector, AssetFilterInput, AssetSortInput, AssetsResponse};
 
 #[derive(Default, Clone)]
@@ -92,6 +97,76 @@ impl AssetMutations {
     }
 }
 
+#[derive(Default, Clone)]
+pub struct AssetLogQueries;
+
+#[Object]
+impl AssetLogQueries {
+    async fn asset_logs(
+        &self,
+        ctx: &Context<'_>,
+        store_id: String,
+        page: Option<PaginationInput>,
+        filter: Option<AssetLogFilterInput>,
+        sort: Option<Vec<AssetLogSortInput>>,
+    ) -> Result<AssetLogsResponse> {
+        asset_logs(ctx, store_id, page, filter, sort)
+    }
+}
+
+#[derive(Default, Clone)]
+pub struct AssetLogMutations;
+
+#[Object]
+impl AssetLogMutations {
+    async fn insert_asset_log(
+        &self,
+        ctx: &Context<'_>,
+        store_id: String,
+        input: InsertAssetLogInput,
+    ) -> Result<InsertAssetLogResponse> {
+        insert_asset_log(ctx, &store_id, input)
+    }
+}
+
+#[derive(Default, Clone)]
+pub struct AssetLogReasonQueries;
+
+#[Object]
+impl AssetLogReasonQueries {
+    async fn asset_log_reasons(
+        &self,
+        ctx: &Context<'_>,
+        store_id: String,
+        page: Option<PaginationInput>,
+        filter: Option<AssetLogReasonFilterInput>,
+        sort: Option<Vec<AssetLogReasonSortInput>>,
+    ) -> Result<AssetLogReasonsResponse> {
+        asset_log_reasons(ctx, store_id, page, filter, sort)
+    }
+}
+
+#[derive(Default, Clone)]
+pub struct AssetLogReasonMutations;
+
+#[Object]
+impl AssetLogReasonMutations {
+    async fn insert_asset_log_reason(
+        &self,
+        ctx: &Context<'_>,
+        input: InsertAssetLogReasonInput,
+    ) -> Result<InsertAssetLogReasonResponse> {
+        insert_asset_log_reason(ctx, input)
+    }
+    async fn delete_log_reason(
+        &self,
+        ctx: &Context<'_>,
+        reason_id: String,
+    ) -> Result<DeleteAssetLogReasonResponse> {
+        delete_log_reason(ctx, &reason_id)
+    }
+}
+
 #[cfg(test)]
 mod test {
     use async_graphql::EmptyMutation;
diff --git a/server/graphql/asset/src/logs/insert.rs b/server/graphql/asset/src/logs/insert.rs
index af28f2851..801c96222 100644
--- a/server/graphql/asset/src/logs/insert.rs
+++ b/server/graphql/asset/src/logs/insert.rs
@@ -133,7 +133,7 @@ mod test {
         service_provider::{ServiceContext, ServiceProvider},
     };
 
-    use crate::logs::AssetLogMutations;
+    use crate::AssetLogMutations;
 
     type InsertAssetLogMethod =
         dyn Fn(InsertAssetLog) -> Result<AssetLog, InsertAssetLogError> + Sync + Send;
diff --git a/server/graphql/asset/src/logs/insert_reason.rs b/server/graphql/asset/src/logs/insert_reason.rs
index 77f31b597..162ea352b 100644
--- a/server/graphql/asset/src/logs/insert_reason.rs
+++ b/server/graphql/asset/src/logs/insert_reason.rs
@@ -120,7 +120,7 @@ mod test {
         service_provider::{ServiceContext, ServiceProvider},
     };
 
-    use crate::logs::AssetLogReasonMutations;
+    use crate::AssetLogReasonMutations;
 
     type InsertAssetLogReasonMethod = dyn Fn(InsertAssetLogReason) -> Result<AssetLogReason, InsertAssetLogReasonError>
         + Sync
diff --git a/server/graphql/asset/src/logs/mod.rs b/server/graphql/asset/src/logs/mod.rs
index 020830a0d..536972c69 100644
--- a/server/graphql/asset/src/logs/mod.rs
+++ b/server/graphql/asset/src/logs/mod.rs
@@ -8,82 +8,3 @@ mod query_reason;
 pub use query_reason::*;
 mod delete_reason;
 pub use delete_reason::*;
-
-use crate::types::AssetLogFilterInput;
-use crate::types::AssetLogReasonFilterInput;
-use crate::types::AssetLogReasonSortInput;
-use crate::types::AssetLogReasonsResponse;
-use crate::types::AssetLogSortInput;
-use crate::types::AssetLogsResponse;
-use async_graphql::*;
-use graphql_core::pagination::PaginationInput;
-
-#[derive(Default, Clone)]
-pub struct AssetLogQueries;
-
-#[Object]
-impl AssetLogQueries {
-    async fn asset_logs(
-        &self,
-        ctx: &Context<'_>,
-        store_id: String,
-        page: Option<PaginationInput>,
-        filter: Option<AssetLogFilterInput>,
-        sort: Option<Vec<AssetLogSortInput>>,
-    ) -> Result<AssetLogsResponse> {
-        asset_logs(ctx, store_id, page, filter, sort)
-    }
-}
-
-#[derive(Default, Clone)]
-pub struct AssetLogMutations;
-
-#[Object]
-impl AssetLogMutations {
-    async fn insert_asset_log(
-        &self,
-        ctx: &Context<'_>,
-        store_id: String,
-        input: InsertAssetLogInput,
-    ) -> Result<InsertAssetLogResponse> {
-        insert_asset_log(ctx, &store_id, input)
-    }
-}
-
-#[derive(Default, Clone)]
-pub struct AssetLogReasonQueries;
-
-#[Object]
-impl AssetLogReasonQueries {
-    async fn asset_log_reasons(
-        &self,
-        ctx: &Context<'_>,
-        store_id: String,
-        page: Option<PaginationInput>,
-        filter: Option<AssetLogReasonFilterInput>,
-        sort: Option<Vec<AssetLogReasonSortInput>>,
-    ) -> Result<AssetLogReasonsResponse> {
-        asset_log_reasons(ctx, store_id, page, filter, sort)
-    }
-}
-
-#[derive(Default, Clone)]
-pub struct AssetLogReasonMutations;
-
-#[Object]
-impl AssetLogReasonMutations {
-    async fn insert_asset_log_reason(
-        &self,
-        ctx: &Context<'_>,
-        input: InsertAssetLogReasonInput,
-    ) -> Result<InsertAssetLogReasonResponse> {
-        insert_asset_log_reason(ctx, input)
-    }
-    async fn delete_log_reason(
-        &self,
-        ctx: &Context<'_>,
-        reason_id: String,
-    ) -> Result<DeleteAssetLogReasonResponse> {
-        delete_log_reason(ctx, &reason_id)
-    }
-}
diff --git a/server/graphql/asset/src/mutations/insert.rs b/server/graphql/asset/src/mutations/insert.rs
index 524f36155..9b0158534 100644
--- a/server/graphql/asset/src/mutations/insert.rs
+++ b/server/graphql/asset/src/mutations/insert.rs
@@ -81,11 +81,6 @@ pub struct InsertAssetInput {
     pub type_id: Option<String>,
     pub installation_date: Option<NaiveDate>,
     pub replacement_date: Option<NaiveDate>,
-    pub properties: Option<String>,
-    pub donor_name_id: Option<String>,
-    pub warranty_start: Option<NaiveDate>,
-    pub warranty_end: Option<NaiveDate>,
-    pub needs_replacement: Option<bool>,
 }
 
 impl From<InsertAssetInput> for InsertAsset {
@@ -102,11 +97,6 @@ impl From<InsertAssetInput> for InsertAsset {
             category_id,
             class_id,
             type_id,
-            properties,
-            donor_name_id,
-            warranty_start,
-            warranty_end,
-            needs_replacement,
         }: InsertAssetInput,
     ) -> Self {
         InsertAsset {
@@ -121,11 +111,6 @@ impl From<InsertAssetInput> for InsertAsset {
             category_id,
             class_id,
             type_id,
-            properties,
-            donor_name_id,
-            warranty_start,
-            warranty_end,
-            needs_replacement,
         }
     }
 }
diff --git a/server/graphql/asset/src/mutations/update.rs b/server/graphql/asset/src/mutations/update.rs
index 1ae6dfa57..2860de8fb 100644
--- a/server/graphql/asset/src/mutations/update.rs
+++ b/server/graphql/asset/src/mutations/update.rs
@@ -56,11 +56,6 @@ pub struct UpdateAssetInput {
     pub installation_date: Option<NullableUpdateInput<NaiveDate>>,
     pub replacement_date: Option<NullableUpdateInput<NaiveDate>>,
     pub location_ids: Option<Vec<String>>,
-    pub properties: Option<String>,
-    pub donor_name_id: Option<NullableUpdateInput<String>>,
-    pub warranty_start: Option<NullableUpdateInput<NaiveDate>>,
-    pub warranty_end: Option<NullableUpdateInput<NaiveDate>>,
-    pub needs_replacement: Option<bool>,
 }
 
 impl From<UpdateAssetInput> for UpdateAsset {
@@ -75,11 +70,6 @@ impl From<UpdateAssetInput> for UpdateAsset {
             installation_date,
             replacement_date,
             location_ids,
-            properties,
-            donor_name_id,
-            warranty_start,
-            warranty_end,
-            needs_replacement,
         }: UpdateAssetInput,
     ) -> Self {
         UpdateAsset {
@@ -102,17 +92,6 @@ impl From<UpdateAssetInput> for UpdateAsset {
                 value: replacement_date.value,
             }),
             location_ids,
-            properties,
-            donor_name_id: donor_name_id.map(|donor_name_id| NullableUpdate {
-                value: donor_name_id.value,
-            }),
-            warranty_start: warranty_start.map(|warranty_start| NullableUpdate {
-                value: warranty_start.value,
-            }),
-            warranty_end: warranty_end.map(|warranty_end| NullableUpdate {
-                value: warranty_end.value,
-            }),
-            needs_replacement,
         }
     }
 }
diff --git a/server/graphql/asset/src/property/mod.rs b/server/graphql/asset/src/property/mod.rs
deleted file mode 100644
index 25d6297bc..000000000
--- a/server/graphql/asset/src/property/mod.rs
+++ /dev/null
@@ -1,20 +0,0 @@
-mod query;
-pub use query::*;
-
-use async_graphql::*;
-
-use crate::types::{AssetPropertiesResponse, AssetPropertyFilterInput};
-
-#[derive(Default, Clone)]
-pub struct AssetPropertiesQueries;
-
-#[Object]
-impl AssetPropertiesQueries {
-    pub async fn asset_properties(
-        &self,
-        ctx: &Context<'_>,
-        #[graphql(desc = "Filter options")] filter: Option<AssetPropertyFilterInput>,
-    ) -> Result<AssetPropertiesResponse> {
-        asset_properties(ctx, filter)
-    }
-}
diff --git a/server/graphql/asset/src/property/query.rs b/server/graphql/asset/src/property/query.rs
deleted file mode 100644
index a8390467f..000000000
--- a/server/graphql/asset/src/property/query.rs
+++ /dev/null
@@ -1,26 +0,0 @@
-use async_graphql::*;
-use graphql_core::{standard_graphql_error::StandardGraphqlError, ContextExt};
-
-use repository::assets::asset_property::AssetPropertyFilter;
-
-use crate::types::{AssetPropertiesResponse, AssetPropertyConnector, AssetPropertyFilterInput};
-
-pub fn asset_properties(
-    ctx: &Context<'_>,
-    filter: Option<AssetPropertyFilterInput>,
-) -> Result<AssetPropertiesResponse> {
-    let service_provider = ctx.service_provider();
-    let service_context = service_provider.basic_context()?;
-
-    let assets = service_provider
-        .asset_service
-        .get_asset_properties(
-            &service_context.connection,
-            filter.map(AssetPropertyFilter::from),
-        )
-        .map_err(StandardGraphqlError::from_list_error)?;
-
-    Ok(AssetPropertiesResponse::Response(
-        AssetPropertyConnector::from_domain(assets),
-    ))
-}
diff --git a/server/graphql/asset/src/types.rs b/server/graphql/asset/src/types.rs
new file mode 100644
index 000000000..6c6b77438
--- /dev/null
+++ b/server/graphql/asset/src/types.rs
@@ -0,0 +1,757 @@
+use std::vec;
+
+use async_graphql::dataloader::DataLoader;
+use async_graphql::*;
+use graphql_asset_catalogue::types::asset_catalogue_item::AssetCatalogueItemNode;
+use graphql_asset_catalogue::types::asset_catalogue_property::PropertyNodeValueType;
+use graphql_asset_catalogue::types::asset_category::AssetCategoryNode;
+use graphql_asset_catalogue::types::asset_class::AssetClassNode;
+use graphql_asset_catalogue::types::asset_type::AssetTypeNode;
+use graphql_core::generic_filters::{
+    DateFilterInput, DatetimeFilterInput, EqualFilterStringInput, StringFilterInput,
+};
+use graphql_core::loader::SyncFileReferenceLoader;
+use graphql_core::loader::{
+    AssetCatalogueItemLoader, AssetCatalogueItemPropertyLoader, AssetCategoryLoader,
+    AssetClassLoader, AssetLocationLoader, AssetTypeLoader, StoreByIdLoader, UserLoader,
+};
+use graphql_core::loader::{AssetLogReasonLoader, AssetStatusLogLoader};
+use graphql_core::simple_generic_errors::NodeError;
+use graphql_core::{map_filter, ContextExt};
+use graphql_types::types::{LocationConnector, StoreNode, SyncFileReferenceConnector, UserNode};
+
+use repository::asset_catalogue_item_property::AssetCatalogueItemPropertyValue;
+use repository::asset_catalogue_item_property_row::AssetCatalogueItemPropertyRow;
+use repository::asset_catalogue_property_row::AssetCataloguePropertyRow;
+use repository::asset_log_reason::{
+    AssetLogReason, AssetLogReasonFilter, AssetLogReasonSort, AssetLogReasonSortField,
+};
+use repository::assets::asset::AssetSortField;
+use repository::assets::asset_log::{AssetLog, AssetLogFilter, AssetLogSort, AssetLogSortField};
+
+use repository::{
+    assets::asset::{Asset, AssetFilter, AssetSort},
+    EqualFilter,
+};
+use repository::{DateFilter, DatetimeFilter, StringFilter};
+use service::{usize_to_u32, ListResult};
+
+use repository::asset_log_row::AssetLogStatus;
+use serde::Serialize;
+
+#[derive(Enum, Copy, Clone, PartialEq, Eq)]
+#[graphql(rename_items = "camelCase")]
+pub enum AssetSortFieldInput {
+    SerialNumber,
+    InstallationDate,
+    ReplacementDate,
+    ModifiedDatetime,
+    AssetNumber,
+    Store,
+}
+
+#[derive(InputObject)]
+pub struct AssetSortInput {
+    /// Sort query result by `key`
+    key: AssetSortFieldInput,
+    /// Sort query result is sorted descending or ascending (if not provided the default is
+    /// ascending)
+    desc: Option<bool>,
+}
+
+#[derive(InputObject, Clone)]
+pub struct AssetFilterInput {
+    pub notes: Option<StringFilterInput>,
+    pub asset_number: Option<StringFilterInput>,
+    pub id: Option<EqualFilterStringInput>,
+    pub serial_number: Option<StringFilterInput>,
+    pub class_id: Option<EqualFilterStringInput>,
+    pub category_id: Option<EqualFilterStringInput>,
+    pub type_id: Option<EqualFilterStringInput>,
+    pub catalogue_item_id: Option<EqualFilterStringInput>,
+    pub is_non_catalogue: Option<bool>,
+    pub installation_date: Option<DateFilterInput>,
+    pub replacement_date: Option<DateFilterInput>,
+    pub store: Option<StringFilterInput>,
+    pub functional_status: Option<EqualFilterStatusInput>,
+}
+
+impl From<AssetFilterInput> for AssetFilter {
+    fn from(f: AssetFilterInput) -> Self {
+        AssetFilter {
+            notes: f.notes.map(StringFilter::from),
+            asset_number: f.asset_number.map(StringFilter::from),
+            id: f.id.map(EqualFilter::from),
+            serial_number: f.serial_number.map(StringFilter::from),
+            class_id: f.class_id.map(EqualFilter::from),
+            category_id: f.category_id.map(EqualFilter::from),
+            type_id: f.type_id.map(EqualFilter::from),
+            catalogue_item_id: f.catalogue_item_id.map(EqualFilter::from),
+            installation_date: f.installation_date.map(DateFilter::from),
+            replacement_date: f.replacement_date.map(DateFilter::from),
+            is_non_catalogue: f.is_non_catalogue,
+            store: f.store.map(StringFilter::from),
+            functional_status: f
+                .functional_status
+                .map(|t| map_filter!(t, AssetLogStatusInput::to_domain)),
+        }
+    }
+}
+
+#[derive(PartialEq, Debug)]
+pub struct AssetNode {
+    pub asset: Asset,
+}
+
+#[derive(SimpleObject)]
+pub struct AssetConnector {
+    total_count: u32,
+    nodes: Vec<AssetNode>,
+}
+
+impl AssetConnector {
+    pub fn new() -> AssetConnector {
+        AssetConnector {
+            total_count: 0,
+            nodes: Vec::<AssetNode>::new(),
+        }
+    }
+}
+
+#[derive(PartialEq, Debug)]
+pub struct AssetCatalogueItemPropertyValueNode {
+    pub value: AssetCatalogueItemPropertyRow,
+    pub property: AssetCataloguePropertyRow,
+}
+
+#[derive(SimpleObject)]
+pub struct AssetCatalogueItemPropertyConnector {
+    nodes: Vec<AssetCatalogueItemPropertyValueNode>,
+}
+
+#[Object]
+impl AssetCatalogueItemPropertyValueNode {
+    pub async fn id(&self) -> &str {
+        &self.value().id
+    }
+    pub async fn catalogue_item_id(&self) -> &str {
+        &self.value().catalogue_item_id
+    }
+    pub async fn catalogue_property_id(&self) -> &str {
+        &self.value().catalogue_property_id
+    }
+    pub async fn name(&self) -> &str {
+        &self.property().name
+    }
+    pub async fn value_type(&self) -> PropertyNodeValueType {
+        PropertyNodeValueType::from_domain(&self.property().value_type)
+    }
+    pub async fn value_string(&self) -> &Option<String> {
+        &self.value().value_string
+    }
+    pub async fn value_int(&self) -> &Option<i32> {
+        &self.value().value_int
+    }
+    pub async fn value_float(&self) -> &Option<f64> {
+        &self.value().value_float
+    }
+    pub async fn value_bool(&self) -> &Option<bool> {
+        &self.value().value_bool
+    }
+}
+impl AssetCatalogueItemPropertyValueNode {
+    pub fn from_domain(
+        property_and_value: AssetCatalogueItemPropertyValue,
+    ) -> AssetCatalogueItemPropertyValueNode {
+        let AssetCatalogueItemPropertyValue { property, value } = property_and_value;
+        AssetCatalogueItemPropertyValueNode { property, value }
+    }
+
+    pub fn property(&self) -> &AssetCataloguePropertyRow {
+        &self.property
+    }
+
+    pub fn value(&self) -> &AssetCatalogueItemPropertyRow {
+        &self.value
+    }
+}
+
+impl AssetCatalogueItemPropertyConnector {
+    pub fn from_domain(
+        properties_and_values: Vec<AssetCatalogueItemPropertyValue>,
+    ) -> AssetCatalogueItemPropertyConnector {
+        AssetCatalogueItemPropertyConnector {
+            nodes: properties_and_values
+                .into_iter()
+                .map(AssetCatalogueItemPropertyValueNode::from_domain)
+                .collect(),
+        }
+    }
+
+    pub fn from_vec(
+        properties_and_values: Vec<AssetCatalogueItemPropertyValue>,
+    ) -> AssetCatalogueItemPropertyConnector {
+        AssetCatalogueItemPropertyConnector {
+            nodes: properties_and_values
+                .into_iter()
+                .map(AssetCatalogueItemPropertyValueNode::from_domain)
+                .collect(),
+        }
+    }
+}
+
+#[Object]
+impl AssetNode {
+    pub async fn id(&self) -> &str {
+        &self.row().id
+    }
+
+    pub async fn store_id(&self) -> &Option<String> {
+        &self.row().store_id
+    }
+
+    pub async fn notes(&self) -> &Option<String> {
+        &self.row().notes
+    }
+
+    pub async fn asset_number(&self) -> &Option<String> {
+        &self.row().asset_number
+    }
+
+    pub async fn serial_number(&self) -> &Option<String> {
+        &self.row().serial_number
+    }
+
+    pub async fn catalogue_item_id(&self) -> &Option<String> {
+        &self.row().catalogue_item_id
+    }
+
+    pub async fn installation_date(&self) -> &Option<chrono::NaiveDate> {
+        &self.row().installation_date
+    }
+
+    pub async fn replacement_date(&self) -> &Option<chrono::NaiveDate> {
+        &self.row().replacement_date
+    }
+
+    pub async fn created_datetime(&self) -> &chrono::NaiveDateTime {
+        &self.row().created_datetime
+    }
+
+    pub async fn modified_datetime(&self) -> &chrono::NaiveDateTime {
+        &self.row().modified_datetime
+    }
+
+    pub async fn store(&self, ctx: &Context<'_>) -> Result<Option<StoreNode>> {
+        let store_id = match &self.row().store_id {
+            Some(store_id) => store_id,
+            None => return Ok(None),
+        };
+
+        let loader = ctx.get_loader::<DataLoader<StoreByIdLoader>>();
+        Ok(loader
+            .load_one(store_id.clone())
+            .await?
+            .map(StoreNode::from_domain))
+    }
+
+    pub async fn catalogue_item(
+        &self,
+        ctx: &Context<'_>,
+    ) -> Result<Option<AssetCatalogueItemNode>> {
+        let catalogue_item_id = match &self.row().catalogue_item_id {
+            Some(catalogue_item_id) => catalogue_item_id,
+            None => return Ok(None),
+        };
+
+        let loader = ctx.get_loader::<DataLoader<AssetCatalogueItemLoader>>();
+        Ok(loader
+            .load_one(catalogue_item_id.clone())
+            .await?
+            .map(AssetCatalogueItemNode::from_domain))
+    }
+
+    pub async fn locations(&self, ctx: &Context<'_>) -> Result<LocationConnector> {
+        let asset_id = &self.row().id;
+        let loader = ctx.get_loader::<DataLoader<AssetLocationLoader>>();
+        let result_option = loader.load_one(asset_id.to_string()).await?;
+
+        let locations = LocationConnector::from_vec(result_option.unwrap_or(vec![]));
+
+        Ok(locations)
+    }
+
+    pub async fn documents(&self, ctx: &Context<'_>) -> Result<SyncFileReferenceConnector> {
+        let asset_id = &self.row().id;
+        let loader = ctx.get_loader::<DataLoader<SyncFileReferenceLoader>>();
+        let result_option = loader.load_one(asset_id.to_string()).await?;
+
+        let documents = SyncFileReferenceConnector::from_vec(result_option.unwrap_or(vec![]));
+
+        Ok(documents)
+    }
+
+    pub async fn properties(
+        &self,
+        ctx: &Context<'_>,
+    ) -> Result<Vec<AssetCatalogueItemPropertyValueNode>> {
+        let properties = match &self.row().catalogue_item_id {
+            Some(catalogue_item_id) => {
+                let loader = ctx.get_loader::<DataLoader<AssetCatalogueItemPropertyLoader>>();
+                let result_option = loader.load_one(catalogue_item_id.to_string()).await?;
+
+                result_option
+                    .unwrap_or(Vec::<AssetCatalogueItemPropertyValue>::new())
+                    .iter()
+                    .map(|p| AssetCatalogueItemPropertyValueNode::from_domain(p.to_owned()))
+                    .into_iter()
+                    .collect()
+            }
+            None => vec![],
+        };
+
+        Ok(properties)
+    }
+
+    pub async fn asset_category(&self, ctx: &Context<'_>) -> Result<Option<AssetCategoryNode>> {
+        let loader = ctx.get_loader::<DataLoader<AssetCategoryLoader>>();
+        let category_id = match self.row().asset_category_id.clone() {
+            Some(category_id) => category_id,
+            None => return Ok(None),
+        };
+
+        Ok(loader
+            .load_one(category_id)
+            .await?
+            .map(AssetCategoryNode::from_domain))
+    }
+
+    pub async fn asset_class(&self, ctx: &Context<'_>) -> Result<Option<AssetClassNode>> {
+        let loader = ctx.get_loader::<DataLoader<AssetClassLoader>>();
+        let class_id = match self.row().asset_class_id.clone() {
+            Some(class_id) => class_id,
+            None => return Ok(None),
+        };
+
+        Ok(loader
+            .load_one(class_id)
+            .await?
+            .map(AssetClassNode::from_domain))
+    }
+
+    pub async fn asset_type(&self, ctx: &Context<'_>) -> Result<Option<AssetTypeNode>> {
+        let loader = ctx.get_loader::<DataLoader<AssetTypeLoader>>();
+        let type_id = match self.row().asset_type_id.clone() {
+            Some(type_id) => type_id,
+            None => return Ok(None),
+        };
+
+        Ok(loader
+            .load_one(type_id)
+            .await?
+            .map(AssetTypeNode::from_domain))
+    }
+
+    pub async fn status_log(&self, ctx: &Context<'_>) -> Result<Option<AssetLogNode>> {
+        let asset_id = self.row().id.clone();
+        let loader = ctx.get_loader::<DataLoader<AssetStatusLogLoader>>();
+
+        Ok(loader
+            .load_one(asset_id.clone())
+            .await?
+            .map(AssetLogNode::from_domain))
+    }
+}
+
+#[derive(Union)]
+pub enum AssetsResponse {
+    Response(AssetConnector),
+}
+
+#[derive(Union)]
+pub enum AssetResponse {
+    Error(NodeError),
+    Response(AssetNode),
+}
+
+impl AssetNode {
+    pub fn from_domain(asset: Asset) -> AssetNode {
+        AssetNode { asset }
+    }
+
+    pub fn row(&self) -> &Asset {
+        &self.asset
+    }
+}
+
+impl AssetConnector {
+    pub fn from_domain(assets: ListResult<Asset>) -> AssetConnector {
+        AssetConnector {
+            total_count: assets.count,
+            nodes: assets
+                .rows
+                .into_iter()
+                .map(AssetNode::from_domain)
+                .collect(),
+        }
+    }
+
+    pub fn from_vec(assets: Vec<Asset>) -> AssetConnector {
+        AssetConnector {
+            total_count: usize_to_u32(assets.len()),
+            nodes: assets.into_iter().map(AssetNode::from_domain).collect(),
+        }
+    }
+}
+
+impl AssetSortInput {
+    pub fn to_domain(&self) -> AssetSort {
+        use AssetSortField as to;
+        use AssetSortFieldInput as from;
+        let key = match self.key {
+            from::SerialNumber => to::SerialNumber,
+            from::InstallationDate => to::InstallationDate,
+            from::ReplacementDate => to::ReplacementDate,
+            from::ModifiedDatetime => to::ModifiedDatetime,
+            from::AssetNumber => to::AssetNumber,
+            from::Store => to::Store,
+        };
+
+        AssetSort {
+            key,
+            desc: self.desc,
+        }
+    }
+}
+
+// Asset log types
+
+#[derive(Enum, Copy, Clone, PartialEq, Eq, Debug, Serialize)]
+#[serde(rename_all = "SCREAMING_SNAKE_CASE")] // only needed to be comparable in tests
+
+pub enum AssetLogStatusInput {
+    NotInUse,
+    Functioning,
+    FunctioningButNeedsAttention,
+    NotFunctioning,
+    Decommissioned,
+}
+
+impl AssetLogStatusInput {
+    pub fn to_domain(self) -> AssetLogStatus {
+        match self {
+            AssetLogStatusInput::NotInUse => AssetLogStatus::NotInUse,
+            AssetLogStatusInput::Functioning => AssetLogStatus::Functioning,
+            AssetLogStatusInput::FunctioningButNeedsAttention => {
+                AssetLogStatus::FunctioningButNeedsAttention
+            }
+            AssetLogStatusInput::NotFunctioning => AssetLogStatus::NotFunctioning,
+            AssetLogStatusInput::Decommissioned => AssetLogStatus::Decommissioned,
+        }
+    }
+}
+
+#[derive(Enum, Copy, Clone, PartialEq, Eq)]
+#[graphql(rename_items = "camelCase")]
+pub enum AssetLogSortFieldInput {
+    Status,
+    LogDatetime,
+}
+
+#[derive(InputObject)]
+pub struct AssetLogSortInput {
+    /// Sort query result by `key`
+    key: AssetLogSortFieldInput,
+    /// Sort query result is sorted descending or ascending (if not provided the default is
+    /// ascending)
+    desc: Option<bool>,
+}
+#[derive(InputObject, Clone)]
+
+pub struct AssetLogFilterInput {
+    pub id: Option<EqualFilterStringInput>,
+    pub asset_id: Option<EqualFilterStringInput>,
+    pub status: Option<EqualFilterStatusInput>,
+    pub log_datetime: Option<DatetimeFilterInput>,
+    pub user: Option<StringFilterInput>,
+    pub reason_id: Option<EqualFilterStringInput>,
+}
+
+impl From<AssetLogFilterInput> for AssetLogFilter {
+    fn from(f: AssetLogFilterInput) -> Self {
+        AssetLogFilter {
+            id: f.id.map(EqualFilter::from),
+            asset_id: f.asset_id.map(EqualFilter::from),
+            status: f
+                .status
+                .map(|s| map_filter!(s, AssetLogStatusInput::to_domain)),
+            log_datetime: f.log_datetime.map(DatetimeFilter::from),
+            user: f.user.map(StringFilter::from),
+            reason_id: f.reason_id.map(EqualFilter::from),
+        }
+    }
+}
+
+#[derive(InputObject, Clone)]
+pub struct EqualFilterStatusInput {
+    pub equal_to: Option<AssetLogStatusInput>,
+    pub equal_any: Option<Vec<AssetLogStatusInput>>,
+    pub not_equal_to: Option<AssetLogStatusInput>,
+}
+
+#[derive(Enum, Copy, Clone, PartialEq, Eq, Debug, Serialize)]
+#[serde(rename_all = "SCREAMING_SNAKE_CASE")] // only needed to be comparable in tests
+
+pub enum StatusType {
+    NotInUse,
+    Functioning,
+    FunctioningButNeedsAttention,
+    NotFunctioning,
+    Decommissioned,
+}
+impl StatusType {
+    pub fn from_domain(status: &AssetLogStatus) -> Self {
+        match status {
+            AssetLogStatus::NotInUse => StatusType::NotInUse,
+            AssetLogStatus::Functioning => StatusType::Functioning,
+            AssetLogStatus::FunctioningButNeedsAttention => {
+                StatusType::FunctioningButNeedsAttention
+            }
+            AssetLogStatus::NotFunctioning => StatusType::NotFunctioning,
+            AssetLogStatus::Decommissioned => StatusType::Decommissioned,
+        }
+    }
+}
+
+#[derive(PartialEq, Debug)]
+pub struct AssetLogNode {
+    pub asset_log: AssetLog,
+}
+
+#[derive(SimpleObject)]
+pub struct AssetLogConnector {
+    total_count: u32,
+    nodes: Vec<AssetLogNode>,
+}
+
+#[Object]
+impl AssetLogNode {
+    pub async fn id(&self) -> &str {
+        &self.row().id
+    }
+
+    pub async fn asset_id(&self) -> &str {
+        &self.row().asset_id
+    }
+
+    pub async fn user(&self, ctx: &Context<'_>) -> Result<Option<UserNode>> {
+        let user_id = &self.row().user_id;
+        let loader = ctx.get_loader::<DataLoader<UserLoader>>();
+        Ok(loader
+            .load_one(user_id.clone())
+            .await?
+            .map(UserNode::from_domain))
+    }
+
+    pub async fn status(&self) -> Option<StatusType> {
+        self.row().status.as_ref().map(StatusType::from_domain)
+    }
+
+    pub async fn comment(&self) -> &Option<String> {
+        &self.row().comment
+    }
+
+    pub async fn r#type(&self) -> &Option<String> {
+        &self.row().r#type
+    }
+
+    pub async fn reason(&self, ctx: &Context<'_>) -> Result<Option<AssetLogReasonNode>> {
+        match &self.row().reason_id {
+            Some(reason_id) => {
+                let loader = ctx.get_loader::<DataLoader<AssetLogReasonLoader>>();
+                Ok(loader
+                    .load_one(reason_id.clone())
+                    .await?
+                    .map(AssetLogReasonNode::from_domain))
+            }
+            None => Ok(None),
+        }
+    }
+
+    pub async fn log_datetime(&self) -> &chrono::NaiveDateTime {
+        &self.row().log_datetime
+    }
+
+    pub async fn documents(&self, ctx: &Context<'_>) -> Result<SyncFileReferenceConnector> {
+        let asset_log_id = &self.row().id;
+        let loader = ctx.get_loader::<DataLoader<SyncFileReferenceLoader>>();
+        let result_option = loader.load_one(asset_log_id.to_string()).await?;
+
+        let documents = SyncFileReferenceConnector::from_vec(result_option.unwrap_or(vec![]));
+
+        Ok(documents)
+    }
+}
+
+#[derive(Union)]
+pub enum AssetLogsResponse {
+    Response(AssetLogConnector),
+}
+
+#[derive(Union)]
+pub enum AssetLogResponse {
+    Error(NodeError),
+    Response(AssetLogNode),
+}
+
+impl AssetLogNode {
+    pub fn from_domain(asset_log: AssetLog) -> AssetLogNode {
+        AssetLogNode { asset_log }
+    }
+
+    pub fn row(&self) -> &AssetLog {
+        &self.asset_log
+    }
+}
+
+impl AssetLogConnector {
+    pub fn from_domain(assets: ListResult<AssetLog>) -> AssetLogConnector {
+        AssetLogConnector {
+            total_count: assets.count,
+            nodes: assets
+                .rows
+                .into_iter()
+                .map(AssetLogNode::from_domain)
+                .collect(),
+        }
+    }
+}
+
+impl AssetLogSortInput {
+    pub fn to_domain(&self) -> AssetLogSort {
+        use AssetLogSortField as to;
+        use AssetLogSortFieldInput as from;
+        let key = match self.key {
+            from::Status => to::Status,
+            from::LogDatetime => to::LogDatetime,
+        };
+
+        AssetLogSort {
+            key,
+            desc: self.desc,
+        }
+    }
+}
+
+// asset log reason
+
+#[derive(Enum, Copy, Clone, PartialEq, Eq)]
+#[graphql(rename_items = "camelCase")]
+pub enum AssetLogReasonSortFieldInput {
+    Status,
+}
+
+#[derive(InputObject)]
+pub struct AssetLogReasonSortInput {
+    /// Sort query result by `key`
+    key: AssetLogReasonSortFieldInput,
+    /// Sort query result is sorted descending or ascending (if not provided the default is
+    /// ascending)
+    desc: Option<bool>,
+}
+
+#[derive(PartialEq, Debug)]
+pub struct AssetLogReasonNode {
+    pub asset_log_reason: AssetLogReason,
+}
+
+#[derive(SimpleObject)]
+pub struct AssetLogReasonConnector {
+    total_count: u32,
+    nodes: Vec<AssetLogReasonNode>,
+}
+
+#[Object]
+impl AssetLogReasonNode {
+    pub async fn id(&self) -> &str {
+        &self.row().id
+    }
+
+    pub async fn asset_log_status(&self) -> StatusType {
+        let asset_log_status = &self.row().asset_log_status;
+        StatusType::from_domain(&asset_log_status)
+    }
+
+    pub async fn reason(&self) -> &str {
+        &self.row().reason
+    }
+}
+
+#[derive(Union)]
+pub enum AssetLogReasonsResponse {
+    Response(AssetLogReasonConnector),
+}
+
+#[derive(Union)]
+pub enum AssetLogReasonResponse {
+    Error(NodeError),
+    Response(AssetLogReasonNode),
+}
+
+#[derive(InputObject, Clone)]
+
+pub struct AssetLogReasonFilterInput {
+    pub id: Option<EqualFilterStringInput>,
+    pub asset_log_status: Option<EqualFilterStatusInput>,
+    pub reason: Option<StringFilterInput>,
+}
+
+impl From<AssetLogReasonFilterInput> for AssetLogReasonFilter {
+    fn from(f: AssetLogReasonFilterInput) -> Self {
+        AssetLogReasonFilter {
+            id: f.id.map(EqualFilter::from),
+            asset_log_status: f
+                .asset_log_status
+                .map(|s| map_filter!(s, AssetLogStatusInput::to_domain)),
+            reason: f.reason.map(StringFilter::from),
+        }
+    }
+}
+
+impl AssetLogReasonNode {
+    pub fn from_domain(asset_log_reason: AssetLogReason) -> AssetLogReasonNode {
+        AssetLogReasonNode { asset_log_reason }
+    }
+
+    pub fn row(&self) -> &AssetLogReason {
+        &self.asset_log_reason
+    }
+}
+
+impl AssetLogReasonConnector {
+    pub fn from_domain(assets: ListResult<AssetLogReason>) -> AssetLogReasonConnector {
+        AssetLogReasonConnector {
+            total_count: assets.count,
+            nodes: assets
+                .rows
+                .into_iter()
+                .map(AssetLogReasonNode::from_domain)
+                .collect(),
+        }
+    }
+}
+
+impl AssetLogReasonSortInput {
+    pub fn to_domain(&self) -> AssetLogReasonSort {
+        use AssetLogReasonSortField as to;
+        use AssetLogReasonSortFieldInput as from;
+        let key = match self.key {
+            from::Status => to::AssetLogStatus,
+        };
+
+        AssetLogReasonSort {
+            key,
+            desc: self.desc,
+        }
+    }
+}
diff --git a/server/graphql/asset/src/types/asset.rs b/server/graphql/asset/src/types/asset.rs
deleted file mode 100644
index 876c9e778..000000000
--- a/server/graphql/asset/src/types/asset.rs
+++ /dev/null
@@ -1,368 +0,0 @@
-use std::vec;
-
-use async_graphql::dataloader::DataLoader;
-use async_graphql::*;
-use chrono::NaiveDate;
-use graphql_asset_catalogue::types::asset_catalogue_item::AssetCatalogueItemNode;
-use graphql_asset_catalogue::types::asset_category::AssetCategoryNode;
-use graphql_asset_catalogue::types::asset_class::AssetClassNode;
-use graphql_asset_catalogue::types::asset_type::AssetTypeNode;
-use graphql_core::generic_filters::{DateFilterInput, EqualFilterStringInput, StringFilterInput};
-use graphql_core::loader::{
-    AssetCatalogueItemLoader, AssetCategoryLoader, AssetClassLoader, AssetLocationLoader,
-    AssetTypeLoader, StoreByIdLoader,
-};
-use graphql_core::loader::{AssetStatusLogLoader, NameByIdLoader};
-use graphql_core::loader::{NameByIdLoaderInput, SyncFileReferenceLoader};
-use graphql_core::simple_generic_errors::NodeError;
-use graphql_core::{map_filter, ContextExt};
-use graphql_types::types::{LocationConnector, NameNode, StoreNode, SyncFileReferenceConnector};
-
-use repository::assets::asset::AssetSortField;
-
-use repository::{
-    assets::asset::{Asset, AssetFilter, AssetSort},
-    EqualFilter,
-};
-use repository::{DateFilter, StringFilter};
-use service::{usize_to_u32, ListResult};
-
-use super::{AssetLogNode, AssetLogStatusInput, EqualFilterStatusInput};
-
-#[derive(Enum, Copy, Clone, PartialEq, Eq)]
-#[graphql(rename_items = "camelCase")]
-pub enum AssetSortFieldInput {
-    SerialNumber,
-    InstallationDate,
-    ReplacementDate,
-    ModifiedDatetime,
-    AssetNumber,
-    Store,
-}
-
-#[derive(InputObject)]
-pub struct AssetSortInput {
-    /// Sort query result by `key`
-    key: AssetSortFieldInput,
-    /// Sort query result is sorted descending or ascending (if not provided the default is
-    /// ascending)
-    desc: Option<bool>,
-}
-
-#[derive(InputObject, Clone)]
-pub struct AssetFilterInput {
-    pub notes: Option<StringFilterInput>,
-    pub asset_number: Option<StringFilterInput>,
-    pub id: Option<EqualFilterStringInput>,
-    pub serial_number: Option<StringFilterInput>,
-    pub class_id: Option<EqualFilterStringInput>,
-    pub category_id: Option<EqualFilterStringInput>,
-    pub type_id: Option<EqualFilterStringInput>,
-    pub catalogue_item_id: Option<EqualFilterStringInput>,
-    pub is_non_catalogue: Option<bool>,
-    pub installation_date: Option<DateFilterInput>,
-    pub replacement_date: Option<DateFilterInput>,
-    pub store: Option<StringFilterInput>,
-    pub functional_status: Option<EqualFilterStatusInput>,
-}
-
-impl From<AssetFilterInput> for AssetFilter {
-    fn from(f: AssetFilterInput) -> Self {
-        AssetFilter {
-            notes: f.notes.map(StringFilter::from),
-            asset_number: f.asset_number.map(StringFilter::from),
-            id: f.id.map(EqualFilter::from),
-            serial_number: f.serial_number.map(StringFilter::from),
-            class_id: f.class_id.map(EqualFilter::from),
-            category_id: f.category_id.map(EqualFilter::from),
-            type_id: f.type_id.map(EqualFilter::from),
-            catalogue_item_id: f.catalogue_item_id.map(EqualFilter::from),
-            installation_date: f.installation_date.map(DateFilter::from),
-            replacement_date: f.replacement_date.map(DateFilter::from),
-            is_non_catalogue: f.is_non_catalogue,
-            store: f.store.map(StringFilter::from),
-            functional_status: f
-                .functional_status
-                .map(|t| map_filter!(t, AssetLogStatusInput::to_domain)),
-        }
-    }
-}
-
-#[derive(PartialEq, Debug)]
-pub struct AssetNode {
-    pub asset: Asset,
-}
-
-#[derive(SimpleObject)]
-pub struct AssetConnector {
-    total_count: u32,
-    nodes: Vec<AssetNode>,
-}
-
-impl AssetConnector {
-    pub fn new() -> AssetConnector {
-        AssetConnector {
-            total_count: 0,
-            nodes: Vec::<AssetNode>::new(),
-        }
-    }
-}
-
-#[Object]
-impl AssetNode {
-    pub async fn id(&self) -> &str {
-        &self.row().id
-    }
-
-    pub async fn store_id(&self) -> &Option<String> {
-        &self.row().store_id
-    }
-
-    pub async fn notes(&self) -> &Option<String> {
-        &self.row().notes
-    }
-
-    pub async fn asset_number(&self) -> &Option<String> {
-        &self.row().asset_number
-    }
-
-    pub async fn serial_number(&self) -> &Option<String> {
-        &self.row().serial_number
-    }
-
-    pub async fn catalogue_item_id(&self) -> &Option<String> {
-        &self.row().catalogue_item_id
-    }
-
-    pub async fn installation_date(&self) -> Option<chrono::NaiveDate> {
-        self.row().installation_date.clone()
-    }
-
-    pub async fn replacement_date(&self) -> Option<chrono::NaiveDate> {
-        self.row().replacement_date.clone()
-    }
-
-    pub async fn created_datetime(&self) -> &chrono::NaiveDateTime {
-        &self.row().created_datetime
-    }
-
-    pub async fn modified_datetime(&self) -> &chrono::NaiveDateTime {
-        &self.row().modified_datetime
-    }
-
-    pub async fn store(&self, ctx: &Context<'_>) -> Result<Option<StoreNode>> {
-        let store_id = match &self.row().store_id {
-            Some(store_id) => store_id,
-            None => return Ok(None),
-        };
-
-        let loader = ctx.get_loader::<DataLoader<StoreByIdLoader>>();
-        Ok(loader
-            .load_one(store_id.clone())
-            .await?
-            .map(StoreNode::from_domain))
-    }
-
-    pub async fn catalogue_item(
-        &self,
-        ctx: &Context<'_>,
-    ) -> Result<Option<AssetCatalogueItemNode>> {
-        let catalogue_item_id = match &self.row().catalogue_item_id {
-            Some(catalogue_item_id) => catalogue_item_id,
-            None => return Ok(None),
-        };
-
-        let loader = ctx.get_loader::<DataLoader<AssetCatalogueItemLoader>>();
-        Ok(loader
-            .load_one(catalogue_item_id.clone())
-            .await?
-            .map(AssetCatalogueItemNode::from_domain))
-    }
-
-    pub async fn locations(&self, ctx: &Context<'_>) -> Result<LocationConnector> {
-        let asset_id = &self.row().id;
-        let loader = ctx.get_loader::<DataLoader<AssetLocationLoader>>();
-        let result_option = loader.load_one(asset_id.to_string()).await?;
-
-        let locations = LocationConnector::from_vec(result_option.unwrap_or(vec![]));
-
-        Ok(locations)
-    }
-
-    pub async fn documents(&self, ctx: &Context<'_>) -> Result<SyncFileReferenceConnector> {
-        let asset_id = &self.row().id;
-        let loader = ctx.get_loader::<DataLoader<SyncFileReferenceLoader>>();
-        let result_option = loader.load_one(asset_id.to_string()).await?;
-
-        let documents = SyncFileReferenceConnector::from_vec(result_option.unwrap_or(vec![]));
-
-        Ok(documents)
-    }
-
-    /// Returns a JSON string of the asset catalogue properties e.g {"property_key": "value"}
-    pub async fn catalog_properties(&self, ctx: &Context<'_>) -> Result<Option<String>> {
-        let catalogue_item_id = match &self.row().catalogue_item_id {
-            Some(catalogue_item_id) => catalogue_item_id,
-            None => return Ok(None),
-        };
-
-        let loader = ctx.get_loader::<DataLoader<AssetCatalogueItemLoader>>();
-        let catalog_item = loader.load_one(catalogue_item_id.clone()).await?;
-
-        Ok(catalog_item
-            .map(|item| item.properties.clone())
-            .unwrap_or(None))
-    }
-
-    /// Returns a JSON string of the asset properties (defined on the asset itself) e.g {"property_key": "value"}
-    pub async fn properties(&self) -> String {
-        let asset_properties = match &self.row().properties {
-            Some(properties) => properties.to_owned(),
-            None => "{}".to_string(), // Empty JSON object
-        };
-        asset_properties
-    }
-
-    pub async fn asset_category(&self, ctx: &Context<'_>) -> Result<Option<AssetCategoryNode>> {
-        let loader = ctx.get_loader::<DataLoader<AssetCategoryLoader>>();
-        let category_id = match self.row().asset_category_id.clone() {
-            Some(category_id) => category_id,
-            None => return Ok(None),
-        };
-
-        Ok(loader
-            .load_one(category_id)
-            .await?
-            .map(AssetCategoryNode::from_domain))
-    }
-
-    pub async fn asset_class(&self, ctx: &Context<'_>) -> Result<Option<AssetClassNode>> {
-        let loader = ctx.get_loader::<DataLoader<AssetClassLoader>>();
-        let class_id = match self.row().asset_class_id.clone() {
-            Some(class_id) => class_id,
-            None => return Ok(None),
-        };
-
-        Ok(loader
-            .load_one(class_id)
-            .await?
-            .map(AssetClassNode::from_domain))
-    }
-
-    pub async fn asset_type(&self, ctx: &Context<'_>) -> Result<Option<AssetTypeNode>> {
-        let loader = ctx.get_loader::<DataLoader<AssetTypeLoader>>();
-        let type_id = match self.row().asset_type_id.clone() {
-            Some(type_id) => type_id,
-            None => return Ok(None),
-        };
-
-        Ok(loader
-            .load_one(type_id)
-            .await?
-            .map(AssetTypeNode::from_domain))
-    }
-
-    pub async fn status_log(&self, ctx: &Context<'_>) -> Result<Option<AssetLogNode>> {
-        let asset_id = self.row().id.clone();
-        let loader = ctx.get_loader::<DataLoader<AssetStatusLogLoader>>();
-
-        Ok(loader
-            .load_one(asset_id.clone())
-            .await?
-            .map(AssetLogNode::from_domain))
-    }
-
-    pub async fn donor_name_id(&self) -> &Option<String> {
-        &self.row().donor_name_id
-    }
-
-    pub async fn donor(&self, ctx: &Context<'_>, store_id: String) -> Result<Option<NameNode>> {
-        let loader = ctx.get_loader::<DataLoader<NameByIdLoader>>();
-
-        let donor_name_id = match &self.row().donor_name_id {
-            Some(donor_name_id) => donor_name_id,
-            None => {
-                return Ok(None);
-            }
-        };
-
-        let response_option = loader
-            .load_one(NameByIdLoaderInput::new(&store_id, &donor_name_id))
-            .await?;
-
-        Ok(response_option.map(NameNode::from_domain))
-    }
-
-    pub async fn warranty_start(&self) -> &Option<NaiveDate> {
-        &self.row().warranty_start
-    }
-
-    pub async fn warranty_end(&self) -> &Option<NaiveDate> {
-        &self.row().warranty_end
-    }
-
-    pub async fn needs_replacement(&self) -> &Option<bool> {
-        &self.row().needs_replacement
-    }
-}
-
-#[derive(Union)]
-pub enum AssetsResponse {
-    Response(AssetConnector),
-}
-
-#[derive(Union)]
-pub enum AssetResponse {
-    Error(NodeError),
-    Response(AssetNode),
-}
-
-impl AssetNode {
-    pub fn from_domain(asset: Asset) -> AssetNode {
-        AssetNode { asset }
-    }
-
-    pub fn row(&self) -> &Asset {
-        &self.asset
-    }
-}
-
-impl AssetConnector {
-    pub fn from_domain(assets: ListResult<Asset>) -> AssetConnector {
-        AssetConnector {
-            total_count: assets.count,
-            nodes: assets
-                .rows
-                .into_iter()
-                .map(AssetNode::from_domain)
-                .collect(),
-        }
-    }
-
-    pub fn from_vec(assets: Vec<Asset>) -> AssetConnector {
-        AssetConnector {
-            total_count: usize_to_u32(assets.len()),
-            nodes: assets.into_iter().map(AssetNode::from_domain).collect(),
-        }
-    }
-}
-
-impl AssetSortInput {
-    pub fn to_domain(&self) -> AssetSort {
-        use AssetSortField as to;
-        use AssetSortFieldInput as from;
-        let key = match self.key {
-            from::SerialNumber => to::SerialNumber,
-            from::InstallationDate => to::InstallationDate,
-            from::ReplacementDate => to::ReplacementDate,
-            from::ModifiedDatetime => to::ModifiedDatetime,
-            from::AssetNumber => to::AssetNumber,
-            from::Store => to::Store,
-        };
-
-        AssetSort {
-            key,
-            desc: self.desc,
-        }
-    }
-}
diff --git a/server/graphql/asset/src/types/asset_log.rs b/server/graphql/asset/src/types/asset_log.rs
deleted file mode 100644
index f2c6f05b1..000000000
--- a/server/graphql/asset/src/types/asset_log.rs
+++ /dev/null
@@ -1,356 +0,0 @@
-use std::vec;
-
-use async_graphql::dataloader::DataLoader;
-use async_graphql::*;
-use graphql_core::generic_filters::{
-    DatetimeFilterInput, EqualFilterStringInput, StringFilterInput,
-};
-use graphql_core::loader::AssetLogReasonLoader;
-use graphql_core::loader::SyncFileReferenceLoader;
-use graphql_core::loader::UserLoader;
-use graphql_core::simple_generic_errors::NodeError;
-use graphql_core::{map_filter, ContextExt};
-use graphql_types::types::{SyncFileReferenceConnector, UserNode};
-
-use repository::asset_log_reason::{
-    AssetLogReason, AssetLogReasonFilter, AssetLogReasonSort, AssetLogReasonSortField,
-};
-
-use repository::assets::asset_log::{AssetLog, AssetLogFilter, AssetLogSort, AssetLogSortField};
-
-use repository::EqualFilter;
-use repository::{DatetimeFilter, StringFilter};
-use service::ListResult;
-
-use repository::asset_log_row::AssetLogStatus;
-use serde::Serialize;
-
-#[derive(Enum, Copy, Clone, PartialEq, Eq, Debug, Serialize)]
-#[serde(rename_all = "SCREAMING_SNAKE_CASE")] // only needed to be comparable in tests
-
-pub enum AssetLogStatusInput {
-    NotInUse,
-    Functioning,
-    FunctioningButNeedsAttention,
-    NotFunctioning,
-    Decommissioned,
-}
-
-impl AssetLogStatusInput {
-    pub fn to_domain(self) -> AssetLogStatus {
-        match self {
-            AssetLogStatusInput::NotInUse => AssetLogStatus::NotInUse,
-            AssetLogStatusInput::Functioning => AssetLogStatus::Functioning,
-            AssetLogStatusInput::FunctioningButNeedsAttention => {
-                AssetLogStatus::FunctioningButNeedsAttention
-            }
-            AssetLogStatusInput::NotFunctioning => AssetLogStatus::NotFunctioning,
-            AssetLogStatusInput::Decommissioned => AssetLogStatus::Decommissioned,
-        }
-    }
-}
-
-#[derive(Enum, Copy, Clone, PartialEq, Eq)]
-#[graphql(rename_items = "camelCase")]
-pub enum AssetLogSortFieldInput {
-    Status,
-    LogDatetime,
-}
-
-#[derive(InputObject)]
-pub struct AssetLogSortInput {
-    /// Sort query result by `key`
-    key: AssetLogSortFieldInput,
-    /// Sort query result is sorted descending or ascending (if not provided the default is
-    /// ascending)
-    desc: Option<bool>,
-}
-
-#[derive(InputObject, Clone)]
-pub struct AssetLogFilterInput {
-    pub id: Option<EqualFilterStringInput>,
-    pub asset_id: Option<EqualFilterStringInput>,
-    pub status: Option<EqualFilterStatusInput>,
-    pub log_datetime: Option<DatetimeFilterInput>,
-    pub user: Option<StringFilterInput>,
-    pub reason_id: Option<EqualFilterStringInput>,
-}
-
-impl From<AssetLogFilterInput> for AssetLogFilter {
-    fn from(f: AssetLogFilterInput) -> Self {
-        AssetLogFilter {
-            id: f.id.map(EqualFilter::from),
-            asset_id: f.asset_id.map(EqualFilter::from),
-            status: f
-                .status
-                .map(|s| map_filter!(s, AssetLogStatusInput::to_domain)),
-            log_datetime: f.log_datetime.map(DatetimeFilter::from),
-            user: f.user.map(StringFilter::from),
-            reason_id: f.reason_id.map(EqualFilter::from),
-        }
-    }
-}
-
-#[derive(InputObject, Clone)]
-pub struct EqualFilterStatusInput {
-    pub equal_to: Option<AssetLogStatusInput>,
-    pub equal_any: Option<Vec<AssetLogStatusInput>>,
-    pub not_equal_to: Option<AssetLogStatusInput>,
-}
-
-#[derive(Enum, Copy, Clone, PartialEq, Eq, Debug, Serialize)]
-#[serde(rename_all = "SCREAMING_SNAKE_CASE")] // only needed to be comparable in tests
-
-pub enum StatusType {
-    NotInUse,
-    Functioning,
-    FunctioningButNeedsAttention,
-    NotFunctioning,
-    Decommissioned,
-}
-impl StatusType {
-    pub fn from_domain(status: &AssetLogStatus) -> Self {
-        match status {
-            AssetLogStatus::NotInUse => StatusType::NotInUse,
-            AssetLogStatus::Functioning => StatusType::Functioning,
-            AssetLogStatus::FunctioningButNeedsAttention => {
-                StatusType::FunctioningButNeedsAttention
-            }
-            AssetLogStatus::NotFunctioning => StatusType::NotFunctioning,
-            AssetLogStatus::Decommissioned => StatusType::Decommissioned,
-        }
-    }
-}
-
-#[derive(PartialEq, Debug)]
-pub struct AssetLogNode {
-    pub asset_log: AssetLog,
-}
-
-#[derive(SimpleObject)]
-pub struct AssetLogConnector {
-    total_count: u32,
-    nodes: Vec<AssetLogNode>,
-}
-
-#[Object]
-impl AssetLogNode {
-    pub async fn id(&self) -> &str {
-        &self.row().id
-    }
-
-    pub async fn asset_id(&self) -> &str {
-        &self.row().asset_id
-    }
-
-    pub async fn user(&self, ctx: &Context<'_>) -> Result<Option<UserNode>> {
-        let user_id = &self.row().user_id;
-        let loader = ctx.get_loader::<DataLoader<UserLoader>>();
-        Ok(loader
-            .load_one(user_id.clone())
-            .await?
-            .map(UserNode::from_domain))
-    }
-
-    pub async fn status(&self) -> Option<StatusType> {
-        self.row().status.as_ref().map(StatusType::from_domain)
-    }
-
-    pub async fn comment(&self) -> &Option<String> {
-        &self.row().comment
-    }
-
-    pub async fn r#type(&self) -> &Option<String> {
-        &self.row().r#type
-    }
-
-    pub async fn reason(&self, ctx: &Context<'_>) -> Result<Option<AssetLogReasonNode>> {
-        match &self.row().reason_id {
-            Some(reason_id) => {
-                let loader = ctx.get_loader::<DataLoader<AssetLogReasonLoader>>();
-                Ok(loader
-                    .load_one(reason_id.clone())
-                    .await?
-                    .map(AssetLogReasonNode::from_domain))
-            }
-            None => Ok(None),
-        }
-    }
-
-    pub async fn log_datetime(&self) -> &chrono::NaiveDateTime {
-        &self.row().log_datetime
-    }
-
-    pub async fn documents(&self, ctx: &Context<'_>) -> Result<SyncFileReferenceConnector> {
-        let asset_log_id = &self.row().id;
-        let loader = ctx.get_loader::<DataLoader<SyncFileReferenceLoader>>();
-        let result_option = loader.load_one(asset_log_id.to_string()).await?;
-
-        let documents = SyncFileReferenceConnector::from_vec(result_option.unwrap_or(vec![]));
-
-        Ok(documents)
-    }
-}
-
-#[derive(Union)]
-pub enum AssetLogsResponse {
-    Response(AssetLogConnector),
-}
-
-#[derive(Union)]
-pub enum AssetLogResponse {
-    Error(NodeError),
-    Response(AssetLogNode),
-}
-
-impl AssetLogNode {
-    pub fn from_domain(asset_log: AssetLog) -> AssetLogNode {
-        AssetLogNode { asset_log }
-    }
-
-    pub fn row(&self) -> &AssetLog {
-        &self.asset_log
-    }
-}
-
-impl AssetLogConnector {
-    pub fn from_domain(assets: ListResult<AssetLog>) -> AssetLogConnector {
-        AssetLogConnector {
-            total_count: assets.count,
-            nodes: assets
-                .rows
-                .into_iter()
-                .map(AssetLogNode::from_domain)
-                .collect(),
-        }
-    }
-}
-
-impl AssetLogSortInput {
-    pub fn to_domain(&self) -> AssetLogSort {
-        use AssetLogSortField as to;
-        use AssetLogSortFieldInput as from;
-        let key = match self.key {
-            from::Status => to::Status,
-            from::LogDatetime => to::LogDatetime,
-        };
-
-        AssetLogSort {
-            key,
-            desc: self.desc,
-        }
-    }
-}
-
-// asset log reason
-
-#[derive(Enum, Copy, Clone, PartialEq, Eq)]
-#[graphql(rename_items = "camelCase")]
-pub enum AssetLogReasonSortFieldInput {
-    Status,
-}
-
-#[derive(InputObject)]
-pub struct AssetLogReasonSortInput {
-    /// Sort query result by `key`
-    key: AssetLogReasonSortFieldInput,
-    /// Sort query result is sorted descending or ascending (if not provided the default is
-    /// ascending)
-    desc: Option<bool>,
-}
-
-#[derive(PartialEq, Debug)]
-pub struct AssetLogReasonNode {
-    pub asset_log_reason: AssetLogReason,
-}
-
-#[derive(SimpleObject)]
-pub struct AssetLogReasonConnector {
-    total_count: u32,
-    nodes: Vec<AssetLogReasonNode>,
-}
-
-#[Object]
-impl AssetLogReasonNode {
-    pub async fn id(&self) -> &str {
-        &self.row().id
-    }
-
-    pub async fn asset_log_status(&self) -> StatusType {
-        let asset_log_status = &self.row().asset_log_status;
-        StatusType::from_domain(&asset_log_status)
-    }
-
-    pub async fn reason(&self) -> &str {
-        &self.row().reason
-    }
-}
-
-#[derive(Union)]
-pub enum AssetLogReasonsResponse {
-    Response(AssetLogReasonConnector),
-}
-
-#[derive(Union)]
-pub enum AssetLogReasonResponse {
-    Error(NodeError),
-    Response(AssetLogReasonNode),
-}
-
-#[derive(InputObject, Clone)]
-
-pub struct AssetLogReasonFilterInput {
-    pub id: Option<EqualFilterStringInput>,
-    pub asset_log_status: Option<EqualFilterStatusInput>,
-    pub reason: Option<StringFilterInput>,
-}
-
-impl From<AssetLogReasonFilterInput> for AssetLogReasonFilter {
-    fn from(f: AssetLogReasonFilterInput) -> Self {
-        AssetLogReasonFilter {
-            id: f.id.map(EqualFilter::from),
-            asset_log_status: f
-                .asset_log_status
-                .map(|s| map_filter!(s, AssetLogStatusInput::to_domain)),
-            reason: f.reason.map(StringFilter::from),
-        }
-    }
-}
-
-impl AssetLogReasonNode {
-    pub fn from_domain(asset_log_reason: AssetLogReason) -> AssetLogReasonNode {
-        AssetLogReasonNode { asset_log_reason }
-    }
-
-    pub fn row(&self) -> &AssetLogReason {
-        &self.asset_log_reason
-    }
-}
-
-impl AssetLogReasonConnector {
-    pub fn from_domain(assets: ListResult<AssetLogReason>) -> AssetLogReasonConnector {
-        AssetLogReasonConnector {
-            total_count: assets.count,
-            nodes: assets
-                .rows
-                .into_iter()
-                .map(AssetLogReasonNode::from_domain)
-                .collect(),
-        }
-    }
-}
-
-impl AssetLogReasonSortInput {
-    pub fn to_domain(&self) -> AssetLogReasonSort {
-        use AssetLogReasonSortField as to;
-        use AssetLogReasonSortFieldInput as from;
-        let key = match self.key {
-            from::Status => to::AssetLogStatus,
-        };
-
-        AssetLogReasonSort {
-            key,
-            desc: self.desc,
-        }
-    }
-}
diff --git a/server/graphql/asset/src/types/asset_property.rs b/server/graphql/asset/src/types/asset_property.rs
deleted file mode 100644
index 41ca6df7c..000000000
--- a/server/graphql/asset/src/types/asset_property.rs
+++ /dev/null
@@ -1,107 +0,0 @@
-use async_graphql::*;
-use graphql_core::generic_filters::{EqualFilterStringInput, StringFilterInput};
-
-use graphql_core::simple_generic_errors::NodeError;
-
-use graphql_types::types::PropertyNodeValueType;
-use repository::assets::asset_property::AssetPropertyFilter;
-use repository::db_diesel::assets::asset_property_row::AssetPropertyRow;
-
-use repository::{EqualFilter, StringFilter};
-use service::ListResult;
-
-#[derive(InputObject, Clone)]
-pub struct AssetPropertyFilterInput {
-    pub id: Option<EqualFilterStringInput>,
-    pub key: Option<EqualFilterStringInput>,
-    pub name: Option<StringFilterInput>,
-    pub asset_class_id: Option<EqualFilterStringInput>,
-    pub asset_category_id: Option<EqualFilterStringInput>,
-    pub asset_type_id: Option<EqualFilterStringInput>,
-}
-
-impl From<AssetPropertyFilterInput> for AssetPropertyFilter {
-    fn from(f: AssetPropertyFilterInput) -> Self {
-        AssetPropertyFilter {
-            id: f.id.map(EqualFilter::from),
-            key: f.key.map(EqualFilter::from),
-            name: f.name.map(StringFilter::from),
-            asset_class_id: f.asset_class_id.map(EqualFilter::from),
-            asset_category_id: f.asset_category_id.map(EqualFilter::from),
-            asset_type_id: f.asset_type_id.map(EqualFilter::from),
-        }
-    }
-}
-
-#[derive(PartialEq, Debug)]
-pub struct AssetPropertyNode {
-    pub asset_property: AssetPropertyRow,
-}
-
-#[derive(SimpleObject)]
-pub struct AssetPropertyConnector {
-    total_count: u32,
-    nodes: Vec<AssetPropertyNode>,
-}
-
-#[Object]
-impl AssetPropertyNode {
-    pub async fn id(&self) -> &str {
-        &self.row().id
-    }
-    pub async fn key(&self) -> &str {
-        &self.row().key
-    }
-    pub async fn name(&self) -> &str {
-        &self.row().name
-    }
-    pub async fn asset_class_id(&self) -> Option<String> {
-        self.row().asset_class_id.clone()
-    }
-    pub async fn asset_category_id(&self) -> Option<String> {
-        self.row().asset_category_id.clone()
-    }
-    pub async fn asset_type_id(&self) -> Option<String> {
-        self.row().asset_type_id.clone()
-    }
-    pub async fn value_type(&self) -> PropertyNodeValueType {
-        PropertyNodeValueType::from_domain(&self.row().value_type)
-    }
-    pub async fn allowed_values(&self) -> &Option<String> {
-        &self.row().allowed_values
-    }
-}
-
-#[derive(Union)]
-pub enum AssetPropertiesResponse {
-    Response(AssetPropertyConnector),
-}
-
-#[derive(Union)]
-pub enum AssetPropertyResponse {
-    Error(NodeError),
-    Response(AssetPropertyNode),
-}
-
-impl AssetPropertyNode {
-    pub fn from_domain(asset_property: AssetPropertyRow) -> AssetPropertyNode {
-        AssetPropertyNode { asset_property }
-    }
-
-    pub fn row(&self) -> &AssetPropertyRow {
-        &self.asset_property
-    }
-}
-
-impl AssetPropertyConnector {
-    pub fn from_domain(assets: ListResult<AssetPropertyRow>) -> AssetPropertyConnector {
-        AssetPropertyConnector {
-            total_count: assets.count,
-            nodes: assets
-                .rows
-                .into_iter()
-                .map(AssetPropertyNode::from_domain)
-                .collect(),
-        }
-    }
-}
diff --git a/server/graphql/asset/src/types/mod.rs b/server/graphql/asset/src/types/mod.rs
deleted file mode 100644
index 2a2403b6e..000000000
--- a/server/graphql/asset/src/types/mod.rs
+++ /dev/null
@@ -1,6 +0,0 @@
-pub mod asset_log;
-pub use asset_log::*;
-pub mod asset;
-pub use asset::*;
-pub mod asset_property;
-pub use asset_property::*;
diff --git a/server/graphql/asset_catalogue/src/asset_catalogue_property_queries.rs b/server/graphql/asset_catalogue/src/asset_catalogue_property_queries.rs
new file mode 100644
index 000000000..b4ea2ffca
--- /dev/null
+++ b/server/graphql/asset_catalogue/src/asset_catalogue_property_queries.rs
@@ -0,0 +1,65 @@
+use async_graphql::*;
+use graphql_core::{
+    generic_filters::EqualFilterStringInput,
+    standard_graphql_error::{validate_auth, StandardGraphqlError},
+    ContextExt,
+};
+
+use repository::asset_catalogue_property::AssetCataloguePropertyFilter;
+use repository::EqualFilter;
+use service::{
+    auth::{Resource, ResourceAccessRequest},
+    catalogue::query_catalogue_property::get_asset_catalogue_properties,
+};
+
+use crate::types::asset_catalogue_property::{
+    AssetCataloguePropertyConnector, AssetCataloguePropertyResponse,
+};
+
+#[derive(InputObject, Clone)]
+pub struct AssetCataloguePropertyFilterInput {
+    pub id: Option<EqualFilterStringInput>,
+    pub category_id: Option<EqualFilterStringInput>,
+}
+
+impl From<AssetCataloguePropertyFilterInput> for AssetCataloguePropertyFilter {
+    fn from(f: AssetCataloguePropertyFilterInput) -> Self {
+        AssetCataloguePropertyFilter {
+            id: f.id.map(EqualFilter::from),
+            category_id: f.category_id.map(EqualFilter::from),
+        }
+    }
+}
+
+pub fn asset_catalogue_properties(
+    ctx: &Context<'_>,
+    filter: Option<AssetCataloguePropertyFilterInput>,
+) -> Result<AssetCataloguePropertyResponse> {
+    validate_auth(
+        ctx,
+        &ResourceAccessRequest {
+            resource: Resource::QueryAsset,
+            store_id: None,
+        },
+    )?;
+    let connection_manager = ctx.get_connection_manager().connection()?;
+    let categories = get_asset_catalogue_properties(
+        &connection_manager,
+        filter.map(|filter| filter.to_domain()),
+    )
+    .map_err(StandardGraphqlError::from_list_error)?;
+
+    Ok(AssetCataloguePropertyResponse::Response(
+        AssetCataloguePropertyConnector::from_domain(categories),
+    ))
+}
+
+impl AssetCataloguePropertyFilterInput {
+    pub fn to_domain(self) -> AssetCataloguePropertyFilter {
+        let AssetCataloguePropertyFilterInput { id, category_id } = self;
+        AssetCataloguePropertyFilter {
+            id: id.map(EqualFilter::from),
+            category_id: category_id.map(EqualFilter::from),
+        }
+    }
+}
diff --git a/server/graphql/asset_catalogue/src/lib.rs b/server/graphql/asset_catalogue/src/lib.rs
index 69d6c2d31..758f2f9fb 100644
--- a/server/graphql/asset_catalogue/src/lib.rs
+++ b/server/graphql/asset_catalogue/src/lib.rs
@@ -1,17 +1,24 @@
+use asset_catalogue_property_queries::{
+    asset_catalogue_properties, AssetCataloguePropertyFilterInput,
+};
 use async_graphql::*;
 use graphql_core::pagination::PaginationInput;
 use mutations::{
-    delete_asset_catalogue_item, insert_asset_catalogue_item, DeleteAssetCatalogueItemResponse,
-    InsertAssetCatalogueItemInput, InsertAssetCatalogueItemResponse,
+    delete_asset_catalogue_item, insert_asset_catalogue_item, insert_asset_catalogue_item_property,
+    DeleteAssetCatalogueItemResponse, InsertAssetCatalogueItemInput,
+    InsertAssetCatalogueItemPropertyInput, InsertAssetCatalogueItemPropertyResponse,
+    InsertAssetCatalogueItemResponse,
 };
 use types::{
     asset_catalogue_item::{AssetCatalogueItemResponse, AssetCatalogueItemsResponse},
+    asset_catalogue_property::AssetCataloguePropertyResponse,
     asset_category::{AssetCategoriesResponse, AssetCategoryResponse},
     asset_class::{AssetClassResponse, AssetClassesResponse},
     asset_type::{AssetTypeResponse, AssetTypesResponse},
 };
 
 pub mod asset_catalogue_item_queries;
+mod asset_catalogue_property_queries;
 use crate::asset_catalogue_item_queries::*;
 pub mod asset_category_queries;
 use crate::asset_category_queries::*;
@@ -97,6 +104,14 @@ impl AssetCatalogueQueries {
     pub async fn asset_type(&self, ctx: &Context<'_>, id: String) -> Result<AssetTypeResponse> {
         asset_type(ctx, id)
     }
+
+    pub async fn asset_catalogue_properties(
+        &self,
+        ctx: &Context<'_>,
+        #[graphql(desc = "Filter option")] filter: Option<AssetCataloguePropertyFilterInput>,
+    ) -> Result<AssetCataloguePropertyResponse> {
+        asset_catalogue_properties(ctx, filter)
+    }
 }
 
 #[derive(Default, Clone)]
@@ -120,4 +135,13 @@ impl AssetCatalogueMutations {
     ) -> Result<DeleteAssetCatalogueItemResponse> {
         delete_asset_catalogue_item(ctx, &asset_catalogue_item_id)
     }
+
+    async fn insert_asset_catalogue_item_property(
+        &self,
+        ctx: &Context<'_>,
+        store_id: String,
+        input: InsertAssetCatalogueItemPropertyInput,
+    ) -> Result<InsertAssetCatalogueItemPropertyResponse> {
+        insert_asset_catalogue_item_property(ctx, &store_id, input)
+    }
 }
diff --git a/server/graphql/asset_catalogue/src/mutations/insert_catalogue_item.rs b/server/graphql/asset_catalogue/src/mutations/insert_catalogue_item.rs
index a19be6a59..f543aff13 100644
--- a/server/graphql/asset_catalogue/src/mutations/insert_catalogue_item.rs
+++ b/server/graphql/asset_catalogue/src/mutations/insert_catalogue_item.rs
@@ -54,7 +54,6 @@ pub struct InsertAssetCatalogueItemInput {
     pub manufacturer: Option<String>,
     pub model: String,
     pub type_id: String,
-    pub properties: Option<String>,
 }
 
 impl From<InsertAssetCatalogueItemInput> for InsertAssetCatalogueItem {
@@ -68,7 +67,6 @@ impl From<InsertAssetCatalogueItemInput> for InsertAssetCatalogueItem {
             manufacturer,
             model,
             type_id,
-            properties,
         }: InsertAssetCatalogueItemInput,
     ) -> Self {
         InsertAssetCatalogueItem {
@@ -80,7 +78,6 @@ impl From<InsertAssetCatalogueItemInput> for InsertAssetCatalogueItem {
             manufacturer,
             model,
             type_id,
-            properties,
         }
     }
 }
diff --git a/server/graphql/asset_catalogue/src/mutations/insert_catalogue_item_property.rs b/server/graphql/asset_catalogue/src/mutations/insert_catalogue_item_property.rs
new file mode 100644
index 000000000..5e00f3803
--- /dev/null
+++ b/server/graphql/asset_catalogue/src/mutations/insert_catalogue_item_property.rs
@@ -0,0 +1,168 @@
+use async_graphql::*;
+use graphql_core::{
+    simple_generic_errors::{DatabaseError, InternalError, RecordAlreadyExist},
+    standard_graphql_error::{validate_auth, StandardGraphqlError},
+    ContextExt,
+};
+use repository::asset_catalogue_item_property_row::AssetCatalogueItemPropertyRow;
+use service::{
+    auth::{Resource, ResourceAccessRequest},
+    catalogue::insert_property::{
+        InsertAssetCatalogueItemProperty, InsertAssetCatalogueItemPropertyError as ServiceError,
+    },
+};
+
+#[derive(PartialEq, Debug)]
+pub struct AssetCatalogueItemPropertyNode {
+    pub asset_catalogue_item_property: AssetCatalogueItemPropertyRow,
+}
+
+#[derive(SimpleObject)]
+pub struct AssetCatalogueItemPropertyConnector {
+    nodes: Vec<AssetCatalogueItemPropertyNode>,
+}
+
+#[Object]
+impl AssetCatalogueItemPropertyNode {
+    pub async fn id(&self) -> &str {
+        &self.row().id
+    }
+    pub async fn catalogue_item_id(&self) -> &str {
+        &self.row().catalogue_item_id
+    }
+    pub async fn catalogue_property_id(&self) -> &str {
+        &self.row().catalogue_property_id
+    }
+    pub async fn value_string(&self) -> &Option<String> {
+        &self.row().value_string
+    }
+    pub async fn value_int(&self) -> &Option<i32> {
+        &self.row().value_int
+    }
+    pub async fn value_float(&self) -> &Option<f64> {
+        &self.row().value_float
+    }
+    pub async fn value_bool(&self) -> &Option<bool> {
+        &self.row().value_bool
+    }
+}
+impl AssetCatalogueItemPropertyNode {
+    pub fn from_domain(
+        asset_catalogue_item_property: AssetCatalogueItemPropertyRow,
+    ) -> AssetCatalogueItemPropertyNode {
+        AssetCatalogueItemPropertyNode {
+            asset_catalogue_item_property,
+        }
+    }
+
+    pub fn row(&self) -> &AssetCatalogueItemPropertyRow {
+        &self.asset_catalogue_item_property
+    }
+}
+
+pub fn insert_asset_catalogue_item_property(
+    ctx: &Context<'_>,
+    store_id: &str,
+    input: InsertAssetCatalogueItemPropertyInput,
+) -> Result<InsertAssetCatalogueItemPropertyResponse> {
+    let user = validate_auth(
+        ctx,
+        &ResourceAccessRequest {
+            resource: Resource::MutateAssetCatalogueItem,
+            store_id: Some(store_id.to_string()),
+        },
+    )?;
+
+    let service_provider = ctx.service_provider();
+    let service_context = service_provider.context(store_id.to_string(), user.user_id)?;
+
+    match service_provider
+        .catalogue_service
+        .insert_asset_catalogue_item_property(&service_context, input.into())
+    {
+        Ok(property) => Ok(InsertAssetCatalogueItemPropertyResponse::Response(
+            AssetCatalogueItemPropertyNode::from_domain(property),
+        )),
+        Err(error) => Ok(InsertAssetCatalogueItemPropertyResponse::Error(
+            InsertAssetCatalogueItemPropertyError {
+                error: map_error(error)?,
+            },
+        )),
+    }
+}
+
+#[derive(InputObject, Clone)]
+pub struct InsertAssetCatalogueItemPropertyInput {
+    pub id: String,
+    pub catalogue_item_id: String,
+    pub catalogue_property_id: String,
+    pub value_string: Option<String>,
+    pub value_int: Option<i32>,
+    pub value_float: Option<f64>,
+    pub value_bool: Option<bool>,
+}
+
+impl From<InsertAssetCatalogueItemPropertyInput> for InsertAssetCatalogueItemProperty {
+    fn from(
+        InsertAssetCatalogueItemPropertyInput {
+            id,
+            catalogue_item_id,
+            catalogue_property_id,
+            value_string,
+            value_int,
+            value_float,
+            value_bool,
+        }: InsertAssetCatalogueItemPropertyInput,
+    ) -> Self {
+        InsertAssetCatalogueItemProperty {
+            id,
+            catalogue_item_id,
+            catalogue_property_id,
+            value_string,
+            value_int,
+            value_float,
+            value_bool,
+        }
+    }
+}
+
+#[derive(SimpleObject)]
+pub struct InsertAssetCatalogueItemPropertyError {
+    pub error: InsertAssetCatalogueItemPropertyErrorInterface,
+}
+
+#[derive(Union)]
+pub enum InsertAssetCatalogueItemPropertyResponse {
+    Error(InsertAssetCatalogueItemPropertyError),
+    Response(AssetCatalogueItemPropertyNode),
+}
+
+#[derive(Interface)]
+#[graphql(field(name = "description", type = "String"))]
+pub enum InsertAssetCatalogueItemPropertyErrorInterface {
+    ItemAlreadyExists(RecordAlreadyExist),
+    InternalError(InternalError),
+    DatabaseError(DatabaseError),
+}
+
+fn map_error(error: ServiceError) -> Result<InsertAssetCatalogueItemPropertyErrorInterface> {
+    use StandardGraphqlError::*;
+    let formatted_error = format!("{:#?}", error);
+
+    let graphql_error = match error {
+        // Structured Errors
+        ServiceError::ItemAlreadyExists => {
+            return Ok(
+                InsertAssetCatalogueItemPropertyErrorInterface::ItemAlreadyExists(
+                    RecordAlreadyExist {},
+                ),
+            )
+        }
+
+        // Standard Graphql Errors
+        ServiceError::CreatedRecordNotFound => InternalError(formatted_error),
+        ServiceError::DatabaseError(_) => InternalError(formatted_error),
+    };
+
+    Err(graphql_error.extend())
+}
diff --git a/server/graphql/asset_catalogue/src/mutations/mod.rs b/server/graphql/asset_catalogue/src/mutations/mod.rs
index f82d414f3..44c043eea 100644
--- a/server/graphql/asset_catalogue/src/mutations/mod.rs
+++ b/server/graphql/asset_catalogue/src/mutations/mod.rs
@@ -1,5 +1,7 @@
 mod delete_catalogue_item;
 mod insert_catalogue_item;
+mod insert_catalogue_item_property;
 
 pub use delete_catalogue_item::*;
 pub use insert_catalogue_item::*;
+pub use insert_catalogue_item_property::*;
diff --git a/server/graphql/asset_catalogue/src/types/asset_catalogue_item.rs b/server/graphql/asset_catalogue/src/types/asset_catalogue_item.rs
index b296e80ea..235bc019f 100644
--- a/server/graphql/asset_catalogue/src/types/asset_catalogue_item.rs
+++ b/server/graphql/asset_catalogue/src/types/asset_catalogue_item.rs
@@ -80,14 +80,6 @@ impl AssetCatalogueItemNode {
             .await?
             .map(AssetTypeNode::from_domain))
     }
-
-    pub async fn properties(&self) -> Result<String> {
-        let asset_properties = match &self.row().properties {
-            Some(properties) => properties.to_owned(),
-            None => return Ok("{}".to_string()), // Empty JSON object
-        };
-        Ok(asset_properties)
-    }
 }
 
 #[derive(Union)]
diff --git a/server/graphql/asset_catalogue/src/types/asset_catalogue_property.rs b/server/graphql/asset_catalogue/src/types/asset_catalogue_property.rs
new file mode 100644
index 000000000..9ea13659c
--- /dev/null
+++ b/server/graphql/asset_catalogue/src/types/asset_catalogue_property.rs
@@ -0,0 +1,96 @@
+use async_graphql::*;
+
+use graphql_core::simple_generic_errors::NodeError;
+
+use repository::{
+    asset_catalogue_property_row::PropertyValueType,
+    assets::asset_catalogue_property_row::AssetCataloguePropertyRow,
+};
+use serde::Serialize;
+use service::ListResult;
+
+#[derive(Enum, Copy, Clone, PartialEq, Eq, Debug, Serialize)]
+#[serde(rename_all = "SCREAMING_SNAKE_CASE")] // only needed to be comparable in tests
+pub enum PropertyNodeValueType {
+    String,
+    Boolean,
+    Integer,
+    Float,
+}
+
+impl PropertyNodeValueType {
+    pub fn from_domain(value_type: &PropertyValueType) -> PropertyNodeValueType {
+        use PropertyValueType::*;
+        match value_type {
+            String => PropertyNodeValueType::String,
+            Boolean => PropertyNodeValueType::Boolean,
+            Integer => PropertyNodeValueType::Integer,
+            Float => PropertyNodeValueType::Float,
+        }
+    }
+}
+
+#[derive(PartialEq, Debug)]
+pub struct AssetCataloguePropertyNode {
+    pub asset_catalogue_property: AssetCataloguePropertyRow,
+}
+
+#[derive(SimpleObject)]
+
+pub struct AssetCataloguePropertyConnector {
+    total_count: u32,
+    nodes: Vec<AssetCataloguePropertyNode>,
+}
+
+#[Object]
+impl AssetCataloguePropertyNode {
+    pub async fn id(&self) -> &str {
+        &self.row().id
+    }
+    pub async fn name(&self) -> &str {
+        &self.row().name
+    }
+    pub async fn category_id(&self) -> &str {
+        &self.row().category_id
+    }
+    pub async fn value_type(&self) -> PropertyNodeValueType {
+        PropertyNodeValueType::from_domain(&self.row().value_type)
+    }
+    pub async fn allowed_values(&self) -> &Option<String> {
+        &self.row().allowed_values
+    }
+}
+
+#[derive(Union)]
+pub enum AssetCataloguePropertyResponse {
+    Error(NodeError),
+    Response(AssetCataloguePropertyConnector),
+}
+
+impl AssetCataloguePropertyNode {
+    pub fn from_domain(
+        asset_catalogue_property: AssetCataloguePropertyRow,
+    ) -> AssetCataloguePropertyNode {
+        AssetCataloguePropertyNode {
+            asset_catalogue_property,
+        }
+    }
+    pub fn row(&self) -> &AssetCataloguePropertyRow {
+        &self.asset_catalogue_property
+    }
+}
+
+impl AssetCataloguePropertyConnector {
+    pub fn from_domain(
+        asset_types: ListResult<AssetCataloguePropertyRow>,
+    ) -> AssetCataloguePropertyConnector {
+        AssetCataloguePropertyConnector {
+            total_count: asset_types.count,
+            nodes: asset_types
+                .rows
+                .into_iter()
+                .map(AssetCataloguePropertyNode::from_domain)
+                .collect(),
+        }
+    }
+}
diff --git a/server/graphql/asset_catalogue/src/types/mod.rs b/server/graphql/asset_catalogue/src/types/mod.rs
index b482b42fe..d0474a8ef 100644
--- a/server/graphql/asset_catalogue/src/types/mod.rs
+++ b/server/graphql/asset_catalogue/src/types/mod.rs
@@ -1,4 +1,5 @@
 pub mod asset_catalogue_item;
+pub mod asset_catalogue_property;
 pub mod asset_category;
 pub mod asset_class;
 pub mod asset_type;
diff --git a/server/graphql/batch_mutations/src/batch_inbound_shipment.rs b/server/graphql/batch_mutations/src/batch_inbound_shipment.rs
index 898f2e90c..b6ceb7cd7 100644
--- a/server/graphql/batch_mutations/src/batch_inbound_shipment.rs
+++ b/server/graphql/batch_mutations/src/batch_inbound_shipment.rs
@@ -385,10 +385,9 @@ mod test {
             },
             InvoiceServiceTrait,
         },
-        invoice_line::inbound_shipment_line::{
-            DeleteInboundShipmentLine, DeleteInboundShipmentLineError, InsertInboundShipmentLine,
-            InsertInboundShipmentLineError, UpdateInboundShipmentLine,
-            UpdateInboundShipmentLineError,
+        invoice_line::stock_in_line::{
+            DeleteStockInLine, DeleteStockInLineError, InsertStockInLine, InsertStockInLineError,
+            UpdateStockInLine, UpdateStockInLineError,
         },
         service_provider::{ServiceContext, ServiceProvider},
         InputWithResult,
@@ -587,22 +586,22 @@ mod test {
                     result: Err(InsertInboundShipmentError::OtherPartyNotASupplier),
                 }],
                 insert_line: vec![InputWithResult {
-                    input: inline_init(|input: &mut InsertInboundShipmentLine| {
+                    input: inline_init(|input: &mut InsertStockInLine| {
                         input.id = "id2".to_string()
                     }),
-                    result: Err(InsertInboundShipmentLineError::InvoiceDoesNotExist {}),
+                    result: Err(InsertStockInLineError::InvoiceDoesNotExist {}),
                 }],
                 update_line: vec![InputWithResult {
-                    input: inline_init(|input: &mut UpdateInboundShipmentLine| {
+                    input: inline_init(|input: &mut UpdateStockInLine| {
                         input.id = "id3".to_string()
                     }),
-                    result: Err(UpdateInboundShipmentLineError::LineDoesNotExist {}),
+                    result: Err(UpdateStockInLineError::LineDoesNotExist {}),
                 }],
                 delete_line: vec![InputWithResult {
-                    input: inline_init(|input: &mut DeleteInboundShipmentLine| {
+                    input: inline_init(|input: &mut DeleteStockInLine| {
                         input.id = "id4".to_string()
                     }),
-                    result: Err(DeleteInboundShipmentLineError::LineDoesNotExist {}),
+                    result: Err(DeleteStockInLineError::LineDoesNotExist {}),
                 }],
                 update_shipment: vec![InputWithResult {
                     input: inline_init(|input: &mut UpdateInboundShipment| {
@@ -640,10 +639,10 @@ mod test {
                     result: Err(InsertInboundShipmentError::OtherPartyNotASupplier),
                 }],
                 insert_line: vec![InputWithResult {
-                    input: inline_init(|input: &mut InsertInboundShipmentLine| {
+                    input: inline_init(|input: &mut InsertStockInLine| {
                         input.id = "id2".to_string()
                     }),
-                    result: Err(InsertInboundShipmentLineError::InvoiceDoesNotExist {}),
+                    result: Err(InsertStockInLineError::InvoiceDoesNotExist {}),
                 }],
                 update_line: vec![],
                 delete_line: vec![],
@@ -704,7 +703,7 @@ mod test {
                 insert_shipment: vec![],
                 insert_line: vec![],
                 update_line: vec![InputWithResult {
-                    input: inline_init(|input: &mut UpdateInboundShipmentLine| {
+                    input: inline_init(|input: &mut UpdateStockInLine| {
                         input.id = "id3".to_string()
                     }),
                     result: Ok(inline_init(|input: &mut InvoiceLine| {
diff --git a/server/graphql/core/src/generic_filters.rs b/server/graphql/core/src/generic_filters.rs
index ecaa70d7a..70d514f79 100644
--- a/server/graphql/core/src/generic_filters.rs
+++ b/server/graphql/core/src/generic_filters.rs
@@ -34,7 +34,6 @@ pub struct EqualFilterInput<T: InputType> {
     pub equal_to: Option<T>,
     pub equal_any: Option<Vec<T>>,
     pub not_equal_to: Option<T>,
-    pub equal_any_or_null: Option<Vec<T>>,
 }
 
 pub type EqualFilterStringInput = EqualFilterInput<String>;
@@ -53,9 +52,7 @@ impl<I: InputType> EqualFilterInput<I> {
             equal_any: self
                 .equal_any
                 .map(|inputs| inputs.into_iter().map(&to_domain).collect()),
-            equal_any_or_null: self
-                .equal_any_or_null
-                .map(|inputs| inputs.into_iter().map(&to_domain).collect()),
+            equal_any_or_null: None,
             not_equal_all: None,
             is_null: None,
         }
@@ -71,14 +68,13 @@ where
             equal_to,
             equal_any,
             not_equal_to,
-            equal_any_or_null,
         }: EqualFilterInput<T>,
     ) -> Self {
         EqualFilter {
             equal_to,
             equal_any,
             not_equal_to,
-            equal_any_or_null,
+            equal_any_or_null: None,
             not_equal_all: None,
             is_null: None,
         }
diff --git a/server/graphql/core/src/loader/asset_catalogue_item_property.rs b/server/graphql/core/src/loader/asset_catalogue_item_property.rs
new file mode 100644
index 000000000..88c98d93d
--- /dev/null
+++ b/server/graphql/core/src/loader/asset_catalogue_item_property.rs
@@ -0,0 +1,42 @@
+use repository::asset_catalogue_item_property::{
+    AssetCatalogueItemPropertyRepository, AssetCatalogueItemPropertyValue,
+    AssetCataloguePropertyItemFilter,
+};
+use repository::EqualFilter;
+use repository::{RepositoryError, StorageConnectionManager};
+
+use async_graphql::dataloader::*;
+use async_graphql::*;
+use std::collections::HashMap;
+
+pub struct AssetCatalogueItemPropertyLoader {
+    pub connection_manager: StorageConnectionManager,
+}
+
+#[async_trait::async_trait]
+impl Loader<String> for AssetCatalogueItemPropertyLoader {
+    type Value = Vec<AssetCatalogueItemPropertyValue>;
+    type Error = RepositoryError;
+
+    async fn load(&self, ids: &[String]) -> Result<HashMap<String, Self::Value>, Self::Error> {
+        let connection = self.connection_manager.connection()?;
+        let repo = AssetCatalogueItemPropertyRepository::new(&connection);
+
+        let properties = repo.query_property_and_value(
+            AssetCataloguePropertyItemFilter::new()
+                .catalogue_item_id(EqualFilter::equal_any(ids.to_owned())),
+        )?;
+
+        let mut map: HashMap<String, Vec<AssetCatalogueItemPropertyValue>> = HashMap::new();
+
+        for property in properties {
+            let catalogue_item_id = property.value.catalogue_item_id.clone();
+            let list = map
+                .entry(catalogue_item_id)
+                .or_insert_with(|| Vec::<AssetCatalogueItemPropertyValue>::new());
+            list.push(property);
+        }
+
+        Ok(map)
+    }
+}
diff --git a/server/graphql/core/src/loader/loader_registry.rs b/server/graphql/core/src/loader/loader_registry.rs
index 97761269b..4df986409 100644
--- a/server/graphql/core/src/loader/loader_registry.rs
+++ b/server/graphql/core/src/loader/loader_registry.rs
@@ -334,5 +334,11 @@ pub async fn get_loaders(
         },
         async_std::task::spawn,
     ));
+    loaders.insert(DataLoader::new(
+        AssetCatalogueItemPropertyLoader {
+            connection_manager: connection_manager.clone(),
+        },
+        async_std::task::spawn,
+    ));
     loaders
 }
diff --git a/server/graphql/core/src/loader/mod.rs b/server/graphql/core/src/loader/mod.rs
index 62c6addf3..0a66dc464 100644
--- a/server/graphql/core/src/loader/mod.rs
+++ b/server/graphql/core/src/loader/mod.rs
@@ -1,5 +1,6 @@
 mod asset;
 mod asset_catalogue_item;
+mod asset_catalogue_item_property;
 mod asset_category;
 mod asset_class;
 mod asset_location;
@@ -38,6 +39,7 @@ use std::{collections::HashSet, hash::Hasher};
 
 pub use asset::*;
 pub use asset_catalogue_item::*;
+pub use asset_catalogue_item_property::*;
 pub use asset_category::*;
 pub use asset_class::*;
 pub use asset_location::*;
diff --git a/server/graphql/demographic/Cargo.toml b/server/graphql/demographic/Cargo.toml
deleted file mode 100644
index c36be21e3..000000000
--- a/server/graphql/demographic/Cargo.toml
+++ /dev/null
@@ -1,33 +0,0 @@
-[package]
-name = "graphql_demographic"
-version = "0.1.0"
-edition = "2018"
-
-[lib]
-path = "src/lib.rs"
-doctest = false
-
-[dependencies]
-
-repository = { path = "../../repository" }
-service = { path = "../../service" }
-util = { path = "../../util" }
-graphql_core = { path = "../core" }
-graphql_types = { path = "../types" }
-
-actix-web = { workspace = true }
-async-graphql = { workspace = true }
-async-graphql-actix-web = { workspace = true }
-async-trait = { workspace = true }
-chrono = { workspace = true }
-serde = { workspace = true }
-
-[dev-dependencies]
-serde_json = { workspace = true }
-actix-rt = { workspace = true }
-assert-json-diff = { workspace = true }
-
-[features]
-default = ["sqlite"]
-sqlite = ["repository/sqlite"]
-postgres = ["repository/postgres"]
\ No newline at end of file
diff --git a/server/graphql/demographic/src/lib.rs b/server/graphql/demographic/src/lib.rs
deleted file mode 100644
index 4fc3a86fd..000000000
--- a/server/graphql/demographic/src/lib.rs
+++ /dev/null
@@ -1,134 +0,0 @@
-use async_graphql::*;
-
-use graphql_core::{
-    pagination::PaginationInput,
-    standard_graphql_error::{validate_auth, StandardGraphqlError},
-    ContextExt,
-};
-
-pub mod mutations;
-pub use mutations::*;
-pub mod types;
-use repository::{
-    demographic_projection::DemographicProjectionFilter, DemographicIndicatorFilter,
-    PaginationOption,
-};
-use service::auth::{Resource, ResourceAccessRequest};
-use types::{
-    DemographicIndicatorConnector, DemographicIndicatorSortInput, DemographicProjectionConnector,
-    DemographicProjectionFilterInput, DemographicProjectionSortInput,
-    DemographicProjectionsResponse,
-};
-use types::{DemographicIndicatorFilterInput, DemographicIndicatorsResponse};
-
-#[derive(Default, Clone)]
-pub struct DemographicIndicatorQueries;
-
-#[Object]
-impl DemographicIndicatorQueries {
-    pub async fn demographic_indicators(
-        &self,
-        ctx: &Context<'_>,
-        page: Option<PaginationInput>,
-        filter: Option<DemographicIndicatorFilterInput>,
-        sort: Option<Vec<DemographicIndicatorSortInput>>,
-    ) -> Result<DemographicIndicatorsResponse> {
-        let user = validate_auth(
-            ctx,
-            &ResourceAccessRequest {
-                resource: Resource::QueryAsset,
-                store_id: None,
-            },
-        )?;
-        let service_provider = ctx.service_provider();
-        let service_context = service_provider.context("".to_string(), user.user_id)?;
-
-        let demographic_indicators = service_provider
-            .demographic_service
-            .get_demographic_indicators(
-                &service_context.connection,
-                page.map(PaginationOption::from),
-                filter.map(DemographicIndicatorFilter::from),
-                // Currently only one sort option is supported, use the first from the list.
-                sort.and_then(|mut sort_list| sort_list.pop())
-                    .map(|sort| sort.to_domain()),
-            )
-            .map_err(StandardGraphqlError::from_list_error)?;
-
-        Ok(DemographicIndicatorsResponse::Response(
-            DemographicIndicatorConnector::from_domain(demographic_indicators),
-        ))
-    }
-
-    pub async fn demographic_projections(
-        &self,
-        ctx: &Context<'_>,
-        page: Option<PaginationInput>,
-        filter: Option<DemographicProjectionFilterInput>,
-        sort: Option<Vec<DemographicProjectionSortInput>>,
-    ) -> Result<DemographicProjectionsResponse> {
-        let user = validate_auth(
-            ctx,
-            &ResourceAccessRequest {
-                resource: Resource::QueryAsset,
-                store_id: None,
-            },
-        )?;
-        let service_provider = ctx.service_provider();
-        let service_context = service_provider.context("".to_string(), user.user_id)?;
-
-        let assets = service_provider
-            .demographic_service
-            .get_demographic_projections(
-                &service_context.connection,
-                page.map(PaginationOption::from),
-                filter.map(DemographicProjectionFilter::from),
-                // Currently only one sort option is supported, use the first from the list.
-                sort.and_then(|mut sort_list| sort_list.pop())
-                    .map(|sort| sort.to_domain()),
-            )
-            .map_err(StandardGraphqlError::from_list_error)?;
-
-        Ok(DemographicProjectionsResponse::Response(
-            DemographicProjectionConnector::from_domain(assets),
-        ))
-    }
-}
-
-#[derive(Default, Clone)]
-pub struct DemographicMutations;
-
-#[Object]
-impl DemographicMutations {
-    async fn insert_demographic_indicator(
-        &self,
-        ctx: &Context<'_>,
-        input: InsertDemographicIndicatorInput,
-    ) -> Result<InsertDemographicIndicatorResponse> {
-        insert_demographic_indicator(ctx, input)
-    }
-
-    async fn insert_demographic_projection(
-        &self,
-        ctx: &Context<'_>,
-        input: InsertDemographicProjectionInput,
-    ) -> Result<InsertDemographicProjectionResponse> {
-        insert_demographic_projection(ctx, input)
-    }
-
-    async fn update_demographic_indicator(
-        &self,
-        ctx: &Context<'_>,
-        input: UpdateDemographicIndicatorInput,
-    ) -> Result<UpdateDemographicIndicatorResponse> {
-        update_demographic_indicator(ctx, input)
-    }
-
-    async fn update_demographic_projection(
-        &self,
-        ctx: &Context<'_>,
-        input: UpdateDemographicProjectionInput,
-    ) -> Result<UpdateDemographicProjectionResponse> {
-        update_demographic_projection(ctx, input)
-    }
-}
diff --git a/server/graphql/demographic/src/mutations/insert_indicator.rs b/server/graphql/demographic/src/mutations/insert_indicator.rs
deleted file mode 100644
index 3e5d3f607..000000000
--- a/server/graphql/demographic/src/mutations/insert_indicator.rs
+++ /dev/null
@@ -1,128 +0,0 @@
-use async_graphql::*;
-use graphql_core::{
-    simple_generic_errors::{
-        DatabaseError, InternalError, NoPermissionForThisStore, RecordAlreadyExist,
-        UniqueValueViolation,
-    },
-    standard_graphql_error::{validate_auth, StandardGraphqlError},
-    ContextExt,
-};
-use service::{
-    auth::{Resource, ResourceAccessRequest},
-    demographic::insert_demographic_indicator::{
-        InsertDemographicIndicator, InsertDemographicIndicatorError as IndicatorServiceError,
-    },
-};
-
-use crate::types::DemographicIndicatorNode;
-
-pub fn insert_demographic_indicator(
-    ctx: &Context<'_>,
-    input: InsertDemographicIndicatorInput,
-) -> Result<InsertDemographicIndicatorResponse> {
-    let user = validate_auth(
-        ctx,
-        &ResourceAccessRequest {
-            resource: Resource::MutateDemographic,
-            store_id: Some("".to_string()),
-        },
-    )?;
-    let service_provider = ctx.service_provider();
-    let service_context = service_provider.context("".to_string(), user.user_id)?;
-
-    match service_provider
-        .demographic_service
-        .insert_demographic_indicator(&service_context, input.into())
-    {
-        Ok(demographic_indicator) => Ok(InsertDemographicIndicatorResponse::Response(
-            DemographicIndicatorNode::from_domain(demographic_indicator),
-        )),
-        Err(error) => Ok(InsertDemographicIndicatorResponse::Error(
-            InsertDemographicIndicatorError {
-                error: map_error(error)?,
-            },
-        )),
-    }
-}
-
-#[derive(InputObject, Clone)]
-pub struct InsertDemographicIndicatorInput {
-    pub id: String,
-    pub name: String,
-    pub base_year: i32,
-    pub base_population: Option<i32>,
-    pub population_percentage: Option<f64>,
-    pub year_1_projection: Option<i32>,
-    pub year_2_projection: Option<i32>,
-    pub year_3_projection: Option<i32>,
-    pub year_4_projection: Option<i32>,
-    pub year_5_projection: Option<i32>,
-}
-
-impl From<InsertDemographicIndicatorInput> for InsertDemographicIndicator {
-    fn from(
-        InsertDemographicIndicatorInput {
-            id,
-            name,
-            base_population,
-            base_year,
-            population_percentage,
-            year_1_projection,
-            year_2_projection,
-            year_3_projection,
-            year_4_projection,
-            year_5_projection,
-        }: InsertDemographicIndicatorInput,
-    ) -> Self {
-        InsertDemographicIndicator {
-            id,
-            name,
-            base_population,
-            base_year,
-            population_percentage,
-            year_1_projection,
-            year_2_projection,
-            year_3_projection,
-            year_4_projection,
-            year_5_projection,
-        }
-    }
-}
-
-#[derive(SimpleObject)]
-pub struct InsertDemographicIndicatorError {
-    pub error: InsertDemographicIndicatorErrorInterface,
-}
-
-#[derive(Union)]
-pub enum InsertDemographicIndicatorResponse {
-    Error(InsertDemographicIndicatorError),
-    Response(DemographicIndicatorNode),
-}
-
-#[derive(Interface)]
-#[graphql(field(name = "description", type = "String"))]
-pub enum InsertDemographicIndicatorErrorInterface {
-    DemographicIndicatorAlreadyExists(RecordAlreadyExist),
-    UniqueValueViolation(UniqueValueViolation),
-    InternalError(InternalError),
-    DatabaseError(DatabaseError),
-    PermissionError(NoPermissionForThisStore),
-}
-
-fn map_error(error: IndicatorServiceError) -> Result<InsertDemographicIndicatorErrorInterface> {
-    use StandardGraphqlError::*;
-    let formatted_error = format!("{:#?}", error);
-
-    let graphql_error = match error {
-        // Standard Graphql Errors
-        IndicatorServiceError::DemographicIndicatorAlreadyExists => BadUserInput(formatted_error),
-        IndicatorServiceError::DemographicIndicatorAlreadyExistsForThisYear => {
-            BadUserInput(formatted_error)
-        }
-        IndicatorServiceError::CreatedRecordNotFound => InternalError(formatted_error),
-        IndicatorServiceError::DatabaseError(_) => InternalError(formatted_error),
-    };
-
-    Err(graphql_error.extend())
-}
diff --git a/server/graphql/demographic/src/mutations/insert_projection.rs b/server/graphql/demographic/src/mutations/insert_projection.rs
deleted file mode 100644
index e9a8928d6..000000000
--- a/server/graphql/demographic/src/mutations/insert_projection.rs
+++ /dev/null
@@ -1,119 +0,0 @@
-use async_graphql::*;
-use graphql_core::{
-    simple_generic_errors::{
-        DatabaseError, InternalError, NoPermissionForThisStore, RecordAlreadyExist,
-        UniqueValueViolation,
-    },
-    standard_graphql_error::{validate_auth, StandardGraphqlError},
-    ContextExt,
-};
-use service::{
-    auth::{Resource, ResourceAccessRequest},
-    demographic::insert_demographic_projection::{
-        InsertDemographicProjection, InsertDemographicProjectionError as ProjectionServiceError,
-    },
-};
-
-use crate::types::DemographicProjectionNode;
-
-pub fn insert_demographic_projection(
-    ctx: &Context<'_>,
-    input: InsertDemographicProjectionInput,
-) -> Result<InsertDemographicProjectionResponse> {
-    let user = validate_auth(
-        ctx,
-        &ResourceAccessRequest {
-            resource: Resource::MutateDemographic,
-            store_id: Some("".to_string()),
-        },
-    )?;
-    let service_provider = ctx.service_provider();
-    let service_context = service_provider.context("".to_string(), user.user_id)?;
-
-    match service_provider
-        .demographic_service
-        .insert_demographic_projection(&service_context, input.into())
-    {
-        Ok(demographic_projection) => Ok(InsertDemographicProjectionResponse::Response(
-            DemographicProjectionNode::from_domain(demographic_projection),
-        )),
-        Err(error) => Ok(InsertDemographicProjectionResponse::Error(
-            InsertDemographicProjectionError {
-                error: map_error(error)?,
-            },
-        )),
-    }
-}
-
-#[derive(InputObject, Clone)]
-pub struct InsertDemographicProjectionInput {
-    pub id: String,
-    pub base_year: i32,
-    pub year_1: Option<i32>,
-    pub year_2: Option<i32>,
-    pub year_3: Option<i32>,
-    pub year_4: Option<i32>,
-    pub year_5: Option<i32>,
-}
-
-impl From<InsertDemographicProjectionInput> for InsertDemographicProjection {
-    fn from(
-        InsertDemographicProjectionInput {
-            id,
-            base_year,
-            year_1,
-            year_2,
-            year_3,
-            year_4,
-            year_5,
-        }: InsertDemographicProjectionInput,
-    ) -> Self {
-        InsertDemographicProjection {
-            id,
-            base_year,
-            year_1,
-            year_2,
-            year_3,
-            year_4,
-            year_5,
-        }
-    }
-}
-
-#[derive(SimpleObject)]
-pub struct InsertDemographicProjectionError {
-    pub error: InsertDemographicProjectionErrorInterface,
-}
-
-#[derive(Union)]
-pub enum InsertDemographicProjectionResponse {
-    Error(InsertDemographicProjectionError),
-    Response(DemographicProjectionNode),
-}
-
-#[derive(Interface)]
-#[graphql(field(name = "description", type = "String"))]
-pub enum InsertDemographicProjectionErrorInterface {
-    DemographicProjectionAlreadyExists(RecordAlreadyExist),
-    UniqueValueViolation(UniqueValueViolation),
-    InternalError(InternalError),
-    DatabaseError(DatabaseError),
-    PermissionError(NoPermissionForThisStore),
-}
-
-fn map_error(error: ProjectionServiceError) -> Result<InsertDemographicProjectionErrorInterface> {
-    use StandardGraphqlError::*;
-    let formatted_error = format!("{:#?}", error);
-
-    let graphql_error = match error {
-        // Standard Graphql Errors
-        ProjectionServiceError::DemographicProjectionAlreadyExists => BadUserInput(formatted_error),
-        ProjectionServiceError::CreatedRecordNotFound => InternalError(formatted_error),
-        ProjectionServiceError::DatabaseError(_) => InternalError(formatted_error),
-        ProjectionServiceError::DemographicProjectionBaseYearAlreadyExists => {
-            BadUserInput(formatted_error)
-        }
-    };
-
-    Err(graphql_error.extend())
-}
diff --git a/server/graphql/demographic/src/mutations/mod.rs b/server/graphql/demographic/src/mutations/mod.rs
deleted file mode 100644
index d6a052260..000000000
--- a/server/graphql/demographic/src/mutations/mod.rs
+++ /dev/null
@@ -1,9 +0,0 @@
-mod insert_indicator;
-mod insert_projection;
-mod update_indicator;
-mod update_projection;
-
-pub use insert_indicator::*;
-pub use insert_projection::*;
-pub use update_indicator::*;
-pub use update_projection::*;
diff --git a/server/graphql/demographic/src/mutations/update.rs b/server/graphql/demographic/src/mutations/update.rs
deleted file mode 100644
index e69de29bb..000000000
diff --git a/server/graphql/demographic/src/mutations/update_indicator.rs b/server/graphql/demographic/src/mutations/update_indicator.rs
deleted file mode 100644
index 14ed06804..000000000
--- a/server/graphql/demographic/src/mutations/update_indicator.rs
+++ /dev/null
@@ -1,128 +0,0 @@
-use async_graphql::*;
-use graphql_core::{
-    simple_generic_errors::{
-        DatabaseError, InternalError, NoPermissionForThisStore, RecordAlreadyExist,
-        UniqueValueViolation,
-    },
-    standard_graphql_error::{validate_auth, StandardGraphqlError},
-    ContextExt,
-};
-use service::{
-    auth::{Resource, ResourceAccessRequest},
-    demographic::update_demographic_indicator::{
-        UpdateDemographicIndicator, UpdateDemographicIndicatorError as IndicatorServiceError,
-    },
-};
-
-use crate::types::DemographicIndicatorNode;
-
-pub fn update_demographic_indicator(
-    ctx: &Context<'_>,
-    input: UpdateDemographicIndicatorInput,
-) -> Result<UpdateDemographicIndicatorResponse> {
-    let user = validate_auth(
-        ctx,
-        &ResourceAccessRequest {
-            resource: Resource::MutateDemographic,
-            store_id: Some("".to_string()),
-        },
-    )?;
-    let service_provider = ctx.service_provider();
-    let service_context = service_provider.context("".to_string(), user.user_id)?;
-
-    match service_provider
-        .demographic_service
-        .update_demographic_indicator(&service_context, input.into())
-    {
-        Ok(demographic_indicator) => Ok(UpdateDemographicIndicatorResponse::Response(
-            DemographicIndicatorNode::from_domain(demographic_indicator),
-        )),
-        Err(error) => Ok(UpdateDemographicIndicatorResponse::Error(
-            UpdateDemographicIndicatorError {
-                error: map_error(error)?,
-            },
-        )),
-    }
-}
-
-#[derive(InputObject, Clone)]
-pub struct UpdateDemographicIndicatorInput {
-    pub id: String,
-    pub name: Option<String>,
-    pub base_year: Option<i32>,
-    pub base_population: Option<i32>,
-    pub population_percentage: Option<f64>,
-    pub year_1_projection: Option<i32>,
-    pub year_2_projection: Option<i32>,
-    pub year_3_projection: Option<i32>,
-    pub year_4_projection: Option<i32>,
-    pub year_5_projection: Option<i32>,
-}
-
-impl From<UpdateDemographicIndicatorInput> for UpdateDemographicIndicator {
-    fn from(
-        UpdateDemographicIndicatorInput {
-            id,
-            base_year,
-            year_1_projection,
-            year_2_projection,
-            year_3_projection,
-            year_4_projection,
-            year_5_projection,
-            name,
-            base_population,
-            population_percentage,
-        }: UpdateDemographicIndicatorInput,
-    ) -> Self {
-        UpdateDemographicIndicator {
-            id,
-            name,
-            base_year,
-            base_population,
-            population_percentage,
-            year_1_projection,
-            year_2_projection,
-            year_3_projection,
-            year_4_projection,
-            year_5_projection,
-        }
-    }
-}
-
-#[derive(SimpleObject)]
-pub struct UpdateDemographicIndicatorError {
-    pub error: UpdateDemographicIndicatorErrorInterface,
-}
-
-#[derive(Union)]
-pub enum UpdateDemographicIndicatorResponse {
-    Error(UpdateDemographicIndicatorError),
-    Response(DemographicIndicatorNode),
-}
-
-#[derive(Interface)]
-#[graphql(field(name = "description", type = "String"))]
-pub enum UpdateDemographicIndicatorErrorInterface {
-    DemographicIndicatorAlreadyExists(RecordAlreadyExist),
-    UniqueValueViolation(UniqueValueViolation),
-    InternalError(InternalError),
-    DatabaseError(DatabaseError),
-    PermissionError(NoPermissionForThisStore),
-}
-
-fn map_error(error: IndicatorServiceError) -> Result<UpdateDemographicIndicatorErrorInterface> {
-    use StandardGraphqlError::*;
-    let formatted_error = format!("{:#?}", error);
-
-    let graphql_error = match error {
-        // Standard Graphql Errors
-        IndicatorServiceError::DemographicIndicatorDoesNotExist => BadUserInput(formatted_error),
-        IndicatorServiceError::UpdatedRecordNotFound => InternalError(formatted_error),
-        IndicatorServiceError::DatabaseError(_) => InternalError(formatted_error),
-        IndicatorServiceError::DemographicIndicatorAlreadyExistsForThisYear => {
-            BadUserInput(formatted_error)
-        }
-    };
-
-    Err(graphql_error.extend())
-}
diff --git a/server/graphql/demographic/src/mutations/update_projection.rs b/server/graphql/demographic/src/mutations/update_projection.rs
deleted file mode 100644
index d140ebba4..000000000
--- a/server/graphql/demographic/src/mutations/update_projection.rs
+++ /dev/null
@@ -1,119 +0,0 @@
-use async_graphql::*;
-use graphql_core::{
-    simple_generic_errors::{
-        DatabaseError, InternalError, NoPermissionForThisStore, RecordAlreadyExist,
-        UniqueValueViolation,
-    },
-    standard_graphql_error::{validate_auth, StandardGraphqlError},
-    ContextExt,
-};
-use service::{
-    auth::{Resource, ResourceAccessRequest},
-    demographic::update_demographic_projection::{
-        UpdateDemographicProjection, UpdateDemographicProjectionError as ProjectionServiceError,
-    },
-};
-
-use crate::types::DemographicProjectionNode;
-
-pub fn update_demographic_projection(
-    ctx: &Context<'_>,
-    input: UpdateDemographicProjectionInput,
-) -> Result<UpdateDemographicProjectionResponse> {
-    let user = validate_auth(
-        ctx,
-        &ResourceAccessRequest {
-            resource: Resource::MutateDemographic,
-            store_id: Some("".to_string()),
-        },
-    )?;
-    let service_provider = ctx.service_provider();
-    let service_context = service_provider.context("".to_string(), user.user_id)?;
-
-    match service_provider
-        .demographic_service
-        .update_demographic_projection(&service_context, input.into())
-    {
-        Ok(demographic_projection) => Ok(UpdateDemographicProjectionResponse::Response(
-            DemographicProjectionNode::from_domain(demographic_projection),
-        )),
-        Err(error) => Ok(UpdateDemographicProjectionResponse::Error(
-            UpdateDemographicProjectionError {
-                error: map_error(error)?,
-            },
-        )),
-    }
-}
-
-#[derive(InputObject, Clone)]
-pub struct UpdateDemographicProjectionInput {
-    pub id: String,
-    pub base_year: Option<i32>,
-    pub year_1: Option<i32>,
-    pub year_2: Option<i32>,
-    pub year_3: Option<i32>,
-    pub year_4: Option<i32>,
-    pub year_5: Option<i32>,
-}
-
-impl From<UpdateDemographicProjectionInput> for UpdateDemographicProjection {
-    fn from(
-        UpdateDemographicProjectionInput {
-            id,
-            base_year,
-            year_1,
-            year_2,
-            year_3,
-            year_4,
-            year_5,
-        }: UpdateDemographicProjectionInput,
-    ) -> Self {
-        UpdateDemographicProjection {
-            id,
-            base_year,
-            year_1,
-            year_2,
-            year_3,
-            year_4,
-            year_5,
-        }
-    }
-}
-
-#[derive(SimpleObject)]
-pub struct UpdateDemographicProjectionError {
-    pub error: UpdateDemographicProjectionErrorInterface,
-}
-
-#[derive(Union)]
-pub enum UpdateDemographicProjectionResponse {
-    Error(UpdateDemographicProjectionError),
-    Response(DemographicProjectionNode),
-}
-
-#[derive(Interface)]
-#[graphql(field(name = "description", type = "String"))]
-pub enum UpdateDemographicProjectionErrorInterface {
-    DemographicProjectionAlreadyExists(RecordAlreadyExist),
-    UniqueValueViolation(UniqueValueViolation),
-    InternalError(InternalError),
-    DatabaseError(DatabaseError),
-    PermissionError(NoPermissionForThisStore),
-}
-
-fn map_error(error: ProjectionServiceError) -> Result<UpdateDemographicProjectionErrorInterface> {
-    use StandardGraphqlError::*;
-    let formatted_error = format!("{:#?}", error);
-
-    let graphql_error = match error {
-        // Standard Graphql Errors
-        ProjectionServiceError::DemographicProjectionDoesNotExist => BadUserInput(formatted_error),
-        ProjectionServiceError::UpdatedRecordNotFound => InternalError(formatted_error),
-        ProjectionServiceError::DatabaseError(_) => InternalError(formatted_error),
-        ProjectionServiceError::DemographicProjectionBaseYearAlreadyExists => {
-            BadUserInput(formatted_error)
-        }
-    };
-
-    Err(graphql_error.extend())
-}
diff --git a/server/graphql/demographic/src/types.rs b/server/graphql/demographic/src/types.rs
deleted file mode 100644
index 842dbdae4..000000000
--- a/server/graphql/demographic/src/types.rs
+++ /dev/null
@@ -1,299 +0,0 @@
-use async_graphql::*;
-use graphql_core::{
-    generic_filters::{EqualFilterNumberInput, EqualFilterStringInput, StringFilterInput},
-    simple_generic_errors::NodeError,
-};
-use repository::{
-    demographic_projection::{
-        DemographicProjection, DemographicProjectionFilter, DemographicProjectionSort,
-        DemographicProjectionSortField,
-    },
-    DemographicIndicatorFilter, DemographicIndicatorRow, DemographicIndicatorSort,
-    DemographicIndicatorSortField, DemographicProjectionRow, EqualFilter, StringFilter,
-};
-use service::{usize_to_u32, ListResult};
-
-#[derive(Enum, Copy, Clone, PartialEq, Eq)]
-#[graphql(rename_items = "camelCase")]
-pub enum DemographicIndicatorSortFieldInput {
-    Id,
-    Name,
-}
-
-#[derive(InputObject)]
-pub struct DemographicIndicatorSortInput {
-    key: DemographicIndicatorSortFieldInput,
-    desc: Option<bool>,
-}
-
-#[derive(Enum, Copy, Clone, PartialEq, Eq)]
-#[graphql(rename_items = "camelCase")]
-pub enum DemographicProjectionSortFieldInput {
-    Id,
-}
-
-#[derive(InputObject)]
-pub struct DemographicProjectionSortInput {
-    key: DemographicProjectionSortFieldInput,
-    desc: Option<bool>,
-}
-
-#[derive(InputObject, Clone)]
-pub struct DemographicIndicatorFilterInput {
-    pub id: Option<EqualFilterStringInput>,
-    pub name: Option<StringFilterInput>,
-    pub base_year: Option<EqualFilterNumberInput>,
-}
-
-impl From<DemographicIndicatorFilterInput> for DemographicIndicatorFilter {
-    fn from(f: DemographicIndicatorFilterInput) -> Self {
-        DemographicIndicatorFilter {
-            id: f.id.map(EqualFilter::from),
-            name: f.name.map(StringFilter::from),
-            base_year: f.base_year.map(EqualFilter::from),
-        }
-    }
-}
-
-#[derive(InputObject, Clone)]
-pub struct DemographicProjectionFilterInput {
-    pub id: Option<EqualFilterStringInput>,
-    pub base_year: Option<EqualFilterNumberInput>,
-}
-
-impl From<DemographicProjectionFilterInput> for DemographicProjectionFilter {
-    fn from(f: DemographicProjectionFilterInput) -> Self {
-        DemographicProjectionFilter {
-            id: f.id.map(EqualFilter::from),
-            base_year: f.base_year.map(EqualFilter::from),
-        }
-    }
-}
-
-#[derive(Union)]
-pub enum DemographicIndicatorsResponse {
-    Response(DemographicIndicatorConnector),
-}
-
-#[derive(Union)]
-pub enum DemographicIndicatorResponse {
-    Error(NodeError),
-    Response(DemographicIndicatorNode),
-}
-
-#[derive(SimpleObject)]
-pub struct DemographicIndicatorConnector {
-    total_count: u32,
-    nodes: Vec<DemographicIndicatorNode>,
-}
-
-impl DemographicIndicatorConnector {
-    pub fn new() -> DemographicIndicatorConnector {
-        DemographicIndicatorConnector {
-            total_count: 0,
-            nodes: Vec::<DemographicIndicatorNode>::new(),
-        }
-    }
-}
-
-#[derive(Union)]
-pub enum DemographicProjectionsResponse {
-    Response(DemographicProjectionConnector),
-}
-
-#[derive(Union)]
-pub enum DemographicProjectionResponse {
-    Error(NodeError),
-    Response(DemographicProjectionNode),
-}
-
-#[derive(SimpleObject)]
-pub struct DemographicProjectionConnector {
-    total_count: u32,
-    nodes: Vec<DemographicProjectionNode>,
-}
-
-impl DemographicProjectionConnector {
-    pub fn new() -> DemographicProjectionConnector {
-        DemographicProjectionConnector {
-            total_count: 0,
-            nodes: Vec::<DemographicProjectionNode>::new(),
-        }
-    }
-}
-#[derive(PartialEq, Debug)]
-pub struct DemographicIndicatorNode {
-    pub demographic_indicator: DemographicIndicatorRow,
-}
-
-#[Object]
-impl DemographicIndicatorNode {
-    pub async fn id(&self) -> &str {
-        &self.row().id
-    }
-    pub async fn name(&self) -> &str {
-        &self.row().name
-    }
-    pub async fn base_year(&self) -> &i32 {
-        &self.row().base_year
-    }
-    pub async fn base_population(&self) -> &i32 {
-        &self.row().base_population
-    }
-    pub async fn population_percentage(&self) -> &f64 {
-        &self.row().population_percentage
-    }
-    pub async fn year_1_projection(&self) -> &i32 {
-        &self.row().year_1_projection
-    }
-    pub async fn year_2_projection(&self) -> &i32 {
-        &self.row().year_2_projection
-    }
-    pub async fn year_3_projection(&self) -> &i32 {
-        &self.row().year_3_projection
-    }
-    pub async fn year_4_projection(&self) -> &i32 {
-        &self.row().year_4_projection
-    }
-    pub async fn year_5_projection(&self) -> &i32 {
-        &self.row().year_5_projection
-    }
-}
-
-impl DemographicIndicatorNode {
-    pub fn from_domain(demographic_indicator: DemographicIndicatorRow) -> DemographicIndicatorNode {
-        DemographicIndicatorNode {
-            demographic_indicator,
-        }
-    }
-
-    pub fn row(&self) -> &DemographicIndicatorRow {
-        &self.demographic_indicator
-    }
-}
-
-#[derive(PartialEq, Debug)]
-pub struct DemographicProjectionNode {
-    pub demographic_projection: DemographicProjection,
-}
-
-#[Object]
-impl DemographicProjectionNode {
-    pub async fn id(&self) -> &str {
-        &self.row().id
-    }
-    pub async fn base_year(&self) -> &i32 {
-        &self.row().base_year
-    }
-    pub async fn year_1(&self) -> &i32 {
-        &self.row().year_1
-    }
-    pub async fn year_2(&self) -> &i32 {
-        &self.row().year_2
-    }
-    pub async fn year_3(&self) -> &i32 {
-        &self.row().year_3
-    }
-    pub async fn year_4(&self) -> &i32 {
-        &self.row().year_4
-    }
-    pub async fn year_5(&self) -> &i32 {
-        &self.row().year_5
-    }
-}
-
-impl DemographicProjectionNode {
-    pub fn from_domain(demographic_projection: DemographicProjection) -> DemographicProjectionNode {
-        DemographicProjectionNode {
-            demographic_projection,
-        }
-    }
-    pub fn row(&self) -> &DemographicProjectionRow {
-        &self.demographic_projection
-    }
-}
-
-impl DemographicIndicatorConnector {
-    pub fn from_domain(
-        demographic_indicators: ListResult<DemographicIndicatorRow>,
-    ) -> DemographicIndicatorConnector {
-        DemographicIndicatorConnector {
-            total_count: demographic_indicators.count,
-            nodes: demographic_indicators
-                .rows
-                .into_iter()
-                .map(DemographicIndicatorNode::from_domain)
-                .collect(),
-        }
-    }
-
-    pub fn from_vec(
-        demographic_indicators: Vec<DemographicIndicatorRow>,
-    ) -> DemographicIndicatorConnector {
-        DemographicIndicatorConnector {
-            total_count: usize_to_u32(demographic_indicators.len()),
-            nodes: demographic_indicators
-                .into_iter()
-                .map(DemographicIndicatorNode::from_domain)
-                .collect(),
-        }
-    }
-}
-
-impl DemographicProjectionConnector {
-    pub fn from_domain(
-        demographic_projections: ListResult<DemographicProjection>,
-    ) -> DemographicProjectionConnector {
-        DemographicProjectionConnector {
-            total_count: demographic_projections.count,
-            nodes: demographic_projections
-                .rows
-                .into_iter()
-                .map(DemographicProjectionNode::from_domain)
-                .collect(),
-        }
-    }
-
-    pub fn from_vec(
-        demographic_projections: Vec<DemographicProjection>,
-    ) -> DemographicProjectionConnector {
-        DemographicProjectionConnector {
-            total_count: usize_to_u32(demographic_projections.len()),
-            nodes: demographic_projections
-                .into_iter()
-                .map(DemographicProjectionNode::from_domain)
-                .collect(),
-        }
-    }
-}
-
-impl DemographicIndicatorSortInput {
-    pub fn to_domain(&self) -> DemographicIndicatorSort {
-        use DemographicIndicatorSortField as to;
-        use DemographicIndicatorSortFieldInput as from;
-        let key = match self.key {
-            from::Id => to::Id,
-            from::Name => to::Name,
-        };
-
-        DemographicIndicatorSort {
-            key,
-            desc: self.desc,
-        }
-    }
-}
-
-impl DemographicProjectionSortInput {
-    pub fn to_domain(&self) -> DemographicProjectionSort {
-        use DemographicProjectionSortField as to;
-        use DemographicProjectionSortFieldInput as from;
-        let key = match self.key {
-            from::Id => to::Id,
-        };
-
-        DemographicProjectionSort {
-            key,
-            desc: self.desc,
-        }
-    }
-}
diff --git a/server/graphql/general/src/lib.rs b/server/graphql/general/src/lib.rs
index 59892e705..b5cbee50c 100644
--- a/server/graphql/general/src/lib.rs
+++ b/server/graphql/general/src/lib.rs
@@ -368,10 +368,6 @@ impl GeneralQueries {
     ) -> Result<Option<LabelPrinterSettingNode>> {
         label_printer_settings(ctx)
     }
-
-    pub async fn name_properties(&self, ctx: &Context<'_>) -> Result<NamePropertyResponse> {
-        name_properties(ctx)
-    }
 }
 
 #[derive(Default, Clone)]
diff --git a/server/graphql/general/src/mutations/barcode.rs b/server/graphql/general/src/mutations/barcode.rs
index dbfadb8f0..84dcb6a7e 100644
--- a/server/graphql/general/src/mutations/barcode.rs
+++ b/server/graphql/general/src/mutations/barcode.rs
@@ -15,7 +15,7 @@ use service::{
 pub struct BarcodeInput {
     pub gtin: String,
     pub item_id: String,
-    pub pack_size: Option<f64>,
+    pub pack_size: Option<i32>,
 }
 
 #[derive(Union)]
diff --git a/server/graphql/general/src/queries/mod.rs b/server/graphql/general/src/queries/mod.rs
index c7dc77f33..ded1ecb31 100644
--- a/server/graphql/general/src/queries/mod.rs
+++ b/server/graphql/general/src/queries/mod.rs
@@ -30,8 +30,6 @@ pub mod database_settings;
 pub use self::database_settings::*;
 pub mod display_settings;
 pub mod initialisation_status;
-pub mod name_property;
-pub use self::name_property::*;
 pub mod requisition_line_chart;
 pub mod response_requisition_line_stats;
 pub mod sync_settings;
diff --git a/server/graphql/general/src/queries/name_property.rs b/server/graphql/general/src/queries/name_property.rs
deleted file mode 100644
index f5859e1c1..000000000
--- a/server/graphql/general/src/queries/name_property.rs
+++ /dev/null
@@ -1,42 +0,0 @@
-use async_graphql::*;
-use graphql_core::standard_graphql_error::StandardGraphqlError;
-use graphql_core::ContextExt;
-use graphql_types::types::PropertyNode;
-use repository::NameProperty;
-
-use service::name_property::get_name_properties;
-use service::ListResult;
-
-pub fn name_properties(ctx: &Context<'_>) -> Result<NamePropertyResponse> {
-    let connection_manager = ctx.get_connection_manager();
-    let properties = get_name_properties(&connection_manager, None)
-        .map_err(StandardGraphqlError::from_list_error)?;
-
-    Ok(NamePropertyResponse::Response(
-        NamePropertyConnector::from_domain(properties),
-    ))
-}
-
-#[derive(Union)]
-pub enum NamePropertyResponse {
-    Response(NamePropertyConnector),
-}
-
-#[derive(SimpleObject)]
-pub struct NamePropertyConnector {
-    total_count: u32,
-    nodes: Vec<PropertyNode>,
-}
-
-impl NamePropertyConnector {
-    pub fn from_domain(name_properties: ListResult<NameProperty>) -> NamePropertyConnector {
-        NamePropertyConnector {
-            total_count: name_properties.count,
-            nodes: name_properties
-                .rows
-                .into_iter()
-                .map(|name_property| PropertyNode::from_domain(name_property.property_row))
-                .collect(),
-        }
-    }
-}
diff --git a/server/graphql/general/src/queries/names.rs b/server/graphql/general/src/queries/names.rs
index 96a49cb20..e9cfe2641 100644
--- a/server/graphql/general/src/queries/names.rs
+++ b/server/graphql/general/src/queries/names.rs
@@ -49,8 +49,6 @@ pub struct NameFilterInput {
     pub is_customer: Option<bool>,
     /// Filter by supplier property
     pub is_supplier: Option<bool>,
-    /// Filter by donor property
-    pub is_donor: Option<bool>,
     pub is_patient: Option<bool>,
     /// Is this name a store
     pub is_store: Option<bool>,
@@ -70,9 +68,6 @@ pub struct NameFilterInput {
     pub address2: Option<StringFilterInput>,
     pub country: Option<StringFilterInput>,
     pub email: Option<StringFilterInput>,
-
-    /// Search filter across name or code
-    pub code_or_name: Option<StringFilterInput>,
 }
 
 #[derive(SimpleObject)]
@@ -135,7 +130,6 @@ impl NameFilterInput {
             code,
             is_customer,
             is_supplier,
-            is_donor,
             is_store,
             store_code,
             is_visible,
@@ -147,7 +141,6 @@ impl NameFilterInput {
             country,
             email,
             is_patient,
-            code_or_name,
         } = self;
 
         NameFilter {
@@ -155,10 +148,8 @@ impl NameFilterInput {
             name: name.map(StringFilter::from),
             code: code.map(StringFilter::from),
             store_code: store_code.map(StringFilter::from),
-            code_or_name: code_or_name.map(StringFilter::from),
             is_customer,
             is_supplier,
-            is_donor,
             is_store,
             is_visible,
             is_system_name: is_system_name.or(Some(false)),
diff --git a/server/graphql/general/src/queries/tests/item_stats.rs b/server/graphql/general/src/queries/tests/item_stats.rs
index f09130b58..705e44a8a 100644
--- a/server/graphql/general/src/queries/tests/item_stats.rs
+++ b/server/graphql/general/src/queries/tests/item_stats.rs
@@ -50,7 +50,7 @@ mod tests {
                     "stats": {
                         "averageMonthlyConsumption":  test_item_stats::item1_amc_3_months(),
                         "availableStockOnHand":  test_item_stats::item_1_soh(),
-                        "availableMonthsOfStockOnHand": test_item_stats::item_1_soh() / test_item_stats::item1_amc_3_months()
+                        "availableMonthsOfStockOnHand": test_item_stats::item_1_soh() as f64 / test_item_stats::item1_amc_3_months()
                     }
                 },
                 {
@@ -58,7 +58,7 @@ mod tests {
                     "stats": {
                         "averageMonthlyConsumption":  test_item_stats::item2_amc_3_months(),
                         "availableStockOnHand":  test_item_stats::item_2_soh(),
-                        "availableMonthsOfStockOnHand": test_item_stats::item_2_soh() / test_item_stats::item2_amc_3_months()
+                        "availableMonthsOfStockOnHand": test_item_stats::item_2_soh() as f64 / test_item_stats::item2_amc_3_months()
                     },
                 }]
             }
diff --git a/server/graphql/general/src/queries/tests/names.rs b/server/graphql/general/src/queries/tests/names.rs
index 08ed8ff4a..bdff18875 100644
--- a/server/graphql/general/src/queries/tests/names.rs
+++ b/server/graphql/general/src/queries/tests/names.rs
@@ -178,14 +178,13 @@ mod graphql {
                 is_visible,
                 is_system_name,
                 r#type,
+
                 phone,
                 address1,
                 address2,
                 country,
                 email,
                 is_patient: _,
-                is_donor,
-                code_or_name: _,
             } = filter.unwrap();
 
             assert_eq!(id, Some(EqualFilter::not_equal_to("id_not_equal_to")));
@@ -194,7 +193,6 @@ mod graphql {
 
             assert_eq!(is_customer, Some(true));
             assert_eq!(is_supplier, Some(false));
-            assert_eq!(is_donor, None);
             assert_eq!(is_store, Some(true));
             assert_eq!(store_code, Some(StringFilter::like("store code like")));
             assert_eq!(is_visible, Some(false));
diff --git a/server/graphql/general/src/sync_api_error.rs b/server/graphql/general/src/sync_api_error.rs
index 6292acfa0..92e391b5d 100644
--- a/server/graphql/general/src/sync_api_error.rs
+++ b/server/graphql/general/src/sync_api_error.rs
@@ -30,7 +30,6 @@ pub enum Variant {
     Unknown,
     ApiVersionIncompatible,
     CentralV6NotConfigured,
-    V6ApiVersionIncompatible,
     IntegrationError,
 }
 
@@ -124,7 +123,6 @@ impl SyncErrorNode {
             from::IntegrationTimeoutReached => to::IntegrationTimeoutReached,
             from::ApiVersionIncompatible => to::ApiVersionIncompatible,
             from::CentralV6NotConfigured => to::CentralV6NotConfigured,
-            from::V6ApiVersionIncompatible => to::V6ApiVersionIncompatible,
             from::IntegrationError => to::IntegrationError,
         };
 
diff --git a/server/graphql/inventory_adjustment/mutations/insert.rs b/server/graphql/inventory_adjustment/mutations/insert.rs
index d97d3c8cf..ff8482def 100644
--- a/server/graphql/inventory_adjustment/mutations/insert.rs
+++ b/server/graphql/inventory_adjustment/mutations/insert.rs
@@ -112,6 +112,8 @@ fn map_error(error: ServiceError) -> Result<InsertErrorInterface> {
         | ServiceError::AdjustmentReasonNotProvided => BadUserInput(formatted_error),
 
         ServiceError::NewlyCreatedInvoiceDoesNotExist
+        | ServiceError::StockInLineInsertError(_)
+        | ServiceError::StockOutLineInsertError(_)
         | ServiceError::InternalError(_)
         | ServiceError::DatabaseError(_) => InternalError(formatted_error),
     };
diff --git a/server/graphql/invoice/src/mutations/inbound_return/insert.rs b/server/graphql/invoice/src/mutations/inbound_return/insert.rs
index f5812a0ab..06f424393 100644
--- a/server/graphql/invoice/src/mutations/inbound_return/insert.rs
+++ b/server/graphql/invoice/src/mutations/inbound_return/insert.rs
@@ -29,7 +29,7 @@ pub struct InboundReturnLineInput {
     pub item_id: String,
     pub reason_id: Option<String>,
     pub note: Option<String>,
-    pub pack_size: f64,
+    pub pack_size: u32,
     pub batch: Option<String>,
     pub expiry_date: Option<NaiveDate>,
 }
diff --git a/server/graphql/invoice/src/mutations/inbound_shipment/delete.rs b/server/graphql/invoice/src/mutations/inbound_shipment/delete.rs
index 03b15fa5d..c11d7f1b7 100644
--- a/server/graphql/invoice/src/mutations/inbound_shipment/delete.rs
+++ b/server/graphql/invoice/src/mutations/inbound_shipment/delete.rs
@@ -118,7 +118,7 @@ mod test {
             },
             InvoiceServiceTrait,
         },
-        invoice_line::inbound_shipment_line::DeleteInboundShipmentLineError,
+        invoice_line::stock_in_line::DeleteStockInLineError,
         service_provider::{ServiceContext, ServiceProvider},
     };
 
@@ -260,7 +260,7 @@ mod test {
         let test_service = TestService(Box::new(|_| {
             Err(ServiceError::LineDeleteError {
                 line_id: "n/a".to_string(),
-                error: DeleteInboundShipmentLineError::LineDoesNotExist,
+                error: DeleteStockInLineError::LineDoesNotExist,
             })
         }));
         let expected_message = "Internal error";
@@ -331,8 +331,8 @@ mod test {
         assert_eq!(
             InvoiceRowRepository::new(&connection)
                 .find_one_by_id("deleted id")
-                .unwrap(),
-            None
+                .expect_err("Invoice doesn't exist"),
+            RepositoryError::NotFound
         );
     }
 }
diff --git a/server/graphql/invoice/src/mutations/inbound_shipment/update.rs b/server/graphql/invoice/src/mutations/inbound_shipment/update.rs
index ab0bb75cb..b8d512942 100644
--- a/server/graphql/invoice/src/mutations/inbound_shipment/update.rs
+++ b/server/graphql/invoice/src/mutations/inbound_shipment/update.rs
@@ -564,7 +564,6 @@ mod test {
 
         let new_invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id("inbound_shipment_c")
-            .unwrap()
             .unwrap();
 
         assert_eq!(
@@ -593,7 +592,6 @@ mod test {
 
         let new_invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id("inbound_shipment_c")
-            .unwrap()
             .unwrap();
 
         assert_eq!(new_invoice.name_store_id, None);
diff --git a/server/graphql/invoice/src/mutations/outbound_shipment/delete.rs b/server/graphql/invoice/src/mutations/outbound_shipment/delete.rs
index 223101c54..3a4d5e859 100644
--- a/server/graphql/invoice/src/mutations/outbound_shipment/delete.rs
+++ b/server/graphql/invoice/src/mutations/outbound_shipment/delete.rs
@@ -93,7 +93,9 @@ mod graphql {
     use graphql_core::{assert_graphql_query, assert_standard_graphql_error};
 
     use repository::mock::{MockData, MockDataInserts};
-    use repository::{InvoiceRow, InvoiceRowRepository, InvoiceStatus, InvoiceType};
+    use repository::{
+        InvoiceRow, InvoiceRowRepository, InvoiceStatus, InvoiceType, RepositoryError,
+    };
     use serde_json::json;
     use util::inline_init;
 
@@ -230,8 +232,8 @@ mod graphql {
         assert_eq!(
             InvoiceRowRepository::new(&connection)
                 .find_one_by_id(&outbound_shipment_no_lines().id)
-                .unwrap(),
-            None
+                .expect_err("Invoice not deleted"),
+            RepositoryError::NotFound
         );
     }
 }
diff --git a/server/graphql/invoice/src/mutations/outbound_shipment/insert.rs b/server/graphql/invoice/src/mutations/outbound_shipment/insert.rs
index 98883c2c2..897a53d15 100644
--- a/server/graphql/invoice/src/mutations/outbound_shipment/insert.rs
+++ b/server/graphql/invoice/src/mutations/outbound_shipment/insert.rs
@@ -309,7 +309,6 @@ mod graphql {
 
         let new_invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id(&id)
-            .unwrap()
             .unwrap();
 
         assert_eq!(
@@ -337,7 +336,6 @@ mod graphql {
 
         let new_invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id(&id)
-            .unwrap()
             .unwrap();
 
         assert_eq!(new_invoice.name_store_id, None);
diff --git a/server/graphql/invoice/src/mutations/prescription/delete.rs b/server/graphql/invoice/src/mutations/prescription/delete.rs
index eb9b6ca79..51ac9f1d1 100644
--- a/server/graphql/invoice/src/mutations/prescription/delete.rs
+++ b/server/graphql/invoice/src/mutations/prescription/delete.rs
@@ -96,7 +96,7 @@ mod graphql {
     use graphql_core::{assert_graphql_query, assert_standard_graphql_error};
 
     use repository::mock::{mock_prescription_a, MockDataInserts};
-    use repository::InvoiceRowRepository;
+    use repository::{InvoiceRowRepository, RepositoryError};
     use serde_json::json;
 
     use crate::{InvoiceMutations, InvoiceQueries};
@@ -181,8 +181,8 @@ mod graphql {
         assert_eq!(
             InvoiceRowRepository::new(&connection)
                 .find_one_by_id(&mock_prescription_a().id)
-                .unwrap(),
-            None
+                .expect_err("Invoice not deleted"),
+            RepositoryError::NotFound
         );
     }
 }
diff --git a/server/graphql/invoice_line/src/mutations/inbound_shipment_line/line/delete.rs b/server/graphql/invoice_line/src/mutations/inbound_shipment_line/line/delete.rs
index 1d5163f7b..5682977a9 100644
--- a/server/graphql/invoice_line/src/mutations/inbound_shipment_line/line/delete.rs
+++ b/server/graphql/invoice_line/src/mutations/inbound_shipment_line/line/delete.rs
@@ -8,8 +8,8 @@ use graphql_core::{
 use graphql_types::types::DeleteResponse as GenericDeleteResponse;
 
 use service::auth::{Resource, ResourceAccessRequest};
-use service::invoice_line::inbound_shipment_line::{
-    DeleteInboundShipmentLine as ServiceInput, DeleteInboundShipmentLineError as ServiceError,
+use service::invoice_line::stock_in_line::{
+    DeleteStockInLine as ServiceInput, DeleteStockInLineError as ServiceError, StockInType,
 };
 
 #[derive(InputObject)]
@@ -46,7 +46,7 @@ pub fn delete(ctx: &Context<'_>, store_id: &str, input: DeleteInput) -> Result<D
     map_response(
         service_provider
             .invoice_line_service
-            .delete_inbound_shipment_line(&service_context, input.to_domain()),
+            .delete_stock_in_line(&service_context, input.to_domain()),
     )
 }
 
@@ -63,7 +63,10 @@ pub enum DeleteErrorInterface {
 impl DeleteInput {
     pub fn to_domain(self) -> ServiceInput {
         let DeleteInput { id } = self;
-        ServiceInput { id }
+        ServiceInput {
+            id,
+            r#type: StockInType::InboundShipment,
+        }
     }
 }
 
@@ -101,9 +104,9 @@ fn map_error(error: ServiceError) -> Result<DeleteErrorInterface> {
             return Ok(DeleteErrorInterface::BatchIsReserved(BatchIsReserved {}))
         }
         // Standard Graphql Errors
-        ServiceError::NotThisInvoiceLine(_) => BadUserInput(formatted_error),
-        ServiceError::NotAnInboundShipment => BadUserInput(formatted_error),
-        ServiceError::NotThisStoreInvoice => BadUserInput(formatted_error),
+        ServiceError::NotThisInvoiceLine(_)
+        | ServiceError::NotAStockIn
+        | ServiceError::NotThisStoreInvoice => BadUserInput(formatted_error),
         ServiceError::DatabaseError(_) => InternalError(formatted_error),
         ServiceError::LineUsedInStocktake => InternalError(formatted_error),
     };
@@ -122,9 +125,9 @@ mod test {
 
     use service::{
         invoice_line::{
-            inbound_shipment_line::{
-                DeleteInboundShipmentLine as ServiceInput,
-                DeleteInboundShipmentLineError as ServiceError,
+            stock_in_line::{
+                DeleteStockInLine as ServiceInput, DeleteStockInLineError as ServiceError,
+                StockInType,
             },
             InvoiceLineServiceTrait,
         },
@@ -138,7 +141,7 @@ mod test {
     pub struct TestService(pub Box<DeleteLineMethod>);
 
     impl InvoiceLineServiceTrait for TestService {
-        fn delete_inbound_shipment_line(
+        fn delete_stock_in_line(
             &self,
             _: &ServiceContext,
             input: ServiceInput,
@@ -281,7 +284,7 @@ mod test {
         );
 
         //NotAnInboundShipment
-        let test_service = TestService(Box::new(|_| Err(ServiceError::NotAnInboundShipment)));
+        let test_service = TestService(Box::new(|_| Err(ServiceError::NotAStockIn)));
         let expected_message = "Bad user input";
         assert_standard_graphql_error!(
             &settings,
@@ -348,6 +351,7 @@ mod test {
                 input,
                 ServiceInput {
                     id: "id input".to_string(),
+                    r#type: StockInType::InboundShipment
                 }
             );
             Ok("deleted id".to_owned())
diff --git a/server/graphql/invoice_line/src/mutations/inbound_shipment_line/line/insert.rs b/server/graphql/invoice_line/src/mutations/inbound_shipment_line/line/insert.rs
index 32fc8ccd5..69c1c091e 100644
--- a/server/graphql/invoice_line/src/mutations/inbound_shipment_line/line/insert.rs
+++ b/server/graphql/invoice_line/src/mutations/inbound_shipment_line/line/insert.rs
@@ -9,8 +9,8 @@ use graphql_types::types::InvoiceLineNode;
 
 use repository::InvoiceLine;
 use service::auth::{Resource, ResourceAccessRequest};
-use service::invoice_line::inbound_shipment_line::{
-    InsertInboundShipmentLine as ServiceInput, InsertInboundShipmentLineError as ServiceError,
+use service::invoice_line::stock_in_line::{
+    InsertStockInLine as ServiceInput, InsertStockInLineError as ServiceError, StockInType,
 };
 use service::NullableUpdate;
 
@@ -20,7 +20,7 @@ pub struct InsertInput {
     pub id: String,
     pub invoice_id: String,
     pub item_id: String,
-    pub pack_size: f64,
+    pub pack_size: u32,
     pub batch: Option<String>,
     pub location: Option<NullableUpdateInput<String>>,
     pub cost_price_per_pack: f64,
@@ -59,7 +59,7 @@ pub fn insert(ctx: &Context<'_>, store_id: &str, input: InsertInput) -> Result<I
     map_response(
         service_provider
             .invoice_line_service
-            .insert_inbound_shipment_line(&service_context, input.to_domain()),
+            .insert_stock_in_line(&service_context, input.to_domain()),
     )
 }
 
@@ -103,6 +103,12 @@ impl InsertInput {
             number_of_packs,
             total_before_tax,
             tax_percentage,
+            r#type: StockInType::InboundShipment,
+            // Default
+            note: None,
+            stock_line_id: None,
+            barcode: None,
+            stock_on_hold: false,
         }
     }
 }
@@ -137,15 +143,16 @@ fn map_error(error: ServiceError) -> Result<InsertErrorInterface> {
         }
 
         // Standard Graphql Errors
-        ServiceError::NotThisStoreInvoice => BadUserInput(formatted_error),
-        ServiceError::NotAnInboundShipment => BadUserInput(formatted_error),
-        ServiceError::LineAlreadyExists => BadUserInput(formatted_error),
-        ServiceError::NumberOfPacksBelowZero => BadUserInput(formatted_error),
-        ServiceError::PackSizeBelowOne => BadUserInput(formatted_error),
-        ServiceError::LocationDoesNotExist => BadUserInput(formatted_error),
-        ServiceError::ItemNotFound => BadUserInput(formatted_error),
-        ServiceError::DatabaseError(_) => InternalError(formatted_error),
-        ServiceError::NewlyCreatedLineDoesNotExist => InternalError(formatted_error),
+        ServiceError::NotThisStoreInvoice
+        | ServiceError::LineAlreadyExists
+        | ServiceError::NotAStockIn
+        | ServiceError::NumberOfPacksBelowOne
+        | ServiceError::PackSizeBelowOne
+        | ServiceError::LocationDoesNotExist
+        | ServiceError::ItemNotFound => BadUserInput(formatted_error),
+        ServiceError::DatabaseError(_) | ServiceError::NewlyCreatedLineDoesNotExist => {
+            InternalError(formatted_error)
+        }
     };
 
     Err(graphql_error.extend())
@@ -168,9 +175,9 @@ mod test {
     use serde_json::json;
     use service::{
         invoice_line::{
-            inbound_shipment_line::{
-                InsertInboundShipmentLine as ServiceInput,
-                InsertInboundShipmentLineError as ServiceError,
+            stock_in_line::{
+                InsertStockInLine as ServiceInput, InsertStockInLineError as ServiceError,
+                StockInType,
             },
             InvoiceLineServiceTrait,
         },
@@ -185,7 +192,7 @@ mod test {
     pub struct TestService(pub Box<InsertLineMethod>);
 
     impl InvoiceLineServiceTrait for TestService {
-        fn insert_inbound_shipment_line(
+        fn insert_stock_in_line(
             &self,
             _: &ServiceContext,
             input: ServiceInput,
@@ -294,7 +301,7 @@ mod test {
         );
 
         //NotAnInboundShipment
-        let test_service = TestService(Box::new(|_| Err(ServiceError::NotAnInboundShipment)));
+        let test_service = TestService(Box::new(|_| Err(ServiceError::NotAStockIn)));
         let expected_message = "Bad user input";
         assert_standard_graphql_error!(
             &settings,
@@ -318,7 +325,7 @@ mod test {
         );
 
         //NumberOfPacksBelowOne
-        let test_service = TestService(Box::new(|_| Err(ServiceError::NumberOfPacksBelowZero)));
+        let test_service = TestService(Box::new(|_| Err(ServiceError::NumberOfPacksBelowOne)));
         let expected_message = "Bad user input";
         assert_standard_graphql_error!(
             &settings,
@@ -427,14 +434,19 @@ mod test {
                     location: Some(NullableUpdate {
                         value: Some("location input".to_string())
                     }),
-                    pack_size: 2.0,
+                    pack_size: 2,
                     batch: Some("batch".to_string()),
                     cost_price_per_pack: 1.1,
                     sell_price_per_pack: 2.2,
                     expiry_date: Some(NaiveDate::from_ymd_opt(2022, 1, 1).unwrap()),
                     number_of_packs: 1.0,
                     total_before_tax: Some(1.1),
-                    tax_percentage: Some(5.0)
+                    tax_percentage: Some(5.0),
+                    r#type: StockInType::InboundShipment,
+                    note: None,
+                    stock_line_id: None,
+                    barcode: None,
+                    stock_on_hold: false
                 }
             );
             Ok(InvoiceLine {
diff --git a/server/graphql/invoice_line/src/mutations/inbound_shipment_line/line/update.rs b/server/graphql/invoice_line/src/mutations/inbound_shipment_line/line/update.rs
index fb8304a5e..6bc22ba2e 100644
--- a/server/graphql/invoice_line/src/mutations/inbound_shipment_line/line/update.rs
+++ b/server/graphql/invoice_line/src/mutations/inbound_shipment_line/line/update.rs
@@ -10,8 +10,8 @@ use graphql_types::types::InvoiceLineNode;
 
 use repository::InvoiceLine;
 use service::auth::{Resource, ResourceAccessRequest};
-use service::invoice_line::inbound_shipment_line::{
-    UpdateInboundShipmentLine as ServiceInput, UpdateInboundShipmentLineError as ServiceError,
+use service::invoice_line::stock_in_line::{
+    StockInType, UpdateStockInLine as ServiceInput, UpdateStockInLineError as ServiceError,
 };
 use service::invoice_line::ShipmentTaxUpdate;
 use service::NullableUpdate;
@@ -24,7 +24,7 @@ pub struct UpdateInput {
     pub id: String,
     pub item_id: Option<String>,
     pub location: Option<NullableUpdateInput<String>>,
-    pub pack_size: Option<f64>,
+    pub pack_size: Option<u32>,
     pub batch: Option<String>,
     pub cost_price_per_pack: Option<f64>,
     pub sell_price_per_pack: Option<f64>,
@@ -61,7 +61,7 @@ pub fn update(ctx: &Context<'_>, store_id: &str, input: UpdateInput) -> Result<U
 
     let response = match service_provider
         .invoice_line_service
-        .update_inbound_shipment_line(&service_context, input.to_domain())
+        .update_stock_in_line(&service_context, input.to_domain())
     {
         Ok(invoice_line) => UpdateResponse::Response(InvoiceLineNode::from_domain(invoice_line)),
         Err(error) => UpdateResponse::Error(UpdateError {
@@ -112,11 +112,14 @@ impl UpdateInput {
             cost_price_per_pack,
             number_of_packs,
             total_before_tax,
-            tax: tax.and_then(|tax| {
+            tax_percentage: tax.and_then(|tax| {
                 Some(ShipmentTaxUpdate {
                     percentage: tax.percentage,
                 })
             }),
+            r#type: StockInType::InboundShipment,
+            // Default
+            note: None,
         }
     }
 }
@@ -155,13 +158,13 @@ fn map_error(error: ServiceError) -> Result<UpdateErrorInterface> {
             return Ok(UpdateErrorInterface::BatchIsReserved(BatchIsReserved {}))
         }
         // Standard Graphql Errors
-        ServiceError::NotThisStoreInvoice => BadUserInput(formatted_error),
-        ServiceError::NotAnInboundShipment => BadUserInput(formatted_error),
-        ServiceError::NumberOfPacksBelowZero => BadUserInput(formatted_error),
-        ServiceError::NotThisInvoiceLine(_) => BadUserInput(formatted_error),
-        ServiceError::PackSizeBelowOne => BadUserInput(formatted_error),
-        ServiceError::LocationDoesNotExist => BadUserInput(formatted_error),
-        ServiceError::ItemNotFound => BadUserInput(formatted_error),
+        ServiceError::NotThisStoreInvoice
+        | ServiceError::NotAStockIn
+        | ServiceError::NumberOfPacksBelowOne
+        | ServiceError::NotThisInvoiceLine(_)
+        | ServiceError::PackSizeBelowOne
+        | ServiceError::LocationDoesNotExist
+        | ServiceError::ItemNotFound => BadUserInput(formatted_error),
         ServiceError::DatabaseError(_) => InternalError(formatted_error),
         ServiceError::UpdatedLineDoesNotExist => InternalError(formatted_error),
     };
@@ -186,9 +189,9 @@ mod test {
     use serde_json::json;
     use service::{
         invoice_line::{
-            inbound_shipment_line::{
-                UpdateInboundShipmentLine as ServiceInput,
-                UpdateInboundShipmentLineError as ServiceError,
+            stock_in_line::{
+                StockInType, UpdateStockInLine as ServiceInput,
+                UpdateStockInLineError as ServiceError,
             },
             InvoiceLineServiceTrait,
         },
@@ -203,7 +206,7 @@ mod test {
     pub struct TestService(pub Box<InsertLineMethod>);
 
     impl InvoiceLineServiceTrait for TestService {
-        fn update_inbound_shipment_line(
+        fn update_stock_in_line(
             &self,
             _: &ServiceContext,
             input: ServiceInput,
@@ -348,7 +351,7 @@ mod test {
         );
 
         //NotAnInboundShipment
-        let test_service = TestService(Box::new(|_| Err(ServiceError::NotAnInboundShipment)));
+        let test_service = TestService(Box::new(|_| Err(ServiceError::NotAStockIn)));
         let expected_message = "Bad user input";
         assert_standard_graphql_error!(
             &settings,
@@ -360,7 +363,7 @@ mod test {
         );
 
         //NumberOfPacksBelowOne
-        let test_service = TestService(Box::new(|_| Err(ServiceError::NumberOfPacksBelowZero)));
+        let test_service = TestService(Box::new(|_| Err(ServiceError::NumberOfPacksBelowOne)));
         let expected_message = "Bad user input";
         assert_standard_graphql_error!(
             &settings,
@@ -470,14 +473,16 @@ mod test {
                     location: Some(NullableUpdate {
                         value: Some("location 1".to_string())
                     }),
-                    pack_size: Some(1.0),
+                    pack_size: Some(1),
                     batch: Some("batch input".to_string()),
                     cost_price_per_pack: Some(1.0),
                     sell_price_per_pack: Some(1.0),
                     expiry_date: Some(NaiveDate::from_ymd_opt(2022, 1, 1).unwrap()),
                     number_of_packs: Some(1.0),
+                    r#type: StockInType::InboundShipment,
                     total_before_tax: None,
-                    tax: None,
+                    tax_percentage: None,
+                    note: None,
                 }
             );
             Ok(InvoiceLine {
diff --git a/server/graphql/invoice_line/src/mutations/inbound_shipment_line/service_line/delete.rs b/server/graphql/invoice_line/src/mutations/inbound_shipment_line/service_line/delete.rs
index e6f6617af..3b4836265 100644
--- a/server/graphql/invoice_line/src/mutations/inbound_shipment_line/service_line/delete.rs
+++ b/server/graphql/invoice_line/src/mutations/inbound_shipment_line/service_line/delete.rs
@@ -9,7 +9,7 @@ use graphql_core::standard_graphql_error::{validate_auth, StandardGraphqlError};
 use graphql_types::types::DeleteResponse as GenericDeleteResponse;
 
 use service::auth::{Resource, ResourceAccessRequest};
-use service::invoice_line::inbound_shipment_line::DeleteInboundShipmentLine as ServiceInput;
+use service::invoice_line::stock_in_line::{DeleteStockInLine as ServiceInput, StockInType};
 
 #[derive(InputObject)]
 #[graphql(name = "DeleteInboundShipmentServiceLineInput")]
@@ -72,7 +72,10 @@ pub enum DeleteErrorInterface {
 impl DeleteInput {
     pub fn to_domain(self) -> ServiceInput {
         let DeleteInput { id } = self;
-        ServiceInput { id }
+        ServiceInput {
+            id,
+            r#type: StockInType::InboundShipment,
+        }
     }
 }
 
@@ -117,14 +120,14 @@ mod test {
     use serde_json::json;
     use service::{
         invoice_line::{
-            inbound_shipment_line::DeleteInboundShipmentLine,
             inbound_shipment_service_line::DeleteInboundShipmentServiceLineError,
+            stock_in_line::{DeleteStockInLine, StockInType},
             InvoiceLineServiceTrait,
         },
         service_provider::{ServiceContext, ServiceProvider},
     };
 
-    type ServiceInput = DeleteInboundShipmentLine;
+    type ServiceInput = DeleteStockInLine;
     type ServiceError = DeleteInboundShipmentServiceLineError;
 
     type DeleteLineMethod = dyn Fn(ServiceInput) -> Result<String, ServiceError> + Sync + Send;
@@ -292,6 +295,7 @@ mod test {
                 input,
                 ServiceInput {
                     id: "delete line id input".to_string(),
+                    r#type: StockInType::InboundShipment
                 }
             );
             Ok("delete line id input".to_string())
diff --git a/server/graphql/invoice_line/src/mutations/outbound_shipment_line/line/delete.rs b/server/graphql/invoice_line/src/mutations/outbound_shipment_line/line/delete.rs
index 99fd7754f..9e5d62e95 100644
--- a/server/graphql/invoice_line/src/mutations/outbound_shipment_line/line/delete.rs
+++ b/server/graphql/invoice_line/src/mutations/outbound_shipment_line/line/delete.rs
@@ -98,11 +98,9 @@ fn map_error(error: ServiceError) -> Result<DeleteErrorInterface> {
             )))
         }
         // Standard Graphql Errors
-        NotThisInvoiceLine(_)
-        | InvoiceTypeDoesNotMatch
-        | NoInvoiceType
-        | NotThisStoreInvoice
-        | StockLineDoesNotExist => StandardGraphqlError::BadUserInput(formatted_error),
+        NotThisInvoiceLine(_) | InvoiceTypeDoesNotMatch | NoInvoiceType | NotThisStoreInvoice => {
+            StandardGraphqlError::BadUserInput(formatted_error)
+        }
         DatabaseError(_) => StandardGraphqlError::InternalError(formatted_error),
     };
 
diff --git a/server/graphql/invoice_line/src/mutations/outbound_shipment_line/line/insert.rs b/server/graphql/invoice_line/src/mutations/outbound_shipment_line/line/insert.rs
index f91c9bbb8..fa4fbf11a 100644
--- a/server/graphql/invoice_line/src/mutations/outbound_shipment_line/line/insert.rs
+++ b/server/graphql/invoice_line/src/mutations/outbound_shipment_line/line/insert.rs
@@ -96,13 +96,20 @@ impl InsertInput {
 
         ServiceInput {
             id,
-            r#type: Some(StockOutType::OutboundShipment),
+            r#type: StockOutType::OutboundShipment,
             invoice_id,
             stock_line_id,
             number_of_packs,
             total_before_tax,
             tax_percentage,
+            // Default
             note: None,
+            location_id: None,
+            batch: None,
+            pack_size: None,
+            expiry_date: None,
+            cost_price_per_pack: None,
+            sell_price_per_pack: None,
         }
     }
 }
@@ -158,7 +165,6 @@ fn map_error(error: ServiceError) -> Result<InsertErrorInterface> {
         }
         // Standard Graphql Errors
         NotThisStoreInvoice
-        | NoInvoiceType
         | InvoiceTypeDoesNotMatch
         | LineAlreadyExists
         | NumberOfPacksBelowOne => StandardGraphqlError::BadUserInput(formatted_error),
@@ -531,9 +537,15 @@ mod test {
                     stock_line_id: "stock line input".to_string(),
                     number_of_packs: 1.0,
                     total_before_tax: Some(1.1),
-                    r#type: Some(StockOutType::OutboundShipment),
+                    r#type: StockOutType::OutboundShipment,
                     tax_percentage: Some(5.0),
                     note: None,
+                    location_id: None,
+                    batch: None,
+                    pack_size: None,
+                    expiry_date: None,
+                    cost_price_per_pack: None,
+                    sell_price_per_pack: None
                 }
             );
             Ok(InvoiceLine {
diff --git a/server/graphql/invoice_line/src/mutations/outbound_shipment_line/unallocated_line/update.rs b/server/graphql/invoice_line/src/mutations/outbound_shipment_line/unallocated_line/update.rs
index 2c92e442a..a7548edf4 100644
--- a/server/graphql/invoice_line/src/mutations/outbound_shipment_line/unallocated_line/update.rs
+++ b/server/graphql/invoice_line/src/mutations/outbound_shipment_line/unallocated_line/update.rs
@@ -18,7 +18,7 @@ use service::{
 #[graphql(name = "UpdateOutboundShipmentUnallocatedLineInput")]
 pub struct UpdateInput {
     pub id: String,
-    pub quantity: f64,
+    pub quantity: u32,
 }
 
 #[derive(Interface)]
@@ -90,7 +90,7 @@ fn map_error(error: ServiceError) -> Result<UpdateErrorInterface> {
             return Ok(UpdateErrorInterface::RecordNotFound(RecordNotFound {}))
         }
         ServiceError::InvoiceDoesNotExist => {
-            //TODO: Change all to std error or update check_line_exists
+            //TODO: Change all to std error or update check_line_exists_option
             //https://github.com/openmsupply/open-msupply/pull/366#discussion_r930574975
             return Ok(UpdateErrorInterface::ForeignKeyError(ForeignKeyError(
                 ForeignKey::InvoiceId,
diff --git a/server/graphql/invoice_line/src/mutations/prescription_line/delete.rs b/server/graphql/invoice_line/src/mutations/prescription_line/delete.rs
index 101c95e4e..51aa5a7bb 100644
--- a/server/graphql/invoice_line/src/mutations/prescription_line/delete.rs
+++ b/server/graphql/invoice_line/src/mutations/prescription_line/delete.rs
@@ -97,11 +97,9 @@ fn map_error(error: ServiceError) -> Result<DeleteErrorInterface> {
             )))
         }
         // Standard Graphql Errors
-        NotThisInvoiceLine(_)
-        | InvoiceTypeDoesNotMatch
-        | NoInvoiceType
-        | NotThisStoreInvoice
-        | StockLineDoesNotExist => StandardGraphqlError::BadUserInput(formatted_error),
+        NotThisInvoiceLine(_) | InvoiceTypeDoesNotMatch | NoInvoiceType | NotThisStoreInvoice => {
+            StandardGraphqlError::BadUserInput(formatted_error)
+        }
         DatabaseError(_) => StandardGraphqlError::InternalError(formatted_error),
     };
 
diff --git a/server/graphql/invoice_line/src/mutations/prescription_line/insert.rs b/server/graphql/invoice_line/src/mutations/prescription_line/insert.rs
index 68cb25508..838a732e9 100644
--- a/server/graphql/invoice_line/src/mutations/prescription_line/insert.rs
+++ b/server/graphql/invoice_line/src/mutations/prescription_line/insert.rs
@@ -133,7 +133,6 @@ fn map_error(error: ServiceError) -> Result<InsertErrorInterface> {
         }
         // Standard Graphql Errors
         NotThisStoreInvoice
-        | NoInvoiceType
         | InvoiceTypeDoesNotMatch
         | LineAlreadyExists
         | NumberOfPacksBelowOne => StandardGraphqlError::BadUserInput(formatted_error),
@@ -157,13 +156,20 @@ impl InsertInput {
 
         ServiceInput {
             id,
-            r#type: Some(StockOutType::Prescription),
+            r#type: StockOutType::Prescription,
             invoice_id,
             stock_line_id,
             number_of_packs,
+            note,
+            // Default
             total_before_tax: None,
             tax_percentage: None,
-            note,
+            location_id: None,
+            batch: None,
+            pack_size: None,
+            expiry_date: None,
+            cost_price_per_pack: None,
+            sell_price_per_pack: None,
         }
     }
 }
@@ -524,13 +530,19 @@ mod test {
                 input,
                 ServiceInput {
                     id: "new id".to_string(),
-                    r#type: Some(StockOutType::Prescription),
+                    r#type: StockOutType::Prescription,
                     invoice_id: "invoice input".to_string(),
                     stock_line_id: "stock line input".to_string(),
                     number_of_packs: 1.0,
                     total_before_tax: None,
                     note: None,
                     tax_percentage: None,
+                    location_id: None,
+                    batch: None,
+                    pack_size: None,
+                    expiry_date: None,
+                    cost_price_per_pack: None,
+                    sell_price_per_pack: None
                 }
             );
             Ok(InvoiceLine {
diff --git a/server/graphql/lib.rs b/server/graphql/lib.rs
index 5c3a748c8..42d19b8ef 100644
--- a/server/graphql/lib.rs
+++ b/server/graphql/lib.rs
@@ -10,7 +10,6 @@ use actix_web::{guard, HttpRequest};
 use async_graphql::{EmptyMutation, EmptySubscription, Object, Schema};
 use async_graphql::{MergedObject, Response};
 use async_graphql_actix_web::{GraphQLRequest, GraphQLResponse};
-use graphql_asset::property::AssetPropertiesQueries;
 use graphql_batch_mutations::BatchMutations;
 use graphql_clinician::ClinicianQueries;
 use graphql_core::loader::LoaderRegistry;
@@ -23,20 +22,19 @@ use graphql_general::{
 };
 
 use graphql_asset::{
-    logs::{AssetLogMutations, AssetLogQueries, AssetLogReasonMutations, AssetLogReasonQueries},
+    AssetLogMutations, AssetLogQueries, AssetLogReasonMutations, AssetLogReasonQueries,
     AssetMutations, AssetQueries,
 };
 use graphql_asset_catalogue::AssetCatalogueMutations;
 use graphql_asset_catalogue::AssetCatalogueQueries;
 use graphql_cold_chain::{ColdChainMutations, ColdChainQueries};
-use graphql_demographic::{DemographicIndicatorQueries, DemographicMutations};
 use graphql_inventory_adjustment::InventoryAdjustmentMutations;
 use graphql_invoice::{InvoiceMutations, InvoiceQueries};
 use graphql_invoice_line::{InvoiceLineMutations, InvoiceLineQueries};
 use graphql_location::{LocationMutations, LocationQueries};
 use graphql_pack_variant::{PackVariantMutations, PackVariantQueries};
 use graphql_plugin::{PluginMutations, PluginQueries};
-use graphql_programs::{CentralProgramsMutations, ProgramsMutations, ProgramsQueries};
+use graphql_programs::{ProgramsMutations, ProgramsQueries};
 use graphql_repack::{RepackMutations, RepackQueries};
 use graphql_reports::ReportQueries;
 use graphql_requisition::{RequisitionMutations, RequisitionQueries};
@@ -45,7 +43,6 @@ use graphql_stock_line::{StockLineMutations, StockLineQueries};
 use graphql_stocktake::{StocktakeMutations, StocktakeQueries};
 use graphql_stocktake_line::{StocktakeLineMutations, StocktakeLineQueries};
 
-use graphql_vaccine_course::{VaccineCourseMutations, VaccineCourseQueries};
 use repository::StorageConnectionManager;
 use service::auth_data::AuthData;
 use service::plugin::validation::ValidatedPluginBucket;
@@ -74,16 +71,6 @@ impl CentralServerMutationNode {
     async fn log_reason(&self) -> AssetLogReasonMutations {
         AssetLogReasonMutations
     }
-    async fn demographic(&self) -> DemographicMutations {
-        DemographicMutations
-    }
-    async fn vaccine_course(&self) -> VaccineCourseMutations {
-        VaccineCourseMutations
-    }
-
-    async fn program(&self) -> CentralProgramsMutations {
-        CentralProgramsMutations
-    }
 }
 
 #[derive(Default, Clone)]
@@ -121,9 +108,6 @@ pub struct Queries(
     pub AssetQueries,
     pub AssetLogQueries,
     pub AssetLogReasonQueries,
-    pub AssetPropertiesQueries,
-    pub DemographicIndicatorQueries,
-    pub VaccineCourseQueries,
 );
 
 impl Queries {
@@ -149,9 +133,6 @@ impl Queries {
             AssetQueries,
             AssetLogQueries,
             AssetLogReasonQueries,
-            AssetPropertiesQueries,
-            DemographicIndicatorQueries,
-            VaccineCourseQueries,
         )
     }
 }
diff --git a/server/graphql/pack_variant/src/mutations/insert.rs b/server/graphql/pack_variant/src/mutations/insert.rs
index 33e4428a1..945bfa9ae 100644
--- a/server/graphql/pack_variant/src/mutations/insert.rs
+++ b/server/graphql/pack_variant/src/mutations/insert.rs
@@ -22,7 +22,7 @@ pub struct InsertPackVariantInput {
     pub item_id: String,
     pub short_name: String,
     pub long_name: String,
-    pub pack_size: f64,
+    pub pack_size: i32,
 }
 
 #[derive(Union)]
diff --git a/server/graphql/programs/src/lib.rs b/server/graphql/programs/src/lib.rs
index 7358c46e7..191585d36 100644
--- a/server/graphql/programs/src/lib.rs
+++ b/server/graphql/programs/src/lib.rs
@@ -34,9 +34,6 @@ use mutations::encounter::insert::InsertEncounterResponse;
 use mutations::encounter::update::update_encounter;
 use mutations::encounter::update::UpdateEncounterInput;
 use mutations::encounter::update::UpdateEncounterResponse;
-use mutations::immunisation::insert::insert_immunisation_program;
-use mutations::immunisation::insert::InsertImmunisationProgramInput;
-use mutations::immunisation::insert::InsertImmunisationProgramResponse;
 use mutations::insert_document_registry::*;
 use mutations::patient::insert::insert_patient;
 use mutations::patient::insert::InsertPatientInput;
@@ -59,14 +56,10 @@ use queries::contact_trace::contact_traces;
 use service::auth::Resource;
 use service::auth::ResourceAccessRequest;
 use service::programs::patient::patient_search_central;
-use types::program::ProgramFilterInput;
-use types::program::ProgramSortInput;
-use types::program::ProgramsResponse;
 
 mod mutations;
 
 mod queries;
-pub mod types;
 use self::queries::*;
 
 #[derive(Default, Clone)]
@@ -236,17 +229,6 @@ impl ProgramsQueries {
     ) -> Result<ContactTraceResponse> {
         contact_traces(ctx, store_id, page, filter, sort)
     }
-
-    pub async fn programs(
-        &self,
-        ctx: &Context<'_>,
-        store_id: String,
-        page: Option<PaginationInput>,
-        filter: Option<ProgramFilterInput>,
-        sort: Option<ProgramSortInput>,
-    ) -> Result<ProgramsResponse> {
-        programs(ctx, store_id, page, filter, sort)
-    }
 }
 
 #[derive(Default, Clone)]
@@ -389,18 +371,3 @@ impl ProgramsMutations {
         update_contact_trace(ctx, store_id, input)
     }
 }
-
-#[derive(Default, Clone)]
-pub struct CentralProgramsMutations;
-
-#[Object]
-impl CentralProgramsMutations {
-    pub async fn insert_immunisation_program(
-        &self,
-        ctx: &Context<'_>,
-        store_id: String,
-        input: InsertImmunisationProgramInput,
-    ) -> Result<InsertImmunisationProgramResponse> {
-        insert_immunisation_program(ctx, store_id, input)
-    }
-}
diff --git a/server/graphql/programs/src/mutations/immunisation/insert.rs b/server/graphql/programs/src/mutations/immunisation/insert.rs
deleted file mode 100644
index f6c4339b3..000000000
--- a/server/graphql/programs/src/mutations/immunisation/insert.rs
+++ /dev/null
@@ -1,91 +0,0 @@
-use async_graphql::*;
-
-use graphql_core::{
-    simple_generic_errors::{DatabaseError, RecordAlreadyExist},
-    standard_graphql_error::{validate_auth, StandardGraphqlError},
-    ContextExt,
-};
-use graphql_types::types::program_node::ProgramNode;
-use service::{
-    auth::{Resource, ResourceAccessRequest},
-    program::insert_immunisation::{
-        InsertImmunisationProgram, InsertImmunisationProgramError as ServiceError,
-    },
-};
-
-#[derive(InputObject)]
-pub struct InsertImmunisationProgramInput {
-    pub id: String,
-    pub name: String,
-}
-
-impl From<InsertImmunisationProgramInput> for InsertImmunisationProgram {
-    fn from(input: InsertImmunisationProgramInput) -> Self {
-        Self {
-            id: input.id,
-            name: input.name,
-        }
-    }
-}
-
-#[derive(SimpleObject)]
-pub struct InsertImmunisationProgramError {
-    pub error: InsertImmunisationProgramErrorInterface,
-}
-
-#[derive(Interface)]
-#[graphql(field(name = "description", type = "String"))]
-pub enum InsertImmunisationProgramErrorInterface {
-    ProgramAlreadyExists(RecordAlreadyExist),
-    DatabaseError(DatabaseError),
-}
-
-fn map_error(error: ServiceError) -> Result<InsertImmunisationProgramErrorInterface> {
-    use StandardGraphqlError::*;
-    let formatted_error = format!("{:#?}", error);
-
-    let graphql_error = match error {
-        // Standard Graphql Errors
-        ServiceError::ImmunisationProgramAlreadyExists => BadUserInput(formatted_error),
-        ServiceError::CreatedRecordNotFound => InternalError(formatted_error),
-        ServiceError::DatabaseError(_) => InternalError(formatted_error),
-    };
-
-    Err(graphql_error.extend())
-}
-
-#[derive(Union)]
-pub enum InsertImmunisationProgramResponse {
-    Response(ProgramNode),
-    Error(InsertImmunisationProgramError),
-}
-
-pub fn insert_immunisation_program(
-    ctx: &Context<'_>,
-    store_id: String,
-    input: InsertImmunisationProgramInput,
-) -> Result<InsertImmunisationProgramResponse> {
-    let user = validate_auth(
-        ctx,
-        &ResourceAccessRequest {
-            resource: Resource::MutateProgram,
-            store_id: Some(store_id.clone()),
-        },
-    )?;
-    let service_provider = ctx.service_provider();
-    let service_context = service_provider.context(store_id.to_string(), user.user_id)?;
-
-    match service_provider
-        .program_service
-        .insert_immunisation_program(&service_context, input.into())
-    {
-        Ok(row) => Ok(InsertImmunisationProgramResponse::Response(ProgramNode {
-            program_row: row,
-        })),
-        Err(error) => Ok(InsertImmunisationProgramResponse::Error(
-            InsertImmunisationProgramError {
-                error: map_error(error)?,
-            },
-        )),
-    }
-}
diff --git a/server/graphql/programs/src/mutations/immunisation/mod.rs b/server/graphql/programs/src/mutations/immunisation/mod.rs
deleted file mode 100644
index 0173d2e53..000000000
--- a/server/graphql/programs/src/mutations/immunisation/mod.rs
+++ /dev/null
@@ -1 +0,0 @@
-pub mod insert;
diff --git a/server/graphql/programs/src/mutations/mod.rs b/server/graphql/programs/src/mutations/mod.rs
index 3b5f86725..a0b5cd92b 100644
--- a/server/graphql/programs/src/mutations/mod.rs
+++ b/server/graphql/programs/src/mutations/mod.rs
@@ -1,7 +1,6 @@
 pub mod allocate_number;
 pub mod contact_trace;
 pub mod encounter;
-pub mod immunisation;
 pub mod insert_document_registry;
 pub mod patient;
 pub mod program_enrolment;
diff --git a/server/graphql/programs/src/queries/mod.rs b/server/graphql/programs/src/queries/mod.rs
index ce7c73640..89bc6c671 100644
--- a/server/graphql/programs/src/queries/mod.rs
+++ b/server/graphql/programs/src/queries/mod.rs
@@ -21,5 +21,3 @@ pub use self::encounter_fields::*;
 pub mod document_registry;
 pub use self::document_registry::*;
 pub mod contact_trace;
-pub mod program;
-pub use self::program::*;
diff --git a/server/graphql/programs/src/queries/program.rs b/server/graphql/programs/src/queries/program.rs
deleted file mode 100644
index dda8bd8b6..000000000
--- a/server/graphql/programs/src/queries/program.rs
+++ /dev/null
@@ -1,45 +0,0 @@
-use async_graphql::*;
-use graphql_core::{
-    pagination::PaginationInput,
-    standard_graphql_error::{validate_auth, StandardGraphqlError},
-    ContextExt,
-};
-
-use repository::{PaginationOption, ProgramFilter};
-use service::auth::{Resource, ResourceAccessRequest};
-
-use crate::types::program::{
-    ProgramConnector, ProgramFilterInput, ProgramSortInput, ProgramsResponse,
-};
-
-pub fn programs(
-    ctx: &Context<'_>,
-    store_id: String,
-    page: Option<PaginationInput>,
-    filter: Option<ProgramFilterInput>,
-    sort: Option<ProgramSortInput>,
-) -> Result<ProgramsResponse> {
-    let user = validate_auth(
-        ctx,
-        &ResourceAccessRequest {
-            resource: Resource::QueryProgram,
-            store_id: Some(store_id.clone()),
-        },
-    )?;
-    let service_provider = ctx.service_provider();
-    let context = service_provider.context(store_id, user.user_id)?;
-
-    let list_result = service_provider
-        .program_service
-        .get_programs(
-            &context.connection,
-            page.map(PaginationOption::from),
-            filter.map(ProgramFilter::from),
-            sort.map(ProgramSortInput::to_domain),
-        )
-        .map_err(StandardGraphqlError::from_list_error)?;
-
-    Ok(ProgramsResponse::Response(ProgramConnector::from_domain(
-        list_result,
-    )))
-}
diff --git a/server/graphql/programs/src/types/mod.rs b/server/graphql/programs/src/types/mod.rs
deleted file mode 100644
index e2c04eaaa..000000000
--- a/server/graphql/programs/src/types/mod.rs
+++ /dev/null
@@ -1 +0,0 @@
-pub mod program;
diff --git a/server/graphql/programs/src/types/program.rs b/server/graphql/programs/src/types/program.rs
deleted file mode 100644
index e0f2ebad1..000000000
--- a/server/graphql/programs/src/types/program.rs
+++ /dev/null
@@ -1,78 +0,0 @@
-use async_graphql::*;
-
-use graphql_core::generic_filters::{EqualFilterStringInput, StringFilterInput};
-use graphql_types::types::program_node::ProgramNode;
-use repository::{
-    EqualFilter, ProgramFilter, ProgramRow, ProgramSort, ProgramSortField, StringFilter,
-};
-use service::ListResult;
-
-#[derive(SimpleObject)]
-pub struct ProgramConnector {
-    pub total_count: u32,
-    pub nodes: Vec<ProgramNode>,
-}
-
-#[derive(Union)]
-pub enum ProgramsResponse {
-    Response(ProgramConnector),
-}
-
-#[derive(Enum, Copy, Clone, PartialEq, Eq)]
-#[graphql(rename_items = "camelCase")]
-pub enum ProgramSortFieldInput {
-    Name,
-}
-
-#[derive(InputObject)]
-pub struct ProgramSortInput {
-    /// Sort query result by `key`
-    key: ProgramSortFieldInput,
-    /// Sort query result is sorted descending or ascending (if not provided the default is
-    /// ascending)
-    desc: Option<bool>,
-}
-
-impl ProgramSortInput {
-    pub fn to_domain(self) -> ProgramSort {
-        let key = match self.key {
-            ProgramSortFieldInput::Name => ProgramSortField::Name,
-        };
-
-        ProgramSort {
-            key,
-            desc: self.desc,
-        }
-    }
-}
-
-#[derive(InputObject, Clone)]
-pub struct ProgramFilterInput {
-    pub id: Option<EqualFilterStringInput>,
-    pub name: Option<StringFilterInput>,
-    pub context_id: Option<EqualFilterStringInput>,
-    pub is_immunisation: Option<bool>,
-}
-impl From<ProgramFilterInput> for ProgramFilter {
-    fn from(f: ProgramFilterInput) -> Self {
-        ProgramFilter {
-            id: f.id.map(EqualFilter::from),
-            name: f.name.map(StringFilter::from),
-            context_id: f.context_id.map(EqualFilter::from),
-            is_immunisation: f.is_immunisation,
-        }
-    }
-}
-
-impl ProgramConnector {
-    pub fn from_domain(assets: ListResult<ProgramRow>) -> ProgramConnector {
-        ProgramConnector {
-            total_count: assets.count,
-            nodes: assets
-                .rows
-                .into_iter()
-                .map(|row| ProgramNode { program_row: row })
-                .collect(),
-        }
-    }
-}
diff --git a/server/graphql/repack/mutations/insert.rs b/server/graphql/repack/mutations/insert.rs
index ed2ad066a..3269abf8c 100644
--- a/server/graphql/repack/mutations/insert.rs
+++ b/server/graphql/repack/mutations/insert.rs
@@ -16,7 +16,7 @@ use service::{
 pub struct InsertRepackInput {
     pub stock_line_id: String,
     pub number_of_packs: f64,
-    pub new_pack_size: f64,
+    pub new_pack_size: i32,
     pub new_location_id: Option<String>,
 }
 
diff --git a/server/graphql/requisition_line/src/mutations/request_requisition_line/insert.rs b/server/graphql/requisition_line/src/mutations/request_requisition_line/insert.rs
index 4e427e5cb..6da97f878 100644
--- a/server/graphql/requisition_line/src/mutations/request_requisition_line/insert.rs
+++ b/server/graphql/requisition_line/src/mutations/request_requisition_line/insert.rs
@@ -20,7 +20,7 @@ pub struct InsertInput {
     pub id: String,
     pub item_id: String,
     pub requisition_id: String,
-    pub requested_quantity: Option<f64>,
+    pub requested_quantity: Option<u32>,
     pub comment: Option<String>,
 }
 
@@ -392,7 +392,7 @@ mod test {
                     id: "new line id input".to_string(),
                     item_id: mock_item_a().id,
                     requisition_id: "requisition id input".to_string(),
-                    requested_quantity: Some(1.0),
+                    requested_quantity: Some(1),
                     comment: Some("comment".to_string())
                 }
             );
diff --git a/server/graphql/requisition_line/src/mutations/request_requisition_line/update.rs b/server/graphql/requisition_line/src/mutations/request_requisition_line/update.rs
index 852342464..d71327547 100644
--- a/server/graphql/requisition_line/src/mutations/request_requisition_line/update.rs
+++ b/server/graphql/requisition_line/src/mutations/request_requisition_line/update.rs
@@ -18,7 +18,7 @@ use service::{
 #[graphql(name = "UpdateRequestRequisitionLineInput")]
 pub struct UpdateInput {
     pub id: String,
-    pub requested_quantity: Option<f64>,
+    pub requested_quantity: Option<u32>,
     pub comment: Option<String>,
 }
 
@@ -327,7 +327,7 @@ mod test {
                 input,
                 ServiceInput {
                     id: "update line id input".to_string(),
-                    requested_quantity: Some(1.0),
+                    requested_quantity: Some(1),
                     comment: Some("comment".to_string())
                 }
             );
diff --git a/server/graphql/requisition_line/src/mutations/response_requisition_line/update.rs b/server/graphql/requisition_line/src/mutations/response_requisition_line/update.rs
index 6ec22462d..4e5814998 100644
--- a/server/graphql/requisition_line/src/mutations/response_requisition_line/update.rs
+++ b/server/graphql/requisition_line/src/mutations/response_requisition_line/update.rs
@@ -17,7 +17,7 @@ use service::{
 #[graphql(name = "UpdateResponseRequisitionLineInput")]
 pub struct UpdateInput {
     pub id: String,
-    pub supply_quantity: Option<f64>,
+    pub supply_quantity: Option<u32>,
     pub comment: Option<String>,
 }
 
@@ -322,7 +322,7 @@ mod test {
                 input,
                 ServiceInput {
                     id: "update line id input".to_string(),
-                    supply_quantity: Some(1.0),
+                    supply_quantity: Some(1),
                     comment: Some("comment".to_string()),
                 }
             );
diff --git a/server/graphql/stock_line/src/mutations/insert.rs b/server/graphql/stock_line/src/mutations/insert.rs
index e00e469fa..c05a453d7 100644
--- a/server/graphql/stock_line/src/mutations/insert.rs
+++ b/server/graphql/stock_line/src/mutations/insert.rs
@@ -21,7 +21,7 @@ pub struct InsertInput {
     pub number_of_packs: f64,
     pub cost_price_per_pack: f64,
     pub sell_price_per_pack: f64,
-    pub pack_size: f64,
+    pub pack_size: u32,
     pub on_hold: bool,
     pub batch: Option<String>,
     pub location: Option<NullableUpdateInput<String>>,
@@ -236,7 +236,7 @@ mod test {
                     }),
                     item_id: mock_item_a().id,
                     number_of_packs: 2.0,
-                    pack_size: 1.0,
+                    pack_size: 1,
                     inventory_adjustment_reason_id: None,
                     cost_price_per_pack: 0.0,
                     sell_price_per_pack: 0.0,
diff --git a/server/graphql/stocktake/src/mutations/update.rs b/server/graphql/stocktake/src/mutations/update.rs
index c4d1ae786..d5ad35d0f 100644
--- a/server/graphql/stocktake/src/mutations/update.rs
+++ b/server/graphql/stocktake/src/mutations/update.rs
@@ -141,7 +141,9 @@ fn map_error(err: ServiceError) -> Result<UpdateErrorInterface> {
         ServiceError::StocktakeDoesNotExist => BadUserInput(formatted_error),
         ServiceError::NoLines => BadUserInput(formatted_error),
         ServiceError::InternalError(err) => InternalError(err),
-        ServiceError::DatabaseError(_) => InternalError(formatted_error),
+        ServiceError::InsertStockInLineError { .. }
+        | ServiceError::InsertStockOutLineError { .. }
+        | ServiceError::DatabaseError(_) => InternalError(formatted_error),
     };
 
     Err(graphql_error.extend())
diff --git a/server/graphql/stocktake_line/src/mutations/insert.rs b/server/graphql/stocktake_line/src/mutations/insert.rs
index 0a108fad3..6c3cf4de5 100644
--- a/server/graphql/stocktake_line/src/mutations/insert.rs
+++ b/server/graphql/stocktake_line/src/mutations/insert.rs
@@ -30,7 +30,7 @@ pub struct InsertInput {
     pub item_id: Option<String>,
     pub batch: Option<String>,
     pub expiry_date: Option<NaiveDate>,
-    pub pack_size: Option<f64>,
+    pub pack_size: Option<u32>,
     pub cost_price_per_pack: Option<f64>,
     pub sell_price_per_pack: Option<f64>,
     pub note: Option<String>,
@@ -287,7 +287,7 @@ mod test {
                     item_name: "item name".to_string(),
                     batch: Some("batch".to_string()),
                     expiry_date: Some(NaiveDate::from_ymd_opt(2023, 1, 22).unwrap()),
-                    pack_size: Some(10.0),
+                    pack_size: Some(10),
                     cost_price_per_pack: Some(10.0),
                     sell_price_per_pack: Some(12.0),
                     note: Some("note".to_string()),
diff --git a/server/graphql/stocktake_line/src/mutations/update.rs b/server/graphql/stocktake_line/src/mutations/update.rs
index 6dce16b9c..90f8ede5d 100644
--- a/server/graphql/stocktake_line/src/mutations/update.rs
+++ b/server/graphql/stocktake_line/src/mutations/update.rs
@@ -30,7 +30,7 @@ pub struct UpdateInput {
     pub counted_number_of_packs: Option<f64>,
     pub batch: Option<String>,
     pub expiry_date: Option<NaiveDate>,
-    pub pack_size: Option<f64>,
+    pub pack_size: Option<u32>,
     pub cost_price_per_pack: Option<f64>,
     pub sell_price_per_pack: Option<f64>,
     pub note: Option<String>,
@@ -273,7 +273,7 @@ mod test {
                     item_name: "item name".to_string(),
                     batch: Some("batch".to_string()),
                     expiry_date: Some(NaiveDate::from_ymd_opt(2023, 1, 22).unwrap()),
-                    pack_size: Some(10.0),
+                    pack_size: Some(10),
                     cost_price_per_pack: Some(10.0),
                     sell_price_per_pack: Some(12.0),
                     note: Some("note".to_string()),
diff --git a/server/graphql/types/src/types/activity_log.rs b/server/graphql/types/src/types/activity_log.rs
index 72d57359f..0204ed191 100644
--- a/server/graphql/types/src/types/activity_log.rs
+++ b/server/graphql/types/src/types/activity_log.rs
@@ -63,9 +63,6 @@ pub enum ActivityLogNodeType {
     AssetCatalogueItemPropertyCreated,
     AssetLogReasonCreated,
     AssetLogReasonDeleted,
-    AssetPropertyCreated,
-    VaccineCourseCreated,
-    ProgramCreated,
 }
 
 #[Object]
@@ -184,9 +181,6 @@ impl ActivityLogNodeType {
             from::AssetCatalogueItemPropertyCreated => to::AssetCatalogueItemPropertyCreated,
             from::AssetLogReasonCreated => to::AssetLogReasonCreated,
             from::AssetLogReasonDeleted => to::AssetLogReasonDeleted,
-            from::AssetPropertyCreated => to::AssetPropertyCreated,
-            from::VaccineCourseCreated => to::VaccineCourseCreated,
-            from::ProgramCreated => to::ProgramCreated,
         }
     }
 
@@ -235,9 +229,6 @@ impl ActivityLogNodeType {
             from::AssetCatalogueItemPropertyCreated => to::AssetCatalogueItemPropertyCreated,
             from::AssetLogReasonCreated => to::AssetLogReasonCreated,
             from::AssetLogReasonDeleted => to::AssetLogReasonDeleted,
-            from::AssetPropertyCreated => to::AssetPropertyCreated,
-            from::VaccineCourseCreated => to::VaccineCourseCreated,
-            from::ProgramCreated => to::ProgramCreated,
         }
     }
 }
diff --git a/server/graphql/types/src/types/barcode.rs b/server/graphql/types/src/types/barcode.rs
index 24829fade..9288ea6e6 100644
--- a/server/graphql/types/src/types/barcode.rs
+++ b/server/graphql/types/src/types/barcode.rs
@@ -35,7 +35,7 @@ impl BarcodeNode {
             .map(|it| it.id.clone())
     }
 
-    pub async fn pack_size(&self) -> Option<f64> {
+    pub async fn pack_size(&self) -> Option<i32> {
         self.row().pack_size
     }
 
@@ -101,7 +101,7 @@ mod test {
         let (_, _, _, settings) = setup_graphql_test(
             TestQuery,
             EmptyMutation,
-            "graphql_test_barcode_node_details",
+            "graphq_test_barcode_node_details",
             MockDataInserts::none(),
         )
         .await;
@@ -116,7 +116,7 @@ mod test {
                                 r.id = "CB81F6CD62C1476F9411362053D49E84".to_string();
                                 r.gtin = "0123456789".to_string();
                                 r.item_id = "AA460A207402434A89B1F6EEAC08DA43".to_string();
-                                r.pack_size = Some(1.0);
+                                r.pack_size = Some(1);
                             })
                         },
                         manufacturer_name_row: None,
@@ -131,7 +131,7 @@ mod test {
                 "id": "CB81F6CD62C1476F9411362053D49E84",
                 "gtin": "0123456789",
                 "itemId": "AA460A207402434A89B1F6EEAC08DA43",
-                "packSize": 1.0
+                "packSize": 1
             }
           }
         );
diff --git a/server/graphql/types/src/types/inbound_return_line.rs b/server/graphql/types/src/types/inbound_return_line.rs
index 877f05879..8fbe261ce 100644
--- a/server/graphql/types/src/types/inbound_return_line.rs
+++ b/server/graphql/types/src/types/inbound_return_line.rs
@@ -75,8 +75,8 @@ impl InboundReturnLineNode {
         &self.return_line.expiry_date
     }
 
-    pub async fn pack_size(&self) -> f64 {
-        self.return_line.pack_size
+    pub async fn pack_size(&self) -> &i32 {
+        &self.return_line.pack_size
     }
     // TODO should ideally come from invoice line
     pub async fn item_code(&self) -> &str {
diff --git a/server/graphql/types/src/types/invoice_line.rs b/server/graphql/types/src/types/invoice_line.rs
index 771ad7c61..aee374688 100644
--- a/server/graphql/types/src/types/invoice_line.rs
+++ b/server/graphql/types/src/types/invoice_line.rs
@@ -87,7 +87,7 @@ impl InvoiceLineNode {
         )
     }
     // Quantity
-    pub async fn pack_size(&self) -> f64 {
+    pub async fn pack_size(&self) -> i32 {
         self.row().pack_size
     }
     pub async fn number_of_packs(&self) -> f64 {
@@ -261,7 +261,7 @@ mod test {
                             r.item_link_id = "line_item_id".to_string();
                             r.item_name = "line_item_name".to_string();
                             r.item_code = "line_item_code".to_string();
-                            r.pack_size = 1.0;
+                            r.pack_size = 1;
                             r.number_of_packs = 2.0;
                             r.batch = Some("line_batch".to_string());
                             r.expiry_date = Some(NaiveDate::from_ymd_opt(2021, 1, 1).unwrap());
@@ -288,7 +288,7 @@ mod test {
                 "itemId": "line_item_id",
                 "itemName": "line_item_name",
                 "itemCode": "line_item_code",
-                "packSize": 1.0,
+                "packSize": 1,
                 "numberOfPacks": 2.0,
                 "batch": "line_batch",
                 "expiryDate": "2021-01-01",
diff --git a/server/graphql/types/src/types/item.rs b/server/graphql/types/src/types/item.rs
index 9da3eabab..cc6b474de 100644
--- a/server/graphql/types/src/types/item.rs
+++ b/server/graphql/types/src/types/item.rs
@@ -131,7 +131,7 @@ impl ItemNode {
         self.legacy_bool("is_vaccine")
     }
 
-    pub async fn default_pack_size(&self) -> f64 {
+    pub async fn default_pack_size(&self) -> i32 {
         self.row().default_pack_size
     }
 
diff --git a/server/graphql/types/src/types/item_stats.rs b/server/graphql/types/src/types/item_stats.rs
index d489c4771..cb30d98f5 100644
--- a/server/graphql/types/src/types/item_stats.rs
+++ b/server/graphql/types/src/types/item_stats.rs
@@ -10,7 +10,7 @@ impl ItemStatsNode {
         self.item_stats.average_monthly_consumption
     }
 
-    pub async fn available_stock_on_hand(&self) -> f64 {
+    pub async fn available_stock_on_hand(&self) -> u32 {
         self.item_stats.available_stock_on_hand
     }
 
diff --git a/server/graphql/types/src/types/mod.rs b/server/graphql/types/src/types/mod.rs
index 8e590d916..dd3d01115 100644
--- a/server/graphql/types/src/types/mod.rs
+++ b/server/graphql/types/src/types/mod.rs
@@ -70,9 +70,6 @@ pub use self::store_preference::*;
 pub mod repack;
 pub use self::repack::*;
 
-pub mod property;
-pub use self::property::*;
-
 pub mod program;
 pub use self::program::*;
 
diff --git a/server/graphql/types/src/types/outbound_return_line.rs b/server/graphql/types/src/types/outbound_return_line.rs
index 8d1133534..a9995e670 100644
--- a/server/graphql/types/src/types/outbound_return_line.rs
+++ b/server/graphql/types/src/types/outbound_return_line.rs
@@ -106,7 +106,7 @@ impl OutboundReturnLineNode {
         self.return_line.available_number_of_packs
     }
 
-    pub async fn pack_size(&self) -> f64 {
-        self.stock_line_row().pack_size
+    pub async fn pack_size(&self) -> &i32 {
+        &self.stock_line_row().pack_size
     }
 }
diff --git a/server/graphql/types/src/types/pack_variant.rs b/server/graphql/types/src/types/pack_variant.rs
index 21a361fcd..e432d3670 100644
--- a/server/graphql/types/src/types/pack_variant.rs
+++ b/server/graphql/types/src/types/pack_variant.rs
@@ -62,8 +62,8 @@ impl VariantNode {
         &self.variant.long_name
     }
 
-    pub async fn pack_size(&self) -> f64 {
-        self.variant.pack_size
+    pub async fn pack_size(&self) -> &i32 {
+        &self.variant.pack_size
     }
 
     pub async fn is_active(&self) -> &bool {
diff --git a/server/graphql/types/src/types/permissions.rs b/server/graphql/types/src/types/permissions.rs
index ec1503742..d6b195e71 100644
--- a/server/graphql/types/src/types/permissions.rs
+++ b/server/graphql/types/src/types/permissions.rs
@@ -53,8 +53,6 @@ pub enum UserPermission {
     AssetMutate,
     AssetQuery,
     AssetCatalogueItemMutate,
-    DemographicQuery,
-    VaccineCourseMutate,
 }
 
 #[Object]
@@ -138,8 +136,6 @@ impl UserPermission {
             PermissionType::AssetMutate => UserPermission::AssetMutate,
             PermissionType::AssetQuery => UserPermission::AssetQuery,
             PermissionType::AssetCatalogueItemMutate => UserPermission::AssetCatalogueItemMutate,
-            PermissionType::DemographicQuery => UserPermission::DemographicQuery,
-            PermissionType::VaccineCourseMutate => UserPermission::VaccineCourseMutate,
         }
     }
 
@@ -185,8 +181,6 @@ impl UserPermission {
             UserPermission::AssetMutate => PermissionType::AssetMutate,
             UserPermission::AssetQuery => PermissionType::AssetQuery,
             UserPermission::AssetCatalogueItemMutate => PermissionType::AssetCatalogueItemMutate,
-            UserPermission::DemographicQuery => PermissionType::DemographicQuery,
-            UserPermission::VaccineCourseMutate => PermissionType::VaccineCourseMutate,
         }
     }
 }
diff --git a/server/graphql/types/src/types/program/program_node.rs b/server/graphql/types/src/types/program/program_node.rs
index 38051f772..ea4d00973 100644
--- a/server/graphql/types/src/types/program/program_node.rs
+++ b/server/graphql/types/src/types/program/program_node.rs
@@ -15,8 +15,4 @@ impl ProgramNode {
     pub async fn name(&self) -> &str {
         &self.program_row.name
     }
-
-    pub async fn is_immunisation(&self) -> bool {
-        self.program_row.is_immunisation
-    }
 }
diff --git a/server/graphql/types/src/types/property.rs b/server/graphql/types/src/types/property.rs
deleted file mode 100644
index fe6c60e0b..000000000
--- a/server/graphql/types/src/types/property.rs
+++ /dev/null
@@ -1,58 +0,0 @@
-use async_graphql::*;
-use repository::{types::PropertyValueType, PropertyRow};
-use serde::Serialize;
-
-#[derive(Enum, Copy, Clone, PartialEq, Eq, Debug, Serialize)]
-#[serde(rename_all = "SCREAMING_SNAKE_CASE")] // only needed to be comparable in tests
-pub enum PropertyNodeValueType {
-    String,
-    Boolean,
-    Integer,
-    Float,
-}
-
-impl PropertyNodeValueType {
-    pub fn from_domain(value_type: &PropertyValueType) -> PropertyNodeValueType {
-        use PropertyValueType::*;
-        match value_type {
-            String => PropertyNodeValueType::String,
-            Boolean => PropertyNodeValueType::Boolean,
-            Integer => PropertyNodeValueType::Integer,
-            Float => PropertyNodeValueType::Float,
-        }
-    }
-}
-
-#[derive(PartialEq, Debug)]
-pub struct PropertyNode {
-    property: PropertyRow,
-}
-
-#[Object]
-impl PropertyNode {
-    pub async fn id(&self) -> &str {
-        &self.row().id
-    }
-    pub async fn key(&self) -> &str {
-        &self.row().key
-    }
-    pub async fn name(&self) -> &str {
-        &self.row().name
-    }
-    pub async fn value_type(&self) -> PropertyNodeValueType {
-        PropertyNodeValueType::from_domain(&self.row().value_type)
-    }
-    pub async fn allowed_values(&self) -> &Option<String> {
-        &self.row().allowed_values
-    }
-}
-
-impl PropertyNode {
-    pub fn from_domain(property: PropertyRow) -> PropertyNode {
-        PropertyNode { property }
-    }
-
-    pub fn row(&self) -> &PropertyRow {
-        &self.property
-    }
-}
diff --git a/server/graphql/types/src/types/repack.rs b/server/graphql/types/src/types/repack.rs
index 051eea718..ebdba833e 100644
--- a/server/graphql/types/src/types/repack.rs
+++ b/server/graphql/types/src/types/repack.rs
@@ -22,7 +22,7 @@ pub struct RepackNode {
 pub struct RepackStockLineNode {
     // Repacked number of packs before conversion (for from stock line)
     pub number_of_packs: f64,
-    pub pack_size: f64,
+    pub pack_size: i32,
     pub location_id: Option<String>,
     pub stock_line_id: Option<String>,
 }
@@ -75,7 +75,7 @@ impl RepackStockLineNode {
         self.number_of_packs
     }
 
-    async fn pack_size(&self) -> f64 {
+    async fn pack_size(&self) -> i32 {
         self.pack_size
     }
 
diff --git a/server/graphql/types/src/types/requisition_line.rs b/server/graphql/types/src/types/requisition_line.rs
index 7c6d9524b..a68ca0ab7 100644
--- a/server/graphql/types/src/types/requisition_line.rs
+++ b/server/graphql/types/src/types/requisition_line.rs
@@ -61,22 +61,22 @@ impl RequisitionLineNode {
     }
 
     /// Quantity requested
-    pub async fn requested_quantity(&self) -> &f64 {
+    pub async fn requested_quantity(&self) -> &i32 {
         &self.row().requested_quantity
     }
 
     /// Quantity to be supplied in the next shipment, only used in response requisition
-    pub async fn supply_quantity(&self) -> &f64 {
+    pub async fn supply_quantity(&self) -> &i32 {
         &self.row().supply_quantity
     }
 
     /// Calculated quantity
     /// When months_of_stock < requisition.min_months_of_stock, calculated = average_monthly_consumption * requisition.max_months_of_stock - months_of_stock
-    pub async fn suggested_quantity(&self) -> &f64 {
+    pub async fn suggested_quantity(&self) -> &i32 {
         &self.row().suggested_quantity
     }
 
-    pub async fn approved_quantity(&self) -> &f64 {
+    pub async fn approved_quantity(&self) -> &i32 {
         &self.row().approved_quantity
     }
 
diff --git a/server/graphql/types/src/types/response_requisition_stats.rs b/server/graphql/types/src/types/response_requisition_stats.rs
index 42f11bfbc..bfe5db0d8 100644
--- a/server/graphql/types/src/types/response_requisition_stats.rs
+++ b/server/graphql/types/src/types/response_requisition_stats.rs
@@ -23,7 +23,7 @@ impl ResponseStoreStatsNode {
         self.response_store_stats.stock_on_hand
     }
 
-    pub async fn stock_on_order(&self) -> f64 {
+    pub async fn stock_on_order(&self) -> i32 {
         self.response_store_stats.stock_on_order
     }
 
@@ -31,22 +31,22 @@ impl ResponseStoreStatsNode {
         self.response_store_stats.incoming_stock
     }
 
-    pub async fn requested_quantity(&self) -> f64 {
+    pub async fn requested_quantity(&self) -> i32 {
         self.response_store_stats.requested_quantity
     }
 
-    pub async fn other_requested_quantity(&self) -> f64 {
+    pub async fn other_requested_quantity(&self) -> i32 {
         self.response_store_stats.other_requested_quantity
     }
 }
 
 #[Object]
 impl RequestStoreStatsNode {
-    pub async fn stock_on_hand(&self) -> f64 {
+    pub async fn stock_on_hand(&self) -> i32 {
         self.request_store_stats.stock_on_hand
     }
 
-    pub async fn average_monthly_consumption(&self) -> f64 {
+    pub async fn average_monthly_consumption(&self) -> i32 {
         self.request_store_stats.amc
     }
 
@@ -54,7 +54,7 @@ impl RequestStoreStatsNode {
         self.request_store_stats.max_months_of_stock
     }
 
-    pub async fn suggested_quantity(&self) -> f64 {
+    pub async fn suggested_quantity(&self) -> i32 {
         self.request_store_stats.suggested_quantity
     }
 }
diff --git a/server/graphql/types/src/types/stock_line.rs b/server/graphql/types/src/types/stock_line.rs
index aa294865e..5ad7cfcb6 100644
--- a/server/graphql/types/src/types/stock_line.rs
+++ b/server/graphql/types/src/types/stock_line.rs
@@ -37,7 +37,7 @@ impl StockLineNode {
     pub async fn batch(&self) -> &Option<String> {
         &self.row().batch
     }
-    pub async fn pack_size(&self) -> f64 {
+    pub async fn pack_size(&self) -> i32 {
         self.row().pack_size
     }
     pub async fn cost_price_per_pack(&self) -> f64 {
diff --git a/server/graphql/types/src/types/stocktake_line.rs b/server/graphql/types/src/types/stocktake_line.rs
index e4048e50e..31fd17ea3 100644
--- a/server/graphql/types/src/types/stocktake_line.rs
+++ b/server/graphql/types/src/types/stocktake_line.rs
@@ -2,7 +2,7 @@ use async_graphql::*;
 use chrono::NaiveDate;
 use dataloader::DataLoader;
 use repository::StocktakeLine;
-use service::usize_to_u32;
+use service::{i32_to_u32, usize_to_u32};
 
 use graphql_core::{
     loader::{
@@ -94,8 +94,8 @@ impl StocktakeLineNode {
         &self.line.line.expiry_date
     }
 
-    pub async fn pack_size(&self) -> Option<f64> {
-        self.line.line.pack_size
+    pub async fn pack_size(&self) -> Option<u32> {
+        self.line.line.pack_size.map(i32_to_u32)
     }
 
     pub async fn cost_price_per_pack(&self) -> &Option<f64> {
diff --git a/server/graphql/vaccine_course/Cargo.toml b/server/graphql/vaccine_course/Cargo.toml
deleted file mode 100644
index d4d7f35c7..000000000
--- a/server/graphql/vaccine_course/Cargo.toml
+++ /dev/null
@@ -1,33 +0,0 @@
-[package]
-name = "graphql_vaccine_course"
-version = "0.1.0"
-edition = "2018"
-
-[lib]
-path = "src/lib.rs"
-doctest = false
-
-[dependencies]
-
-repository = { path = "../../repository" }
-service = { path = "../../service" }
-util = { path = "../../util" }
-graphql_core = { path = "../core" }
-graphql_types = { path = "../types" }
-
-actix-web = { workspace = true }
-async-graphql = { workspace = true }
-async-graphql-actix-web = { workspace = true }
-async-trait = { workspace = true }
-chrono = { workspace = true }
-serde = { workspace = true }
-serde_json = { workspace = true }
-
-[dev-dependencies]
-actix-rt = { workspace = true }
-assert-json-diff = { workspace = true }
-
-[features]
-default = ["sqlite"]
-sqlite = ["repository/sqlite"]
-postgres = ["repository/postgres"]
diff --git a/server/graphql/vaccine_course/src/lib.rs b/server/graphql/vaccine_course/src/lib.rs
deleted file mode 100644
index aaaa225b6..000000000
--- a/server/graphql/vaccine_course/src/lib.rs
+++ /dev/null
@@ -1,48 +0,0 @@
-use async_graphql::*;
-use graphql_core::pagination::PaginationInput;
-use mutations::{insert_vaccine_course, InsertVaccineCourseInput, InsertVaccineCourseResponse};
-use types::vaccine_course::{VaccineCourseResponse, VaccineCoursesResponse};
-
-pub mod vaccine_course_queries;
-use crate::vaccine_course_queries::*;
-pub mod mutations;
-pub mod types;
-
-#[derive(Default, Clone)]
-pub struct VaccineCourseQueries;
-#[Object]
-impl VaccineCourseQueries {
-    pub async fn vaccine_courses(
-        &self,
-        ctx: &Context<'_>,
-        #[graphql(desc = "Pagination option (first and offset)")] page: Option<PaginationInput>,
-        #[graphql(desc = "Filter option")] filter: Option<VaccineCourseFilterInput>,
-        #[graphql(desc = "Sort options (only first sort input is evaluated for this endpoint)")]
-        sort: Option<Vec<VaccineCourseSortInput>>,
-    ) -> Result<VaccineCoursesResponse> {
-        vaccine_courses(ctx, page, filter, sort)
-    }
-
-    pub async fn vaccine_course(
-        &self,
-        ctx: &Context<'_>,
-        id: String,
-    ) -> Result<VaccineCourseResponse> {
-        vaccine_course(ctx, id)
-    }
-}
-
-#[derive(Default, Clone)]
-pub struct VaccineCourseMutations;
-
-#[Object]
-impl VaccineCourseMutations {
-    async fn insert_vaccine_course(
-        &self,
-        ctx: &Context<'_>,
-        store_id: String,
-        input: InsertVaccineCourseInput,
-    ) -> Result<InsertVaccineCourseResponse> {
-        insert_vaccine_course(ctx, &store_id, input)
-    }
-}
diff --git a/server/graphql/vaccine_course/src/mutations/insert_vaccine_course.rs b/server/graphql/vaccine_course/src/mutations/insert_vaccine_course.rs
deleted file mode 100644
index f21d2da3a..000000000
--- a/server/graphql/vaccine_course/src/mutations/insert_vaccine_course.rs
+++ /dev/null
@@ -1,106 +0,0 @@
-use async_graphql::*;
-use graphql_core::{
-    simple_generic_errors::RecordAlreadyExist,
-    standard_graphql_error::{validate_auth, StandardGraphqlError},
-    ContextExt,
-};
-use service::{
-    auth::{Resource, ResourceAccessRequest},
-    vaccine_course::insert::{InsertVaccineCourse, InsertVaccineCourseError as ServiceError},
-};
-
-use crate::types::vaccine_course::VaccineCourseNode;
-
-pub fn insert_vaccine_course(
-    ctx: &Context<'_>,
-    store_id: &str,
-    input: InsertVaccineCourseInput,
-) -> Result<InsertVaccineCourseResponse> {
-    let user = validate_auth(
-        ctx,
-        &ResourceAccessRequest {
-            resource: Resource::MutateVaccineCourse,
-            store_id: Some(store_id.to_string()),
-        },
-    )?;
-
-    let service_provider = ctx.service_provider();
-    let service_context = service_provider.context(store_id.to_string(), user.user_id)?;
-
-    match service_provider
-        .vaccine_course_service
-        .insert_vaccine_course(&service_context, input.into())
-    {
-        Ok(vaccine_course) => Ok(InsertVaccineCourseResponse::Response(
-            VaccineCourseNode::from_domain(vaccine_course),
-        )),
-        Err(error) => Ok(InsertVaccineCourseResponse::Error(
-            InsertVaccineCourseError {
-                error: map_error(error)?,
-            },
-        )),
-    }
-}
-
-#[derive(InputObject, Clone)]
-pub struct InsertVaccineCourseInput {
-    pub id: String,
-    pub name: String,
-    pub program_id: String,
-    pub demographic_indicator_id: String,
-}
-
-impl From<InsertVaccineCourseInput> for InsertVaccineCourse {
-    fn from(
-        InsertVaccineCourseInput {
-            id,
-            name,
-            program_id,
-            demographic_indicator_id,
-        }: InsertVaccineCourseInput,
-    ) -> Self {
-        InsertVaccineCourse {
-            id,
-            name,
-            program_id,
-            demographic_indicator_id,
-        }
-    }
-}
-#[derive(SimpleObject)]
-pub struct InsertVaccineCourseError {
-    pub error: InsertVaccineCourseErrorInterface,
-}
-
-#[derive(Union)]
-pub enum InsertVaccineCourseResponse {
-    Error(InsertVaccineCourseError),
-    Response(VaccineCourseNode),
-}
-
-#[derive(Interface)]
-#[graphql(field(name = "description", type = "String"))]
-pub enum InsertVaccineCourseErrorInterface {
-    ItemAlreadyExists(RecordAlreadyExist),
-}
-
-fn map_error(error: ServiceError) -> Result<InsertVaccineCourseErrorInterface> {
-    use StandardGraphqlError::*;
-    let formatted_error = format!("{:#?}", error);
-
-    let graphql_error = match error {
-        // Structured Errors
-        ServiceError::VaccineCourseAlreadyExists => {
-            return Ok(InsertVaccineCourseErrorInterface::ItemAlreadyExists(
-                RecordAlreadyExist {},
-            ))
-        }
-        // Standard Graphql Errors
-        ServiceError::ProgramDoesNotExist => BadUserInput(formatted_error),
-        ServiceError::DemographicIndicatorDoesNotExist => BadUserInput(formatted_error),
-        ServiceError::CreatedRecordNotFound => InternalError(formatted_error),
-        ServiceError::DatabaseError(_) => InternalError(formatted_error),
-    };
-
-    Err(graphql_error.extend())
-}
diff --git a/server/graphql/vaccine_course/src/mutations/mod.rs b/server/graphql/vaccine_course/src/mutations/mod.rs
deleted file mode 100644
index 878067ea5..000000000
--- a/server/graphql/vaccine_course/src/mutations/mod.rs
+++ /dev/null
@@ -1,3 +0,0 @@
-mod insert_vaccine_course;
-
-pub use insert_vaccine_course::*;
diff --git a/server/graphql/vaccine_course/src/types/mod.rs b/server/graphql/vaccine_course/src/types/mod.rs
deleted file mode 100644
index 73cfc8508..000000000
--- a/server/graphql/vaccine_course/src/types/mod.rs
+++ /dev/null
@@ -1 +0,0 @@
-pub mod vaccine_course;
diff --git a/server/graphql/vaccine_course/src/types/vaccine_course.rs b/server/graphql/vaccine_course/src/types/vaccine_course.rs
deleted file mode 100644
index e6f40315f..000000000
--- a/server/graphql/vaccine_course/src/types/vaccine_course.rs
+++ /dev/null
@@ -1,70 +0,0 @@
-use async_graphql::*;
-
-use graphql_core::simple_generic_errors::NodeError;
-use repository::vaccine_course::vaccine_course_row::VaccineCourseRow;
-use service::ListResult;
-
-#[derive(PartialEq, Debug)]
-pub struct VaccineCourseNode {
-    pub vaccine_course: VaccineCourseRow,
-}
-
-#[derive(SimpleObject)]
-pub struct VaccineCourseConnector {
-    total_count: u32,
-    nodes: Vec<VaccineCourseNode>,
-}
-
-#[Object]
-impl VaccineCourseNode {
-    pub async fn id(&self) -> &str {
-        &self.row().id
-    }
-
-    pub async fn name(&self) -> &str {
-        &self.row().name
-    }
-
-    pub async fn program_id(&self) -> &str {
-        &self.row().program_id
-    }
-
-    pub async fn demographic_indicator_id(&self) -> &str {
-        &self.row().demographic_indicator_id
-    }
-    // TODO Loaders for the program and demographic_indicator
-}
-
-#[derive(Union)]
-pub enum VaccineCoursesResponse {
-    Response(VaccineCourseConnector),
-}
-
-#[derive(Union)]
-pub enum VaccineCourseResponse {
-    Error(NodeError),
-    Response(VaccineCourseNode),
-}
-
-impl VaccineCourseNode {
-    pub fn from_domain(vaccine_course: VaccineCourseRow) -> VaccineCourseNode {
-        VaccineCourseNode { vaccine_course }
-    }
-
-    pub fn row(&self) -> &VaccineCourseRow {
-        &self.vaccine_course
-    }
-}
-
-impl VaccineCourseConnector {
-    pub fn from_domain(vaccine_courses: ListResult<VaccineCourseRow>) -> VaccineCourseConnector {
-        VaccineCourseConnector {
-            total_count: vaccine_courses.count,
-            nodes: vaccine_courses
-                .rows
-                .into_iter()
-                .map(VaccineCourseNode::from_domain)
-                .collect(),
-        }
-    }
-}
diff --git a/server/graphql/vaccine_course/src/vaccine_course_queries.rs b/server/graphql/vaccine_course/src/vaccine_course_queries.rs
deleted file mode 100644
index ce93d7b13..000000000
--- a/server/graphql/vaccine_course/src/vaccine_course_queries.rs
+++ /dev/null
@@ -1,122 +0,0 @@
-use async_graphql::*;
-use graphql_core::{
-    generic_filters::{EqualFilterStringInput, StringFilterInput},
-    pagination::PaginationInput,
-    standard_graphql_error::{validate_auth, StandardGraphqlError},
-    ContextExt,
-};
-use repository::vaccine_course::vaccine_course::{
-    VaccineCourseFilter, VaccineCourseSort, VaccineCourseSortField,
-};
-use repository::{EqualFilter, PaginationOption, StringFilter};
-use service::{
-    auth::{Resource, ResourceAccessRequest},
-    vaccine_course::query::{get_vaccine_course, get_vaccine_courses},
-};
-
-use crate::types::vaccine_course::{
-    VaccineCourseConnector, VaccineCourseNode, VaccineCourseResponse, VaccineCoursesResponse,
-};
-
-#[derive(Enum, Copy, Clone, PartialEq, Eq)]
-#[graphql(remote = "repository::vaccine_course::vaccine_course::VaccineCourseSortField")]
-#[graphql(rename_items = "camelCase")]
-
-pub enum VaccineCourseSortFieldInput {
-    Name,
-}
-
-#[derive(InputObject)]
-
-pub struct VaccineCourseSortInput {
-    key: VaccineCourseSortFieldInput,
-    desc: Option<bool>,
-}
-
-#[derive(InputObject, Clone)]
-
-pub struct VaccineCourseFilterInput {
-    pub id: Option<EqualFilterStringInput>,
-    pub name: Option<StringFilterInput>,
-    pub program_id: Option<EqualFilterStringInput>,
-}
-
-impl From<VaccineCourseFilterInput> for VaccineCourseFilter {
-    fn from(f: VaccineCourseFilterInput) -> Self {
-        VaccineCourseFilter {
-            id: f.id.map(EqualFilter::from),
-            name: f.name.map(StringFilter::from),
-            program_id: f.program_id.map(EqualFilter::from),
-        }
-    }
-}
-
-pub fn vaccine_courses(
-    ctx: &Context<'_>,
-    page: Option<PaginationInput>,
-    filter: Option<VaccineCourseFilterInput>,
-    sort: Option<Vec<VaccineCourseSortInput>>,
-) -> Result<VaccineCoursesResponse> {
-    validate_auth(
-        ctx,
-        &ResourceAccessRequest {
-            resource: Resource::QueryVaccineCourse,
-            store_id: None,
-        },
-    )?;
-    let connection = ctx.get_connection_manager().connection()?;
-    let items = get_vaccine_courses(
-        &connection,
-        page.map(PaginationOption::from),
-        filter.map(|filter| filter.to_domain()),
-        sort.and_then(|mut sort_list| sort_list.pop())
-            .map(|sort| sort.to_domain()),
-    )
-    .map_err(StandardGraphqlError::from_list_error)?;
-
-    Ok(VaccineCoursesResponse::Response(
-        VaccineCourseConnector::from_domain(items),
-    ))
-}
-
-pub fn vaccine_course(ctx: &Context<'_>, id: String) -> Result<VaccineCourseResponse> {
-    let connection = ctx.get_connection_manager().connection()?;
-
-    match get_vaccine_course(&connection, id) {
-        Ok(row) => Ok(VaccineCourseResponse::Response(
-            VaccineCourseNode::from_domain(row),
-        )),
-        Err(error) => Ok(VaccineCourseResponse::Error(error.into())),
-    }
-}
-
-impl VaccineCourseFilterInput {
-    pub fn to_domain(self) -> VaccineCourseFilter {
-        let VaccineCourseFilterInput {
-            id,
-            name,
-            program_id,
-        } = self;
-
-        VaccineCourseFilter {
-            id: id.map(EqualFilter::from),
-            name: name.map(StringFilter::from),
-            program_id: program_id.map(EqualFilter::from),
-        }
-    }
-}
-
-impl VaccineCourseSortInput {
-    pub fn to_domain(self) -> VaccineCourseSort {
-        use VaccineCourseSortField as to;
-        use VaccineCourseSortFieldInput as from;
-        let key = match self.key {
-            from::Name => to::Name,
-        };
-
-        VaccineCourseSort {
-            key,
-            desc: self.desc,
-        }
-    }
-}
diff --git a/server/repository/src/db_diesel/activity_log_row.rs b/server/repository/src/db_diesel/activity_log_row.rs
index 1a0f16d10..8291b37b5 100644
--- a/server/repository/src/db_diesel/activity_log_row.rs
+++ b/server/repository/src/db_diesel/activity_log_row.rs
@@ -68,9 +68,6 @@ pub enum ActivityLogType {
     QuantityForLineHasBeenSetToZero,
     AssetCatalogueItemCreated,
     AssetCatalogueItemPropertyCreated,
-    AssetPropertyCreated,
-    VaccineCourseCreated,
-    ProgramCreated,
 }
 
 #[derive(Clone, Queryable, Insertable, AsChangeset, Debug, PartialEq)]
diff --git a/server/repository/src/db_diesel/assets/asset_catalogue_item_property.rs b/server/repository/src/db_diesel/assets/asset_catalogue_item_property.rs
new file mode 100644
index 000000000..76c18ed55
--- /dev/null
+++ b/server/repository/src/db_diesel/assets/asset_catalogue_item_property.rs
@@ -0,0 +1,187 @@
+use super::asset_catalogue_item_property_row::{
+    asset_catalogue_item_property,
+    asset_catalogue_item_property::dsl as asset_catalogue_item_property_dsl,
+    AssetCatalogueItemPropertyRow,
+};
+use super::asset_catalogue_property_row::{
+    asset_catalogue_property, asset_catalogue_property::dsl as asset_catalogue_property_dsl,
+    AssetCataloguePropertyRow,
+};
+
+use crate::{diesel_macros::apply_equal_filter, StorageConnection};
+
+use crate::{repository_error::RepositoryError, DBType, EqualFilter};
+use diesel::helper_types::{InnerJoin, IntoBoxed};
+use diesel::prelude::*;
+
+#[derive(Clone, PartialEq, Debug, Default)]
+pub struct AssetCataloguePropertyItemFilter {
+    pub id: Option<EqualFilter<String>>,
+    pub catalogue_property_id: Option<EqualFilter<String>>,
+    pub catalogue_item_id: Option<EqualFilter<String>>,
+}
+
+pub struct AssetCatalogueItemPropertyRepository<'a> {
+    connection: &'a StorageConnection,
+}
+
+type AssetCatalogueItemPropertyJoin = (AssetCatalogueItemPropertyRow, AssetCataloguePropertyRow);
+
+#[derive(Clone)]
+pub struct AssetCatalogueItemPropertyValue {
+    pub property: AssetCataloguePropertyRow,
+    pub value: AssetCatalogueItemPropertyRow,
+}
+
+impl<'a> AssetCatalogueItemPropertyRepository<'a> {
+    pub fn new(connection: &'a StorageConnection) -> Self {
+        AssetCatalogueItemPropertyRepository { connection }
+    }
+
+    pub fn count(
+        &self,
+        filter: Option<AssetCataloguePropertyItemFilter>,
+    ) -> Result<i64, RepositoryError> {
+        let query = create_filtered_query(filter);
+
+        Ok(query
+            .count()
+            .get_result(self.connection.lock().connection())?)
+    }
+
+    pub fn query(
+        &self,
+        filter: Option<AssetCataloguePropertyItemFilter>,
+    ) -> Result<Vec<AssetCatalogueItemPropertyRow>, RepositoryError> {
+        let query = create_filtered_query(filter.clone());
+
+        // // Debug diesel query
+        // println!("{}", diesel::debug_query::<DBType, _>(&query).to_string());
+
+        let result =
+            query.load::<AssetCatalogueItemPropertyRow>(self.connection.lock().connection())?;
+
+        Ok(result.into_iter().map(to_domain).collect())
+    }
+
+    pub fn query_property_and_value(
+        &self,
+        filter: AssetCataloguePropertyItemFilter,
+    ) -> Result<Vec<AssetCatalogueItemPropertyValue>, RepositoryError> {
+        let query = create_filtered_property_value_query(filter);
+
+        // // Debug diesel query
+        // println!("{}", diesel::debug_query::<DBType, _>(&query).to_string());
+
+        let result =
+            query.load::<AssetCatalogueItemPropertyJoin>(self.connection.lock().connection())?;
+
+        Ok(result
+            .into_iter()
+            .map(|pv| AssetCatalogueItemPropertyValue::to_domain(pv))
+            .collect())
+    }
+}
+type BoxedAssetCatalogueItemPropertyQuery =
+    asset_catalogue_item_property::BoxedQuery<'static, DBType>;
+
+pub fn to_domain(
+    asset_catalogue_property_item_row: AssetCatalogueItemPropertyRow,
+) -> AssetCatalogueItemPropertyRow {
+    asset_catalogue_property_item_row
+}
+
+impl AssetCatalogueItemPropertyValue {
+    pub fn to_domain(
+        (asset_catalogue_property_item_row, asset_catalogue_property_row): AssetCatalogueItemPropertyJoin,
+    ) -> AssetCatalogueItemPropertyValue {
+        AssetCatalogueItemPropertyValue {
+            property: asset_catalogue_property_row,
+            value: asset_catalogue_property_item_row,
+        }
+    }
+}
+
+type BoxedAssetCatalogueItemPropertyValueQuery = IntoBoxed<
+    'static,
+    InnerJoin<asset_catalogue_item_property::table, asset_catalogue_property::table>,
+    DBType,
+>;
+
+fn create_filtered_query(
+    filter: Option<AssetCataloguePropertyItemFilter>,
+) -> BoxedAssetCatalogueItemPropertyQuery {
+    let mut query = asset_catalogue_item_property_dsl::asset_catalogue_item_property
+        // .inner_join(asset_catalogue_property_dsl::asset_catalogue_property)
+        .into_boxed();
+
+    if let Some(f) = filter {
+        let AssetCataloguePropertyItemFilter {
+            id,
+            catalogue_property_id,
+            catalogue_item_id,
+        } = f;
+
+        apply_equal_filter!(query, id, asset_catalogue_item_property_dsl::id);
+        apply_equal_filter!(
+            query,
+            catalogue_property_id,
+            asset_catalogue_item_property_dsl::asset_catalogue_property_id
+        );
+        apply_equal_filter!(
+            query,
+            catalogue_item_id,
+            asset_catalogue_item_property_dsl::asset_catalogue_item_id
+        );
+    }
+    query
+}
+
+fn create_filtered_property_value_query(
+    filter: AssetCataloguePropertyItemFilter,
+) -> BoxedAssetCatalogueItemPropertyValueQuery {
+    let mut query = asset_catalogue_item_property_dsl::asset_catalogue_item_property
+        .inner_join(asset_catalogue_property_dsl::asset_catalogue_property)
+        .into_boxed();
+
+    let AssetCataloguePropertyItemFilter {
+        id,
+        catalogue_property_id,
+        catalogue_item_id,
+    } = filter;
+
+    apply_equal_filter!(query, id, asset_catalogue_item_property_dsl::id);
+    apply_equal_filter!(
+        query,
+        catalogue_property_id,
+        asset_catalogue_item_property_dsl::asset_catalogue_property_id
+    );
+    apply_equal_filter!(
+        query,
+        catalogue_item_id,
+        asset_catalogue_item_property_dsl::asset_catalogue_item_id
+    );
+
+    query
+}
+
+impl AssetCataloguePropertyItemFilter {
+    pub fn new() -> AssetCataloguePropertyItemFilter {
+        Self::default()
+    }
+
+    pub fn id(mut self, filter: EqualFilter<String>) -> Self {
+        self.id = Some(filter);
+        self
+    }
+
+    pub fn catalogue_item_id(mut self, filter: EqualFilter<String>) -> Self {
+        self.catalogue_item_id = Some(filter);
+        self
+    }
+
+    pub fn catalogue_property_id(mut self, filter: EqualFilter<String>) -> Self {
+        self.catalogue_property_id = Some(filter);
+        self
+    }
+}
diff --git a/server/repository/src/db_diesel/assets/asset_catalogue_item_property_row.rs b/server/repository/src/db_diesel/assets/asset_catalogue_item_property_row.rs
new file mode 100644
index 000000000..0977efbcb
--- /dev/null
+++ b/server/repository/src/db_diesel/assets/asset_catalogue_item_property_row.rs
@@ -0,0 +1,150 @@
+use super::asset_catalogue_item_property_row::asset_catalogue_item_property::dsl::*;
+
+use crate::asset_catalogue_property_row::asset_catalogue_property;
+use crate::ChangeLogInsertRow;
+use crate::ChangelogRepository;
+use crate::ChangelogTableName;
+use crate::RepositoryError;
+use crate::RowActionType;
+use crate::StorageConnection;
+use crate::Upsert;
+
+use diesel::prelude::*;
+use serde::{Deserialize, Serialize};
+
+table! {
+    asset_catalogue_item_property (id) {
+        id -> Text,
+        asset_catalogue_item_id -> Text,
+        asset_catalogue_property_id -> Text,
+        value_string -> Nullable<Text>,
+        value_int -> Nullable<Integer>,
+        value_float -> Nullable<Double>,
+        value_bool -> Nullable<Bool>,
+    }
+}
+
+allow_tables_to_appear_in_same_query!(asset_catalogue_item_property, asset_catalogue_property);
+joinable!(asset_catalogue_item_property -> asset_catalogue_property (asset_catalogue_property_id));
+
+#[derive(
+    Clone, Queryable, Insertable, AsChangeset, Debug, PartialEq, Default, Serialize, Deserialize,
+)]
+#[diesel(treat_none_as_null = true)]
+#[diesel(table_name = asset_catalogue_item_property)]
+pub struct AssetCatalogueItemPropertyRow {
+    pub id: String,
+    #[diesel(column_name = asset_catalogue_item_id)]
+    pub catalogue_item_id: String,
+    #[diesel(column_name = asset_catalogue_property_id)]
+    pub catalogue_property_id: String,
+    pub value_string: Option<String>,
+    pub value_int: Option<i32>,
+    pub value_float: Option<f64>,
+    pub value_bool: Option<bool>,
+}
+
+pub struct AssetCatalogueItemPropertyRowRepository<'a> {
+    connection: &'a StorageConnection,
+}
+
+impl<'a> AssetCatalogueItemPropertyRowRepository<'a> {
+    pub fn new(connection: &'a StorageConnection) -> Self {
+        AssetCatalogueItemPropertyRowRepository { connection }
+    }
+
+    #[cfg(feature = "postgres")]
+    pub fn _upsert_one(
+        &self,
+        asset_catalogue_item_property_row: &AssetCatalogueItemPropertyRow,
+    ) -> Result<(), RepositoryError> {
+        diesel::insert_into(asset_catalogue_item_property)
+            .values(asset_catalogue_item_property_row)
+            .on_conflict(id)
+            .do_update()
+            .set(asset_catalogue_item_property_row)
+            .execute(self.connection.lock().connection())?;
+        Ok(())
+    }
+
+    #[cfg(not(feature = "postgres"))]
+    pub fn _upsert_one(
+        &self,
+        asset_catalogue_item_property_row: &AssetCatalogueItemPropertyRow,
+    ) -> Result<(), RepositoryError> {
+        diesel::replace_into(asset_catalogue_item_property)
+            .values(asset_catalogue_item_property_row)
+            .execute(self.connection.lock().connection())?;
+        Ok(())
+    }
+
+    pub fn upsert_one(
+        &self,
+        asset_catalogue_item_property_row: &AssetCatalogueItemPropertyRow,
+    ) -> Result<i64, RepositoryError> {
+        self._upsert_one(asset_catalogue_item_property_row)?;
+        self.insert_changelog(
+            asset_catalogue_item_property_row.id.to_owned(),
+            RowActionType::Upsert,
+        )
+    }
+
+    fn insert_changelog(
+        &self,
+        asset_catalogue_item_property_id: String,
+        action: RowActionType,
+    ) -> Result<i64, RepositoryError> {
+        let row = ChangeLogInsertRow {
+            table_name: ChangelogTableName::AssetCatalogueItemProperty,
+            record_id: asset_catalogue_item_property_id,
+            row_action: action,
+            store_id: None,
+            name_link_id: None,
+        };
+
+        ChangelogRepository::new(self.connection).insert(&row)
+    }
+
+    pub fn find_all(&self) -> Result<Vec<AssetCatalogueItemPropertyRow>, RepositoryError> {
+        let result = asset_catalogue_item_property.load(self.connection.lock().connection())?;
+        Ok(result)
+    }
+
+    pub fn find_one_by_id(
+        &self,
+        asset_catalogue_item_property_id: &str,
+    ) -> Result<Option<AssetCatalogueItemPropertyRow>, RepositoryError> {
+        let result = asset_catalogue_item_property
+            .filter(id.eq(asset_catalogue_item_property_id))
+            .first(self.connection.lock().connection())
+            .optional()?;
+        Ok(result)
+    }
+
+    pub fn delete(&self, asset_catalogue_item_property_id: &str) -> Result<(), RepositoryError> {
+        diesel::delete(asset_catalogue_item_property)
+            .filter(id.eq(asset_catalogue_item_property_id))
+            .execute(self.connection.lock().connection())?;
+        Ok(())
+    }
+}
+
+impl Upsert for AssetCatalogueItemPropertyRow {
+    fn upsert_sync(&self, con: &StorageConnection) -> Result<(), RepositoryError> {
+        let _change_log_id = AssetCatalogueItemPropertyRowRepository::new(con).upsert_one(self)?;
+        Ok(())
+    }
+    fn upsert(&self, con: &StorageConnection) -> Result<Option<i64>, RepositoryError> {
+        // We'll return the later changelog id, as that's the one that will be marked as coming from this site...
+        let cursor_id = AssetCatalogueItemPropertyRowRepository::new(con).upsert_one(self)?;
+        Ok(Some(cursor_id))
+    }
+
+    // Test only
+    fn assert_upserted(&self, con: &StorageConnection) {
+        assert_eq!(
+            AssetCatalogueItemPropertyRowRepository::new(con).find_one_by_id(&self.id),
+            Ok(Some(self.clone()))
+        )
+    }
+}
diff --git a/server/repository/src/db_diesel/assets/asset_catalogue_item_row.rs b/server/repository/src/db_diesel/assets/asset_catalogue_item_row.rs
index 14b37c1d3..d6661d1f9 100644
--- a/server/repository/src/db_diesel/assets/asset_catalogue_item_row.rs
+++ b/server/repository/src/db_diesel/assets/asset_catalogue_item_row.rs
@@ -18,7 +18,6 @@ table! {
         manufacturer -> Nullable<Text>,
         model -> Text,
         asset_catalogue_type_id -> Text,
-        properties -> Nullable<Text>,
         deleted_datetime -> Nullable<Timestamp>,
     }
 }
@@ -40,7 +39,6 @@ pub struct AssetCatalogueItemRow {
     pub model: String,
     #[diesel(column_name = "asset_catalogue_type_id")]
     pub type_id: String,
-    pub properties: Option<String>,
     pub deleted_datetime: Option<chrono::NaiveDateTime>,
 }
 
diff --git a/server/repository/src/db_diesel/assets/asset_catalogue_property.rs b/server/repository/src/db_diesel/assets/asset_catalogue_property.rs
new file mode 100644
index 000000000..53cbbfcbc
--- /dev/null
+++ b/server/repository/src/db_diesel/assets/asset_catalogue_property.rs
@@ -0,0 +1,82 @@
+use super::asset_catalogue_property_row::{
+    asset_catalogue_property, asset_catalogue_property::dsl as asset_catalogue_property_dsl,
+    AssetCataloguePropertyRow,
+};
+
+use crate::{diesel_macros::apply_equal_filter, StorageConnection};
+
+use crate::{repository_error::RepositoryError, DBType, EqualFilter};
+use diesel::prelude::*;
+
+#[derive(Clone, PartialEq, Debug, Default)]
+pub struct AssetCataloguePropertyFilter {
+    pub id: Option<EqualFilter<String>>,
+    pub category_id: Option<EqualFilter<String>>,
+}
+
+pub struct AssetCataloguePropertyRepository<'a> {
+    connection: &'a StorageConnection,
+}
+
+impl<'a> AssetCataloguePropertyRepository<'a> {
+    pub fn new(connection: &'a StorageConnection) -> Self {
+        AssetCataloguePropertyRepository { connection }
+    }
+
+    pub fn query(
+        &self,
+        filter: Option<AssetCataloguePropertyFilter>,
+    ) -> Result<Vec<AssetCataloguePropertyRow>, RepositoryError> {
+        let query = create_filtered_query(filter.clone());
+
+        // // Debug diesel query
+        // println!("{}", diesel::debug_query::<DBType, _>(&query).to_string());
+
+        let result =
+            query.load::<AssetCataloguePropertyRow>(self.connection.lock().connection())?;
+
+        Ok(result.into_iter().map(to_domain).collect())
+    }
+}
+
+type BoxedAssetCatalogueItemPropertyQuery = asset_catalogue_property::BoxedQuery<'static, DBType>;
+
+pub fn to_domain(
+    asset_catalogue_property_row: AssetCataloguePropertyRow,
+) -> AssetCataloguePropertyRow {
+    asset_catalogue_property_row
+}
+
+fn create_filtered_query(
+    filter: Option<AssetCataloguePropertyFilter>,
+) -> BoxedAssetCatalogueItemPropertyQuery {
+    let mut query = asset_catalogue_property_dsl::asset_catalogue_property.into_boxed();
+
+    if let Some(f) = filter {
+        let AssetCataloguePropertyFilter { id, category_id } = f;
+
+        apply_equal_filter!(query, id, asset_catalogue_property_dsl::id);
+        apply_equal_filter!(
+            query,
+            category_id,
+            asset_catalogue_property_dsl::asset_category_id
+        );
+    }
+    query
+}
+
+impl AssetCataloguePropertyFilter {
+    pub fn new() -> AssetCataloguePropertyFilter {
+        Self::default()
+    }
+
+    pub fn id(mut self, filter: EqualFilter<String>) -> Self {
+        self.id = Some(filter);
+        self
+    }
+
+    pub fn category_id(mut self, filter: EqualFilter<String>) -> Self {
+        self.category_id = Some(filter);
+        self
+    }
+}
diff --git a/server/repository/src/db_diesel/assets/asset_catalogue_property_row.rs b/server/repository/src/db_diesel/assets/asset_catalogue_property_row.rs
new file mode 100644
index 000000000..8ee4a862d
--- /dev/null
+++ b/server/repository/src/db_diesel/assets/asset_catalogue_property_row.rs
@@ -0,0 +1,166 @@
+use super::asset_catalogue_property_row::asset_catalogue_property::dsl::*;
+
+use diesel_derive_enum::DbEnum;
+use serde::{Deserialize, Serialize};
+
+use crate::ChangeLogInsertRow;
+use crate::ChangelogRepository;
+use crate::ChangelogTableName;
+use crate::RepositoryError;
+use crate::RowActionType;
+use crate::StorageConnection;
+use crate::Upsert;
+
+use diesel::prelude::*;
+
+#[derive(DbEnum, Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
+#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
+#[DbValueStyle = "SCREAMING_SNAKE_CASE"]
+pub enum PropertyValueType {
+    String,
+    Boolean,
+    Integer,
+    Float,
+}
+
+table! {
+    asset_catalogue_property (id) {
+        id -> Text,
+        asset_category_id -> Text,
+        name -> Text,
+        value_type -> crate::db_diesel::asset_catalogue_property_row::PropertyValueTypeMapping,
+        allowed_values -> Nullable<Text>,
+    }
+}
+
+#[derive(
+    Clone, Insertable, Queryable, Debug, PartialEq, AsChangeset, Eq, Serialize, Deserialize,
+)]
+#[diesel(table_name = asset_catalogue_property)]
+#[diesel(treat_none_as_null = true)]
+pub struct AssetCataloguePropertyRow {
+    pub id: String,
+    #[diesel(column_name = asset_category_id)]
+    pub category_id: String,
+    pub name: String,
+    pub value_type: PropertyValueType,
+    pub allowed_values: Option<String>,
+}
+
+impl Default for AssetCataloguePropertyRow {
+    fn default() -> Self {
+        Self {
+            id: Default::default(),
+            category_id: Default::default(),
+            name: Default::default(),
+            value_type: PropertyValueType::String,
+            allowed_values: Default::default(),
+        }
+    }
+}
+
+pub struct AssetCataloguePropertyRowRepository<'a> {
+    connection: &'a StorageConnection,
+}
+
+impl<'a> AssetCataloguePropertyRowRepository<'a> {
+    pub fn new(connection: &'a StorageConnection) -> Self {
+        AssetCataloguePropertyRowRepository { connection }
+    }
+
+    #[cfg(feature = "postgres")]
+    pub fn _upsert_one(
+        &self,
+        asset_catalogue_property_row: &AssetCataloguePropertyRow,
+    ) -> Result<(), RepositoryError> {
+        diesel::insert_into(asset_catalogue_property)
+            .values(asset_catalogue_property_row)
+            .on_conflict(id)
+            .do_update()
+            .set(asset_catalogue_property_row)
+            .execute(self.connection.lock().connection())?;
+        Ok(())
+    }
+
+    #[cfg(not(feature = "postgres"))]
+    pub fn _upsert_one(
+        &self,
+        asset_catalogue_property_row: &AssetCataloguePropertyRow,
+    ) -> Result<(), RepositoryError> {
+        diesel::replace_into(asset_catalogue_property)
+            .values(asset_catalogue_property_row)
+            .execute(self.connection.lock().connection())?;
+        Ok(())
+    }
+
+    pub fn upsert_one(
+        &self,
+        asset_catalogue_property_row: &AssetCataloguePropertyRow,
+    ) -> Result<i64, RepositoryError> {
+        self._upsert_one(asset_catalogue_property_row)?;
+        self.insert_changelog(
+            asset_catalogue_property_row.id.to_owned(),
+            RowActionType::Upsert,
+        )
+    }
+
+    fn insert_changelog(
+        &self,
+        asset_catalogue_property_row: String,
+        action: RowActionType,
+    ) -> Result<i64, RepositoryError> {
+        let row = ChangeLogInsertRow {
+            table_name: ChangelogTableName::AssetCatalogueProperty,
+            record_id: asset_catalogue_property_row,
+            row_action: action,
+            store_id: None,
+            name_link_id: None,
+        };
+
+        ChangelogRepository::new(self.connection).insert(&row)
+    }
+
+    pub fn find_all(&self) -> Result<Vec<AssetCataloguePropertyRow>, RepositoryError> {
+        let result = asset_catalogue_property.load(self.connection.lock().connection())?;
+        Ok(result)
+    }
+
+    pub fn find_one_by_id(
+        &self,
+        asset_catalogue_property_id: &str,
+    ) -> Result<Option<AssetCataloguePropertyRow>, RepositoryError> {
+        let result = asset_catalogue_property
+            .filter(id.eq(asset_catalogue_property_id))
+            .first(self.connection.lock().connection())
+            .optional()?;
+        Ok(result)
+    }
+
+    pub fn delete(&self, asset_catalogue_property_id: &str) -> Result<(), RepositoryError> {
+        diesel::delete(asset_catalogue_property)
+            .filter(id.eq(asset_catalogue_property_id))
+            .execute(self.connection.lock().connection())?;
+        Ok(())
+    }
+}
+
+impl Upsert for AssetCataloguePropertyRow {
+    fn upsert_sync(&self, con: &StorageConnection) -> Result<(), RepositoryError> {
+        let _change_log_id = AssetCataloguePropertyRowRepository::new(con).upsert_one(self)?;
+        Ok(())
+    }
+
+    fn upsert(&self, con: &StorageConnection) -> Result<Option<i64>, RepositoryError> {
+        // We'll return the later changelog id, as that's the one that will be marked as coming from this site...
+        let cursor_id = AssetCataloguePropertyRowRepository::new(con).upsert_one(self)?;
+        Ok(Some(cursor_id))
+    }
+
+    // Test only
+    fn assert_upserted(&self, con: &StorageConnection) {
+        assert_eq!(
+            AssetCataloguePropertyRowRepository::new(con).find_one_by_id(&self.id),
+            Ok(Some(self.clone()))
+        )
+    }
+}
diff --git a/server/repository/src/db_diesel/assets/asset_property.rs b/server/repository/src/db_diesel/assets/asset_property.rs
deleted file mode 100644
index 57b14fbe7..000000000
--- a/server/repository/src/db_diesel/assets/asset_property.rs
+++ /dev/null
@@ -1,90 +0,0 @@
-use super::asset_property_row::{
-    asset_property, asset_property::dsl as asset_property_dsl, AssetPropertyRow,
-};
-
-use crate::diesel_macros::apply_string_filter;
-use crate::StringFilter;
-use crate::{diesel_macros::apply_equal_filter, StorageConnection};
-
-use crate::{repository_error::RepositoryError, DBType, EqualFilter};
-use diesel::prelude::*;
-
-#[derive(Clone, PartialEq, Debug, Default)]
-pub struct AssetPropertyFilter {
-    pub id: Option<EqualFilter<String>>,
-    pub key: Option<EqualFilter<String>>,
-    pub name: Option<StringFilter>,
-    pub asset_class_id: Option<EqualFilter<String>>,
-    pub asset_category_id: Option<EqualFilter<String>>,
-    pub asset_type_id: Option<EqualFilter<String>>,
-}
-
-pub struct AssetPropertyRepository<'a> {
-    connection: &'a StorageConnection,
-}
-
-impl<'a> AssetPropertyRepository<'a> {
-    pub fn new(connection: &'a StorageConnection) -> Self {
-        AssetPropertyRepository { connection }
-    }
-
-    pub fn query(
-        &self,
-        filter: Option<AssetPropertyFilter>,
-    ) -> Result<Vec<AssetPropertyRow>, RepositoryError> {
-        let query = create_filtered_query(filter.clone());
-
-        // // Debug diesel query
-        // println!("{}", diesel::debug_query::<DBType, _>(&query).to_string());
-
-        let result = query.load::<AssetPropertyRow>(self.connection.lock().connection())?;
-
-        Ok(result.into_iter().map(to_domain).collect())
-    }
-}
-
-type BoxedAssetCatalogueItemPropertyQuery = asset_property::BoxedQuery<'static, DBType>;
-
-pub fn to_domain(asset_property_row: AssetPropertyRow) -> AssetPropertyRow {
-    asset_property_row
-}
-
-fn create_filtered_query(
-    filter: Option<AssetPropertyFilter>,
-) -> BoxedAssetCatalogueItemPropertyQuery {
-    let mut query = asset_property_dsl::asset_property.into_boxed();
-
-    if let Some(f) = filter {
-        let AssetPropertyFilter {
-            id,
-            key,
-            name,
-            asset_class_id,
-            asset_category_id,
-            asset_type_id,
-        } = f;
-
-        apply_equal_filter!(query, id, asset_property_dsl::id);
-        apply_equal_filter!(query, key, asset_property_dsl::key);
-        apply_string_filter!(query, name, asset_property_dsl::name);
-        apply_equal_filter!(query, asset_class_id, asset_property_dsl::asset_class_id);
-        apply_equal_filter!(
-            query,
-            asset_category_id,
-            asset_property_dsl::asset_category_id
-        );
-        apply_equal_filter!(query, asset_type_id, asset_property_dsl::asset_type_id);
-    }
-    query
-}
-
-impl AssetPropertyFilter {
-    pub fn new() -> AssetPropertyFilter {
-        Self::default()
-    }
-
-    pub fn id(mut self, filter: EqualFilter<String>) -> Self {
-        self.id = Some(filter);
-        self
-    }
-}
diff --git a/server/repository/src/db_diesel/assets/asset_property_row.rs b/server/repository/src/db_diesel/assets/asset_property_row.rs
deleted file mode 100644
index 3a1a4280c..000000000
--- a/server/repository/src/db_diesel/assets/asset_property_row.rs
+++ /dev/null
@@ -1,145 +0,0 @@
-use super::asset_property_row::asset_property::dsl::*;
-
-use serde::{Deserialize, Serialize};
-
-use crate::types::PropertyValueType;
-use crate::ChangeLogInsertRow;
-use crate::ChangelogRepository;
-use crate::ChangelogTableName;
-use crate::RepositoryError;
-use crate::RowActionType;
-use crate::StorageConnection;
-use crate::Upsert;
-
-use diesel::prelude::*;
-
-table! {
-    asset_property (id) {
-        id -> Text,
-        key -> Text,
-        name -> Text,
-        asset_class_id -> Nullable<Text>,
-        asset_category_id -> Nullable<Text>,
-        asset_type_id -> Nullable<Text>,
-        value_type -> crate::db_diesel::assets::types::PropertyValueTypeMapping,
-        allowed_values -> Nullable<Text>,
-    }
-}
-
-#[derive(
-    Clone, Insertable, Queryable, Debug, PartialEq, AsChangeset, Eq, Serialize, Deserialize,
-)]
-#[diesel(table_name = asset_property)]
-#[diesel(treat_none_as_null = true)]
-pub struct AssetPropertyRow {
-    pub id: String,
-    pub key: String,
-    pub name: String,
-    pub asset_class_id: Option<String>,
-    pub asset_category_id: Option<String>,
-    pub asset_type_id: Option<String>,
-    pub value_type: PropertyValueType,
-    pub allowed_values: Option<String>,
-}
-
-pub struct AssetPropertyRowRepository<'a> {
-    connection: &'a StorageConnection,
-}
-
-impl<'a> AssetPropertyRowRepository<'a> {
-    pub fn new(connection: &'a StorageConnection) -> Self {
-        AssetPropertyRowRepository { connection }
-    }
-
-    #[cfg(feature = "postgres")]
-    pub fn _upsert_one(
-        &self,
-        asset_property_row: &AssetPropertyRow,
-    ) -> Result<(), RepositoryError> {
-        diesel::insert_into(asset_property)
-            .values(asset_property_row)
-            .on_conflict(id)
-            .do_update()
-            .set(asset_property_row)
-            .execute(self.connection.lock().connection())?;
-        Ok(())
-    }
-
-    #[cfg(not(feature = "postgres"))]
-    pub fn _upsert_one(
-        &self,
-        asset_property_row: &AssetPropertyRow,
-    ) -> Result<(), RepositoryError> {
-        diesel::replace_into(asset_property)
-            .values(asset_property_row)
-            .execute(self.connection.lock().connection())?;
-        Ok(())
-    }
-
-    pub fn upsert_one(
-        &self,
-        asset_property_row: &AssetPropertyRow,
-    ) -> Result<i64, RepositoryError> {
-        self._upsert_one(asset_property_row)?;
-        self.insert_changelog(asset_property_row.id.to_owned(), RowActionType::Upsert)
-    }
-
-    fn insert_changelog(
-        &self,
-        asset_property_row: String,
-        action: RowActionType,
-    ) -> Result<i64, RepositoryError> {
-        let row = ChangeLogInsertRow {
-            table_name: ChangelogTableName::AssetProperty,
-            record_id: asset_property_row,
-            row_action: action,
-            store_id: None,
-            name_link_id: None,
-        };
-
-        ChangelogRepository::new(self.connection).insert(&row)
-    }
-
-    pub fn find_all(&self) -> Result<Vec<AssetPropertyRow>, RepositoryError> {
-        let result = asset_property.load(self.connection.lock().connection())?;
-        Ok(result)
-    }
-
-    pub fn find_one_by_id(
-        &self,
-        asset_property_id: &str,
-    ) -> Result<Option<AssetPropertyRow>, RepositoryError> {
-        let result = asset_property
-            .filter(id.eq(asset_property_id))
-            .first(self.connection.lock().connection())
-            .optional()?;
-        Ok(result)
-    }
-
-    pub fn delete(&self, asset_property_id: &str) -> Result<(), RepositoryError> {
-        diesel::delete(asset_property)
-            .filter(id.eq(asset_property_id))
-            .execute(self.connection.lock().connection())?;
-        Ok(())
-    }
-}
-
-impl Upsert for AssetPropertyRow {
-    fn upsert_sync(&self, con: &StorageConnection) -> Result<(), RepositoryError> {
-        let _change_log_id = AssetPropertyRowRepository::new(con).upsert_one(self)?;
-        Ok(())
-    }
-
-    fn upsert(&self, con: &StorageConnection) -> Result<Option<i64>, RepositoryError> {
-        let cursor_id = AssetPropertyRowRepository::new(con).upsert_one(self)?;
-        Ok(Some(cursor_id))
-    }
-
-    // Test only
-    fn assert_upserted(&self, con: &StorageConnection) {
-        assert_eq!(
-            AssetPropertyRowRepository::new(con).find_one_by_id(&self.id),
-            Ok(Some(self.clone()))
-        )
-    }
-}
diff --git a/server/repository/src/db_diesel/assets/asset_row.rs b/server/repository/src/db_diesel/assets/asset_row.rs
index b6acb0313..844134d2c 100644
--- a/server/repository/src/db_diesel/assets/asset_row.rs
+++ b/server/repository/src/db_diesel/assets/asset_row.rs
@@ -28,11 +28,6 @@ table! {
         created_datetime -> Timestamp,
         modified_datetime -> Timestamp,
         deleted_datetime -> Nullable<Timestamp>,
-        properties -> Nullable<Text>,
-        donor_name_id -> Nullable<Text>,
-        warranty_start -> Nullable<Date>,
-        warranty_end -> Nullable<Date>,
-        needs_replacement -> Nullable<Bool>,
     }
 }
 
@@ -61,11 +56,6 @@ pub struct AssetRow {
     pub created_datetime: NaiveDateTime,
     pub modified_datetime: NaiveDateTime,
     pub deleted_datetime: Option<NaiveDateTime>,
-    pub properties: Option<String>,
-    pub donor_name_id: Option<String>,
-    pub warranty_start: Option<NaiveDate>,
-    pub warranty_end: Option<NaiveDate>,
-    pub needs_replacement: Option<bool>,
 }
 
 pub struct AssetRowRepository<'a> {
diff --git a/server/repository/src/db_diesel/assets/mod.rs b/server/repository/src/db_diesel/assets/mod.rs
index 12b7a9b77..7ac021f55 100644
--- a/server/repository/src/db_diesel/assets/mod.rs
+++ b/server/repository/src/db_diesel/assets/mod.rs
@@ -1,6 +1,10 @@
 pub mod asset;
 pub mod asset_catalogue_item;
+pub mod asset_catalogue_item_property;
+pub mod asset_catalogue_item_property_row;
 pub mod asset_catalogue_item_row;
+pub mod asset_catalogue_property;
+pub mod asset_catalogue_property_row;
 pub mod asset_category;
 pub mod asset_category_row;
 pub mod asset_class;
@@ -11,9 +15,6 @@ pub mod asset_log;
 pub mod asset_log_reason;
 pub mod asset_log_reason_row;
 pub mod asset_log_row;
-pub mod asset_property;
-pub mod asset_property_row;
 pub mod asset_row;
 pub mod asset_type;
 pub mod asset_type_row;
-pub mod types;
diff --git a/server/repository/src/db_diesel/assets/types.rs b/server/repository/src/db_diesel/assets/types.rs
deleted file mode 100644
index 86d32c770..000000000
--- a/server/repository/src/db_diesel/assets/types.rs
+++ /dev/null
@@ -1,13 +0,0 @@
-use diesel_derive_enum::DbEnum;
-use serde::{Deserialize, Serialize};
-
-#[derive(DbEnum, Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
-#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
-#[DbValueStyle = "SCREAMING_SNAKE_CASE"]
-pub enum PropertyValueType {
-    #[default]
-    String,
-    Boolean,
-    Integer,
-    Float,
-}
diff --git a/server/repository/src/db_diesel/barcode.rs b/server/repository/src/db_diesel/barcode.rs
index 050f55cfd..40393773a 100644
--- a/server/repository/src/db_diesel/barcode.rs
+++ b/server/repository/src/db_diesel/barcode.rs
@@ -27,7 +27,7 @@ pub struct BarcodeFilter {
     pub id: Option<EqualFilter<String>>,
     pub gtin: Option<EqualFilter<String>>,
     pub item_id: Option<EqualFilter<String>>,
-    pub pack_size: Option<EqualFilter<f64>>,
+    pub pack_size: Option<EqualFilter<i32>>,
 }
 
 #[derive(PartialEq, Debug)]
@@ -133,7 +133,7 @@ impl BarcodeFilter {
         self
     }
 
-    pub fn pack_size(mut self, filter: EqualFilter<f64>) -> Self {
+    pub fn pack_size(mut self, filter: EqualFilter<i32>) -> Self {
         self.pack_size = Some(filter);
         self
     }
diff --git a/server/repository/src/db_diesel/barcode_row.rs b/server/repository/src/db_diesel/barcode_row.rs
index af20f2316..0f78be935 100644
--- a/server/repository/src/db_diesel/barcode_row.rs
+++ b/server/repository/src/db_diesel/barcode_row.rs
@@ -14,7 +14,7 @@ table! {
         gtin -> Text,
         item_id -> Text,
         manufacturer_link_id -> Nullable<Text>,
-        pack_size -> Nullable<Double>,
+        pack_size -> Nullable<Integer>,
         parent_id -> Nullable<Text>,
     }
 }
@@ -41,7 +41,7 @@ pub struct BarcodeRow {
     pub gtin: String,
     pub item_id: String,
     pub manufacturer_link_id: Option<String>,
-    pub pack_size: Option<f64>,
+    pub pack_size: Option<i32>,
     pub parent_id: Option<String>,
 }
 
@@ -146,7 +146,7 @@ mod test {
             r.id = uuid();
             r.gtin = "12345678901234".to_string();
             r.item_id = "item_a".to_string();
-            r.pack_size = Some(1.0);
+            r.pack_size = Some(1);
         })
     }
 
@@ -155,7 +155,7 @@ mod test {
             r.id = uuid();
             r.gtin = "98765432104321".to_string();
             r.item_id = "item_a".to_string();
-            r.pack_size = Some(10.0);
+            r.pack_size = Some(10);
         })
     }
 
diff --git a/server/repository/src/db_diesel/changelog/changelog.rs b/server/repository/src/db_diesel/changelog/changelog.rs
index f0ce4c401..10751e2ca 100644
--- a/server/repository/src/db_diesel/changelog/changelog.rs
+++ b/server/repository/src/db_diesel/changelog/changelog.rs
@@ -1,6 +1,6 @@
 use crate::{
     db_diesel::store_row::store, diesel_macros::apply_equal_filter, name_link, DBType, EqualFilter,
-    LockedConnection, NameLinkRow, RepositoryError, StorageConnection,
+    NameLinkRow, RepositoryError, StorageConnection,
 };
 use diesel::{
     helper_types::{IntoBoxed, LeftJoin},
@@ -94,9 +94,6 @@ pub enum ChangelogTableName {
     Asset,
     AssetLog,
     AssetLogReason,
-    AssetProperty,
-    Property,
-    NameProperty,
 }
 
 pub(crate) enum ChangeLogSyncStyle {
@@ -146,9 +143,6 @@ impl ChangelogTableName {
             ChangelogTableName::AssetCatalogueItemProperty => ChangeLogSyncStyle::Central,
             ChangelogTableName::AssetCatalogueProperty => ChangeLogSyncStyle::Central,
             ChangelogTableName::AssetLogReason => ChangeLogSyncStyle::Central,
-            ChangelogTableName::AssetProperty => ChangeLogSyncStyle::Central,
-            ChangelogTableName::Property => ChangeLogSyncStyle::Central,
-            ChangelogTableName::NameProperty => ChangeLogSyncStyle::Central,
         }
     }
 }
@@ -212,33 +206,30 @@ impl<'a> ChangelogRepository<'a> {
         limit: u32,
         filter: Option<ChangelogFilter>,
     ) -> Result<Vec<ChangelogRow>, RepositoryError> {
-        let result = with_locked_changelog_table(self.connection, |locked_con| {
-            let query = create_filtered_query(earliest, filter)
-                .order(changelog_deduped::dsl::cursor.asc())
-                .limit(limit.into());
-
-            // // Debug diesel query
-            // println!(
-            //     "{}",
-            //     diesel::debug_query::<crate::DBType, _>(&query).to_string()
-            // );
-
-            let result: Vec<ChangelogJoin> = query.load(locked_con.connection())?;
-            Ok(result
-                .into_iter()
-                .map(|(change_log_row, name_link_row)| ChangelogRow {
-                    cursor: change_log_row.cursor,
-                    table_name: change_log_row.table_name,
-                    record_id: change_log_row.record_id,
-                    row_action: change_log_row.row_action,
-                    name_id: name_link_row.map(|r| r.name_id),
-                    store_id: change_log_row.store_id,
-                    is_sync_update: change_log_row.is_sync_update,
-                    source_site_id: change_log_row.source_site_id,
-                })
-                .collect())
-        })?;
-        Ok(result)
+        let query = create_filtered_query(earliest, filter)
+            .order(changelog_deduped::dsl::cursor.asc())
+            .limit(limit.into());
+
+        // // Debug diesel query
+        // println!(
+        //     "{}",
+        //     diesel::debug_query::<crate::DBType, _>(&query).to_string()
+        // );
+
+        let result: Vec<ChangelogJoin> = query.load(self.connection.lock().connection())?;
+        Ok(result
+            .into_iter()
+            .map(|(change_log_row, name_link_row)| ChangelogRow {
+                cursor: change_log_row.cursor,
+                table_name: change_log_row.table_name,
+                record_id: change_log_row.record_id,
+                row_action: change_log_row.row_action,
+                name_id: name_link_row.map(|r| r.name_id),
+                store_id: change_log_row.store_id,
+                is_sync_update: change_log_row.is_sync_update,
+                source_site_id: change_log_row.source_site_id,
+            })
+            .collect())
     }
 
     pub fn count(
@@ -259,33 +250,30 @@ impl<'a> ChangelogRepository<'a> {
         sync_site_id: i32,
         is_initialized: bool,
     ) -> Result<Vec<ChangelogRow>, RepositoryError> {
-        let result = with_locked_changelog_table(self.connection, |locked_con| {
-            let query = create_filtered_outgoing_sync_query(earliest, sync_site_id, is_initialized)
-                .order(changelog_deduped::cursor.asc())
-                .limit(batch_size.into());
-
-            // Debug diesel query
-            // println!(
-            //     "{}",
-            //     diesel::debug_query::<crate::DBType, _>(&query).to_string()
-            // );
-
-            let result: Vec<ChangelogJoin> = query.load(locked_con.connection())?;
-            Ok(result
-                .into_iter()
-                .map(|(change_log_row, name_link_row)| ChangelogRow {
-                    cursor: change_log_row.cursor,
-                    table_name: change_log_row.table_name,
-                    record_id: change_log_row.record_id,
-                    row_action: change_log_row.row_action,
-                    name_id: name_link_row.map(|r| r.name_id),
-                    store_id: change_log_row.store_id,
-                    is_sync_update: change_log_row.is_sync_update,
-                    source_site_id: change_log_row.source_site_id,
-                })
-                .collect())
-        })?;
-        Ok(result)
+        let query = create_filtered_outgoing_sync_query(earliest, sync_site_id, is_initialized)
+            .order(changelog_deduped::cursor.asc())
+            .limit(batch_size.into());
+
+        // Debug diesel query
+        // println!(
+        //     "{}",
+        //     diesel::debug_query::<crate::DBType, _>(&query).to_string()
+        // );
+
+        let result: Vec<ChangelogJoin> = query.load(self.connection.lock().connection())?;
+        Ok(result
+            .into_iter()
+            .map(|(change_log_row, name_link_row)| ChangelogRow {
+                cursor: change_log_row.cursor,
+                table_name: change_log_row.table_name,
+                record_id: change_log_row.record_id,
+                row_action: change_log_row.row_action,
+                name_id: name_link_row.map(|r| r.name_id),
+                store_id: change_log_row.store_id,
+                is_sync_update: change_log_row.is_sync_update,
+                source_site_id: change_log_row.source_site_id,
+            })
+            .collect())
     }
 
     /// This returns the number of changelog records that should be evaluated to send to the remote site when doing a v6_pull
@@ -322,7 +310,6 @@ impl<'a> ChangelogRepository<'a> {
 
     // Needed for tests, when is_sync_update needs to be reset when records were inserted via
     // PullUpsertRecord (but not through sync)
-    #[cfg(test)]
     pub fn reset_is_sync_update(&self, from_cursor: u64) -> Result<(), RepositoryError> {
         diesel::update(changelog::table)
             .set(changelog::is_sync_update.eq(false))
@@ -477,52 +464,6 @@ fn create_filtered_outgoing_sync_query(
     query
 }
 
-/// Runs some DB operation with a fully locked `changelog` table.
-/// This only applies for for Postgres and does nothing for Sqlite.
-///
-/// Motivation:
-/// When querying changelog entries, ongoing transactions might continue adding changelog entries
-/// to the queried range of changelogs.
-/// This is because Postgres has Read Committed isolation level (instead of Serialized in Sqlite).
-/// However, we assume that there will be no new changelog entries in the queried range in the
-/// future, e.g. when updating the cursor position.
-///
-/// For example, a changelog may contain [1, 3, 4, 5] while another (slow) tx is about to commit a
-/// changelog row with cursor = 2.
-/// We need to wait for this changelog 2 to be added before doing the changelogs() query, otherwise
-/// we might update the latest changelog cursor to 5 and the changelog with cursor = 2 will be left
-/// unhandled when continuing from the latest cursor position.
-///
-/// Locking the changelog table will wait for ongoing writers and will prevent new writers while
-/// reading the changelog.
-fn with_locked_changelog_table<T, F>(
-    connection: &StorageConnection,
-    f: F,
-) -> Result<T, RepositoryError>
-where
-    F: FnOnce(&mut LockedConnection) -> Result<T, RepositoryError>,
-{
-    if cfg!(feature = "postgres") {
-        use diesel::connection::SimpleConnection;
-        let result = connection.transaction_sync_etc(
-            |con| {
-                let mut locked_con = con.lock();
-                locked_con
-                    .connection()
-                    .batch_execute("LOCK TABLE ONLY changelog IN ACCESS EXCLUSIVE MODE")?;
-
-                f(&mut locked_con)
-            },
-            false,
-        )?;
-
-        Ok(result)
-    } else {
-        let mut locked_con = connection.lock();
-        f(&mut locked_con)
-    }
-}
-
 // Only used in tests (cfg flag doesn't seem to work for inline_init even in tests)
 impl Default for ChangelogRow {
     fn default() -> Self {
@@ -592,62 +533,3 @@ impl RowActionType {
         inline_init(|r: &mut EqualFilter<Self>| r.equal_to = Some(self.clone()))
     }
 }
-
-#[cfg(test)]
-mod test {
-    use tokio::sync::oneshot;
-    use util::inline_init;
-
-    use crate::{
-        mock::MockDataInserts, test_db::setup_all, ChangelogRepository, ClinicianRow,
-        ClinicianRowRepository, RepositoryError, TransactionError,
-    };
-
-    /// Example from with_locked_changelog_table() comment
-    #[tokio::test(flavor = "multi_thread", worker_threads = 2)]
-    async fn test_late_changelog_rows() {
-        let (_, connection, connection_manager, _) =
-            setup_all("test_late_changelog_rows", MockDataInserts::none()).await;
-
-        ClinicianRowRepository::new(&connection)
-            .upsert_one(&inline_init(|r: &mut ClinicianRow| {
-                r.id = String::from("1");
-                r.is_active = true;
-            }))
-            .unwrap();
-
-        let (sender, receiver) = oneshot::channel::<()>();
-        let manager_2 = connection_manager.clone();
-        let process_2 = tokio::spawn(async move {
-            let connection = manager_2.connection().unwrap();
-            let result: Result<(), TransactionError<RepositoryError>> = connection
-                .transaction_sync(|con| {
-                    ClinicianRowRepository::new(con)
-                        .upsert_one(&inline_init(|r: &mut ClinicianRow| {
-                            r.id = String::from("2");
-                            r.is_active = true;
-                        }))
-                        .unwrap();
-                    sender.send(()).unwrap();
-                    std::thread::sleep(core::time::Duration::from_millis(100));
-                    Ok(())
-                });
-            result
-        });
-        receiver.await.unwrap();
-        ClinicianRowRepository::new(&connection)
-            .upsert_one(&inline_init(|r: &mut ClinicianRow| {
-                r.id = String::from("3");
-                r.is_active = true;
-            }))
-            .unwrap();
-
-        let changelogs = ChangelogRepository::new(&connection)
-            .changelogs(0, 10, None)
-            .unwrap();
-        assert_eq!(changelogs.len(), 3);
-
-        // being good and awaiting the task to finish orderly and check it did run fine
-        process_2.await.unwrap().unwrap();
-    }
-}
diff --git a/server/repository/src/db_diesel/clinician_store_join_row.rs b/server/repository/src/db_diesel/clinician_store_join_row.rs
index afb0baa30..d0bbaf3a7 100644
--- a/server/repository/src/db_diesel/clinician_store_join_row.rs
+++ b/server/repository/src/db_diesel/clinician_store_join_row.rs
@@ -73,7 +73,7 @@ impl<'a> ClinicianStoreJoinRowRepository<'a> {
         Ok(())
     }
 
-    pub fn find_one_by_id(
+    pub fn find_one_by_id_option(
         &self,
         row_id: &str,
     ) -> Result<Option<ClinicianStoreJoinRow>, RepositoryError> {
@@ -121,7 +121,7 @@ impl Upsert for ClinicianStoreJoinRow {
     // Test only
     fn assert_upserted(&self, con: &StorageConnection) {
         assert_eq!(
-            ClinicianStoreJoinRowRepository::new(con).find_one_by_id(&self.id),
+            ClinicianStoreJoinRowRepository::new(con).find_one_by_id_option(&self.id),
             Ok(Some(self.clone()))
         )
     }
diff --git a/server/repository/src/db_diesel/consumption.rs b/server/repository/src/db_diesel/consumption.rs
index 2651c7b98..a0d70c13b 100644
--- a/server/repository/src/db_diesel/consumption.rs
+++ b/server/repository/src/db_diesel/consumption.rs
@@ -11,7 +11,7 @@ table! {
         id -> Text,
         item_id -> Text,
         store_id -> Text,
-        quantity -> Double,
+        quantity -> BigInt,
         date -> Date,
     }
 }
@@ -24,7 +24,7 @@ pub struct ConsumptionRow {
     pub id: String,
     pub item_id: String,
     pub store_id: String,
-    pub quantity: f64,
+    pub quantity: i64,
     pub date: NaiveDate,
 }
 
diff --git a/server/repository/src/db_diesel/demographic_indicator.rs b/server/repository/src/db_diesel/demographic_indicator.rs
deleted file mode 100644
index b4b3f2a25..000000000
--- a/server/repository/src/db_diesel/demographic_indicator.rs
+++ /dev/null
@@ -1,129 +0,0 @@
-use super::{
-    demographic_indicator_row::{
-        demographic_indicator, demographic_indicator::dsl as demographic_indicator_dsl,
-    },
-    DBType, StorageConnection,
-};
-use diesel::prelude::*;
-
-use crate::{
-    demographic_indicator_row::DemographicIndicatorRow,
-    diesel_macros::{apply_equal_filter, apply_sort_no_case, apply_string_filter},
-    repository_error::RepositoryError,
-    Pagination, StringFilter,
-};
-
-pub type DemographicIndicator = DemographicIndicatorRow;
-
-use crate::{EqualFilter, Sort};
-
-#[derive(Clone, Default)]
-pub struct DemographicIndicatorFilter {
-    pub id: Option<EqualFilter<String>>,
-    pub name: Option<StringFilter>,
-    pub base_year: Option<EqualFilter<i32>>,
-}
-
-pub enum DemographicIndicatorSortField {
-    Id,
-    Name,
-}
-
-pub type DemographicIndicatorSort = Sort<DemographicIndicatorSortField>;
-
-pub struct DemographicIndicatorRepository<'a> {
-    connection: &'a StorageConnection,
-}
-
-impl<'a> DemographicIndicatorRepository<'a> {
-    pub fn new(connection: &'a StorageConnection) -> Self {
-        DemographicIndicatorRepository { connection }
-    }
-
-    pub fn count(
-        &self,
-        filter: Option<DemographicIndicatorFilter>,
-    ) -> Result<i64, RepositoryError> {
-        let query = create_filtered_query(filter);
-        Ok(query
-            .count()
-            .get_result(self.connection.lock().connection())?)
-    }
-
-    pub fn query_by_filter(
-        &self,
-        filter: DemographicIndicatorFilter,
-    ) -> Result<Vec<DemographicIndicator>, RepositoryError> {
-        self.query(Pagination::all(), Some(filter), None)
-    }
-
-    pub fn query(
-        &self,
-        pagination: Pagination,
-        filter: Option<DemographicIndicatorFilter>,
-        sort: Option<DemographicIndicatorSort>,
-    ) -> Result<Vec<DemographicIndicator>, RepositoryError> {
-        let mut query = create_filtered_query(filter);
-        if let Some(sort) = sort {
-            match sort.key {
-                DemographicIndicatorSortField::Id => {
-                    apply_sort_no_case!(query, sort, demographic_indicator_dsl::id)
-                }
-                DemographicIndicatorSortField::Name => {
-                    apply_sort_no_case!(query, sort, demographic_indicator_dsl::name)
-                }
-            }
-        } else {
-            query = query.order(demographic_indicator_dsl::name.asc())
-        }
-
-        let final_query = query
-            .offset(pagination.offset as i64)
-            .limit(pagination.limit as i64);
-
-        let result =
-            final_query.load::<DemographicIndicatorRow>(self.connection.lock().connection())?;
-
-        Ok(result.into_iter().map(to_domain).collect())
-    }
-}
-
-type BoxedLogQuery = demographic_indicator::BoxedQuery<'static, DBType>;
-
-fn create_filtered_query(filter: Option<DemographicIndicatorFilter>) -> BoxedLogQuery {
-    let mut query = demographic_indicator::table.into_boxed();
-
-    if let Some(filter) = filter {
-        apply_equal_filter!(query, filter.id, demographic_indicator_dsl::id);
-        apply_string_filter!(query, filter.name, demographic_indicator_dsl::name);
-        apply_equal_filter!(
-            query,
-            filter.base_year,
-            demographic_indicator_dsl::base_year
-        );
-    }
-    query
-}
-
-fn to_domain(demographic_indicator_row: DemographicIndicatorRow) -> DemographicIndicator {
-    demographic_indicator_row
-}
-
-impl DemographicIndicatorFilter {
-    pub fn new() -> DemographicIndicatorFilter {
-        Self::default()
-    }
-
-    pub fn id(mut self, filter: EqualFilter<String>) -> Self {
-        self.id = Some(filter);
-        self
-    }
-    pub fn name(mut self, filter: StringFilter) -> Self {
-        self.name = Some(filter);
-        self
-    }
-    pub fn base_year(mut self, filter: EqualFilter<i32>) -> Self {
-        self.base_year = Some(filter);
-        self
-    }
-}
diff --git a/server/repository/src/db_diesel/demographic_indicator_row.rs b/server/repository/src/db_diesel/demographic_indicator_row.rs
deleted file mode 100644
index fbc6e1501..000000000
--- a/server/repository/src/db_diesel/demographic_indicator_row.rs
+++ /dev/null
@@ -1,78 +0,0 @@
-use super::{
-    demographic_indicator_row::demographic_indicator::dsl as demographic_indicator_dsl,
-    StorageConnection,
-};
-
-use crate::repository_error::RepositoryError;
-
-use diesel::prelude::*;
-
-table! {
-    demographic_indicator(id) {
-        id -> Text,
-        name -> Text,
-        base_year -> Integer,
-        base_population -> Integer,
-        population_percentage -> Double,
-        year_1_projection -> Integer,
-        year_2_projection -> Integer,
-        year_3_projection -> Integer,
-        year_4_projection -> Integer,
-        year_5_projection -> Integer,
-    }
-}
-
-#[derive(Clone, Queryable, Insertable, AsChangeset, Debug, PartialEq, Default)]
-#[diesel(table_name = demographic_indicator)]
-pub struct DemographicIndicatorRow {
-    pub id: String,
-    pub name: String,
-    pub base_year: i32,
-    pub base_population: i32,
-    pub population_percentage: f64,
-    pub year_1_projection: i32,
-    pub year_2_projection: i32,
-    pub year_3_projection: i32,
-    pub year_4_projection: i32,
-    pub year_5_projection: i32,
-}
-
-pub struct DemographicIndicatorRowRepository<'a> {
-    connection: &'a StorageConnection,
-}
-
-impl<'a> DemographicIndicatorRowRepository<'a> {
-    pub fn new(connection: &'a StorageConnection) -> Self {
-        DemographicIndicatorRowRepository { connection }
-    }
-
-    #[cfg(feature = "postgres")]
-    pub fn upsert_one(&self, row: &DemographicIndicatorRow) -> Result<(), RepositoryError> {
-        diesel::insert_into(demographic_indicator_dsl::demographic_indicator)
-            .values(row)
-            .on_conflict(demographic_indicator_dsl::id)
-            .do_update()
-            .set(row)
-            .execute(self.connection.lock().connection())?;
-        Ok(())
-    }
-
-    #[cfg(not(feature = "postgres"))]
-    pub fn upsert_one(&self, row: &DemographicIndicatorRow) -> Result<(), RepositoryError> {
-        diesel::replace_into(demographic_indicator_dsl::demographic_indicator)
-            .values(row)
-            .execute(self.connection.lock().connection())?;
-        Ok(())
-    }
-
-    pub fn find_one_by_id(
-        &self,
-        demographic_indicator_id: &str,
-    ) -> Result<Option<DemographicIndicatorRow>, RepositoryError> {
-        let result = demographic_indicator_dsl::demographic_indicator
-            .filter(demographic_indicator_dsl::id.eq(demographic_indicator_id))
-            .first(self.connection.lock().connection())
-            .optional()?;
-        Ok(result)
-    }
-}
diff --git a/server/repository/src/db_diesel/demographic_projection.rs b/server/repository/src/db_diesel/demographic_projection.rs
deleted file mode 100644
index 87d23b614..000000000
--- a/server/repository/src/db_diesel/demographic_projection.rs
+++ /dev/null
@@ -1,120 +0,0 @@
-use super::{
-    demographic_projection_row::{
-        demographic_projection, demographic_projection::dsl as demographic_projection_dsl,
-    },
-    DBType, StorageConnection,
-};
-use diesel::prelude::*;
-
-use crate::{
-    demographic_projection_row::DemographicProjectionRow,
-    diesel_macros::{apply_equal_filter, apply_sort_no_case},
-    repository_error::RepositoryError,
-    Pagination,
-};
-
-pub type DemographicProjection = DemographicProjectionRow;
-
-use crate::{EqualFilter, Sort};
-
-#[derive(Clone, Default)]
-pub struct DemographicProjectionFilter {
-    pub id: Option<EqualFilter<String>>,
-    pub base_year: Option<EqualFilter<i32>>,
-}
-
-pub enum DemographicProjectionSortField {
-    Id,
-}
-
-pub type DemographicProjectionSort = Sort<DemographicProjectionSortField>;
-
-pub struct DemographicProjectionRepository<'a> {
-    connection: &'a StorageConnection,
-}
-
-impl<'a> DemographicProjectionRepository<'a> {
-    pub fn new(connection: &'a StorageConnection) -> Self {
-        DemographicProjectionRepository { connection }
-    }
-
-    pub fn count(
-        &self,
-        filter: Option<DemographicProjectionFilter>,
-    ) -> Result<i64, RepositoryError> {
-        let query = create_filtered_query(filter);
-        Ok(query
-            .count()
-            .get_result(self.connection.lock().connection())?)
-    }
-
-    pub fn query_by_filter(
-        &self,
-        filter: DemographicProjectionFilter,
-    ) -> Result<Vec<DemographicProjection>, RepositoryError> {
-        self.query(Pagination::all(), Some(filter), None)
-    }
-
-    pub fn query(
-        &self,
-        pagination: Pagination,
-
-        filter: Option<DemographicProjectionFilter>,
-        sort: Option<DemographicProjectionSort>,
-    ) -> Result<Vec<DemographicProjection>, RepositoryError> {
-        let mut query = create_filtered_query(filter);
-        if let Some(sort) = sort {
-            match sort.key {
-                DemographicProjectionSortField::Id => {
-                    apply_sort_no_case!(query, sort, demographic_projection_dsl::id)
-                }
-            }
-        } else {
-            query = query.order(demographic_projection_dsl::id.asc())
-        }
-        let final_query = query
-            .offset(pagination.offset as i64)
-            .limit(pagination.limit as i64);
-
-        let result =
-            final_query.load::<DemographicProjectionRow>(self.connection.lock().connection())?;
-
-        Ok(result.into_iter().map(to_domain).collect())
-    }
-}
-
-type BoxedLogQuery = demographic_projection::BoxedQuery<'static, DBType>;
-
-fn create_filtered_query(filter: Option<DemographicProjectionFilter>) -> BoxedLogQuery {
-    let mut query = demographic_projection::table.into_boxed();
-
-    if let Some(filter) = filter {
-        apply_equal_filter!(query, filter.id, demographic_projection_dsl::id);
-        apply_equal_filter!(
-            query,
-            filter.base_year,
-            demographic_projection_dsl::base_year
-        );
-    }
-    query
-}
-
-pub fn to_domain(demographic_projection_row: DemographicProjectionRow) -> DemographicProjection {
-    demographic_projection_row
-}
-
-impl DemographicProjectionFilter {
-    pub fn new() -> DemographicProjectionFilter {
-        Self::default()
-    }
-
-    pub fn id(mut self, filter: EqualFilter<String>) -> Self {
-        self.id = Some(filter);
-        self
-    }
-
-    pub fn base_year(mut self, filter: EqualFilter<i32>) -> Self {
-        self.base_year = Some(filter);
-        self
-    }
-}
diff --git a/server/repository/src/db_diesel/demographic_projection_row.rs b/server/repository/src/db_diesel/demographic_projection_row.rs
deleted file mode 100644
index 4236a0165..000000000
--- a/server/repository/src/db_diesel/demographic_projection_row.rs
+++ /dev/null
@@ -1,72 +0,0 @@
-use super::{
-    demographic_projection_row::demographic_projection::dsl as demographic_projection_dsl,
-    StorageConnection,
-};
-
-use crate::repository_error::RepositoryError;
-
-use diesel::prelude::*;
-
-table! {
-    demographic_projection(id) {
-        id -> Text,
-        base_year -> Integer,
-        year_1 -> Integer,
-        year_2 -> Integer,
-        year_3 -> Integer,
-        year_4 -> Integer,
-        year_5 -> Integer,
-    }
-}
-
-#[derive(Clone, Queryable, Insertable, AsChangeset, Debug, PartialEq, Default)]
-#[diesel(table_name = demographic_projection)]
-pub struct DemographicProjectionRow {
-    pub id: String,
-    pub base_year: i32,
-    pub year_1: i32,
-    pub year_2: i32,
-    pub year_3: i32,
-    pub year_4: i32,
-    pub year_5: i32,
-}
-
-pub struct DemographicProjectionRowRepository<'a> {
-    connection: &'a StorageConnection,
-}
-
-impl<'a> DemographicProjectionRowRepository<'a> {
-    pub fn new(connection: &'a StorageConnection) -> Self {
-        DemographicProjectionRowRepository { connection }
-    }
-
-    #[cfg(feature = "postgres")]
-    pub fn upsert_one(&self, row: &DemographicProjectionRow) -> Result<(), RepositoryError> {
-        diesel::insert_into(demographic_projection_dsl::demographic_projection)
-            .values(row)
-            .on_conflict(demographic_projection_dsl::id)
-            .do_update()
-            .set(row)
-            .execute(self.connection.lock().connection())?;
-        Ok(())
-    }
-
-    #[cfg(not(feature = "postgres"))]
-    pub fn upsert_one(&self, row: &DemographicProjectionRow) -> Result<(), RepositoryError> {
-        diesel::replace_into(demographic_projection_dsl::demographic_projection)
-            .values(row)
-            .execute(self.connection.lock().connection())?;
-        Ok(())
-    }
-
-    pub fn find_one_by_id(
-        &self,
-        demographic_projection_id: &str,
-    ) -> Result<Option<DemographicProjectionRow>, RepositoryError> {
-        let result = demographic_projection_dsl::demographic_projection
-            .filter(demographic_projection_dsl::id.eq(demographic_projection_id))
-            .first(self.connection.lock().connection())
-            .optional()?;
-        Ok(result)
-    }
-}
diff --git a/server/repository/src/db_diesel/invoice_line_row.rs b/server/repository/src/db_diesel/invoice_line_row.rs
index 9b6dca758..56ee4b2fd 100644
--- a/server/repository/src/db_diesel/invoice_line_row.rs
+++ b/server/repository/src/db_diesel/invoice_line_row.rs
@@ -24,7 +24,7 @@ table! {
         location_id -> Nullable<Text>,
         batch -> Nullable<Text>,
         expiry_date -> Nullable<Date>,
-        pack_size -> Double,
+        pack_size -> Integer,
         cost_price_per_pack -> Double,
         sell_price_per_pack -> Double,
         total_before_tax -> Double,
@@ -48,16 +48,21 @@ joinable!(invoice_line -> return_reason (return_reason_id));
 allow_tables_to_appear_in_same_query!(invoice_line, item_link);
 allow_tables_to_appear_in_same_query!(invoice_line, name_link);
 
-#[derive(DbEnum, Debug, Clone, PartialEq, Eq, Default)]
+#[derive(DbEnum, Debug, Clone, PartialEq, Eq)]
 #[DbValueStyle = "SCREAMING_SNAKE_CASE"]
 pub enum InvoiceLineType {
-    #[default]
     StockIn,
     StockOut,
     UnallocatedStock,
     Service,
 }
 
+impl Default for InvoiceLineType {
+    fn default() -> Self {
+        Self::StockIn
+    }
+}
+
 #[derive(Clone, Queryable, Insertable, AsChangeset, Debug, PartialEq, Default)]
 #[diesel(treat_none_as_null = true)]
 #[diesel(table_name = invoice_line)]
@@ -71,7 +76,7 @@ pub struct InvoiceLineRow {
     pub location_id: Option<String>,
     pub batch: Option<String>,
     pub expiry_date: Option<NaiveDate>,
-    pub pack_size: f64,
+    pub pack_size: i32,
     pub cost_price_per_pack: f64,
     /// Sell price before tax
     pub sell_price_per_pack: f64,
@@ -176,15 +181,11 @@ impl<'a> InvoiceLineRowRepository<'a> {
         Ok(())
     }
 
-    pub fn find_one_by_id(
-        &self,
-        invoice_line_id: &str,
-    ) -> Result<Option<InvoiceLineRow>, RepositoryError> {
+    pub fn find_one_by_id(&self, record_id: &str) -> Result<InvoiceLineRow, RepositoryError> {
         let result = invoice_line
-            .filter(id.eq(invoice_line_id))
-            .first(self.connection.lock().connection())
-            .optional()?;
-        Ok(result)
+            .filter(id.eq(record_id))
+            .first(self.connection.lock().connection());
+        result.map_err(RepositoryError::from)
     }
 
     pub fn find_many_by_id(&self, ids: &[String]) -> Result<Vec<InvoiceLineRow>, RepositoryError> {
@@ -194,6 +195,18 @@ impl<'a> InvoiceLineRowRepository<'a> {
         Ok(result)
     }
 
+    // TODO replace find_one_by_id with this one
+    pub fn find_one_by_id_option(
+        &self,
+        invoice_line_id: &str,
+    ) -> Result<Option<InvoiceLineRow>, RepositoryError> {
+        let result = invoice_line
+            .filter(id.eq(invoice_line_id))
+            .first(self.connection.lock().connection())
+            .optional()?;
+        Ok(result)
+    }
+
     pub fn find_many_by_invoice_and_batch_id(
         &self,
         stock_line_id_param: &str,
@@ -225,7 +238,7 @@ impl Delete for InvoiceLineRowDelete {
     // Test only
     fn assert_deleted(&self, con: &StorageConnection) {
         assert_eq!(
-            InvoiceLineRowRepository::new(con).find_one_by_id(&self.0),
+            InvoiceLineRowRepository::new(con).find_one_by_id_option(&self.0),
             Ok(None)
         )
     }
@@ -239,7 +252,7 @@ impl Upsert for InvoiceLineRow {
     // Test only
     fn assert_upserted(&self, con: &StorageConnection) {
         assert_eq!(
-            InvoiceLineRowRepository::new(con).find_one_by_id(&self.id),
+            InvoiceLineRowRepository::new(con).find_one_by_id_option(&self.id),
             Ok(Some(self.clone()))
         )
     }
diff --git a/server/repository/src/db_diesel/invoice_row.rs b/server/repository/src/db_diesel/invoice_row.rs
index 00fda0169..be66da302 100644
--- a/server/repository/src/db_diesel/invoice_row.rs
+++ b/server/repository/src/db_diesel/invoice_row.rs
@@ -184,7 +184,18 @@ impl<'a> InvoiceRowRepository<'a> {
         Ok(())
     }
 
-    pub fn find_one_by_id(&self, invoice_id: &str) -> Result<Option<InvoiceRow>, RepositoryError> {
+    pub fn find_one_by_id(&self, invoice_id: &str) -> Result<InvoiceRow, RepositoryError> {
+        let result = invoice
+            .filter(id.eq(invoice_id))
+            .first(self.connection.lock().connection());
+        result.map_err(RepositoryError::from)
+    }
+
+    // TODO replace find_one_by_id with this one
+    pub fn find_one_by_id_option(
+        &self,
+        invoice_id: &str,
+    ) -> Result<Option<InvoiceRow>, RepositoryError> {
         let result = invoice
             .filter(id.eq(invoice_id))
             .first(self.connection.lock().connection())
@@ -221,7 +232,7 @@ impl Delete for InvoiceRowDelete {
     // Test only
     fn assert_deleted(&self, con: &StorageConnection) {
         assert_eq!(
-            InvoiceRowRepository::new(con).find_one_by_id(&self.0),
+            InvoiceRowRepository::new(con).find_one_by_id_option(&self.0),
             Ok(None)
         )
     }
@@ -235,7 +246,7 @@ impl Upsert for InvoiceRow {
     // Test only
     fn assert_upserted(&self, con: &StorageConnection) {
         assert_eq!(
-            InvoiceRowRepository::new(con).find_one_by_id(&self.id),
+            InvoiceRowRepository::new(con).find_one_by_id_option(&self.id),
             Ok(Some(self.clone()))
         )
     }
diff --git a/server/repository/src/db_diesel/item_row.rs b/server/repository/src/db_diesel/item_row.rs
index 6c4891ac5..2dfe5972a 100644
--- a/server/repository/src/db_diesel/item_row.rs
+++ b/server/repository/src/db_diesel/item_row.rs
@@ -14,7 +14,7 @@ table! {
         name -> Text,
         code -> Text,
         unit_id -> Nullable<Text>,
-        default_pack_size -> Double,
+        default_pack_size -> Integer,
         #[sql_name = "type"] type_ -> crate::db_diesel::item_row::ItemTypeMapping,
         // TODO, this is temporary, remove
         legacy_record -> Text,
@@ -42,14 +42,14 @@ pub enum ItemType {
     NonStock,
 }
 
-#[derive(Clone, Insertable, Queryable, Debug, PartialEq, AsChangeset)]
+#[derive(Clone, Insertable, Queryable, Debug, PartialEq, AsChangeset, Eq)]
 #[diesel(table_name = item)]
 pub struct ItemRow {
     pub id: String,
     pub name: String,
     pub code: String,
     pub unit_id: Option<String>,
-    pub default_pack_size: f64,
+    pub default_pack_size: i32,
     #[diesel(column_name = type_)]
     pub r#type: ItemType,
     // TODO, this is temporary, remove
diff --git a/server/repository/src/db_diesel/master_list.rs b/server/repository/src/db_diesel/master_list.rs
index a4d7c608d..c795af0e2 100644
--- a/server/repository/src/db_diesel/master_list.rs
+++ b/server/repository/src/db_diesel/master_list.rs
@@ -104,14 +104,13 @@ impl<'a> MasterListRepository<'a> {
             if let Some(is_program) = f.is_program {
                 let program_join_query = program_dsl::program
                     .select(program_dsl::master_list_id)
-                    .filter(program_dsl::master_list_id.is_not_null())
                     .distinct()
                     .into_boxed();
 
                 if is_program {
-                    query = query.filter(master_list_dsl::id.nullable().eq_any(program_join_query));
+                    query = query.filter(master_list_dsl::id.eq_any(program_join_query));
                 } else {
-                    query = query.filter(master_list_dsl::id.nullable().ne_all(program_join_query));
+                    query = query.filter(master_list_dsl::id.ne_all(program_join_query));
                 }
             }
 
@@ -156,9 +155,6 @@ impl<'a> MasterListRepository<'a> {
             query = query.order(master_list_dsl::id.asc())
         }
 
-        // Debug diesel query
-        // println!("{}", diesel::debug_query::<DBType, _>(&query).to_string());
-
         let result = query
             .offset(pagination.offset as i64)
             .limit(pagination.limit as i64)
diff --git a/server/repository/src/db_diesel/master_list_line_row.rs b/server/repository/src/db_diesel/master_list_line_row.rs
index 83f89ced7..ce9aff83a 100644
--- a/server/repository/src/db_diesel/master_list_line_row.rs
+++ b/server/repository/src/db_diesel/master_list_line_row.rs
@@ -56,7 +56,17 @@ impl<'a> MasterListLineRowRepository<'a> {
         Ok(())
     }
 
-    pub fn find_one_by_id(
+    pub async fn find_one_by_id(
+        &self,
+        line_id: &str,
+    ) -> Result<MasterListLineRow, RepositoryError> {
+        let result = master_list_line
+            .filter(id.eq(line_id))
+            .first(self.connection.lock().connection())?;
+        Ok(result)
+    }
+
+    pub fn find_one_by_id_option(
         &self,
         line_id: &str,
     ) -> Result<Option<MasterListLineRow>, RepositoryError> {
@@ -82,7 +92,7 @@ impl Upsert for MasterListLineRow {
     // Test only
     fn assert_upserted(&self, con: &StorageConnection) {
         assert_eq!(
-            MasterListLineRowRepository::new(con).find_one_by_id(&self.id),
+            MasterListLineRowRepository::new(con).find_one_by_id_option(&self.id),
             Ok(Some(self.clone()))
         )
     }
@@ -97,7 +107,7 @@ impl Delete for MasterListLineRowDelete {
     // Test only
     fn assert_deleted(&self, con: &StorageConnection) {
         assert_eq!(
-            MasterListLineRowRepository::new(con).find_one_by_id(&self.0),
+            MasterListLineRowRepository::new(con).find_one_by_id_option(&self.0),
             Ok(None)
         )
     }
diff --git a/server/repository/src/db_diesel/master_list_name_join.rs b/server/repository/src/db_diesel/master_list_name_join.rs
index 8e47c6d29..1855c0e7d 100644
--- a/server/repository/src/db_diesel/master_list_name_join.rs
+++ b/server/repository/src/db_diesel/master_list_name_join.rs
@@ -56,7 +56,17 @@ impl<'a> MasterListNameJoinRepository<'a> {
         Ok(())
     }
 
-    pub fn find_one_by_id(
+    pub async fn find_one_by_id(
+        &self,
+        record_id: &str,
+    ) -> Result<MasterListNameJoinRow, RepositoryError> {
+        let result = master_list_name_join
+            .filter(id.eq(record_id))
+            .first(self.connection.lock().connection())?;
+        Ok(result)
+    }
+
+    pub fn find_one_by_id_option(
         &self,
         record_id: &str,
     ) -> Result<Option<MasterListNameJoinRow>, RepositoryError> {
@@ -83,7 +93,7 @@ impl Delete for MasterListNameJoinRowDelete {
     // Test only
     fn assert_deleted(&self, con: &StorageConnection) {
         assert_eq!(
-            MasterListNameJoinRepository::new(con).find_one_by_id(&self.0),
+            MasterListNameJoinRepository::new(con).find_one_by_id_option(&self.0),
             Ok(None)
         )
     }
@@ -97,7 +107,7 @@ impl Upsert for MasterListNameJoinRow {
     // Test only
     fn assert_upserted(&self, con: &StorageConnection) {
         assert_eq!(
-            MasterListNameJoinRepository::new(con).find_one_by_id(&self.id),
+            MasterListNameJoinRepository::new(con).find_one_by_id_option(&self.id),
             Ok(Some(self.clone()))
         )
     }
diff --git a/server/repository/src/db_diesel/mod.rs b/server/repository/src/db_diesel/mod.rs
index 07fb7bfd2..6aa1246d8 100644
--- a/server/repository/src/db_diesel/mod.rs
+++ b/server/repository/src/db_diesel/mod.rs
@@ -15,21 +15,17 @@ pub mod contact_trace_row;
 mod context_row;
 pub mod currency;
 mod currency_row;
-pub mod demographic_indicator;
-pub mod demographic_indicator_row;
-pub mod demographic_projection;
-pub mod demographic_projection_row;
 pub mod diesel_schema;
 pub mod document;
 pub mod document_registry;
 mod document_registry_config;
 mod document_registry_row;
 pub mod encounter;
-pub mod ledger;
 mod name_link_row;
 mod report_query;
 pub mod sync_file_reference;
 pub mod sync_file_reference_row;
+pub mod ledger;
 
 mod clinician_link_row;
 pub mod encounter_row;
@@ -57,8 +53,6 @@ mod master_list_line_row;
 pub mod master_list_name_join;
 mod master_list_row;
 pub mod name;
-pub mod name_property;
-pub mod name_property_row;
 mod name_row;
 pub mod name_store_join;
 pub mod name_tag;
@@ -76,7 +70,6 @@ mod program_enrolment_row;
 pub mod program_event;
 mod program_event_row;
 mod program_requisition;
-pub mod property_row;
 pub mod report;
 mod report_row;
 pub mod requisition;
@@ -113,7 +106,6 @@ pub mod user_permission;
 mod user_permission_row;
 mod user_row;
 mod user_store_join_row;
-pub mod vaccine_course;
 
 pub use activity_log_row::*;
 pub use assets::*;
@@ -127,9 +119,6 @@ pub use consumption::*;
 pub use context_row::*;
 pub use currency::*;
 pub use currency_row::*;
-pub use demographic_indicator::*;
-pub use demographic_indicator_row::*;
-pub use demographic_projection_row::*;
 pub use document::*;
 pub use document_registry::*;
 pub use document_registry_config::*;
@@ -157,8 +146,6 @@ pub use master_list_name_join::*;
 pub use master_list_row::*;
 pub use name::*;
 pub use name_link_row::*;
-pub use name_property::*;
-pub use name_property_row::*;
 pub use name_row::*;
 pub use name_store_join::*;
 pub use name_tag::*;
@@ -176,7 +163,6 @@ pub use program_enrolment_row::*;
 pub use program_event::*;
 pub use program_event_row::*;
 pub use program_requisition::*;
-pub use property_row::*;
 pub use report::*;
 pub use report_query::*;
 pub use report_row::*;
diff --git a/server/repository/src/db_diesel/name.rs b/server/repository/src/db_diesel/name.rs
index 0570288d4..f3388d0ed 100644
--- a/server/repository/src/db_diesel/name.rs
+++ b/server/repository/src/db_diesel/name.rs
@@ -7,9 +7,7 @@ use super::{
 };
 
 use crate::{
-    diesel_macros::{
-        apply_equal_filter, apply_sort_no_case, apply_string_filter, apply_string_or_filter,
-    },
+    diesel_macros::{apply_equal_filter, apply_sort_no_case, apply_string_filter},
     repository_error::RepositoryError,
     EqualFilter, NameLinkRow, NameType, Pagination, Sort, StringFilter,
 };
@@ -35,7 +33,6 @@ pub struct NameFilter {
     pub code: Option<StringFilter>,
     pub is_customer: Option<bool>,
     pub is_supplier: Option<bool>,
-    pub is_donor: Option<bool>,
     pub is_patient: Option<bool>,
     pub is_store: Option<bool>,
     pub store_code: Option<StringFilter>,
@@ -48,8 +45,6 @@ pub struct NameFilter {
     pub address2: Option<StringFilter>,
     pub country: Option<StringFilter>,
     pub email: Option<StringFilter>,
-
-    pub code_or_name: Option<StringFilter>,
 }
 
 impl EqualFilter<NameType> {
@@ -179,7 +174,6 @@ impl<'a> NameRepository<'a> {
                 code,
                 is_customer,
                 is_supplier,
-                is_donor,
                 is_store,
                 store_code,
                 is_visible,
@@ -191,15 +185,8 @@ impl<'a> NameRepository<'a> {
                 country,
                 email,
                 is_patient,
-                code_or_name,
             } = f;
 
-            // or filter need to be applied before and filters
-            if code_or_name.is_some() {
-                apply_string_filter!(query, code_or_name.clone(), name_dsl::code);
-                apply_string_or_filter!(query, code_or_name, name_dsl::name_);
-            }
-
             apply_equal_filter!(query, id, name_dsl::id);
             apply_string_filter!(query, code, name_dsl::code);
 
@@ -220,11 +207,6 @@ impl<'a> NameRepository<'a> {
                 query = query.filter(name_store_join_dsl::name_is_supplier.eq(is_supplier));
             }
 
-            query = match is_donor {
-                Some(bool) => query.filter(name_dsl::is_donor.eq(bool)),
-                None => query,
-            };
-
             query = match is_patient {
                 Some(true) => query.filter(name_dsl::type_.eq(NameType::Patient)),
                 Some(false) => query.filter(name_dsl::type_.ne(NameType::Patient)),
@@ -351,11 +333,6 @@ impl NameFilter {
         self.r#type = Some(filter);
         self
     }
-
-    pub fn code_or_name(mut self, filter: StringFilter) -> Self {
-        self.code_or_name = Some(filter);
-        self
-    }
 }
 
 impl Name {
@@ -395,12 +372,15 @@ impl Name {
 }
 
 impl NameType {
-    pub fn equal_to(&self) -> EqualFilter<Self> {
-        inline_init(|r: &mut EqualFilter<Self>| r.equal_to = Some(self.clone()))
-    }
-
-    pub fn not_equal_to(&self) -> EqualFilter<Self> {
-        inline_init(|r: &mut EqualFilter<Self>| r.not_equal_to = Some(self.clone()))
+    pub fn equal_to(&self) -> EqualFilter<NameType> {
+        EqualFilter {
+            equal_to: Some(self.clone()),
+            not_equal_to: None,
+            equal_any: None,
+            not_equal_all: None,
+            equal_any_or_null: None,
+            is_null: None,
+        }
     }
 }
 
diff --git a/server/repository/src/db_diesel/name_property.rs b/server/repository/src/db_diesel/name_property.rs
deleted file mode 100644
index 9a727432f..000000000
--- a/server/repository/src/db_diesel/name_property.rs
+++ /dev/null
@@ -1,95 +0,0 @@
-use super::{
-    name_property_row::{name_property, name_property::dsl as name_property_dsl},
-    property_row::{property, property::dsl as property_dsl},
-    NamePropertyRow, StorageConnection,
-};
-
-use crate::{diesel_macros::apply_equal_filter, PropertyRow};
-
-use crate::{repository_error::RepositoryError, DBType, EqualFilter};
-use diesel::{
-    dsl::{InnerJoin, IntoBoxed},
-    prelude::*,
-};
-
-#[derive(PartialEq, Debug, Clone)]
-pub struct NameProperty {
-    pub name_property_row: NamePropertyRow,
-    pub property_row: PropertyRow,
-}
-
-#[derive(Clone, Default, PartialEq, Debug)]
-pub struct NamePropertyFilter {
-    pub id: Option<EqualFilter<String>>,
-}
-
-type NamePropertyJoin = (NamePropertyRow, PropertyRow);
-
-pub struct NamePropertyRepository<'a> {
-    connection: &'a StorageConnection,
-}
-
-impl<'a> NamePropertyRepository<'a> {
-    pub fn new(connection: &'a StorageConnection) -> Self {
-        NamePropertyRepository { connection }
-    }
-
-    pub fn count(&self, filter: Option<NamePropertyFilter>) -> Result<i64, RepositoryError> {
-        let query = Self::create_filtered_query(filter);
-
-        Ok(query
-            .count()
-            .get_result(self.connection.lock().connection())?)
-    }
-
-    pub fn query_by_filter(
-        &self,
-        filter: NamePropertyFilter,
-    ) -> Result<Vec<NameProperty>, RepositoryError> {
-        self.query(Some(filter))
-    }
-
-    pub fn query(
-        &self,
-        filter: Option<NamePropertyFilter>,
-    ) -> Result<Vec<NameProperty>, RepositoryError> {
-        let query = Self::create_filtered_query(filter);
-
-        let result = query.load::<NamePropertyJoin>(self.connection.lock().connection())?;
-
-        Ok(result.into_iter().map(to_domain).collect())
-    }
-
-    pub fn create_filtered_query(filter: Option<NamePropertyFilter>) -> BoxedNamePropertyQuery {
-        let mut query = name_property_dsl::name_property
-            .inner_join(property_dsl::property)
-            .into_boxed();
-
-        if let Some(filter) = filter {
-            apply_equal_filter!(query, filter.id, name_property_dsl::id);
-        }
-
-        query
-    }
-}
-
-type BoxedNamePropertyQuery =
-    IntoBoxed<'static, InnerJoin<name_property::table, property::table>, DBType>;
-
-fn to_domain((name_property_row, property_row): NamePropertyJoin) -> NameProperty {
-    NameProperty {
-        name_property_row,
-        property_row,
-    }
-}
-
-impl NamePropertyFilter {
-    pub fn new() -> NamePropertyFilter {
-        Self::default()
-    }
-
-    pub fn id(mut self, filter: EqualFilter<String>) -> Self {
-        self.id = Some(filter);
-        self
-    }
-}
diff --git a/server/repository/src/db_diesel/name_property_row.rs b/server/repository/src/db_diesel/name_property_row.rs
deleted file mode 100644
index 36a60f476..000000000
--- a/server/repository/src/db_diesel/name_property_row.rs
+++ /dev/null
@@ -1,125 +0,0 @@
-use super::{name_property_row::name_property::dsl::*, property_row::property};
-
-use serde::{Deserialize, Serialize};
-
-use crate::ChangeLogInsertRow;
-use crate::ChangelogRepository;
-use crate::ChangelogTableName;
-use crate::RepositoryError;
-use crate::RowActionType;
-use crate::StorageConnection;
-use crate::Upsert;
-
-use diesel::prelude::*;
-
-table! {
-    name_property (id) {
-        id -> Text,
-        property_id -> Text,
-    }
-}
-joinable!(name_property -> property (property_id));
-allow_tables_to_appear_in_same_query!(name_property, property);
-
-#[derive(
-    Clone, Insertable, Queryable, Debug, PartialEq, AsChangeset, Eq, Serialize, Deserialize,
-)]
-#[diesel(table_name = name_property)]
-#[diesel(treat_none_as_null = true)]
-pub struct NamePropertyRow {
-    pub id: String,
-    pub property_id: String,
-}
-
-pub struct NamePropertyRowRepository<'a> {
-    connection: &'a StorageConnection,
-}
-
-impl<'a> NamePropertyRowRepository<'a> {
-    pub fn new(connection: &'a StorageConnection) -> Self {
-        NamePropertyRowRepository { connection }
-    }
-
-    #[cfg(feature = "postgres")]
-    pub fn _upsert_one(&self, name_property_row: &NamePropertyRow) -> Result<(), RepositoryError> {
-        diesel::insert_into(name_property)
-            .values(name_property_row)
-            .on_conflict(id)
-            .do_update()
-            .set(name_property_row)
-            .execute(self.connection.lock().connection())?;
-        Ok(())
-    }
-
-    #[cfg(not(feature = "postgres"))]
-    pub fn _upsert_one(&self, name_property_row: &NamePropertyRow) -> Result<(), RepositoryError> {
-        diesel::replace_into(name_property)
-            .values(name_property_row)
-            .execute(self.connection.lock().connection())?;
-        Ok(())
-    }
-
-    pub fn upsert_one(&self, name_property_row: &NamePropertyRow) -> Result<i64, RepositoryError> {
-        self._upsert_one(name_property_row)?;
-        self.insert_changelog(name_property_row.id.to_owned(), RowActionType::Upsert)
-    }
-
-    fn insert_changelog(
-        &self,
-        name_property_row: String,
-        action: RowActionType,
-    ) -> Result<i64, RepositoryError> {
-        let row = ChangeLogInsertRow {
-            table_name: ChangelogTableName::NameProperty,
-            record_id: name_property_row,
-            row_action: action,
-            store_id: None,
-            name_link_id: None,
-        };
-
-        ChangelogRepository::new(self.connection).insert(&row)
-    }
-
-    pub fn find_all(&self) -> Result<Vec<NamePropertyRow>, RepositoryError> {
-        let result = name_property.load(self.connection.lock().connection())?;
-        Ok(result)
-    }
-
-    pub fn find_one_by_id(
-        &self,
-        name_property_id: &str,
-    ) -> Result<Option<NamePropertyRow>, RepositoryError> {
-        let result = name_property
-            .filter(id.eq(name_property_id))
-            .first(self.connection.lock().connection())
-            .optional()?;
-        Ok(result)
-    }
-
-    pub fn delete(&self, name_property_id: &str) -> Result<(), RepositoryError> {
-        diesel::delete(name_property)
-            .filter(id.eq(name_property_id))
-            .execute(self.connection.lock().connection())?;
-        Ok(())
-    }
-}
-
-impl Upsert for NamePropertyRow {
-    fn upsert_sync(&self, con: &StorageConnection) -> Result<(), RepositoryError> {
-        let _change_log_id = NamePropertyRowRepository::new(con).upsert_one(self)?;
-        Ok(())
-    }
-
-    fn upsert(&self, con: &StorageConnection) -> Result<Option<i64>, RepositoryError> {
-        let cursor_id = NamePropertyRowRepository::new(con).upsert_one(self)?;
-        Ok(Some(cursor_id))
-    }
-
-    // Test only
-    fn assert_upserted(&self, con: &StorageConnection) {
-        assert_eq!(
-            NamePropertyRowRepository::new(con).find_one_by_id(&self.id),
-            Ok(Some(self.clone()))
-        )
-    }
-}
diff --git a/server/repository/src/db_diesel/pack_variant.rs b/server/repository/src/db_diesel/pack_variant.rs
index b07081601..94cebe916 100644
--- a/server/repository/src/db_diesel/pack_variant.rs
+++ b/server/repository/src/db_diesel/pack_variant.rs
@@ -23,7 +23,7 @@ pub struct PackVariantRepository<'a> {
 pub struct PackVariantFilter {
     pub id: Option<EqualFilter<String>>,
     pub item_id: Option<EqualFilter<String>>,
-    pub pack_size: Option<EqualFilter<f64>>,
+    pub pack_size: Option<EqualFilter<i32>>,
     pub is_active: Option<bool>,
 }
 
@@ -112,7 +112,7 @@ impl PackVariantFilter {
         self
     }
 
-    pub fn pack_size(mut self, filter: EqualFilter<f64>) -> Self {
+    pub fn pack_size(mut self, filter: EqualFilter<i32>) -> Self {
         self.pack_size = Some(filter);
         self
     }
diff --git a/server/repository/src/db_diesel/pack_variant_row.rs b/server/repository/src/db_diesel/pack_variant_row.rs
index 5da399044..89e864624 100644
--- a/server/repository/src/db_diesel/pack_variant_row.rs
+++ b/server/repository/src/db_diesel/pack_variant_row.rs
@@ -11,7 +11,7 @@ table! {
         item_id -> Text,
         short_name -> Text,
         long_name -> Text,
-        pack_size -> Double,
+        pack_size -> Integer,
         is_active -> Bool,
     }
 }
@@ -26,6 +26,8 @@ joinable!(pack_variant -> item (item_id));
     Debug,
     PartialEq,
     Default,
+    Eq,
+    Ord,
     PartialOrd,
     Serialize,
     Deserialize,
@@ -37,7 +39,7 @@ pub struct PackVariantRow {
     pub item_id: String,
     pub short_name: String,
     pub long_name: String,
-    pub pack_size: f64,
+    pub pack_size: i32,
     pub is_active: bool,
 }
 
diff --git a/server/repository/src/db_diesel/program_requisition/program.rs b/server/repository/src/db_diesel/program_requisition/program.rs
index a263db38e..ffcf44916 100644
--- a/server/repository/src/db_diesel/program_requisition/program.rs
+++ b/server/repository/src/db_diesel/program_requisition/program.rs
@@ -15,7 +15,6 @@ pub struct ProgramFilter {
     pub id: Option<EqualFilter<String>>,
     pub name: Option<StringFilter>,
     pub context_id: Option<EqualFilter<String>>,
-    pub is_immunisation: Option<bool>,
 }
 
 #[derive(PartialEq, Debug)]
@@ -93,15 +92,11 @@ fn create_filtered_query(filter: Option<ProgramFilter>) -> BoxedUserProgramQuery
             id,
             name,
             context_id,
-            is_immunisation,
         } = f;
 
         apply_equal_filter!(query, id, program_dsl::id);
         apply_string_filter!(query, name, program_dsl::name);
         apply_equal_filter!(query, context_id, program_dsl::context_id);
-        if let Some(is_immunisation) = is_immunisation {
-            query = query.filter(program_dsl::is_immunisation.eq(is_immunisation));
-        }
     }
 
     query
@@ -126,9 +121,4 @@ impl ProgramFilter {
         self.context_id = Some(filter);
         self
     }
-
-    pub fn is_immunisation(mut self, filter: bool) -> Self {
-        self.is_immunisation = Some(filter);
-        self
-    }
 }
diff --git a/server/repository/src/db_diesel/program_requisition/program_requisition_settings.rs b/server/repository/src/db_diesel/program_requisition/program_requisition_settings.rs
index 260f62d20..83807eaab 100644
--- a/server/repository/src/db_diesel/program_requisition/program_requisition_settings.rs
+++ b/server/repository/src/db_diesel/program_requisition/program_requisition_settings.rs
@@ -44,9 +44,8 @@ impl<'a> ProgramRequisitionSettingsRepository<'a> {
         let mut query = program_requisition_settings_dsl::program_requisition_settings
             .inner_join(program_dsl::program)
             .inner_join(
-                master_list_dsl::master_list.on(master_list_dsl::id
-                    .nullable()
-                    .eq(program_dsl::master_list_id)),
+                master_list_dsl::master_list
+                    .on(master_list_dsl::id.eq(program_dsl::master_list_id)),
             )
             .into_boxed();
 
@@ -64,8 +63,7 @@ impl<'a> ProgramRequisitionSettingsRepository<'a> {
 
             if master_list.is_some() {
                 let master_list_ids = MasterListRepository::create_filtered_query(master_list)
-                    .select(master_list_dsl::id)
-                    .nullable();
+                    .select(master_list_dsl::id);
                 query = query.filter(program_dsl::master_list_id.eq_any(master_list_ids));
             }
         }
@@ -148,7 +146,7 @@ mod test {
         };
         let program = ProgramRow {
             id: "program1".to_string(),
-            master_list_id: Some(master_list.id.clone()),
+            master_list_id: master_list.id.clone(),
             context_id: context.id.clone(),
             ..Default::default()
         };
diff --git a/server/repository/src/db_diesel/program_requisition/program_row.rs b/server/repository/src/db_diesel/program_requisition/program_row.rs
index e3c35527c..337b2b7f4 100644
--- a/server/repository/src/db_diesel/program_requisition/program_row.rs
+++ b/server/repository/src/db_diesel/program_requisition/program_row.rs
@@ -14,10 +14,9 @@ use diesel::prelude::*;
 table! {
     program (id) {
         id -> Text,
-        master_list_id -> Nullable<Text>,
+        master_list_id -> Text,
         name -> Text,
         context_id -> Text,
-        is_immunisation -> Bool,
     }
 }
 
@@ -30,10 +29,9 @@ allow_tables_to_appear_in_same_query!(program, name_link);
 #[diesel(table_name = program)]
 pub struct ProgramRow {
     pub id: String, // Master list id
-    pub master_list_id: Option<String>,
+    pub master_list_id: String,
     pub name: String,
     pub context_id: String,
-    pub is_immunisation: bool,
 }
 
 pub struct ProgramRowRepository<'a> {
diff --git a/server/repository/src/db_diesel/program_requisition/program_supplier.rs b/server/repository/src/db_diesel/program_requisition/program_supplier.rs
index dbad3cd6d..8b3ec0c1f 100644
--- a/server/repository/src/db_diesel/program_requisition/program_supplier.rs
+++ b/server/repository/src/db_diesel/program_requisition/program_supplier.rs
@@ -61,8 +61,7 @@ impl<'a> ProgramSupplierRepository<'a> {
                         .on(master_list_dsl::id.eq(master_list_name_join_dsl::master_list_id)),
                 )
                 .inner_join(
-                    program_dsl::program
-                        .on(program_dsl::master_list_id.eq(master_list_dsl::id.nullable())),
+                    program_dsl::program.on(program_dsl::master_list_id.eq(master_list_dsl::id)),
                 );
 
         apply_equal_filter!(query, program_id_filter, program_dsl::id);
@@ -176,7 +175,7 @@ mod test {
         };
         let program1 = ProgramRow {
             id: "program1".to_string(),
-            master_list_id: Some(master_list1.id.clone()),
+            master_list_id: master_list1.id.clone(),
             context_id: context1.id.clone(),
             ..Default::default()
         };
@@ -193,7 +192,7 @@ mod test {
         };
         let program2 = ProgramRow {
             id: "program2".to_string(),
-            master_list_id: Some(master_list2.id.clone()),
+            master_list_id: master_list2.id.clone(),
             context_id: context2.id.clone(),
             ..Default::default()
         };
diff --git a/server/repository/src/db_diesel/program_requisition/requisitions_in_period.rs b/server/repository/src/db_diesel/program_requisition/requisitions_in_period.rs
index e29144da2..dfea85112 100644
--- a/server/repository/src/db_diesel/program_requisition/requisitions_in_period.rs
+++ b/server/repository/src/db_diesel/program_requisition/requisitions_in_period.rs
@@ -178,7 +178,7 @@ mod test {
         };
         let program1 = ProgramRow {
             id: "program1".to_string(),
-            master_list_id: Some(master_list.id.clone()),
+            master_list_id: master_list.id.clone(),
             context_id: context1.id.clone(),
             ..Default::default()
         };
@@ -188,7 +188,7 @@ mod test {
         };
         let program2 = ProgramRow {
             id: "program2".to_string(),
-            master_list_id: Some(master_list.id.clone()),
+            master_list_id: master_list.id.clone(),
             context_id: context2.id.clone(),
             ..Default::default()
         };
diff --git a/server/repository/src/db_diesel/property_row.rs b/server/repository/src/db_diesel/property_row.rs
deleted file mode 100644
index f863cea6d..000000000
--- a/server/repository/src/db_diesel/property_row.rs
+++ /dev/null
@@ -1,130 +0,0 @@
-use super::property_row::property::dsl::*;
-
-use serde::{Deserialize, Serialize};
-
-use crate::types::PropertyValueType;
-use crate::ChangeLogInsertRow;
-use crate::ChangelogRepository;
-use crate::ChangelogTableName;
-use crate::RepositoryError;
-use crate::RowActionType;
-use crate::StorageConnection;
-use crate::Upsert;
-
-use diesel::prelude::*;
-
-table! {
-    property (id) {
-        id -> Text,
-        key -> Text,
-        name -> Text,
-        value_type -> crate::db_diesel::assets::types::PropertyValueTypeMapping,
-        allowed_values -> Nullable<Text>,
-    }
-}
-
-#[derive(
-    Clone, Insertable, Queryable, Debug, PartialEq, AsChangeset, Eq, Serialize, Deserialize,
-)]
-#[diesel(table_name = property)]
-#[diesel(treat_none_as_null = true)]
-pub struct PropertyRow {
-    pub id: String,
-    pub key: String,
-    pub name: String,
-    pub value_type: PropertyValueType,
-    pub allowed_values: Option<String>,
-}
-
-pub struct PropertyRowRepository<'a> {
-    connection: &'a StorageConnection,
-}
-
-impl<'a> PropertyRowRepository<'a> {
-    pub fn new(connection: &'a StorageConnection) -> Self {
-        PropertyRowRepository { connection }
-    }
-
-    #[cfg(feature = "postgres")]
-    pub fn _upsert_one(&self, property_row: &PropertyRow) -> Result<(), RepositoryError> {
-        diesel::insert_into(property)
-            .values(property_row)
-            .on_conflict(id)
-            .do_update()
-            .set(property_row)
-            .execute(self.connection.lock().connection())?;
-        Ok(())
-    }
-
-    #[cfg(not(feature = "postgres"))]
-    pub fn _upsert_one(&self, property_row: &PropertyRow) -> Result<(), RepositoryError> {
-        diesel::replace_into(property)
-            .values(property_row)
-            .execute(self.connection.lock().connection())?;
-        Ok(())
-    }
-
-    pub fn upsert_one(&self, property_row: &PropertyRow) -> Result<i64, RepositoryError> {
-        self._upsert_one(property_row)?;
-        self.insert_changelog(property_row.id.to_owned(), RowActionType::Upsert)
-    }
-
-    fn insert_changelog(
-        &self,
-        property_row: String,
-        action: RowActionType,
-    ) -> Result<i64, RepositoryError> {
-        let row = ChangeLogInsertRow {
-            table_name: ChangelogTableName::Property,
-            record_id: property_row,
-            row_action: action,
-            store_id: None,
-            name_link_id: None,
-        };
-
-        ChangelogRepository::new(self.connection).insert(&row)
-    }
-
-    pub fn find_all(&self) -> Result<Vec<PropertyRow>, RepositoryError> {
-        let result = property.load(self.connection.lock().connection())?;
-        Ok(result)
-    }
-
-    pub fn find_one_by_id(
-        &self,
-        property_id: &str,
-    ) -> Result<Option<PropertyRow>, RepositoryError> {
-        let result = property
-            .filter(id.eq(property_id))
-            .first(self.connection.lock().connection())
-            .optional()?;
-        Ok(result)
-    }
-
-    pub fn delete(&self, property_id: &str) -> Result<(), RepositoryError> {
-        diesel::delete(property)
-            .filter(id.eq(property_id))
-            .execute(self.connection.lock().connection())?;
-        Ok(())
-    }
-}
-
-impl Upsert for PropertyRow {
-    fn upsert_sync(&self, con: &StorageConnection) -> Result<(), RepositoryError> {
-        let _change_log_id = PropertyRowRepository::new(con).upsert_one(self)?;
-        Ok(())
-    }
-
-    fn upsert(&self, con: &StorageConnection) -> Result<Option<i64>, RepositoryError> {
-        let cursor_id = PropertyRowRepository::new(con).upsert_one(self)?;
-        Ok(Some(cursor_id))
-    }
-
-    // Test only
-    fn assert_upserted(&self, con: &StorageConnection) {
-        assert_eq!(
-            PropertyRowRepository::new(con).find_one_by_id(&self.id),
-            Ok(Some(self.clone()))
-        )
-    }
-}
diff --git a/server/repository/src/db_diesel/requisition_line/mod.rs b/server/repository/src/db_diesel/requisition_line/mod.rs
index fd0fca074..b5f2bbdef 100644
--- a/server/repository/src/db_diesel/requisition_line/mod.rs
+++ b/server/repository/src/db_diesel/requisition_line/mod.rs
@@ -15,7 +15,7 @@ pub struct RequisitionLineFilter {
     pub requisition_id: Option<EqualFilter<String>>,
     pub r#type: Option<EqualFilter<RequisitionType>>,
     pub item_id: Option<EqualFilter<String>>,
-    pub requested_quantity: Option<EqualFilter<f64>>,
+    pub requested_quantity: Option<EqualFilter<i32>>,
     pub status: Option<EqualFilter<RequisitionStatus>>,
 }
 
@@ -39,7 +39,7 @@ impl RequisitionLineFilter {
         self
     }
 
-    pub fn requested_quantity(mut self, filter: EqualFilter<f64>) -> Self {
+    pub fn requested_quantity(mut self, filter: EqualFilter<i32>) -> Self {
         self.requested_quantity = Some(filter);
         self
     }
diff --git a/server/repository/src/db_diesel/requisition_line/requisition_line_row.rs b/server/repository/src/db_diesel/requisition_line/requisition_line_row.rs
index 734addb55..966d7f98d 100644
--- a/server/repository/src/db_diesel/requisition_line/requisition_line_row.rs
+++ b/server/repository/src/db_diesel/requisition_line/requisition_line_row.rs
@@ -15,13 +15,13 @@ table! {
         requisition_id -> Text,
         item_link_id -> Text,
         item_name -> Text,
-        requested_quantity -> Double,
-        suggested_quantity -> Double,
-        supply_quantity -> Double,
-        available_stock_on_hand -> Double ,
-        average_monthly_consumption -> Double,
+        requested_quantity -> Integer,
+        suggested_quantity -> Integer,
+        supply_quantity -> Integer,
+        available_stock_on_hand -> Integer ,
+        average_monthly_consumption -> Integer,
         snapshot_datetime -> Nullable<Timestamp>,
-        approved_quantity -> Double,
+        approved_quantity -> Integer,
         approval_comment -> Nullable<Text>,
         comment -> Nullable<Text>,
     }
@@ -46,13 +46,13 @@ pub struct RequisitionLineRow {
     pub requisition_id: String,
     pub item_link_id: String,
     pub item_name: String,
-    pub requested_quantity: f64,
-    pub suggested_quantity: f64,
-    pub supply_quantity: f64,
-    pub available_stock_on_hand: f64,
-    pub average_monthly_consumption: f64,
+    pub requested_quantity: i32,
+    pub suggested_quantity: i32,
+    pub supply_quantity: i32,
+    pub available_stock_on_hand: i32,
+    pub average_monthly_consumption: i32,
     pub snapshot_datetime: Option<NaiveDateTime>,
-    pub approved_quantity: f64,
+    pub approved_quantity: i32,
     pub approval_comment: Option<String>,
     pub comment: Option<String>,
 }
diff --git a/server/repository/src/db_diesel/stock_line_row.rs b/server/repository/src/db_diesel/stock_line_row.rs
index c6efdb672..bab61354b 100644
--- a/server/repository/src/db_diesel/stock_line_row.rs
+++ b/server/repository/src/db_diesel/stock_line_row.rs
@@ -16,7 +16,7 @@ table! {
         store_id -> Text,
         location_id -> Nullable<Text>,
         batch -> Nullable<Text>,
-        pack_size -> Double,
+        pack_size -> Integer,
         cost_price_per_pack -> Double,
         sell_price_per_pack -> Double,
         available_number_of_packs -> Double,
@@ -46,7 +46,7 @@ pub struct StockLineRow {
     pub store_id: String,
     pub location_id: Option<String>,
     pub batch: Option<String>,
-    pub pack_size: f64,
+    pub pack_size: i32,
     pub cost_price_per_pack: f64,
     pub sell_price_per_pack: f64,
     pub available_number_of_packs: f64,
@@ -92,11 +92,10 @@ impl<'a> StockLineRowRepository<'a> {
         Ok(())
     }
 
-    pub fn find_one_by_id(&self, id: &str) -> Result<Option<StockLineRow>, RepositoryError> {
+    pub fn find_one_by_id(&self, stock_line_id: &str) -> Result<StockLineRow, RepositoryError> {
         let result = stock_line_dsl::stock_line
-            .filter(stock_line_dsl::id.eq(id))
-            .first(self.connection.lock().connection())
-            .optional()?;
+            .filter(stock_line_dsl::id.eq(stock_line_id))
+            .first(self.connection.lock().connection())?;
         Ok(result)
     }
 
@@ -107,6 +106,14 @@ impl<'a> StockLineRowRepository<'a> {
             .map_err(RepositoryError::from)
     }
 
+    pub fn find_one_by_id_option(&self, id: &str) -> Result<Option<StockLineRow>, RepositoryError> {
+        let result = stock_line_dsl::stock_line
+            .filter(stock_line_dsl::id.eq(id))
+            .first(self.connection.lock().connection())
+            .optional()?;
+        Ok(result)
+    }
+
     pub fn find_by_store_id(&self, store_id: &str) -> Result<Vec<StockLineRow>, RepositoryError> {
         stock_line_dsl::stock_line
             .filter(stock_line_dsl::store_id.eq(store_id))
@@ -125,7 +132,7 @@ impl Delete for StockLineRowDelete {
     // Test only
     fn assert_deleted(&self, con: &StorageConnection) {
         assert_eq!(
-            StockLineRowRepository::new(con).find_one_by_id(&self.0),
+            StockLineRowRepository::new(con).find_one_by_id_option(&self.0),
             Ok(None)
         )
     }
@@ -139,7 +146,7 @@ impl Upsert for StockLineRow {
     // Test only
     fn assert_upserted(&self, con: &StorageConnection) {
         assert_eq!(
-            StockLineRowRepository::new(con).find_one_by_id(&self.id),
+            StockLineRowRepository::new(con).find_one_by_id_option(&self.id),
             Ok(Some(self.clone()))
         )
     }
diff --git a/server/repository/src/db_diesel/stock_movement.rs b/server/repository/src/db_diesel/stock_movement.rs
index 5f0c91ec1..85b100d68 100644
--- a/server/repository/src/db_diesel/stock_movement.rs
+++ b/server/repository/src/db_diesel/stock_movement.rs
@@ -13,7 +13,7 @@ table! {
         id -> Text,
         item_id -> Text,
         store_id -> Text,
-        quantity -> Double,
+        quantity -> BigInt,
         datetime -> Timestamp,
     }
 }
@@ -23,7 +23,7 @@ pub struct StockMovementRow {
     pub id: String,
     pub item_id: String,
     pub store_id: String,
-    pub quantity: f64,
+    pub quantity: i64,
     pub datetime: NaiveDateTime,
 }
 
@@ -156,7 +156,7 @@ mod test {
                     r.invoice_id = invoice_id.clone();
                     r.item_link_id = mock_item_a().id;
                     r.r#type = InvoiceLineType::StockOut;
-                    r.pack_size = 1.0;
+                    r.pack_size = 1;
                 })];
             })
         }
@@ -181,7 +181,7 @@ mod test {
             .join(inline_edit(&stock_movement_point(), |mut u| {
                 // Should not be counted
                 u.invoices[0].picked_datetime = None;
-                u.invoice_lines[0].pack_size = 10.0;
+                u.invoice_lines[0].pack_size = 10;
                 u.invoice_lines[0].number_of_packs = 10.0;
                 u
             }))
@@ -192,7 +192,7 @@ mod test {
                         .and_hms_opt(0, 0, 0)
                         .unwrap(),
                 );
-                u.invoice_lines[0].pack_size = 10.0;
+                u.invoice_lines[0].pack_size = 10;
                 u.invoice_lines[0].number_of_packs = 10.0;
                 u
             }))
@@ -276,7 +276,7 @@ mod test {
                     id: "n/a".to_string(),
                     item_id: mock_item_a().id,
                     store_id: store().id,
-                    quantity: -20.0,
+                    quantity: -20,
                     datetime: NaiveDate::from_ymd_opt(2020, 11, 2)
                         .unwrap()
                         .and_hms_opt(0, 0, 0)
@@ -286,7 +286,7 @@ mod test {
                     id: "n/a".to_string(),
                     item_id: mock_item_a().id,
                     store_id: store().id,
-                    quantity: -(10.0 * 10.0),
+                    quantity: -(10 * 10),
                     datetime: NaiveDate::from_ymd_opt(2020, 11, 3)
                         .unwrap()
                         .and_hms_opt(0, 0, 0)
@@ -296,7 +296,7 @@ mod test {
                     id: "n/a".to_string(),
                     item_id: mock_item_a().id,
                     store_id: store().id,
-                    quantity: 15.0,
+                    quantity: 15,
                     datetime: NaiveDate::from_ymd_opt(2020, 12, 15)
                         .unwrap()
                         .and_hms_opt(0, 0, 0)
@@ -306,7 +306,7 @@ mod test {
                     id: "n/a".to_string(),
                     item_id: mock_item_a().id,
                     store_id: store().id,
-                    quantity: 60.0,
+                    quantity: 60,
                     datetime: NaiveDate::from_ymd_opt(2021, 1, 20)
                         .unwrap()
                         .and_hms_opt(0, 0, 0)
@@ -316,7 +316,7 @@ mod test {
                     id: "n/a".to_string(),
                     item_id: mock_item_a().id,
                     store_id: store().id,
-                    quantity: -50.0,
+                    quantity: -50,
                     datetime: NaiveDate::from_ymd_opt(2021, 2, 1)
                         .unwrap()
                         .and_hms_opt(0, 0, 0)
diff --git a/server/repository/src/db_diesel/stock_on_hand.rs b/server/repository/src/db_diesel/stock_on_hand.rs
index 0fa7e131b..dac68dd87 100644
--- a/server/repository/src/db_diesel/stock_on_hand.rs
+++ b/server/repository/src/db_diesel/stock_on_hand.rs
@@ -9,7 +9,7 @@ table! {
         item_id -> Text,
         item_name -> Text,
         store_id -> Text,
-        available_stock_on_hand -> Double,
+        available_stock_on_hand -> BigInt,
     }
 }
 
@@ -19,7 +19,7 @@ pub struct StockOnHandRow {
     pub item_id: String,
     pub item_name: String,
     pub store_id: String,
-    pub available_stock_on_hand: f64,
+    pub available_stock_on_hand: i64,
 }
 
 #[derive(Clone, Debug, PartialEq, Default)]
diff --git a/server/repository/src/db_diesel/stocktake_line_row.rs b/server/repository/src/db_diesel/stocktake_line_row.rs
index cb02064b2..960f1bb2c 100644
--- a/server/repository/src/db_diesel/stocktake_line_row.rs
+++ b/server/repository/src/db_diesel/stocktake_line_row.rs
@@ -26,7 +26,7 @@ table! {
         item_name -> Text,
         batch -> Nullable<Text>,
         expiry_date -> Nullable<Date>,
-        pack_size -> Nullable<Double>,
+        pack_size -> Nullable<Integer>,
         cost_price_per_pack -> Nullable<Double>,
         sell_price_per_pack -> Nullable<Double>,
         note -> Nullable<Text>,
@@ -60,7 +60,7 @@ pub struct StocktakeLineRow {
     pub item_name: String,
     pub batch: Option<String>,
     pub expiry_date: Option<NaiveDate>,
-    pub pack_size: Option<f64>,
+    pub pack_size: Option<i32>,
     pub cost_price_per_pack: Option<f64>,
     pub sell_price_per_pack: Option<f64>,
     pub note: Option<String>,
diff --git a/server/repository/src/db_diesel/store_preference_row.rs b/server/repository/src/db_diesel/store_preference_row.rs
index 11f43d7e1..7013b54aa 100644
--- a/server/repository/src/db_diesel/store_preference_row.rs
+++ b/server/repository/src/db_diesel/store_preference_row.rs
@@ -29,14 +29,13 @@ allow_tables_to_appear_in_same_query!(store_preference, store);
 allow_tables_to_appear_in_same_query!(store_preference, user_store_join);
 allow_tables_to_appear_in_same_query!(store_preference, user_account);
 
-#[derive(DbEnum, Debug, Clone, PartialEq, Eq, Serialize, Deserialize, Default)]
+#[derive(DbEnum, Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
 #[DbValueStyle = "SCREAMING_SNAKE_CASE"]
 pub enum StorePreferenceType {
-    #[default]
     StorePreferences,
 }
 
-#[derive(Clone, Queryable, Insertable, AsChangeset, Debug, PartialEq, Eq, Default)]
+#[derive(Clone, Queryable, Insertable, AsChangeset, Debug, PartialEq, Eq)]
 #[diesel(table_name = store_preference)]
 pub struct StorePreferenceRow {
     pub id: String, // store_id
@@ -50,6 +49,21 @@ pub struct StorePreferenceRow {
     pub issue_in_foreign_currency: bool,
 }
 
+impl Default for StorePreferenceRow {
+    fn default() -> Self {
+        Self {
+            id: Default::default(),
+            r#type: StorePreferenceType::StorePreferences,
+            pack_to_one: Default::default(),
+            response_requisition_requires_authorisation: Default::default(),
+            request_requisition_requires_authorisation: Default::default(),
+            om_program_module: Default::default(),
+            vaccine_module: Default::default(),
+            issue_in_foreign_currency: Default::default(),
+        }
+    }
+}
+
 pub struct StorePreferenceRowRepository<'a> {
     connection: &'a StorageConnection,
 }
diff --git a/server/repository/src/db_diesel/store_row.rs b/server/repository/src/db_diesel/store_row.rs
index 5461ea0ae..04ff71a07 100644
--- a/server/repository/src/db_diesel/store_row.rs
+++ b/server/repository/src/db_diesel/store_row.rs
@@ -21,11 +21,10 @@ table! {
     }
 }
 
-#[derive(DbEnum, Debug, Clone, PartialEq, Eq, Hash, Default)]
+#[derive(DbEnum, Debug, Clone, PartialEq, Eq, Hash)]
 #[cfg_attr(test, derive(strum::EnumIter))]
 #[DbValueStyle = "SCREAMING_SNAKE_CASE"]
 pub enum StoreMode {
-    #[default]
     Store,
     Dispensary,
 }
@@ -48,6 +47,12 @@ pub struct StoreRow {
     pub created_date: Option<NaiveDate>,
 }
 
+impl Default for StoreMode {
+    fn default() -> Self {
+        Self::Store
+    }
+}
+
 pub struct StoreRowRepository<'a> {
     connection: &'a StorageConnection,
 }
diff --git a/server/repository/src/db_diesel/sync_log_row.rs b/server/repository/src/db_diesel/sync_log_row.rs
index ddd4f0f73..7614ea421 100644
--- a/server/repository/src/db_diesel/sync_log_row.rs
+++ b/server/repository/src/db_diesel/sync_log_row.rs
@@ -21,7 +21,6 @@ pub enum SyncApiErrorCode {
     IntegrationError,
     ApiVersionIncompatible,
     CentralV6NotConfigured,
-    V6ApiVersionIncompatible,
 }
 
 table! {
diff --git a/server/repository/src/db_diesel/unit_row.rs b/server/repository/src/db_diesel/unit_row.rs
index 9da29b2fa..948ad9e20 100644
--- a/server/repository/src/db_diesel/unit_row.rs
+++ b/server/repository/src/db_diesel/unit_row.rs
@@ -57,7 +57,7 @@ impl<'a> UnitRowRepository<'a> {
         Ok(result)
     }
 
-    pub fn find_one_by_id(&self, unit_id: &str) -> Result<Option<UnitRow>, RepositoryError> {
+    pub fn find_one_by_id_option(&self, unit_id: &str) -> Result<Option<UnitRow>, RepositoryError> {
         let result = unit
             .filter(id.eq(unit_id))
             .first(self.connection.lock().connection())
@@ -90,7 +90,7 @@ impl Delete for UnitRowDelete {
     // Test only
     fn assert_deleted(&self, con: &StorageConnection) {
         assert!(matches!(
-            UnitRowRepository::new(con).find_one_by_id(&self.0),
+            UnitRowRepository::new(con).find_one_by_id_option(&self.0),
             Ok(Some(UnitRow {
                 is_active: false,
                 ..
@@ -107,7 +107,7 @@ impl Upsert for UnitRow {
     // Test only
     fn assert_upserted(&self, con: &StorageConnection) {
         assert_eq!(
-            UnitRowRepository::new(con).find_one_by_id(&self.id),
+            UnitRowRepository::new(con).find_one_by_id_option(&self.id),
             Ok(Some(self.clone()))
         )
     }
diff --git a/server/repository/src/db_diesel/user_permission_row.rs b/server/repository/src/db_diesel/user_permission_row.rs
index 7c69d285c..7b8607e99 100644
--- a/server/repository/src/db_diesel/user_permission_row.rs
+++ b/server/repository/src/db_diesel/user_permission_row.rs
@@ -79,9 +79,6 @@ pub enum PermissionType {
     AssetQuery,
     AssetMutate,
     AssetCatalogueItemMutate,
-    // demographics
-    DemographicQuery,
-    VaccineCourseMutate,
 }
 
 #[derive(Clone, Queryable, Insertable, Debug, PartialEq, Eq, AsChangeset)]
diff --git a/server/repository/src/db_diesel/vaccine_course/mod.rs b/server/repository/src/db_diesel/vaccine_course/mod.rs
deleted file mode 100644
index 642e75c46..000000000
--- a/server/repository/src/db_diesel/vaccine_course/mod.rs
+++ /dev/null
@@ -1,6 +0,0 @@
-pub mod vaccine_course;
-pub mod vaccine_course_item;
-pub mod vaccine_course_item_row;
-pub mod vaccine_course_row;
-pub mod vaccine_course_schedule;
-pub mod vaccine_course_schedule_row;
diff --git a/server/repository/src/db_diesel/vaccine_course/vaccine_course.rs b/server/repository/src/db_diesel/vaccine_course/vaccine_course.rs
deleted file mode 100644
index 1632fb913..000000000
--- a/server/repository/src/db_diesel/vaccine_course/vaccine_course.rs
+++ /dev/null
@@ -1,134 +0,0 @@
-use super::vaccine_course_row::{
-    vaccine_course::{self, dsl as vaccine_course_dsl},
-    VaccineCourseRow,
-};
-
-use diesel::{dsl::IntoBoxed, prelude::*};
-
-use crate::{
-    diesel_macros::{apply_equal_filter, apply_sort_no_case, apply_string_filter},
-    repository_error::RepositoryError,
-    DBType, EqualFilter, Pagination, Sort, StorageConnection, StringFilter,
-};
-
-pub enum VaccineCourseSortField {
-    Name,
-}
-
-pub type VaccineCourseSort = Sort<VaccineCourseSortField>;
-
-#[derive(Clone, Default)]
-pub struct VaccineCourseFilter {
-    pub id: Option<EqualFilter<String>>,
-    pub name: Option<StringFilter>,
-    pub program_id: Option<EqualFilter<String>>,
-}
-
-impl VaccineCourseFilter {
-    pub fn new() -> VaccineCourseFilter {
-        Self::default()
-    }
-
-    pub fn id(mut self, filter: EqualFilter<String>) -> Self {
-        self.id = Some(filter);
-        self
-    }
-
-    pub fn name(mut self, filter: StringFilter) -> Self {
-        self.name = Some(filter);
-        self
-    }
-
-    pub fn program_id(mut self, filter: EqualFilter<String>) -> Self {
-        self.program_id = Some(filter);
-        self
-    }
-}
-
-pub struct VaccineCourseRepository<'a> {
-    connection: &'a StorageConnection,
-}
-
-impl<'a> VaccineCourseRepository<'a> {
-    pub fn new(connection: &'a StorageConnection) -> Self {
-        VaccineCourseRepository { connection }
-    }
-
-    pub fn count(&self, filter: Option<VaccineCourseFilter>) -> Result<i64, RepositoryError> {
-        let query = create_filtered_query(filter);
-
-        Ok(query
-            .count()
-            .get_result(self.connection.lock().connection())?)
-    }
-
-    pub fn query_one(
-        &self,
-        filter: VaccineCourseFilter,
-    ) -> Result<Option<VaccineCourseRow>, RepositoryError> {
-        Ok(self.query_by_filter(filter)?.pop())
-    }
-
-    pub fn query_by_filter(
-        &self,
-        filter: VaccineCourseFilter,
-    ) -> Result<Vec<VaccineCourseRow>, RepositoryError> {
-        self.query(Pagination::all(), Some(filter), None)
-    }
-
-    pub fn query(
-        &self,
-        pagination: Pagination,
-        filter: Option<VaccineCourseFilter>,
-        sort: Option<VaccineCourseSort>,
-    ) -> Result<Vec<VaccineCourseRow>, RepositoryError> {
-        let mut query = create_filtered_query(filter);
-
-        if let Some(sort) = sort {
-            match sort.key {
-                VaccineCourseSortField::Name => {
-                    apply_sort_no_case!(query, sort, vaccine_course_dsl::name);
-                }
-            }
-        } else {
-            query = query.order(vaccine_course_dsl::id.asc())
-        }
-
-        let final_query = query
-            .offset(pagination.offset as i64)
-            .limit(pagination.limit as i64);
-
-        // Debug diesel query
-        // println!(
-        //    "{}",
-        //     diesel::debug_query::<DBType, _>(&final_query).to_string()
-        // );
-
-        let result = final_query.load::<VaccineCourseRow>(self.connection.lock().connection())?;
-
-        Ok(result.into_iter().map(to_domain).collect())
-    }
-}
-
-fn to_domain(vaccine_course_row: VaccineCourseRow) -> VaccineCourseRow {
-    vaccine_course_row
-}
-
-type BoxedVaccineCourseQuery = IntoBoxed<'static, vaccine_course::table, DBType>;
-
-fn create_filtered_query(filter: Option<VaccineCourseFilter>) -> BoxedVaccineCourseQuery {
-    let mut query = vaccine_course_dsl::vaccine_course.into_boxed();
-
-    if let Some(f) = filter {
-        let VaccineCourseFilter {
-            id,
-            name,
-            program_id,
-        } = f;
-
-        apply_equal_filter!(query, id, vaccine_course_dsl::id);
-        apply_string_filter!(query, name, vaccine_course_dsl::name);
-        apply_equal_filter!(query, program_id, vaccine_course_dsl::program_id);
-    }
-    query
-}
diff --git a/server/repository/src/db_diesel/vaccine_course/vaccine_course_item.rs b/server/repository/src/db_diesel/vaccine_course/vaccine_course_item.rs
deleted file mode 100644
index d8be951e4..000000000
--- a/server/repository/src/db_diesel/vaccine_course/vaccine_course_item.rs
+++ /dev/null
@@ -1,97 +0,0 @@
-use super::vaccine_course_item_row::{
-    vaccine_course_item::{self, dsl as vaccine_course_item_dsl},
-    VaccineCourseItemRow,
-};
-
-use diesel::{dsl::IntoBoxed, prelude::*};
-
-use crate::{
-    diesel_macros::apply_equal_filter, repository_error::RepositoryError, DBType, EqualFilter,
-    StorageConnection,
-};
-
-#[derive(Clone, Default)]
-pub struct VaccineCourseItemFilter {
-    pub id: Option<EqualFilter<String>>,
-    pub vaccine_course_id: Option<EqualFilter<String>>,
-}
-
-impl VaccineCourseItemFilter {
-    pub fn new() -> VaccineCourseItemFilter {
-        Self::default()
-    }
-
-    pub fn id(mut self, filter: EqualFilter<String>) -> Self {
-        self.id = Some(filter);
-        self
-    }
-
-    pub fn vaccine_course_id(mut self, filter: EqualFilter<String>) -> Self {
-        self.vaccine_course_id = Some(filter);
-        self
-    }
-}
-
-pub struct VaccineCourseItemRepository<'a> {
-    connection: &'a StorageConnection,
-}
-
-impl<'a> VaccineCourseItemRepository<'a> {
-    pub fn new(connection: &'a StorageConnection) -> Self {
-        VaccineCourseItemRepository { connection }
-    }
-
-    pub fn count(&self, filter: Option<VaccineCourseItemFilter>) -> Result<i64, RepositoryError> {
-        let query = create_filtered_query(filter);
-
-        Ok(query
-            .count()
-            .get_result(self.connection.lock().connection())?)
-    }
-
-    pub fn query_one(
-        &self,
-        filter: VaccineCourseItemFilter,
-    ) -> Result<Option<VaccineCourseItemRow>, RepositoryError> {
-        Ok(self.query_by_filter(filter)?.pop())
-    }
-
-    pub fn query_by_filter(
-        &self,
-        filter: VaccineCourseItemFilter,
-    ) -> Result<Vec<VaccineCourseItemRow>, RepositoryError> {
-        self.query(Some(filter))
-    }
-
-    pub fn query(
-        &self,
-        filter: Option<VaccineCourseItemFilter>,
-    ) -> Result<Vec<VaccineCourseItemRow>, RepositoryError> {
-        let query = create_filtered_query(filter);
-
-        let result = query.load::<VaccineCourseItemRow>(self.connection.lock().connection())?;
-
-        Ok(result.into_iter().collect())
-    }
-}
-
-type BoxedVaccineCourseItemQuery = IntoBoxed<'static, vaccine_course_item::table, DBType>;
-
-fn create_filtered_query(filter: Option<VaccineCourseItemFilter>) -> BoxedVaccineCourseItemQuery {
-    let mut query = vaccine_course_item_dsl::vaccine_course_item.into_boxed();
-
-    if let Some(f) = filter {
-        let VaccineCourseItemFilter {
-            id,
-            vaccine_course_id,
-        } = f;
-
-        apply_equal_filter!(query, id, vaccine_course_item_dsl::id);
-        apply_equal_filter!(
-            query,
-            vaccine_course_id,
-            vaccine_course_item_dsl::vaccine_course_id
-        );
-    }
-    query
-}
diff --git a/server/repository/src/db_diesel/vaccine_course/vaccine_course_item_row.rs b/server/repository/src/db_diesel/vaccine_course/vaccine_course_item_row.rs
deleted file mode 100644
index 518ef57cb..000000000
--- a/server/repository/src/db_diesel/vaccine_course/vaccine_course_item_row.rs
+++ /dev/null
@@ -1,81 +0,0 @@
-use super::vaccine_course_item_row::vaccine_course_item::dsl::*;
-
-use crate::RepositoryError;
-use crate::StorageConnection;
-
-use diesel::prelude::*;
-
-table! {
-    vaccine_course_item (id) {
-        id -> Text,
-        vaccine_course_id -> Text,
-        item_link_id -> Text,
-
-    }
-}
-
-#[derive(Clone, Insertable, Queryable, Debug, PartialEq, AsChangeset, Default)]
-#[diesel(table_name = vaccine_course_item)]
-pub struct VaccineCourseItemRow {
-    pub id: String,
-    pub vaccine_course_id: String,
-    pub item_link_id: String,
-}
-
-pub struct VaccineCourseItemRowRepository<'a> {
-    connection: &'a StorageConnection,
-}
-
-impl<'a> VaccineCourseItemRowRepository<'a> {
-    pub fn new(connection: &'a StorageConnection) -> Self {
-        VaccineCourseItemRowRepository { connection }
-    }
-
-    #[cfg(feature = "postgres")]
-    pub fn upsert_one(
-        &self,
-        vaccine_course_item_row: &VaccineCourseItemRow,
-    ) -> Result<(), RepositoryError> {
-        diesel::insert_into(vaccine_course_item)
-            .values(vaccine_course_item_row)
-            .on_conflict(id)
-            .do_update()
-            .set(vaccine_course_item_row)
-            .execute(self.connection.lock().connection())?;
-        Ok(())
-    }
-
-    #[cfg(not(feature = "postgres"))]
-    pub fn upsert_one(
-        &self,
-        vaccine_course_item_row: &VaccineCourseItemRow,
-    ) -> Result<(), RepositoryError> {
-        diesel::replace_into(vaccine_course_item)
-            .values(vaccine_course_item_row)
-            .execute(self.connection.lock().connection())?;
-        Ok(())
-    }
-
-    pub fn find_all(&mut self) -> Result<Vec<VaccineCourseItemRow>, RepositoryError> {
-        let result = vaccine_course_item.load(self.connection.lock().connection());
-        Ok(result?)
-    }
-
-    pub fn find_one_by_id(
-        &self,
-        vaccine_course_item_id: &str,
-    ) -> Result<Option<VaccineCourseItemRow>, RepositoryError> {
-        let result = vaccine_course_item
-            .filter(id.eq(vaccine_course_item_id))
-            .first(self.connection.lock().connection())
-            .optional()?;
-        Ok(result)
-    }
-
-    pub fn delete(&self, vaccine_course_item_id: &str) -> Result<(), RepositoryError> {
-        diesel::delete(vaccine_course_item)
-            .filter(id.eq(vaccine_course_item_id))
-            .execute(self.connection.lock().connection())?;
-        Ok(())
-    }
-}
diff --git a/server/repository/src/db_diesel/vaccine_course/vaccine_course_row.rs b/server/repository/src/db_diesel/vaccine_course/vaccine_course_row.rs
deleted file mode 100644
index 602d9d37f..000000000
--- a/server/repository/src/db_diesel/vaccine_course/vaccine_course_row.rs
+++ /dev/null
@@ -1,89 +0,0 @@
-use super::vaccine_course_row::vaccine_course::dsl::*;
-
-use serde::Deserialize;
-use serde::Serialize;
-
-use crate::RepositoryError;
-use crate::StorageConnection;
-
-use diesel::prelude::*;
-
-table! {
-    vaccine_course (id) {
-        id -> Text,
-        name -> Text,
-        program_id -> Text,
-        demographic_indicator_id -> Text,
-        coverage_rate -> Double,
-        is_active -> Bool,
-        wastage_rate -> Double,
-        doses -> Integer,
-    }
-}
-
-#[derive(
-    Clone, Insertable, Queryable, Debug, PartialEq, AsChangeset, Serialize, Deserialize, Default,
-)]
-#[diesel(table_name = vaccine_course)]
-pub struct VaccineCourseRow {
-    pub id: String,
-    pub name: String,
-    pub program_id: String,
-    pub demographic_indicator_id: String,
-    pub coverage_rate: f64,
-    pub is_active: bool,
-    pub wastage_rate: f64,
-    pub doses: i32,
-}
-
-pub struct VaccineCourseRowRepository<'a> {
-    connection: &'a StorageConnection,
-}
-
-impl<'a> VaccineCourseRowRepository<'a> {
-    pub fn new(connection: &'a StorageConnection) -> Self {
-        VaccineCourseRowRepository { connection }
-    }
-
-    #[cfg(feature = "postgres")]
-    pub fn upsert_one(&self, vaccine_course_row: &VaccineCourseRow) -> Result<(), RepositoryError> {
-        diesel::insert_into(vaccine_course)
-            .values(vaccine_course_row)
-            .on_conflict(id)
-            .do_update()
-            .set(vaccine_course_row)
-            .execute(self.connection.lock().connection())?;
-        Ok(())
-    }
-
-    #[cfg(not(feature = "postgres"))]
-    pub fn upsert_one(&self, vaccine_course_row: &VaccineCourseRow) -> Result<(), RepositoryError> {
-        diesel::replace_into(vaccine_course)
-            .values(vaccine_course_row)
-            .execute(self.connection.lock().connection())?;
-        Ok(())
-    }
-
-    pub fn find_all(&mut self) -> Result<Vec<VaccineCourseRow>, RepositoryError> {
-        let result = vaccine_course.load(self.connection.lock().connection());
-        Ok(result?)
-    }
-
-    pub fn find_one_by_id(
-        &self,
-        vaccine_course_id: &str,
-    ) -> Result<Option<VaccineCourseRow>, RepositoryError> {
-        let result = vaccine_course
-            .filter(id.eq(vaccine_course_id))
-            .first(self.connection.lock().connection())
-            .optional()?;
-        Ok(result)
-    }
-
-    pub fn delete(&self, vaccine_course_id: &str) -> Result<(), RepositoryError> {
-        diesel::delete(vaccine_course)
-            .filter(id.eq(vaccine_course_id))
-            .execute(self.connection.lock().connection())?;
-        Ok(())
-    }
-}
diff --git a/server/repository/src/db_diesel/vaccine_course/vaccine_course_schedule.rs b/server/repository/src/db_diesel/vaccine_course/vaccine_course_schedule.rs
deleted file mode 100644
index 4e4922880..000000000
--- a/server/repository/src/db_diesel/vaccine_course/vaccine_course_schedule.rs
+++ /dev/null
@@ -1,102 +0,0 @@
-use super::vaccine_course_schedule_row::{
-    vaccine_course_schedule::{self, dsl as vaccine_course_schedule_dsl},
-    VaccineCourseScheduleRow,
-};
-
-use diesel::{dsl::IntoBoxed, prelude::*};
-
-use crate::{
-    diesel_macros::apply_equal_filter, repository_error::RepositoryError, DBType, EqualFilter,
-    StorageConnection,
-};
-
-#[derive(Clone, Default)]
-pub struct VaccineCourseScheduleFilter {
-    pub id: Option<EqualFilter<String>>,
-    pub vaccine_course_id: Option<EqualFilter<String>>,
-}
-
-impl VaccineCourseScheduleFilter {
-    pub fn new() -> VaccineCourseScheduleFilter {
-        Self::default()
-    }
-
-    pub fn id(mut self, filter: EqualFilter<String>) -> Self {
-        self.id = Some(filter);
-        self
-    }
-
-    pub fn vaccine_course_id(mut self, filter: EqualFilter<String>) -> Self {
-        self.vaccine_course_id = Some(filter);
-        self
-    }
-}
-
-pub struct VaccineCourseScheduleRepository<'a> {
-    connection: &'a StorageConnection,
-}
-
-impl<'a> VaccineCourseScheduleRepository<'a> {
-    pub fn new(connection: &'a StorageConnection) -> Self {
-        VaccineCourseScheduleRepository { connection }
-    }
-
-    pub fn count(
-        &self,
-        filter: Option<VaccineCourseScheduleFilter>,
-    ) -> Result<i64, RepositoryError> {
-        let query = create_filtered_query(filter);
-
-        Ok(query
-            .count()
-            .get_result(self.connection.lock().connection())?)
-    }
-
-    pub fn query_one(
-        &self,
-        filter: VaccineCourseScheduleFilter,
-    ) -> Result<Option<VaccineCourseScheduleRow>, RepositoryError> {
-        Ok(self.query_by_filter(filter)?.pop())
-    }
-
-    pub fn query_by_filter(
-        &self,
-        filter: VaccineCourseScheduleFilter,
-    ) -> Result<Vec<VaccineCourseScheduleRow>, RepositoryError> {
-        self.query(Some(filter))
-    }
-
-    pub fn query(
-        &self,
-        filter: Option<VaccineCourseScheduleFilter>,
-    ) -> Result<Vec<VaccineCourseScheduleRow>, RepositoryError> {
-        let query = create_filtered_query(filter);
-
-        let result = query.load::<VaccineCourseScheduleRow>(self.connection.lock().connection())?;
-
-        Ok(result.into_iter().collect())
-    }
-}
-
-type BoxedVaccineCourseScheduleQuery = IntoBoxed<'static, vaccine_course_schedule::table, DBType>;
-
-fn create_filtered_query(
-    filter: Option<VaccineCourseScheduleFilter>,
-) -> BoxedVaccineCourseScheduleQuery {
-    let mut query = vaccine_course_schedule_dsl::vaccine_course_schedule.into_boxed();
-
-    if let Some(f) = filter {
-        let VaccineCourseScheduleFilter {
-            id,
-            vaccine_course_id,
-        } = f;
-
-        apply_equal_filter!(query, id, vaccine_course_schedule_dsl::id);
-        apply_equal_filter!(
-            query,
-            vaccine_course_id,
-            vaccine_course_schedule_dsl::vaccine_course_id
-        );
-    }
-    query
-}
diff --git a/server/repository/src/db_diesel/vaccine_course/vaccine_course_schedule_row.rs b/server/repository/src/db_diesel/vaccine_course/vaccine_course_schedule_row.rs
deleted file mode 100644
index 13a3e7a28..000000000
--- a/server/repository/src/db_diesel/vaccine_course/vaccine_course_schedule_row.rs
+++ /dev/null
@@ -1,83 +0,0 @@
-use super::vaccine_course_schedule_row::vaccine_course_schedule::dsl::*;
-
-use crate::RepositoryError;
-use crate::StorageConnection;
-
-use diesel::prelude::*;
-
-table! {
-    vaccine_course_schedule (id) {
-        id -> Text,
-        vaccine_course_id -> Text,
-        dose_number -> Integer,
-        label -> Text,
-
-    }
-}
-
-#[derive(Clone, Insertable, Queryable, Debug, PartialEq, AsChangeset, Default)]
-#[diesel(table_name = vaccine_course_schedule)]
-pub struct VaccineCourseScheduleRow {
-    pub id: String,
-    pub vaccine_course_id: String,
-    pub dose_number: i32,
-    pub label: String,
-}
-
-pub struct VaccineCourseScheduleRowRepository<'a> {
-    connection: &'a StorageConnection,
-}
-
-impl<'a> VaccineCourseScheduleRowRepository<'a> {
-    pub fn new(connection: &'a StorageConnection) -> Self {
-        VaccineCourseScheduleRowRepository { connection }
-    }
-
-    #[cfg(feature = "postgres")]
-    pub fn upsert_one(
-        &self,
-        vaccine_course_schedule_row: &VaccineCourseScheduleRow,
-    ) -> Result<(), RepositoryError> {
-        diesel::insert_into(vaccine_course_schedule)
-            .values(vaccine_course_schedule_row)
-            .on_conflict(id)
-            .do_update()
-            .set(vaccine_course_schedule_row)
-            .execute(self.connection.lock().connection())?;
-        Ok(())
-    }
-
-    #[cfg(not(feature = "postgres"))]
-    pub fn upsert_one(
-        &self,
-        vaccine_course_schedule_row: &VaccineCourseScheduleRow,
-    ) -> Result<(), RepositoryError> {
-        diesel::replace_into(vaccine_course_schedule)
-            .values(vaccine_course_schedule_row)
-            .execute(self.connection.lock().connection())?;
-        Ok(())
-    }
-
-    pub fn find_all(&mut self) -> Result<Vec<VaccineCourseScheduleRow>, RepositoryError> {
-        let result = vaccine_course_schedule.load(self.connection.lock().connection());
-        Ok(result?)
-    }
-
-    pub fn find_one_by_id(
-        &self,
-        vaccine_course_schedule_id: &str,
-    ) -> Result<Option<VaccineCourseScheduleRow>, RepositoryError> {
-        let result = vaccine_course_schedule
-            .filter(id.eq(vaccine_course_schedule_id))
-            .first(self.connection.lock().connection())
-            .optional()?;
-        Ok(result)
-    }
-
-    pub fn delete(&self, vaccine_course_schedule_id: &str) -> Result<(), RepositoryError> {
-        diesel::delete(vaccine_course_schedule)
-            .filter(id.eq(vaccine_course_schedule_id))
-            .execute(self.connection.lock().connection())?;
-        Ok(())
-    }
-}
diff --git a/server/repository/src/migrations/constants.rs b/server/repository/src/migrations/constants.rs
deleted file mode 100644
index ca04b8108..000000000
--- a/server/repository/src/migrations/constants.rs
+++ /dev/null
@@ -1,4 +0,0 @@
-pub const COLD_CHAIN_EQUIPMENT_UUID: &str = "fad280b6-8384-41af-84cf-c7b6b4526ef0";
-pub const INSULATED_CONTAINERS_UUID: &str = "b7eea921-5a14-44cc-b5e0-ea59f2e9cb8d";
-pub const REFRIGERATORS_AND_FREEZERS_UUID: &str = "02cbea92-d5bf-4832-863b-c04e093a7760";
-pub const COLD_ROOMS_AND_FREEZER_ROOMS_UUID: &str = "7db32eb6-5929-4dd1-a5e9-01e36baa73ad";
diff --git a/server/repository/src/migrations/mod.rs b/server/repository/src/migrations/mod.rs
index a909b9f63..0d1a9de06 100644
--- a/server/repository/src/migrations/mod.rs
+++ b/server/repository/src/migrations/mod.rs
@@ -1,4 +1,3 @@
-pub mod constants;
 mod types;
 mod v1_00_04;
 mod v1_01_01;
diff --git a/server/repository/src/migrations/types.rs b/server/repository/src/migrations/types.rs
index d2361a80d..d81d551ce 100644
--- a/server/repository/src/migrations/types.rs
+++ b/server/repository/src/migrations/types.rs
@@ -14,7 +14,3 @@ pub(crate) const DOUBLE: &str = "REAL";
 pub(crate) const DEFAULT_TIMESTAMP: &str = "'epoch'";
 #[cfg(not(feature = "postgres"))]
 pub(crate) const DEFAULT_TIMESTAMP: &str = "0";
-#[cfg(feature = "postgres")]
-pub(crate) const JSON: &str = "TEXT"; // Should be JSONB Ideally, but difficult to use with diesel
-#[cfg(not(feature = "postgres"))]
-pub(crate) const JSON: &str = "TEXT";
diff --git a/server/repository/src/migrations/v2_00_00/assets/asset_log.rs b/server/repository/src/migrations/v2_00_00/assets/asset_log.rs
index bd6af97b2..5a76bd493 100644
--- a/server/repository/src/migrations/v2_00_00/assets/asset_log.rs
+++ b/server/repository/src/migrations/v2_00_00/assets/asset_log.rs
@@ -28,7 +28,7 @@ pub(crate) fn migrate(connection: &StorageConnection) -> anyhow::Result<()> {
         CREATE TABLE asset_log (
             id TEXT NOT NULL PRIMARY KEY,
             asset_id TEXT NOT NULL REFERENCES asset(id),
-            user_id TEXT NOT NULL,
+            user_id TEXT NOT NULL REFERENCES user_account(id),
             status {ASSET_LOG_STATUS_ENUM_TYPE},
             reason_id TEXT REFERENCES asset_log_reason(id),
             comment TEXT,
diff --git a/server/repository/src/migrations/v2_00_00/mod.rs b/server/repository/src/migrations/v2_00_00/mod.rs
index 4a9eb0f30..e2de8bf36 100644
--- a/server/repository/src/migrations/v2_00_00/mod.rs
+++ b/server/repository/src/migrations/v2_00_00/mod.rs
@@ -1,4 +1,4 @@
-use super::{helpers::run_without_change_log_updates, version::Version, Migration};
+use super::{version::Version, Migration};
 
 use crate::StorageConnection;
 
@@ -43,15 +43,11 @@ impl Migration for V2_00_00 {
         user_change_last_synced_to_optional::migrate(connection)?;
         inventory_adjustment_logtype::migrate(connection)?;
         report_views::migrate(connection)?;
-        run_without_change_log_updates(connection, |_| {
-            requisition_line_add_item_name::migrate(connection)
-        })?;
+        requisition_line_add_item_name::migrate(connection)?;
         stock_on_hand_add_item_name::migrate(connection)?;
         currency_add_is_active::migrate(connection)?;
         invoice_rename_tax::migrate(connection)?;
-        run_without_change_log_updates(connection, |_| {
-            stocktake_line_add_item_name::migrate(connection)
-        })?;
+        stocktake_line_add_item_name::migrate(connection)?;
         name_created_datetime::migrate(connection)?;
         Ok(())
     }
@@ -60,155 +56,18 @@ impl Migration for V2_00_00 {
 #[cfg(test)]
 #[actix_rt::test]
 async fn migration_2_00_00() {
-    use crate::migrations::v1_07_00::V1_07_00;
     use crate::migrations::*;
     use crate::test_db::*;
-    use crate::ChangelogRepository;
 
-    let previous_version = V1_07_00.version();
     let version = V2_00_00.version();
 
     // This test allows checking sql syntax
     let SetupResult { connection, .. } = setup_test(SetupOption {
         db_name: &format!("migration_{version}"),
-        version: Some(previous_version.clone()),
+        version: Some(version.clone()),
         ..Default::default()
     })
     .await;
 
-    insert_merge_test_data(&connection);
-    let changelog_repo = ChangelogRepository::new(&connection);
-    let cursor_before = changelog_repo.latest_cursor().unwrap();
-
-    migrate(&connection, Some(version.clone())).unwrap();
     assert_eq!(get_database_version(&connection), version);
-
-    let cursor_after = changelog_repo.latest_cursor().unwrap();
-
-    assert_eq!(cursor_before, cursor_after);
-}
-
-#[cfg(test)]
-fn insert_merge_test_data(connection: &StorageConnection) {
-    use super::sql;
-
-    sql!(
-        connection,
-        r#"
-        INSERT INTO item 
-            (id, name, code, default_pack_size, type, legacy_record)
-        VALUES 
-            ('item1', 'item1name', 'item1code', 1, 'STOCK', ''),
-            ('item2', 'item2name', 'item2code', 2, 'STOCK', '');
-        "#
-    )
-    .unwrap();
-
-    sql!(
-        connection,
-        r#"
-        INSERT INTO item_link 
-            (id, item_id)
-        VALUES 
-            ('item1', 'item1'),
-            ('item2', 'item2');
-        "#
-    )
-    .unwrap();
-    sql!(
-        connection,
-        r#"
-        INSERT INTO
-            name (id, name, code, is_customer, is_supplier, type, is_sync_update)
-        VALUES
-            ('name1', 'name1name', 'name1code', TRUE, FALSE, 'STORE', TRUE);
-        "#
-    )
-    .unwrap();
-
-    sql!(
-        connection,
-        r#"
-        INSERT INTO
-            name_link (id, name_id)
-        VALUES
-            ('name1', 'name1');
-    "#
-    )
-    .unwrap();
-
-    sql!(
-        connection,
-        r#"
-        INSERT INTO
-            store (id, name_id, code, site_id, store_mode, disabled)
-        VALUES
-            ('store1', 'name1', 'store1code', 1, 'STORE', FALSE);
-        "#
-    )
-    .unwrap();
-
-    sql!(
-        connection,
-        r#"
-        INSERT INTO
-            sensor (id, serial, name, store_id)
-        VALUES
-            ('sensor1', 's1', 'sen1', 'store1');
-      
-        INSERT INTO
-            temperature_log (id, temperature, sensor_id, store_id, datetime)
-        VALUES
-            ('temperature_log1', 1.0, 'sensor1', 'store1', '2023-01-20 12:23:34'),
-            ('temperature_log2', 1.0, 'sensor1', 'store1', '2023-01-20 12:23:34'),
-            ('temperature_log3', 1.0, 'sensor1', 'store1', '2023-01-20 12:23:34'),
-            ('temperature_log4', 1.0, 'sensor1', 'store1', '2023-01-20 12:23:34');
-        "#
-    )
-    .unwrap();
-
-    sql!(
-        connection,
-        r#"
-        INSERT INTO
-            requisition (
-                id,
-                requisition_number,
-                store_id,
-                created_datetime,
-                max_months_of_stock,
-                min_months_of_stock,
-                status,
-                type,
-                name_link_id
-            )
-        VALUES
-            ('requisition1', 1, 'store1', '2021-01-02 00:00:00', 2, 1, 'DRAFT', 'REQUEST', 'name1');
-        "#
-    )
-    .unwrap();
-
-    sql!(
-        connection,
-        r#"
-        INSERT INTO
-        requisition_line (
-            id,
-            requisition_id,
-            item_link_id,
-            requested_quantity,
-            suggested_quantity,
-            supply_quantity,
-            available_stock_on_hand,
-            average_monthly_consumption,
-            approved_quantity
-        )
-        VALUES
-            ('requisition_line1', 'requisition1', 'item1', 1, 2, 2, 5, 3, 2),
-            ('requisition_line2', 'requisition1', 'item1', 1, 2, 2, 5, 3, 2),
-            ('requisition_line3', 'requisition1', 'item1', 1, 2, 2, 5, 3, 2),
-            ('requisition_line4', 'requisition1', 'item2', 1, 2, 2, 5, 3, 2);
-        "#
-    )
-    .unwrap();
 }
diff --git a/server/repository/src/migrations/v2_01_00/activity_log.rs b/server/repository/src/migrations/v2_01_00/activity_log.rs
deleted file mode 100644
index bb22fa2f5..000000000
--- a/server/repository/src/migrations/v2_01_00/activity_log.rs
+++ /dev/null
@@ -1,16 +0,0 @@
-use crate::{migrations::sql, StorageConnection};
-
-pub(crate) fn migrate(connection: &StorageConnection) -> anyhow::Result<()> {
-    if cfg!(feature = "postgres") {
-        sql!(
-            connection,
-            r#"
-                ALTER TYPE activity_log_type ADD VALUE 'ASSET_PROPERTY_CREATED';
-                ALTER TYPE activity_log_type ADD VALUE 'VACCINE_COURSE_CREATED';
-                ALTER TYPE activity_log_type ADD VALUE 'PROGRAM_CREATED';
-            "#
-        )?;
-    }
-
-    Ok(())
-}
diff --git a/server/repository/src/migrations/v2_01_00/assets/asset.rs b/server/repository/src/migrations/v2_01_00/assets/asset.rs
deleted file mode 100644
index 712eec6b6..000000000
--- a/server/repository/src/migrations/v2_01_00/assets/asset.rs
+++ /dev/null
@@ -1,19 +0,0 @@
-use crate::{
-    migrations::{sql, DATE, JSON},
-    StorageConnection,
-};
-
-pub(crate) fn migrate(connection: &StorageConnection) -> anyhow::Result<()> {
-    sql!(
-        connection,
-        r#"
-             ALTER TABLE asset ADD COLUMN properties {JSON};
-             ALTER TABLE asset ADD COLUMN donor_name_id TEXT REFERENCES name_link(id);
-             ALTER TABLE asset ADD COLUMN warranty_start {DATE};
-             ALTER TABLE asset ADD COLUMN warranty_end {DATE};
-             ALTER TABLE asset ADD COLUMN needs_replacement BOOLEAN;
-            "#
-    )?;
-
-    Ok(())
-}
diff --git a/server/repository/src/migrations/v2_01_00/assets/asset_catalogue.rs b/server/repository/src/migrations/v2_01_00/assets/asset_catalogue.rs
deleted file mode 100644
index 7b2174df9..000000000
--- a/server/repository/src/migrations/v2_01_00/assets/asset_catalogue.rs
+++ /dev/null
@@ -1,23 +0,0 @@
-use crate::{
-    migrations::{sql, JSON},
-    StorageConnection,
-};
-
-pub(crate) fn migrate(connection: &StorageConnection) -> anyhow::Result<()> {
-    sql!(
-        connection,
-        r#"
-            ALTER TABLE asset_catalogue_item ADD COLUMN properties {JSON};
-        "#
-    )?;
-
-    sql!(
-        connection,
-        r#"
-            DROP TABLE asset_catalogue_item_property;
-            DROP TABLE asset_catalogue_property;
-        "#
-    )?;
-
-    Ok(())
-}
diff --git a/server/repository/src/migrations/v2_01_00/assets/asset_catalogue_data.rs b/server/repository/src/migrations/v2_01_00/assets/asset_catalogue_data.rs
deleted file mode 100644
index 148f1aa0e..000000000
--- a/server/repository/src/migrations/v2_01_00/assets/asset_catalogue_data.rs
+++ /dev/null
@@ -1,44 +0,0 @@
-use crate::migrations::constants::{COLD_CHAIN_EQUIPMENT_UUID, COLD_ROOMS_AND_FREEZER_ROOMS_UUID};
-use crate::{migrations::sql, StorageConnection};
-
-pub(crate) fn migrate(connection: &StorageConnection) -> anyhow::Result<()> {
-    // Asset Category
-    sql!(
-        connection,
-        r#"
-INSERT INTO asset_category (id, name, asset_class_id) VALUES ('{COLD_ROOMS_AND_FREEZER_ROOMS_UUID}', 'Cold rooms and freezer rooms', '{COLD_CHAIN_EQUIPMENT_UUID}');
-        "#,
-    )?;
-    // Asset Types
-    sql!(
-        connection,
-        r#"
-INSERT INTO asset_catalogue_type (id, name, asset_category_id) VALUES ('9a4ad0dd-138a-41b2-81df-08772635085e', 'Cold room', '7db32eb6-5929-4dd1-a5e9-01e36baa73ad');
-INSERT INTO asset_catalogue_type (id, name, asset_category_id) VALUES ('6d49edfd-a12b-43c8-99fb-3300d67e0192', 'Freezer room', '7db32eb6-5929-4dd1-a5e9-01e36baa73ad');
-        "#
-    )?;
-
-    // Asset Catalogue Items (PQS)
-    sql!(
-        connection,
-        r#"
-        -- Porkka Finland Oy
-        INSERT INTO asset_catalogue_item (id, sub_catalogue, code, asset_class_id, asset_category_id, asset_catalogue_type_id, manufacturer, model) VALUES ('f7db1278-a70c-4bcc-8e3c-f670b9965aea','WHO PQS','E001/001-C', 'fad280b6-8384-41af-84cf-c7b6b4526ef0', '7db32eb6-5929-4dd1-a5e9-01e36baa73ad', '9a4ad0dd-138a-41b2-81df-08772635085e', 'Porkka Finland Oy', 'Custom' );
-        INSERT INTO asset_catalogue_item (id, sub_catalogue, code, asset_class_id, asset_category_id, asset_catalogue_type_id, manufacturer, model) VALUES ('5c3be815-6377-4d2a-ba56-bee5e5307e64','WHO PQS','E001/001-F', 'fad280b6-8384-41af-84cf-c7b6b4526ef0', '7db32eb6-5929-4dd1-a5e9-01e36baa73ad', '6d49edfd-a12b-43c8-99fb-3300d67e0192', 'Porkka Finland Oy', 'Custom' );
-        -- SN Zhendre
-        INSERT INTO asset_catalogue_item (id, sub_catalogue, code, asset_class_id, asset_category_id, asset_catalogue_type_id, manufacturer, model) VALUES ('1cabed40-4c27-49f5-b7d2-b8305fca4802','WHO PQS','E001/002-C', 'fad280b6-8384-41af-84cf-c7b6b4526ef0', '7db32eb6-5929-4dd1-a5e9-01e36baa73ad', '9a4ad0dd-138a-41b2-81df-08772635085e', 'SN Zhendre', 'Custom' );
-        INSERT INTO asset_catalogue_item (id, sub_catalogue, code, asset_class_id, asset_category_id, asset_catalogue_type_id, manufacturer, model) VALUES ('b6de9c26-797d-49ad-a4ba-4553d5d8bd2c','WHO PQS','E001/002-F', 'fad280b6-8384-41af-84cf-c7b6b4526ef0', '7db32eb6-5929-4dd1-a5e9-01e36baa73ad', '6d49edfd-a12b-43c8-99fb-3300d67e0192', 'SN Zhendre', 'Custom' );
-        -- Qingdao Haier Biomedical Co., Ltd
-        INSERT INTO asset_catalogue_item (id, sub_catalogue, code, asset_class_id, asset_category_id, asset_catalogue_type_id, manufacturer, model) VALUES ('99206b1c-d1fc-41af-9d41-9151c1382407','WHO PQS','E001/003-C', 'fad280b6-8384-41af-84cf-c7b6b4526ef0', '7db32eb6-5929-4dd1-a5e9-01e36baa73ad', '9a4ad0dd-138a-41b2-81df-08772635085e', 'Qingdao Haier Biomedical Co., Ltd', 'Custom' );
-        INSERT INTO asset_catalogue_item (id, sub_catalogue, code, asset_class_id, asset_category_id, asset_catalogue_type_id, manufacturer, model) VALUES ('2e57aa44-8f93-476f-8bdb-235b84464752','WHO PQS','E001/003-F', 'fad280b6-8384-41af-84cf-c7b6b4526ef0', '7db32eb6-5929-4dd1-a5e9-01e36baa73ad', '6d49edfd-a12b-43c8-99fb-3300d67e0192', 'Qingdao Haier Biomedical Co., Ltd', 'Custom' );
-        -- Foster Refrigerator
-        INSERT INTO asset_catalogue_item (id, sub_catalogue, code, asset_class_id, asset_category_id, asset_catalogue_type_id, manufacturer, model) VALUES ('0df0ff5d-d328-4c92-94ab-e8b4d69608ee','WHO PQS','E001/004-C', 'fad280b6-8384-41af-84cf-c7b6b4526ef0', '7db32eb6-5929-4dd1-a5e9-01e36baa73ad', '9a4ad0dd-138a-41b2-81df-08772635085e', 'Foster Refrigerator', 'Custom' );
-        INSERT INTO asset_catalogue_item (id, sub_catalogue, code, asset_class_id, asset_category_id, asset_catalogue_type_id, manufacturer, model) VALUES ('c316a7bf-b09c-4af6-93bb-0af0d8f0eaa6','WHO PQS','E001/004-F', 'fad280b6-8384-41af-84cf-c7b6b4526ef0', '7db32eb6-5929-4dd1-a5e9-01e36baa73ad', '6d49edfd-a12b-43c8-99fb-3300d67e0192', 'Foster Refrigerator', 'Custom' );
-        -- Viessmann Kuhlsysteme GmbH
-        INSERT INTO asset_catalogue_item (id, sub_catalogue, code, asset_class_id, asset_category_id, asset_catalogue_type_id, manufacturer, model) VALUES ('f53ba4fe-50ce-408f-a4cb-83067a767b5e','WHO PQS','E001/005-C', 'fad280b6-8384-41af-84cf-c7b6b4526ef0', '7db32eb6-5929-4dd1-a5e9-01e36baa73ad', '9a4ad0dd-138a-41b2-81df-08772635085e', 'Viessmann Kuhlsysteme GmbH', 'Custom' );
-        INSERT INTO asset_catalogue_item (id, sub_catalogue, code, asset_class_id, asset_category_id, asset_catalogue_type_id, manufacturer, model) VALUES ('4866491b-3385-41bb-803e-c04002693929','WHO PQS','E001/005-F', 'fad280b6-8384-41af-84cf-c7b6b4526ef0', '7db32eb6-5929-4dd1-a5e9-01e36baa73ad', '6d49edfd-a12b-43c8-99fb-3300d67e0192', 'Viessmann Kuhlsysteme GmbH', 'Custom' );
-        "#
-    )?;
-
-    Ok(())
-}
diff --git a/server/repository/src/migrations/v2_01_00/assets/asset_property.rs b/server/repository/src/migrations/v2_01_00/assets/asset_property.rs
deleted file mode 100644
index b65faafaa..000000000
--- a/server/repository/src/migrations/v2_01_00/assets/asset_property.rs
+++ /dev/null
@@ -1,36 +0,0 @@
-use crate::{migrations::sql, StorageConnection};
-
-pub(crate) fn migrate(connection: &StorageConnection) -> anyhow::Result<()> {
-    const PROPERTY_VALUE_TYPE: &str = if cfg!(feature = "postgres") {
-        "property_value_type" // This is created as part of the asset_catalogue_property migration
-    } else {
-        "TEXT"
-    };
-
-    sql!(
-        connection,
-        r#"
-            CREATE TABLE asset_property (
-                id TEXT NOT NULL PRIMARY KEY,
-                key TEXT NOT NULL,
-                name TEXT NOT NULL,
-                asset_class_id TEXT,
-                asset_category_id TEXT,
-                asset_type_id TEXT,
-                value_type {PROPERTY_VALUE_TYPE} NOT NULL,
-                allowed_values TEXT
-            );
-        "#
-    )?;
-
-    if cfg!(feature = "postgres") {
-        sql!(
-            connection,
-            r#"
-            ALTER TYPE changelog_table_name ADD VALUE IF NOT EXISTS 'asset_property';
-            "#
-        )?;
-    }
-
-    Ok(())
-}
diff --git a/server/repository/src/migrations/v2_01_00/assets/asset_property_data.rs b/server/repository/src/migrations/v2_01_00/assets/asset_property_data.rs
deleted file mode 100644
index 447f00a28..000000000
--- a/server/repository/src/migrations/v2_01_00/assets/asset_property_data.rs
+++ /dev/null
@@ -1,282 +0,0 @@
-use crate::migrations::constants::{
-    COLD_CHAIN_EQUIPMENT_UUID, COLD_ROOMS_AND_FREEZER_ROOMS_UUID, INSULATED_CONTAINERS_UUID,
-    REFRIGERATORS_AND_FREEZERS_UUID,
-};
-use crate::{migrations::sql, StorageConnection};
-
-pub(crate) fn migrate(connection: &StorageConnection) -> anyhow::Result<()> {
-    // Create the external_dimensions property as an example (available for all cold chain equipment assets)
-    sql!(
-        connection,
-        r#"
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id) VALUES ('external_dimensions', 'external_dimensions', 'External dimensions - WxDxH (in cm)', 'STRING', NULL, '{COLD_CHAIN_EQUIPMENT_UUID}');
-        "#,
-    )?;
-
-    /*
-    Asset Properties for Cold/Freezer rooms (asset_category_id: 7db32eb6-5929-4dd1-a5e9-01e36baa73ad)
-    Storage capacity +5 °C (litres)
-    Storage capacity -20 °C (litres)
-    Storage capacity -70 °C (litres)
-    Waterpack storage capacity (Kg)
-    Waterpack freezing capacity per 24 hours (Kg)
-    Energy consumption (stable running, continuous power) (KW per day)
-    Energy consumption during freezing (KW per day)
-    Hold over time (hours)
-    Climate zone
-    Freeze protection
-    Temperature monitoring device (integrated, external or none)
-    Voltage stabilizer (integrated, external or none)
-    Energy Source
-    Refrigerant Type(s)
-    */
-
-    sql!(
-        connection,
-        r#"
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('storage_capacity_5c-cr', 'storage_capacity_5c', 'Storage capacity +5 °C (litres)', 'FLOAT', NULL, '{COLD_CHAIN_EQUIPMENT_UUID}','{COLD_ROOMS_AND_FREEZER_ROOMS_UUID}');
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('storage_capacity_20c-cr', 'storage_capacity_20c', 'Storage capacity -20 °C (litres)', 'FLOAT', NULL, '{COLD_CHAIN_EQUIPMENT_UUID}','{COLD_ROOMS_AND_FREEZER_ROOMS_UUID}');
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('storage_capacity_70c-cr', 'storage_capacity_70c', 'Storage capacity -70 °C (litres)', 'FLOAT', NULL, '{COLD_CHAIN_EQUIPMENT_UUID}','{COLD_ROOMS_AND_FREEZER_ROOMS_UUID}');
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('waterpack_storage_capacity-cr', 'waterpack_storage_capacity', 'Waterpack storage capacity (Kg)', 'FLOAT', NULL, '{COLD_CHAIN_EQUIPMENT_UUID}','{COLD_ROOMS_AND_FREEZER_ROOMS_UUID}');
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('waterpack_freezing_capacity-cr', 'waterpack_freezing_capacity', 'Waterpack freezing capacity per 24 hours (Kg)', 'FLOAT', NULL, '{COLD_CHAIN_EQUIPMENT_UUID}','{COLD_ROOMS_AND_FREEZER_ROOMS_UUID}');
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('energy_consumption_stable-cr', 'energy_consumption_stable', 'Energy consumption (stable running, continuous power) (KW per day)', 'FLOAT', NULL, '{COLD_CHAIN_EQUIPMENT_UUID}','{COLD_ROOMS_AND_FREEZER_ROOMS_UUID}');
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('energy_consumption_freezing-cr', 'energy_consumption_freezing', 'Energy consumption during freezing (KW per day)', 'FLOAT', NULL, '{COLD_CHAIN_EQUIPMENT_UUID}','{COLD_ROOMS_AND_FREEZER_ROOMS_UUID}');
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('hold_over_time-cr', 'hold_over_time', 'Hold over time (hours)', 'FLOAT', NULL, '{COLD_CHAIN_EQUIPMENT_UUID}','{COLD_ROOMS_AND_FREEZER_ROOMS_UUID}');
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('climate_zone-cr', 'climate_zone', 'Climate zone', 'STRING', NULL, '{COLD_CHAIN_EQUIPMENT_UUID}','{COLD_ROOMS_AND_FREEZER_ROOMS_UUID}');
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('freeze_protection-cr', 'freeze_protection', 'Freeze protection', 'STRING', NULL, '{COLD_CHAIN_EQUIPMENT_UUID}','{COLD_ROOMS_AND_FREEZER_ROOMS_UUID}');
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('temperature_monitoring_device-cr', 'temperature_monitoring_device', 'Temperature monitoring device', 'STRING', 'Integrated, External, None', '{COLD_CHAIN_EQUIPMENT_UUID}','{COLD_ROOMS_AND_FREEZER_ROOMS_UUID}');
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('voltage_stabilizer-cr', 'voltage_stabilizer', 'Voltage stabilizer', 'STRING', 'Integrated, External, None', '{COLD_CHAIN_EQUIPMENT_UUID}','{COLD_ROOMS_AND_FREEZER_ROOMS_UUID}');
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('energy_source-cr', 'energy_source', 'Energy Source', 'STRING', NULL, '{COLD_CHAIN_EQUIPMENT_UUID}','{COLD_ROOMS_AND_FREEZER_ROOMS_UUID}');
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('refrigerant_type-cr', 'refrigerant_type', 'Refrigerant Type(s)', 'STRING', NULL, '{COLD_CHAIN_EQUIPMENT_UUID}','{COLD_ROOMS_AND_FREEZER_ROOMS_UUID}');
-        "#,
-    )?;
-
-    /*
-    Asset Properties for Fridge/Freezer rooms (asset_category_id: {02cbea92-d5bf-4832-863b-c04e093a7760})
-    Storage capacity +5 °C (litres)
-    Storage capacity -20 °C (litres)
-    Storage capacity -70 °C (litres)
-    Waterpack storage capacity (Kg)
-    Waterpack freezing capacity per 24 hours (Kg)
-    Energy consumption (stable running, continuous power) ((KW) per day)
-    Energy consumption during freezing ((KW) per day)
-    Hold over time (hours)
-    Climate zone
-    Freeze protection
-    Temperature monitoring device (integrated, external or none)
-    Voltage stabilizer (integrated, external or none)
-    Energy Source
-    Refrigerant Type(s)
-    */
-
-    sql!(
-        connection,
-        r#"
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('storage_capacity_5c-fr', 'storage_capacity_5c', 'Storage capacity +5 °C (litres)', 'FLOAT', NULL, '{COLD_CHAIN_EQUIPMENT_UUID}','{REFRIGERATORS_AND_FREEZERS_UUID}');
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('storage_capacity_20c-fr', 'storage_capacity_20c', 'Storage capacity -20 °C (litres)', 'FLOAT', NULL, '{COLD_CHAIN_EQUIPMENT_UUID}','{REFRIGERATORS_AND_FREEZERS_UUID}');
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('storage_capacity_70c-fr', 'storage_capacity_70c', 'Storage capacity -70 °C (litres)', 'FLOAT', NULL, '{COLD_CHAIN_EQUIPMENT_UUID}','{REFRIGERATORS_AND_FREEZERS_UUID}');
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('waterpack_storage_capacity-fr', 'waterpack_storage_capacity', 'Waterpack storage capacity (Kg)', 'FLOAT', NULL, '{COLD_CHAIN_EQUIPMENT_UUID}','{REFRIGERATORS_AND_FREEZERS_UUID}');
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('waterpack_freezing_capacity-fr', 'waterpack_freezing_capacity', 'Waterpack freezing capacity per 24 hours (Kg)', 'FLOAT', NULL, '{COLD_CHAIN_EQUIPMENT_UUID}','{REFRIGERATORS_AND_FREEZERS_UUID}');
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('energy_consumption_stable-fr', 'energy_consumption_stable', 'Energy consumption (stable running, continuous power) (KW per day)', 'FLOAT', NULL, '{COLD_CHAIN_EQUIPMENT_UUID}','{REFRIGERATORS_AND_FREEZERS_UUID}');
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('energy_consumption_freezing-fr', 'energy_consumption_freezing', 'Energy consumption during freezing (KW per day)', 'FLOAT', NULL, '{COLD_CHAIN_EQUIPMENT_UUID}','{REFRIGERATORS_AND_FREEZERS_UUID}');
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('hold_over_time-fr', 'hold_over_time', 'Hold over time (hours)', 'FLOAT', NULL, '{COLD_CHAIN_EQUIPMENT_UUID}','{REFRIGERATORS_AND_FREEZERS_UUID}');
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('climate_zone-fr', 'climate_zone', 'Climate zone', 'STRING', NULL, '{COLD_CHAIN_EQUIPMENT_UUID}','{REFRIGERATORS_AND_FREEZERS_UUID}');
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('freeze_protection-fr', 'freeze_protection', 'Freeze protection', 'STRING', NULL, '{COLD_CHAIN_EQUIPMENT_UUID}','{REFRIGERATORS_AND_FREEZERS_UUID}');
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('temperature_monitoring_device-fr', 'temperature_monitoring_device', 'Temperature monitoring device', 'STRING', 'Integrated, External, None', '{COLD_CHAIN_EQUIPMENT_UUID}','{REFRIGERATORS_AND_FREEZERS_UUID}');
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('voltage_stabilizer-fr', 'voltage_stabilizer', 'Voltage stabilizer', 'STRING', 'Integrated, External, None', '{COLD_CHAIN_EQUIPMENT_UUID}','{REFRIGERATORS_AND_FREEZERS_UUID}');
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('energy_source-fr', 'energy_source', 'Energy Source', 'STRING', NULL, '{COLD_CHAIN_EQUIPMENT_UUID}','{REFRIGERATORS_AND_FREEZERS_UUID}');
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('refrigerant_type-fr', 'refrigerant_type', 'Refrigerant Type(s)', 'STRING', NULL, '{COLD_CHAIN_EQUIPMENT_UUID}','{REFRIGERATORS_AND_FREEZERS_UUID}');
-        "#,
-    )?;
-
-    /*
-        Asset Properties for Insulated Containers (asset_category_id: b7eea921-5a14-44cc-b5e0-ea59f2e9cb8d)
-        Temperature monitoring device (integrated, external or none)
-        Voltage stabilizer (integrated, external or none)
-    */
-
-    sql!(
-        connection,
-        r#"
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('temperature_monitoring_device-ic', 'temperature_monitoring_device', 'Temperature monitoring device', 'STRING', 'Integrated, External, None', '{COLD_CHAIN_EQUIPMENT_UUID}','{INSULATED_CONTAINERS_UUID}');
-        INSERT INTO asset_property (id, key, name, value_type, allowed_values, asset_class_id, asset_category_id) VALUES ('voltage_stabilizer-ic', 'voltage_stabilizer', 'Voltage stabilizer', 'STRING', 'Integrated, External, None', '{COLD_CHAIN_EQUIPMENT_UUID}','{INSULATED_CONTAINERS_UUID}');
-        "#,
-    )?;
-
-    // Setup the PQS properties for the asset catalogue items
-    sql!(
-        connection,
-        r#"
-UPDATE asset_catalogue_item SET properties = '{{"refrigerant_type": "R404A", "climate_zone": "Hot, Temperate, Cold", "energy_source": "Electricity"}}' WHERE code = 'E001/001-C';
-UPDATE asset_catalogue_item SET properties = '{{"refrigerant_type": "R404A", "climate_zone": "Hot, Temperate, Cold", "energy_source": "Electricity"}}' WHERE code = 'E001/001-F';
-UPDATE asset_catalogue_item SET properties = '{{"refrigerant_type": "R134A, R452A", "climate_zone": "Hot, Temperate, Cold", "energy_source": "Electricity"}}' WHERE code = 'E001/002-C';
-UPDATE asset_catalogue_item SET properties = '{{"refrigerant_type": "R134A, R452A", "climate_zone": "Hot, Temperate, Cold", "energy_source": "Electricity"}}' WHERE code = 'E001/002-F';
-UPDATE asset_catalogue_item SET properties = '{{"refrigerant_type": "R448A", "climate_zone": "Hot, Temperate, Cold", "energy_source": "Electricity"}}' WHERE code = 'E001/003-C';
-UPDATE asset_catalogue_item SET properties = '{{"refrigerant_type": "R448A", "climate_zone": "Hot, Temperate, Cold", "energy_source": "Electricity"}}' WHERE code = 'E001/003-F';
-UPDATE asset_catalogue_item SET properties = '{{"refrigerant_type": "R404A", "climate_zone": "Hot, Temperate, Cold", "energy_source": "Electricity"}}' WHERE code = 'E001/004-C';
-UPDATE asset_catalogue_item SET properties = '{{"refrigerant_type": "R404A", "climate_zone": "Hot, Temperate, Cold", "energy_source": "Electricity"}}' WHERE code = 'E001/004-F';
-UPDATE asset_catalogue_item SET properties = '{{"refrigerant_type": "R134A, R407A, R452A", "climate_zone": "Hot, Temperate, Cold", "energy_source": "Electricity"}}' WHERE code = 'E001/005-C';
-UPDATE asset_catalogue_item SET properties = '{{"refrigerant_type": "R134A, R407A, R452A", "climate_zone": "Hot, Temperate, Cold", "energy_source": "Electricity"}}' WHERE code = 'E001/005-F';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_20c": 121.0, "refrigerant_type": "R134A", "external_dimensions": "82 x 67 x 63", "waterpack_storage_capacity": 81.6, "waterpack_freezing_capacity": 12.0, "energy_consumption_stable": 0.38, "energy_consumption_freezing": 3.77, "hold_over_time": 2.5, "climate_zone": "Hot", "energy_source": "Electricity"}}' WHERE code = 'E003/002';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_20c": 298.0, "refrigerant_type": "R134A", "external_dimensions": "81.8 x 124 x 63", "waterpack_storage_capacity": 186.0, "waterpack_freezing_capacity": 16.8, "energy_consumption_stable": 4.36, "hold_over_time": 4.15, "climate_zone": "Hot", "energy_source": "Electricity"}}' WHERE code = 'E003/003';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 105.0, "refrigerant_type": "R134A", "external_dimensions": "84 x 69 x 126", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 3.2, "hold_over_time": 25.6, "climate_zone": "Hot, Temperate, Cold", "freeze_protection": "Not tested", "energy_source": "Electricity"}}' WHERE code = 'E003/007';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 75.0, "refrigerant_type": "R134A", "external_dimensions": "84 x 70 x 92", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 1.89, "hold_over_time": 20.1, "climate_zone": "Hot", "freeze_protection": "Not tested", "energy_source": "Electricity"}}' WHERE code = 'E003/011';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 48.0, "refrigerant_type": "R134A", "external_dimensions": "88 x 96.5 x 71", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 2.3, "hold_over_time": 43.13, "climate_zone": "Hot", "freeze_protection": "Not tested", "energy_source": "Electricity"}}' WHERE code = 'E003/022';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_20c": 281.0, "refrigerant_type": "R600A", "external_dimensions": "84 x 156 x 70", "waterpack_storage_capacity": 153.6, "waterpack_freezing_capacity": 7.2, "energy_consumption_stable": 4.23, "energy_consumption_freezing": 4.24, "hold_over_time": 4.0, "climate_zone": "Hot", "energy_source": "Electricity"}}' WHERE code = 'E003/023';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_20c": 105.0, "refrigerant_type": "R600A", "external_dimensions": "84 x 72 x 70", "waterpack_storage_capacity": 38.4, "waterpack_freezing_capacity": 7.2, "energy_consumption_stable": 2.24, "energy_consumption_freezing": 3.33, "hold_over_time": 2.8, "climate_zone": "Hot", "energy_source": "Electricity"}}' WHERE code = 'E003/024';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_20c": 171.0, "refrigerant_type": "R600A", "external_dimensions": "84 x 113 x 70", "waterpack_storage_capacity": 96.0, "waterpack_freezing_capacity": 7.2, "energy_consumption_stable": 3.0, "energy_consumption_freezing": 3.56, "hold_over_time": 2.9, "climate_zone": "Hot", "energy_source": "Electricity"}}' WHERE code = 'E003/025';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 156.0, "refrigerant_type": "R600A", "external_dimensions": "91 x 127 x 78", "waterpack_storage_capacity": 9.6, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 0.0, "hold_over_time": 94.08, "climate_zone": "Temperate", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/030';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 99.0, "storage_capacity_20c": 42.0, "refrigerant_type": "R600A", "external_dimensions": "127 x 78 x 91", "waterpack_storage_capacity": 14.4, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 0.0, "hold_over_time": 94.0, "climate_zone": "Temperate", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/035';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 93.0, "refrigerant_type": "R600A", "external_dimensions": "180 x 85 x 73", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 0.0, "hold_over_time": 125.0, "climate_zone": "Temperate", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/037';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 132.0, "refrigerant_type": "R600A", "external_dimensions": "98 x 128.2 x 74", "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 0.0, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/040';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 36.0, "storage_capacity_20c": 4.8, "refrigerant_type": "R600A", "external_dimensions": "90 x 78 x 103", "waterpack_storage_capacity": 3.6, "waterpack_freezing_capacity": 1.89, "energy_consumption_stable": 0.0, "hold_over_time": 94.4, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/042';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 70.0, "storage_capacity_20c": 42.0, "refrigerant_type": "R600A", "external_dimensions": "91 x 127 x 78", "waterpack_storage_capacity": 10.5, "waterpack_freezing_capacity": 2.5, "energy_consumption_stable": 0.0, "hold_over_time": 79.0, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/043';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 128.0, "refrigerant_type": "R134A", "external_dimensions": "190 x 85 x 72", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 1.98, "energy_consumption_freezing": 2.03, "hold_over_time": 128.2, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/044';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 89.0, "refrigerant_type": "R600A", "external_dimensions": "91 x 127 x 78", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 0.0, "hold_over_time": 124.8, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/045';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 102.0, "storage_capacity_20c": 42.9, "refrigerant_type": "R600A", "external_dimensions": "98 x 128.2 x 74", "waterpack_storage_capacity": 8.1, "waterpack_freezing_capacity": 2.04, "energy_consumption_stable": 0.0, "hold_over_time": 83.7, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/048';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 46.5, "refrigerant_type": "R600A", "external_dimensions": "121.5 x 79.5 x75", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 0.0, "hold_over_time": 119.2, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/049';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 99.0, "refrigerant_type": "R600A", "external_dimensions": "182 x 79.5 x 75", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 0.0, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/050';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 27.0, "refrigerant_type": "R134A", "external_dimensions": "102.8 x 61.9 x 56.3", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 1.68, "energy_consumption_freezing": 2.56, "hold_over_time": 77.2, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/051';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 128.0, "refrigerant_type": "R134A", "external_dimensions": "189 x 83 x 71", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 0.0, "hold_over_time": 167.9, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/052';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 27.0, "refrigerant_type": "R600A", "external_dimensions": "102.5 x 56 x 60", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 0.0, "hold_over_time": 87.27, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/055';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 100.0, "storage_capacity_20c": 40.0, "refrigerant_type": "R600A", "external_dimensions": "169.5 x 86.5 x 82.5", "waterpack_storage_capacity": 10.68, "waterpack_freezing_capacity": 2.08, "energy_consumption_stable": 0.0, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/057';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 110.0, "refrigerant_type": "R600A", "external_dimensions": "98 x 128.2 x 74", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 0.0, "hold_over_time": 91.65, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/058';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 88.0, "refrigerant_type": "R600A", "external_dimensions": "98 x 128.2 x 74", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 0.0, "hold_over_time": 1.65, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/059';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_20c": 96.0, "refrigerant_type": "R600A", "external_dimensions": "79 X 59.5 X 880", "waterpack_storage_capacity": 19.4, "waterpack_freezing_capacity": 14.5, "energy_consumption_stable": 3.31, "energy_consumption_freezing": 2.81, "hold_over_time": 6.73, "climate_zone": "Hot", "energy_source": "Electricity"}}' WHERE code = 'E003/060';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_20c": 240.0, "refrigerant_type": "R134A", "external_dimensions": "122.6 x 79 x 945", "waterpack_storage_capacity": 44.3, "waterpack_freezing_capacity": 38.3, "energy_consumption_stable": 3.37, "energy_consumption_freezing": 3.54, "hold_over_time": 58.6, "climate_zone": "Hot", "energy_source": "Electricity"}}' WHERE code = 'E003/061';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 240.0, "refrigerant_type": "R600A", "external_dimensions": "91.5 x 162.5 x 78", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 0.85, "hold_over_time": 77.3, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/066';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 16.0, "refrigerant_type": "R600A", "external_dimensions": "95 x 73 x 73", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 0.0, "hold_over_time": 7.7, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/067';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 36.0, "refrigerant_type": "R600A", "external_dimensions": "90 x 103 78", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 0.0, "hold_over_time": 93.4, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/068';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 25.5, "refrigerant_type": "R600A", "external_dimensions": "83 x 55.5 x 64.5", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 0.0, "hold_over_time": 91.28, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/069';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 52.5, "storage_capacity_20c": 5.1, "refrigerant_type": "R600A", "external_dimensions": "84.5 x 72.5 x 71", "waterpack_storage_capacity": 3.6, "waterpack_freezing_capacity": 1.6, "energy_consumption_stable": 0.63, "energy_consumption_freezing": 1.8, "hold_over_time": 45.0, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/070';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_20c": 204.0, "refrigerant_type": "R290", "external_dimensions": "91 x 127 x 78", "waterpack_storage_capacity": 97.2, "waterpack_freezing_capacity": 32.4, "energy_consumption_stable": 2.15, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/071';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 184.0, "refrigerant_type": "R600A", "external_dimensions": "98 x 128.2 x 74", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 803.0, "hold_over_time": 94.0, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/072';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_20c": 64.0, "refrigerant_type": "R600A", "external_dimensions": "90 x 103 78", "waterpack_storage_capacity": 11.24, "waterpack_freezing_capacity": 2.16, "energy_consumption_stable": 0.0, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/073';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 37.5, "storage_capacity_20c": 32.0, "refrigerant_type": "R600A", "external_dimensions": "72 x 87.5 x 112.8", "waterpack_storage_capacity": 12.0, "waterpack_freezing_capacity": 2.43, "energy_consumption_stable": 0.0, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/074';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 22.5, "refrigerant_type": "R600A", "external_dimensions": "72 x 87.5 x 78.8", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 0.0, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/075';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 59.0, "refrigerant_type": "R600A", "external_dimensions": "72 x 87.5 x 112.8", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 0.0, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/076';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 16.0, "storage_capacity_20c": 2.4, "refrigerant_type": "R600A", "external_dimensions": "95 x 73 x 73", "waterpack_storage_capacity": 2.4, "waterpack_freezing_capacity": 1.97, "energy_consumption_stable": 0.0, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/077';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 52.5, "refrigerant_type": "R600A", "external_dimensions": "97.5 x 100 x 74", "waterpack_freezing_capacity": 0.0, "hold_over_time": 74.0, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/078';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 50.0, "refrigerant_type": "R290", "external_dimensions": "158.8 x 54.5 x 65.5", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 0.54, "hold_over_time": 120.0, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/079';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 51.0, "refrigerant_type": "R600A", "external_dimensions": "151.5 x 61.8 x 77.4", "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 1.63, "hold_over_time": 89.72, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/080';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 72.5, "refrigerant_type": "R600A", "external_dimensions": "151.5 x 61.8 x 77.4", "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 1.47, "hold_over_time": 81.0, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/081';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 98.5, "refrigerant_type": "R600A", "external_dimensions": "170 x 61.8 x 77.4", "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 1.23, "hold_over_time": 59.56, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/082';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 225.0, "refrigerant_type": "R600A", "external_dimensions": "183 x 79.5 x 75", "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 2.04, "hold_over_time": 55.0, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/083';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 57.0, "storage_capacity_20c": 24.0, "refrigerant_type": "R600A", "external_dimensions": "98 x 128.2 x 74", "waterpack_storage_capacity": 13.8, "waterpack_freezing_capacity": 2.4, "hold_over_time": 94.18, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/084';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 25.5, "refrigerant_type": "R600A", "external_dimensions": "97.5 x 89 x 74", "waterpack_freezing_capacity": 0.0, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/085';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_20c": 48.0, "refrigerant_type": "R600A", "external_dimensions": "72 x 87.5 x 78.8", "waterpack_storage_capacity": 20.0, "waterpack_freezing_capacity": 2.4, "hold_over_time": 120.0, "climate_zone": "Hot", "freeze_protection": "Not tested", "energy_source": "Solar"}}' WHERE code = 'E003/086';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 211.0, "refrigerant_type": "R600A", "external_dimensions": "94 x 164.7 x 71.7", "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 1.62, "hold_over_time": 62.23, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/087';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 122.0, "refrigerant_type": "R600A", "external_dimensions": "87.2 x 112.8 x 71.7", "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 0.54, "hold_over_time": 60.83, "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/088';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 61.0, "refrigerant_type": "R600A", "external_dimensions": "87.2 x 112.8 x 71.7", "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 0.57, "hold_over_time": 59.85, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/089';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 24.2, "refrigerant_type": "R600A", "external_dimensions": "113 x 78 x 85", "waterpack_freezing_capacity": 0.0, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/090';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 20.0, "storage_capacity_20c": 34.3, "refrigerant_type": "R600A", "external_dimensions": "88 x 111 x 65", "waterpack_storage_capacity": 17.4, "waterpack_freezing_capacity": 1.8, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/091';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 36.0, "storage_capacity_20c": 34.3, "refrigerant_type": "R600A", "external_dimensions": "88 x 111 x 65", "waterpack_storage_capacity": 17.4, "waterpack_freezing_capacity": 1.8, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/092';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 220.0, "refrigerant_type": "R600A", "external_dimensions": "91.5 x 162.5 x 78", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/093';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 58.0, "storage_capacity_20c": 44.0, "refrigerant_type": "R290", "external_dimensions": "183 x 79.5 x 75", "waterpack_storage_capacity": 14.4, "waterpack_freezing_capacity": 2.4, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/095';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 77.0, "refrigerant_type": "R134A", "external_dimensions": "167 x 85 x 71", "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 1.4, "hold_over_time": 105.28, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/096';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 30.0, "storage_capacity_20c": 32.0, "refrigerant_type": "R600A", "external_dimensions": "87.2 x 112.8 x 71.7", "waterpack_storage_capacity": 16.0, "waterpack_freezing_capacity": 4.0, "energy_consumption_stable": 0.7, "energy_consumption_freezing": 0.97, "hold_over_time": 63.8, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/097';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 50.0, "refrigerant_type": "R600A", "external_dimensions": "158.8 x 54.5 x 65.5", "waterpack_freezing_capacity": 0.0, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/098';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_20c": 34.3, "refrigerant_type": "R600A", "external_dimensions": "85 x 55.5 x 65", "waterpack_storage_capacity": 17.4, "waterpack_freezing_capacity": 1.6, "energy_source": "Solar"}}' WHERE code = 'E003/099';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 36.5, "refrigerant_type": "R600A", "external_dimensions": "103 x 78 x 89", "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 0.8, "hold_over_time": 121.9, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/100';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 80.5, "refrigerant_type": "R600A", "external_dimensions": "103 x 78 x 90", "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 1.16, "hold_over_time": 72.15, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/101';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 75.0, "refrigerant_type": "R600A", "external_dimensions": "72 x 87.5 x 112.8", "waterpack_freezing_capacity": 0.0, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/102';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 58.0, "storage_capacity_20c": 44.0, "refrigerant_type": "R600A", "external_dimensions": "182 x 79.5 x 75", "waterpack_storage_capacity": 14.4, "waterpack_freezing_capacity": 2.4, "energy_consumption_stable": 1.91, "energy_consumption_freezing": 1.91, "hold_over_time": 113.62, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/103';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 55.5, "refrigerant_type": "R600A", "external_dimensions": "85 x 72 x 60", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "hold_over_time": 89.32, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/106';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 92.0, "refrigerant_type": "R600A", "external_dimensions": "86 x 93 x 70", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/107';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 170.0, "refrigerant_type": "R600A", "external_dimensions": "86 x 127 x 70", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "hold_over_time": 77.75, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/108';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 60.0, "refrigerant_type": "R600A", "external_dimensions": "85 x 73 x 70", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 0.57, "hold_over_time": 54.0, "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/109';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 98.0, "refrigerant_type": "R600A", "external_dimensions": "85 x 92 x 70", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 0.6, "hold_over_time": 55.5, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/110';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 127.0, "refrigerant_type": "R600A", "external_dimensions": "85 x 113 x 70", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 0.62, "hold_over_time": 54.7, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/111';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 145.0, "refrigerant_type": "R600A", "external_dimensions": "86 x 127 x 70", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 0.67, "hold_over_time": 55.0, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/112';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 242.0, "refrigerant_type": "R600A", "external_dimensions": "84.5 x 156.3 x 70", "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 638.0, "hold_over_time": 55.27, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/113';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 100.0, "refrigerant_type": "R600A", "external_dimensions": "89 x 82.9 x 142.5", "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 0.4, "hold_over_time": 128.8, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/114';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 200.0, "refrigerant_type": "R600A", "external_dimensions": "89 x 82.9 x 182", "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 0.44, "hold_over_time": 87.23, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/115';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 100.0, "refrigerant_type": "R600A", "external_dimensions": "86.5 x 82.5 x 142.5", "waterpack_freezing_capacity": 0.0, "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/116';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 200.0, "refrigerant_type": "R600A", "external_dimensions": "86.5 x 82.5 x 181.5", "waterpack_freezing_capacity": 0.0, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/117';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 10.0, "external_dimensions": "52.8 x 86", "waterpack_freezing_capacity": 0.0, "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/118';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 61.25, "storage_capacity_20c": 34.3, "refrigerant_type": "R600A", "external_dimensions": "96 x 128 x 65", "waterpack_storage_capacity": 17.4, "waterpack_freezing_capacity": 1.8, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/119';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 38.0, "refrigerant_type": "R600A", "external_dimensions": "95 x 55 x 65", "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 504.0, "hold_over_time": 57.52, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/120';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 80.5, "refrigerant_type": "R600A", "external_dimensions": "90 x 103 x 78", "waterpack_freezing_capacity": 0.0, "hold_over_time": 192.0, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/121';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 241.0, "refrigerant_type": "R290", "external_dimensions": "67 x 73 x 199.9", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 2.98, "hold_over_time": 25.0, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/122';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_20c": 120.0, "refrigerant_type": "R600A", "external_dimensions": "91 x 162 x 79", "waterpack_freezing_capacity": 1.6, "hold_over_time": 72.0, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/123';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 120.0, "storage_capacity_20c": 28.0, "refrigerant_type": "R600A", "external_dimensions": "91 x 162 x 79", "waterpack_freezing_capacity": 1.6, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/124';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_70c": 214.0, "refrigerant_type": "R290", "external_dimensions": "129.3 x 69.9 x 103.9", "energy_consumption_stable": 13.5, "freeze_protection": "Not tested", "energy_source": "Electricity"}}' WHERE code = 'E003/125';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_20c": 61.0, "refrigerant_type": "R600A", "external_dimensions": "78.8 x 71.7 x 87.2", "energy_consumption_stable": 0.95, "hold_over_time": 7.32, "climate_zone": "Hot", "freeze_protection": "Not tested", "energy_source": "Electricity"}}' WHERE code = 'E003/126';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_20c": 68.0, "refrigerant_type": "R290", "external_dimensions": "71 x 72 x 95.5", "waterpack_storage_capacity": 72.5, "waterpack_freezing_capacity": 16.2, "energy_consumption_stable": 1.94, "freeze_protection": "Not tested", "energy_source": "Electricity"}}' WHERE code = 'E003/127';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_20c": 166.0, "refrigerant_type": "R290", "external_dimensions": "123 x 72 x 96.5", "waterpack_storage_capacity": 203.0, "waterpack_freezing_capacity": 28.2, "energy_consumption_stable": 2.27, "climate_zone": "Hot", "freeze_protection": "Not tested", "energy_source": "Electricity"}}' WHERE code = 'E003/128';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 48.0, "storage_capacity_20c": 38.0, "refrigerant_type": "R290", "external_dimensions": "105 x 75 x 97.5", "waterpack_storage_capacity": 10.7, "waterpack_freezing_capacity": 2.0, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/129';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_20c": 153.0, "refrigerant_type": "R290", "external_dimensions": "76.2 x 82.5 x 85", "waterpack_storage_capacity": 130.8, "waterpack_freezing_capacity": 20.91, "energy_consumption_stable": 4.13, "hold_over_time": 9.82, "climate_zone": "Hot", "energy_source": "Electricity"}}' WHERE code = 'E003/130';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_20c": 211.0, "refrigerant_type": "R600A", "external_dimensions": "164.7 x 71.7 x 94", "energy_consumption_stable": 1.42, "energy_consumption_freezing": 1.4, "hold_over_time": 11.42, "climate_zone": "Hot", "energy_source": "Electricity"}}' WHERE code = 'E003/131';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 110.0, "storage_capacity_20c": 50.0, "refrigerant_type": "R600A", "external_dimensions": "87 x 151 x 74", "waterpack_storage_capacity": 17.4, "waterpack_freezing_capacity": 2.4, "hold_over_time": 114.33, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Solar"}}' WHERE code = 'E003/132';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 192.0, "refrigerant_type": "R290", "external_dimensions": "132 x 80.5 x 97", "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 1.5, "climate_zone": "Hot, Temperate, Cold", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/133';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 1.55, "external_dimensions": "30 x 20 x 41", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 0.84, "hold_over_time": 12.0, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/134';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 100.0, "refrigerant_type": "R600A", "external_dimensions": "169.5 x 86.5 x 82.5", "waterpack_storage_capacity": 22.4, "waterpack_freezing_capacity": 2.0, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/135';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 226.4, "refrigerant_type": "R290", "external_dimensions": "126 x 84.6 x 84.7", "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 1.67, "hold_over_time": 34.99, "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/136';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 103.5, "refrigerant_type": "R290", "external_dimensions": "76.2 x 84.6 x 84.7", "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 1.64, "hold_over_time": 25.95, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/137';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 240.0, "refrigerant_type": "R290", "external_dimensions": "160 x 78 x 91.5", "waterpack_storage_capacity": 252.0, "waterpack_freezing_capacity": 24.0, "energy_consumption_stable": 4.45, "energy_consumption_freezing": 4.45, "hold_over_time": 50.15, "climate_zone": "Hot", "freeze_protection": "Not tested", "energy_source": "Electricity"}}' WHERE code = 'E003/138';
-UPDATE asset_catalogue_item SET properties = '{{"storage_capacity_5c": 164.5, "refrigerant_type": "R290", "external_dimensions": "10.1 x 84.2 x 84.5", "waterpack_storage_capacity": 0.0, "waterpack_freezing_capacity": 0.0, "energy_consumption_stable": 1.77, "hold_over_time": 40.22, "climate_zone": "Hot", "freeze_protection": "Grade A", "energy_source": "Electricity"}}' WHERE code = 'E003/139';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "36.2 x 28.3 x 29.9"}}' WHERE code = 'E004/002';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "32.6 x 10.7 x 20.2"}}' WHERE code = 'E004/003';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "25.1 x 17.6 x 20.9"}}' WHERE code = 'E004/004';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "40.6 x 25.2 x 20.2"}}' WHERE code = 'E004/005';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "17.3 x 10.3 x 4.5"}}' WHERE code = 'E004/007';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "9 x 9.1 x 16.5"}}' WHERE code = 'E004/008';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "11.38 x 11.38 x 19"}}' WHERE code = 'E004/009';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "76.1 x 61.1 x 51.3"}}' WHERE code = 'E004/010';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "25 x 18 x 12"}}' WHERE code = 'E004/011';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "77.4 x 61.6 x 53"}}' WHERE code = 'E004/013';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "77 x 61 x 51"}}' WHERE code = 'E004/015';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "39.9 x 39.6 x 14.5"}}' WHERE code = 'E004/017';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "61 x 60 x 56"}}' WHERE code = 'E004/018';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "49 x 44 x 39.5"}}' WHERE code = 'E004/019';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "26 x 26 32"}}' WHERE code = 'E004/020';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "26 x 25 x 28.5"}}' WHERE code = 'E004/021';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "2.5 x 16 x 25"}}' WHERE code = 'E004/022';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "62.4 x 50.2 x 42.6"}}' WHERE code = 'E004/023';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "77 x 61.8 x 51.3"}}' WHERE code = 'E004/024';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "79.5 x 58.2 x 56.5"}}' WHERE code = 'E004/025';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "65 x 65 x 37"}}' WHERE code = 'E004/026';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "65 x 65 x 37"}}' WHERE code = 'E004/027';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "24.6 x 18 x 21.5"}}' WHERE code = 'E004/028';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "28 x 28 x 31.5"}}' WHERE code = 'E004/029';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "54.4 x 44.5 x 42"}}' WHERE code = 'E004/030';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "76.5 x 61.2 x 51.5"}}' WHERE code = 'E004/031';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "29 x 24 x 32"}}' WHERE code = 'E004/032';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "65 x 53 x 46"}}' WHERE code = 'E004/034';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "77 x 62 x 53.5"}}' WHERE code = 'E004/036';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "27 x 27 x 32"}}' WHERE code = 'E004/040';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "52.8 x 74.7"}}' WHERE code = 'E004/041';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "50 x 37 x 38"}}' WHERE code = 'E004/042';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "28.8 x 28.9 x 33.7"}}' WHERE code = 'E004/043';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "25 x 25 x 30"}}' WHERE code = 'E004/044';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "54 x 44.5 x 41.5"}}' WHERE code = 'E004/045';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "77 x 61.5 x 51.5"}}' WHERE code = 'E004/046';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "29 x 29 x 32.7"}}' WHERE code = 'E004/047';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "25.2 x 25.2 x 30.5"}}' WHERE code = 'E004/049';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "31 x 31 x 30"}}' WHERE code = 'E004/050';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "30.8 x 30.8 x 30"}}' WHERE code = 'E004/051';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "28.5 28.5 x 33.5"}}' WHERE code = 'E004/052';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "25.3 x 25.3 x 30.5"}}' WHERE code = 'E004/053';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "25.2 x 26 x 30.5"}}' WHERE code = 'E004/054';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "29.5 x 29.5 x 33.5"}}' WHERE code = 'E004/055';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "49.3 x 45.5 x 39.7"}}' WHERE code = 'E004/056';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "77 x 54 x 47"}}' WHERE code = 'E004/057';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "31.8 x 31.8 x 29.5"}}' WHERE code = 'E004/058';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "34.7 x 28.1 x 43"}}' WHERE code = 'E004/059';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "24.8 x 29 x 24.6"}}' WHERE code = 'E004/060';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "24.6 x 30.5 x 24.7"}}' WHERE code = 'E004/061';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "28.5 x 28.5 x 27"}}' WHERE code = 'E004/063';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "77.5 x 54.5 x 47.3"}}' WHERE code = 'E004/064';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "32.5 x 32.5 x 32.7"}}' WHERE code = 'E004/065';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "31 x 31 x 30.5"}}' WHERE code = 'E004/066';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "78.5 x 63.2 x 53.3"}}' WHERE code = 'E004/067';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "78.5 x 63.2 x 53.3"}}' WHERE code = 'E004/068';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "77.5 x 54.5 x 48.5"}}' WHERE code = 'E004/069';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "22 x 38.7"}}' WHERE code = 'E004/070';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "28.5 x 30.5 x 29.5"}}' WHERE code = 'E004/071';
-UPDATE asset_catalogue_item SET properties = '{{"external_dimensions": "29 x 28.5 x 27.8"}}' WHERE code = 'E004/072';
-        "#,
-    )?;
-
-    Ok(())
-}
diff --git a/server/repository/src/migrations/v2_01_00/assets/mod.rs b/server/repository/src/migrations/v2_01_00/assets/mod.rs
deleted file mode 100644
index 285da9df0..000000000
--- a/server/repository/src/migrations/v2_01_00/assets/mod.rs
+++ /dev/null
@@ -1,19 +0,0 @@
-use crate::{migrations::helpers::run_without_change_log_updates, StorageConnection};
-
-pub mod asset;
-pub mod asset_catalogue;
-pub mod asset_catalogue_data;
-pub mod asset_property;
-pub mod asset_property_data;
-
-pub(crate) fn migrate_assets(connection: &StorageConnection) -> anyhow::Result<()> {
-    run_without_change_log_updates(connection, |connection| {
-        asset::migrate(connection)?;
-        asset_catalogue::migrate(connection)?;
-        asset_catalogue_data::migrate(connection)?;
-        asset_property::migrate(connection)?;
-        asset_property_data::migrate(connection)?;
-        Ok(())
-    })?;
-    Ok(())
-}
diff --git a/server/repository/src/migrations/v2_01_00/decimal_pack_size.rs b/server/repository/src/migrations/v2_01_00/decimal_pack_size.rs
deleted file mode 100644
index d868bb14b..000000000
--- a/server/repository/src/migrations/v2_01_00/decimal_pack_size.rs
+++ /dev/null
@@ -1,151 +0,0 @@
-use crate::migrations::*;
-
-use super::ledger::{create_ledger_views, drop_ledger_views};
-
-pub(crate) fn migrate(connection: &StorageConnection) -> anyhow::Result<()> {
-    drop_ledger_views(connection)?;
-    // drop other views affected by the pack_size type update
-    sql!(
-        connection,
-        r#"
-            DROP VIEW stock_on_hand;
-            DROP VIEW store_items;
-            "#,
-    )?;
-
-    rename_pack_size_columns(connection)?;
-
-    create_ledger_views(connection)?;
-    // re-create stock_on_hand and store_items
-    sql!(
-        connection,
-        r#"
-        CREATE VIEW store_items AS
-        SELECT i.id as item_id, sl.store_id, sl.pack_size, sl.available_number_of_packs
-        FROM
-          item i
-          LEFT JOIN item_link il ON il.item_id = i.id
-          LEFT JOIN stock_line sl ON sl.item_link_id = il.id
-          LEFT JOIN store s ON s.id = sl.store_id
-        "#,
-    )?;
-    sql!(
-        connection,
-        r#"
-        CREATE VIEW stock_on_hand AS
-        SELECT
-          'n/a' AS id,
-          items_and_stores.item_id AS item_id,
-          items_and_stores.item_name AS item_name,
-          items_and_stores.store_id AS store_id,
-          COALESCE(stock.available_stock_on_hand, 0) AS available_stock_on_hand
-        FROM
-          (
-            SELECT
-              item.id AS item_id,
-              item.name AS item_name,
-              store.id AS store_id
-            FROM
-              item,
-              store
-          ) AS items_and_stores
-          LEFT OUTER JOIN (
-            SELECT
-              item_id,
-              store_id,
-              SUM(pack_size * available_number_of_packs) AS available_stock_on_hand
-            FROM
-              store_items
-            WHERE
-              store_items.available_number_of_packs > 0
-            GROUP BY
-              item_id,
-              store_id
-          ) AS stock ON stock.item_id = items_and_stores.item_id
-          AND stock.store_id = items_and_stores.store_id
-     "#,
-    )?;
-
-    Ok(())
-}
-
-#[cfg(not(feature = "postgres"))]
-fn rename_pack_size_columns(connection: &StorageConnection) -> anyhow::Result<()> {
-    sql!(
-        connection,
-        r#"
-        ALTER TABLE stocktake_line RENAME COLUMN pack_size TO pack_size_old;
-        ALTER TABLE stocktake_line ADD COLUMN pack_size REAL;
-        UPDATE stocktake_line SET pack_size = pack_size_old;
-        ALTER TABLE stocktake_line DROP COLUMN pack_size_old;
-        "#,
-    )?;
-
-    sql!(
-        connection,
-        r#"
-        ALTER TABLE barcode RENAME COLUMN pack_size TO pack_size_old;
-        ALTER TABLE barcode ADD COLUMN pack_size REAL;
-        UPDATE barcode SET pack_size = pack_size_old;
-        ALTER TABLE barcode DROP COLUMN pack_size_old;
-        "#,
-    )?;
-
-    sql!(
-        connection,
-        r#"
-        ALTER TABLE stock_line RENAME COLUMN pack_size TO pack_size_old;
-        ALTER TABLE stock_line ADD COLUMN pack_size REAL NOT NULL DEFAULT 0;
-        UPDATE stock_line SET pack_size = pack_size_old;
-        ALTER TABLE stock_line DROP COLUMN pack_size_old;
-        "#,
-    )?;
-
-    sql!(
-        connection,
-        r#"
-        ALTER TABLE pack_variant RENAME COLUMN pack_size TO pack_size_old;
-        ALTER TABLE pack_variant ADD COLUMN pack_size REAL NOT NULL DEFAULT 0;
-        UPDATE pack_variant SET pack_size = pack_size_old;
-        ALTER TABLE pack_variant DROP COLUMN pack_size_old;
-        "#,
-    )?;
-
-    sql!(
-        connection,
-        r#"
-        ALTER TABLE invoice_line RENAME COLUMN pack_size TO pack_size_old;
-        ALTER TABLE invoice_line ADD COLUMN pack_size REAL NOT NULL DEFAULT 0;
-        UPDATE invoice_line SET pack_size = pack_size_old;
-        ALTER TABLE invoice_line DROP COLUMN pack_size_old;
-        "#,
-    )?;
-
-    sql!(
-        connection,
-        r#"
-        ALTER TABLE item RENAME COLUMN default_pack_size TO default_pack_size_old;
-        ALTER TABLE item ADD COLUMN default_pack_size REAL NOT NULL DEFAULT 0;
-        UPDATE item SET default_pack_size = default_pack_size_old;
-        ALTER TABLE item DROP COLUMN default_pack_size_old;
-        "#,
-    )?;
-
-    Ok(())
-}
-
-#[cfg(feature = "postgres")]
-fn rename_pack_size_columns(connection: &StorageConnection) -> anyhow::Result<()> {
-    sql!(
-        connection,
-        r#"
-        ALTER TABLE stocktake_line ALTER COLUMN pack_size TYPE DOUBLE PRECISION using pack_size;
-        ALTER TABLE barcode ALTER COLUMN pack_size TYPE DOUBLE PRECISION using pack_size;
-        ALTER TABLE stock_line ALTER COLUMN pack_size TYPE DOUBLE PRECISION using pack_size;
-        ALTER TABLE pack_variant ALTER COLUMN pack_size TYPE DOUBLE PRECISION using pack_size;
-        ALTER TABLE invoice_line ALTER COLUMN pack_size TYPE DOUBLE PRECISION using pack_size;
-        ALTER TABLE item ALTER COLUMN default_pack_size TYPE DOUBLE PRECISION using default_pack_size;
-        "#,
-    )?;
-    Ok(())
-}
diff --git a/server/repository/src/migrations/v2_01_00/decimal_requisition_quantities.rs b/server/repository/src/migrations/v2_01_00/decimal_requisition_quantities.rs
deleted file mode 100644
index a946c214a..000000000
--- a/server/repository/src/migrations/v2_01_00/decimal_requisition_quantities.rs
+++ /dev/null
@@ -1,57 +0,0 @@
-use crate::migrations::*;
-
-#[cfg(not(feature = "postgres"))]
-pub(crate) fn migrate(connection: &StorageConnection) -> anyhow::Result<()> {
-    sql!(
-        connection,
-        r#"
-        ALTER TABLE requisition_line RENAME COLUMN requested_quantity TO requested_quantity_old;
-        ALTER TABLE requisition_line ADD COLUMN requested_quantity REAL;
-        UPDATE requisition_line SET requested_quantity = requested_quantity_old;
-        ALTER TABLE requisition_line DROP COLUMN requested_quantity_old;
-
-        ALTER TABLE requisition_line RENAME COLUMN suggested_quantity TO suggested_quantity_old;
-        ALTER TABLE requisition_line ADD COLUMN suggested_quantity REAL;
-        UPDATE requisition_line SET suggested_quantity = suggested_quantity_old;
-        ALTER TABLE requisition_line DROP COLUMN suggested_quantity_old;
-
-        ALTER TABLE requisition_line RENAME COLUMN supply_quantity TO supply_quantity_old;
-        ALTER TABLE requisition_line ADD COLUMN supply_quantity REAL;
-        UPDATE requisition_line SET supply_quantity = supply_quantity_old;
-        ALTER TABLE requisition_line DROP COLUMN supply_quantity_old;
-
-        ALTER TABLE requisition_line RENAME COLUMN available_stock_on_hand TO available_stock_on_hand_old;
-        ALTER TABLE requisition_line ADD COLUMN available_stock_on_hand REAL;
-        UPDATE requisition_line SET available_stock_on_hand = available_stock_on_hand_old;
-        ALTER TABLE requisition_line DROP COLUMN available_stock_on_hand_old;
-        
-        ALTER TABLE requisition_line RENAME COLUMN average_monthly_consumption TO average_monthly_consumption_old;
-        ALTER TABLE requisition_line ADD COLUMN average_monthly_consumption REAL;
-        UPDATE requisition_line SET average_monthly_consumption = average_monthly_consumption_old;
-        ALTER TABLE requisition_line DROP COLUMN average_monthly_consumption_old;
-
-        ALTER TABLE requisition_line RENAME COLUMN approved_quantity TO approved_quantity_old;
-        ALTER TABLE requisition_line ADD COLUMN approved_quantity REAL;
-        UPDATE requisition_line SET approved_quantity = approved_quantity_old;
-        ALTER TABLE requisition_line DROP COLUMN approved_quantity_old;
-        "#,
-    )?;
-    Ok(())
-}
-
-#[cfg(feature = "postgres")]
-pub(crate) fn migrate(connection: &StorageConnection) -> anyhow::Result<()> {
-    sql!(
-        connection,
-        r#"
-        ALTER TABLE requisition_line ALTER COLUMN requested_quantity TYPE DOUBLE PRECISION using requested_quantity;
-        ALTER TABLE requisition_line ALTER COLUMN suggested_quantity TYPE DOUBLE PRECISION using suggested_quantity;
-        ALTER TABLE requisition_line ALTER COLUMN supply_quantity TYPE DOUBLE PRECISION using supply_quantity;
-        ALTER TABLE requisition_line ALTER COLUMN available_stock_on_hand TYPE DOUBLE PRECISION using available_stock_on_hand;
-        ALTER TABLE requisition_line ALTER COLUMN average_monthly_consumption TYPE DOUBLE PRECISION using average_monthly_consumption;
-        ALTER TABLE requisition_line ALTER COLUMN approved_quantity TYPE DOUBLE PRECISION using approved_quantity;
-
-        "#,
-    )?;
-    Ok(())
-}
diff --git a/server/repository/src/migrations/v2_01_00/demographics.rs b/server/repository/src/migrations/v2_01_00/demographics.rs
deleted file mode 100644
index 4b69e806e..000000000
--- a/server/repository/src/migrations/v2_01_00/demographics.rs
+++ /dev/null
@@ -1,36 +0,0 @@
-use crate::{
-    migrations::{sql, DOUBLE},
-    StorageConnection,
-};
-
-pub(crate) fn migrate(connection: &StorageConnection) -> anyhow::Result<()> {
-    sql!(
-        connection,
-        r#"
-            CREATE TABLE demographic_indicator (
-                id TEXT NOT NULL PRIMARY KEY,
-                name TEXT NOT NULL,
-                base_year INTEGER NOT NULL,
-                base_population INTEGER,
-                population_percentage {DOUBLE} NOT NULL,
-                year_1_projection INTEGER NOT NULL,
-                year_2_projection INTEGER NOT NULL,
-                year_3_projection INTEGER NOT NULL,
-                year_4_projection INTEGER NOT NULL,
-                year_5_projection INTEGER NOT NULL
-            );
-
-            CREATE TABLE demographic_projection (
-                id TEXT NOT NULL PRIMARY KEY,
-                base_year INTEGER NOT NULL,
-                year_1 INTEGER NOT NULL,
-                year_2 INTEGER NOT NULL,
-                year_3 INTEGER NOT NULL,
-                year_4 INTEGER NOT NULL,
-                year_5 INTEGER NOT NULL
-            );
-        "#
-    )?;
-
-    Ok(())
-}
diff --git a/server/repository/src/migrations/v2_01_00/ledger.rs b/server/repository/src/migrations/v2_01_00/ledger.rs
index eb518fe24..0dda75587 100644
--- a/server/repository/src/migrations/v2_01_00/ledger.rs
+++ b/server/repository/src/migrations/v2_01_00/ledger.rs
@@ -1,25 +1,10 @@
 use crate::migrations::*;
 
-pub(crate) fn drop_ledger_views(connection: &StorageConnection) -> anyhow::Result<()> {
-    sql!(
-        connection,
-        r#"
-        DROP VIEW IF EXISTS consumption;
-        DROP VIEW IF EXISTS stock_movement;
-        DROP VIEW IF EXISTS outbound_shipment_stock_movement;
-        DROP VIEW IF EXISTS inbound_shipment_stock_movement;
-        DROP VIEW IF EXISTS inventory_adjustment_stock_movement;
-        DROP VIEW IF EXISTS invoice_line_stock_movement;
-        "#
-    )?;
-    Ok(())
-}
-
-pub(crate) fn create_ledger_views(connection: &StorageConnection) -> anyhow::Result<()> {
-    let absolute = if cfg!(feature = "postgres") {
-        "@"
+pub(crate) fn migrate(connection: &StorageConnection) -> anyhow::Result<()> {
+    let (casting, absolute) = if cfg!(feature = "postgres") {
+        ("::BIGINT", "@")
     } else {
-        "abs"
+        ("", "abs")
     };
 
     // Drop all these views, then re-create only the required ones:
@@ -32,6 +17,13 @@ pub(crate) fn create_ledger_views(connection: &StorageConnection) -> anyhow::Res
     sql!(
         connection,
         r#"
+    DROP VIEW IF EXISTS consumption;
+    DROP VIEW IF EXISTS stock_movement;
+    DROP VIEW IF EXISTS outbound_shipment_stock_movement;
+    DROP VIEW IF EXISTS inbound_shipment_stock_movement;
+    DROP VIEW IF EXISTS inventory_adjustment_stock_movement;
+    DROP VIEW IF EXISTS invoice_line_stock_movement;
+
     CREATE VIEW invoice_line_stock_movement AS 
             SELECT
                 invoice_line.id,
@@ -57,8 +49,8 @@ pub(crate) fn create_ledger_views(connection: &StorageConnection) -> anyhow::Res
                 invoice_line.return_reason_id,
                 item_link.item_id AS item_id,
                 CASE
-                    WHEN "type" = 'STOCK_IN' THEN (number_of_packs * pack_size)
-                    WHEN "type" = 'STOCK_OUT' THEN (number_of_packs * pack_size) * -1
+                    WHEN "type" = 'STOCK_IN' THEN (number_of_packs * pack_size){casting}
+                    WHEN "type" = 'STOCK_OUT' THEN (number_of_packs * pack_size){casting} * -1
                 END AS quantity_movement
             FROM
                 invoice_line
diff --git a/server/repository/src/migrations/v2_01_00/mod.rs b/server/repository/src/migrations/v2_01_00/mod.rs
index 06355a61c..7799d91c4 100644
--- a/server/repository/src/migrations/v2_01_00/mod.rs
+++ b/server/repository/src/migrations/v2_01_00/mod.rs
@@ -2,18 +2,8 @@ use super::{version::Version, Migration};
 
 use crate::StorageConnection;
 
-mod activity_log;
-mod assets;
-mod decimal_pack_size;
-mod decimal_requisition_quantities;
-mod demographics;
 mod ledger;
-mod name_properties;
 mod pg_enums;
-mod program;
-mod property;
-mod v6_sync_api_error_code;
-mod vaccine_course;
 
 pub(crate) struct V2_01_00;
 
@@ -23,20 +13,8 @@ impl Migration for V2_01_00 {
     }
 
     fn migrate(&self, connection: &StorageConnection) -> anyhow::Result<()> {
-        activity_log::migrate(connection)?;
-        // The ledger is migrated in decimal_pack_size because the same views needed to be
-        // re-created
-        // ledger::migrate(connection)?;
+        ledger::migrate(connection)?;
         pg_enums::migrate(connection)?;
-        decimal_pack_size::migrate(connection)?;
-        decimal_requisition_quantities::migrate(connection)?;
-        assets::migrate_assets(connection)?;
-        v6_sync_api_error_code::migrate(connection)?;
-        property::migrate(connection)?;
-        name_properties::migrate_name_properties(connection)?;
-        demographics::migrate(connection)?;
-        vaccine_course::migrate(connection)?;
-        program::migrate(connection)?;
         Ok(())
     }
 }
diff --git a/server/repository/src/migrations/v2_01_00/name_properties/mod.rs b/server/repository/src/migrations/v2_01_00/name_properties/mod.rs
deleted file mode 100644
index 0c7bd8a04..000000000
--- a/server/repository/src/migrations/v2_01_00/name_properties/mod.rs
+++ /dev/null
@@ -1,13 +0,0 @@
-use crate::{migrations::helpers::run_without_change_log_updates, StorageConnection};
-
-pub mod name_property;
-pub mod name_property_data;
-
-pub(crate) fn migrate_name_properties(connection: &StorageConnection) -> anyhow::Result<()> {
-    run_without_change_log_updates(connection, |connection| {
-        name_property::migrate(connection)?;
-        name_property_data::migrate(connection)?;
-        Ok(())
-    })?;
-    Ok(())
-}
diff --git a/server/repository/src/migrations/v2_01_00/name_properties/name_property.rs b/server/repository/src/migrations/v2_01_00/name_properties/name_property.rs
deleted file mode 100644
index abc3a574b..000000000
--- a/server/repository/src/migrations/v2_01_00/name_properties/name_property.rs
+++ /dev/null
@@ -1,29 +0,0 @@
-use crate::{
-    migrations::{sql, JSON},
-    StorageConnection,
-};
-
-pub(crate) fn migrate(connection: &StorageConnection) -> anyhow::Result<()> {
-    sql!(
-        connection,
-        r#"
-            CREATE TABLE name_property (
-                id TEXT NOT NULL PRIMARY KEY,
-                property_id TEXT NOT NULL REFERENCES property(id)
-            );
-
-            ALTER TABLE name ADD COLUMN properties {JSON};
-        "#
-    )?;
-
-    if cfg!(feature = "postgres") {
-        sql!(
-            connection,
-            r#"
-            ALTER TYPE changelog_table_name ADD VALUE IF NOT EXISTS 'name_property';
-            "#
-        )?;
-    }
-
-    Ok(())
-}
diff --git a/server/repository/src/migrations/v2_01_00/name_properties/name_property_data.rs b/server/repository/src/migrations/v2_01_00/name_properties/name_property_data.rs
deleted file mode 100644
index ad83b0e82..000000000
--- a/server/repository/src/migrations/v2_01_00/name_properties/name_property_data.rs
+++ /dev/null
@@ -1,28 +0,0 @@
-use crate::{migrations::sql, StorageConnection};
-
-pub(crate) fn migrate(connection: &StorageConnection) -> anyhow::Result<()> {
-    // Create the name properties available for GAPS - UI to configure these may come at a later date
-    sql!(
-        connection,
-        r#"
-        INSERT INTO property (id, key, name, value_type, allowed_values) VALUES 
-          ('supply_level', 'supply_level', 'Supply Level', 'STRING', 'Primary,Sub-National,Lowest Distribution,Service Point'),
-          ('facility_type', 'facility_type', 'Facility Type', 'STRING', 'National Vaccine Store,Regional Vaccine Store,Referral Hospital,Municipal Warehouse,Maternal Clinic'),
-          ('ownership_type', 'ownership_type', 'Ownership Type', 'STRING', 'Government,NGO,Private,Faith-based'),
-          ('electricity_availability', 'electricity_availability', 'Electricity Availability', 'STRING', '> 16 hours,8-16 hours,< 8 hours,No availability'),
-          ('solar_availability', 'solar_availability', 'Solar Availability', 'STRING', '> 16 hours,8-16 hours,< 8 hours,No availability'),
-          ('gas_availability', 'gas_availability', 'Gas Availability', 'STRING', '> 16 hours,8-16 hours,< 8 hours,No availability'),
-          ('kerosene_availability', 'kerosene_availability', 'Kerosene Availability', 'STRING', '> 16 hours,8-16 hours,< 8 hours,No availability');
-
-        INSERT INTO name_property (id, property_id) VALUES 
-          ('supply_level', 'supply_level'),
-          ('facility_type', 'facility_type'),
-          ('ownership_type', 'ownership_type'),
-          ('electricity_availability', 'electricity_availability'),
-          ('solar_availability', 'solar_availability'),
-          ('gas_availability', 'gas_availability'),
-          ('kerosene_availability', 'kerosene_availability');
-        "#,
-    )?;
-    Ok(())
-}
diff --git a/server/repository/src/migrations/v2_01_00/program.rs b/server/repository/src/migrations/v2_01_00/program.rs
deleted file mode 100644
index 93f173d5f..000000000
--- a/server/repository/src/migrations/v2_01_00/program.rs
+++ /dev/null
@@ -1,42 +0,0 @@
-use util::constants::IMMUNISATION_CONTEXT_ID;
-
-use crate::{migrations::sql, StorageConnection};
-
-pub(crate) fn migrate(connection: &StorageConnection) -> anyhow::Result<()> {
-    if cfg!(feature = "postgres") {
-        sql!(
-            connection,
-            r#"
-            ALTER TABLE program ALTER COLUMN master_list_id DROP NOT NULL;
-            ALTER TABLE program ADD COLUMN IF NOT EXISTS is_immunisation BOOLEAN NOT NULL DEFAULT false;
-            "#
-        )?;
-    } else {
-        sql!(
-            connection,
-            r#"
-            CREATE TABLE tmp_program (
-                id TEXT NOT NULL PRIMARY KEY,
-                master_list_id TEXT,
-                name TEXT NOT NULL,
-                context_id TEXT NOT NULL REFERENCES context(id),
-                is_immunisation BOOLEAN NOT NULL
-            );
-            INSERT INTO tmp_program SELECT id, master_list_id, name, context_id, false FROM program;
-
-            PRAGMA foreign_keys = OFF;
-            DROP TABLE program;
-            ALTER TABLE tmp_program RENAME TO program;
-            PRAGMA foreign_keys = ON;
-        "#
-        )?;
-    }
-
-    sql!(
-        connection,
-        "INSERT INTO context (id, name) VALUES('{}', 'Immunisation context');",
-        IMMUNISATION_CONTEXT_ID
-    )?;
-
-    Ok(())
-}
diff --git a/server/repository/src/migrations/v2_01_00/property.rs b/server/repository/src/migrations/v2_01_00/property.rs
deleted file mode 100644
index 37d6351c6..000000000
--- a/server/repository/src/migrations/v2_01_00/property.rs
+++ /dev/null
@@ -1,33 +0,0 @@
-use crate::{migrations::sql, StorageConnection};
-
-pub(crate) fn migrate(connection: &StorageConnection) -> anyhow::Result<()> {
-    const PROPERTY_VALUE_TYPE: &str = if cfg!(feature = "postgres") {
-        "property_value_type" // This is created as part of the asset_catalogue_property migration
-    } else {
-        "TEXT"
-    };
-
-    sql!(
-        connection,
-        r#"
-            CREATE TABLE property (
-                id TEXT NOT NULL PRIMARY KEY,
-                key TEXT NOT NULL,
-                name TEXT NOT NULL,
-                value_type {PROPERTY_VALUE_TYPE} NOT NULL,
-                allowed_values TEXT
-            );
-        "#
-    )?;
-
-    if cfg!(feature = "postgres") {
-        sql!(
-            connection,
-            r#"
-            ALTER TYPE changelog_table_name ADD VALUE IF NOT EXISTS 'property';
-            "#
-        )?;
-    }
-
-    Ok(())
-}
diff --git a/server/repository/src/migrations/v2_01_00/v6_sync_api_error_code.rs b/server/repository/src/migrations/v2_01_00/v6_sync_api_error_code.rs
deleted file mode 100644
index b541c1958..000000000
--- a/server/repository/src/migrations/v2_01_00/v6_sync_api_error_code.rs
+++ /dev/null
@@ -1,14 +0,0 @@
-use crate::migrations::*;
-
-pub(crate) fn migrate(connection: &StorageConnection) -> anyhow::Result<()> {
-    if cfg!(feature = "postgres") {
-        sql!(
-            connection,
-            r#"
-            ALTER TYPE sync_api_error_code ADD VALUE IF NOT EXISTS 'V6_API_VERSION_INCOMPATIBLE';
-        "#
-        )?;
-    }
-
-    Ok(())
-}
diff --git a/server/repository/src/migrations/v2_01_00/vaccine_course.rs b/server/repository/src/migrations/v2_01_00/vaccine_course.rs
deleted file mode 100644
index a104c51f0..000000000
--- a/server/repository/src/migrations/v2_01_00/vaccine_course.rs
+++ /dev/null
@@ -1,47 +0,0 @@
-use crate::{migrations::sql, StorageConnection};
-
-pub(crate) fn migrate(connection: &StorageConnection) -> anyhow::Result<()> {
-    // vaccine_course
-    sql!(
-        connection,
-        r#"
-        CREATE TABLE vaccine_course (
-            id TEXT PRIMARY KEY NOT NULL,
-            name TEXT NOT NULL,
-            program_id TEXT NOT NULL REFERENCES program(id),
-            demographic_indicator_id TEXT NOT NULL REFERENCES demographic_indicator(id),
-            coverage_rate FLOAT NOT NULL DEFAULT 100,
-            is_active BOOL NOT NULL DEFAULT true,
-            wastage_rate FLOAT NOT NULL DEFAULT 0,
-            doses INT
-        );
-        "#
-    )?;
-
-    // vaccine_course_item
-    sql!(
-        connection,
-        r#"
-        CREATE TABLE vaccine_course_item (
-            id TEXT PRIMARY KEY NOT NULL,
-            vaccine_course_id TEXT NOT NULL REFERENCES vaccine_course(id),
-            item_link_id TEXT NOT NULL REFERENCES item_link(id)
-        );
-        "#
-    )?;
-
-    // vaccine_course_schedule
-    sql!(
-        connection,
-        r#"
-        CREATE TABLE vaccine_course_schedule (
-            id TEXT PRIMARY KEY NOT NULL,
-            vaccine_course_id TEXT NOT NULL REFERENCES vaccine_course(id),
-            dose_number INT NOT NULL,
-            label INT NOT NULL
-        );
-        "#
-    )?;
-
-    Ok(())
-}
diff --git a/server/repository/src/mock/asset.rs b/server/repository/src/mock/asset.rs
index 7e4beeba8..77be6bc41 100644
--- a/server/repository/src/mock/asset.rs
+++ b/server/repository/src/mock/asset.rs
@@ -29,7 +29,6 @@ pub fn mock_asset_a() -> AssetRow {
         asset_category_id: Some("02cbea92-d5bf-4832-863b-c04e093a7760".to_string()),
         asset_class_id: Some("fad280b6-8384-41af-84cf-c7b6b4526ef0".to_string()),
         asset_type_id: Some("710194ce-8c6c-47ab-b7fe-13ba8cf091f6".to_string()),
-        ..Default::default()
     }
 }
 
@@ -53,7 +52,6 @@ pub fn mock_asset_b() -> AssetRow {
         asset_category_id: Some("b7eea921-5a14-44cc-b5e0-ea59f2e9cb8d".to_string()),
         asset_class_id: Some("fad280b6-8384-41af-84cf-c7b6b4526ef0".to_string()),
         asset_type_id: Some("0b7ac91d-6cfa-49bb-bac2-35e7cb31564b".to_string()),
-        ..Default::default()
     }
 }
 
@@ -73,7 +71,6 @@ pub fn mock_deleted_asset() -> AssetRow {
         asset_category_id: None,
         asset_class_id: None,
         asset_type_id: None,
-        ..Default::default()
     }
 }
 
diff --git a/server/repository/src/mock/barcode.rs b/server/repository/src/mock/barcode.rs
index 26b1b3d52..784f127de 100644
--- a/server/repository/src/mock/barcode.rs
+++ b/server/repository/src/mock/barcode.rs
@@ -6,7 +6,7 @@ pub fn barcode_a() -> BarcodeRow {
         gtin: String::from("0123456789"),
         item_id: String::from("item_a"),
         manufacturer_link_id: Some(String::from("manufacturer_a")),
-        pack_size: Some(1.0),
+        pack_size: Some(1),
         parent_id: None,
     }
 }
@@ -17,7 +17,7 @@ pub fn barcode_b() -> BarcodeRow {
         gtin: String::from("9876543210"),
         item_id: String::from("item_b"),
         manufacturer_link_id: Some(String::from("manufacturer_a")),
-        pack_size: Some(1.0),
+        pack_size: Some(1),
         parent_id: None,
     }
 }
diff --git a/server/repository/src/mock/context.rs b/server/repository/src/mock/context.rs
index abe85fff0..ce4b29581 100644
--- a/server/repository/src/mock/context.rs
+++ b/server/repository/src/mock/context.rs
@@ -7,13 +7,6 @@ pub fn context_program_a() -> ContextRow {
     }
 }
 
-pub fn context_immunisation_program() -> ContextRow {
-    ContextRow {
-        id: "immunisation_program".to_string(),
-        name: "Context for immunisation_program".to_string(),
-    }
-}
-
 pub fn mock_contexts() -> Vec<ContextRow> {
-    vec![context_program_a(), context_immunisation_program()]
+    vec![context_program_a()]
 }
diff --git a/server/repository/src/mock/demographic.rs b/server/repository/src/mock/demographic.rs
deleted file mode 100644
index 01869613c..000000000
--- a/server/repository/src/mock/demographic.rs
+++ /dev/null
@@ -1,20 +0,0 @@
-use crate::DemographicIndicatorRow;
-
-pub fn mock_demographic_indicator_a() -> DemographicIndicatorRow {
-    DemographicIndicatorRow {
-        id: "demographic_1".to_owned(),
-        name: "demographic_1".to_owned(),
-        base_year: 2024,
-        base_population: 100,
-        population_percentage: 100.0,
-        year_1_projection: 101,
-        year_2_projection: 102,
-        year_3_projection: 103,
-        year_4_projection: 104,
-        year_5_projection: 105,
-    }
-}
-
-pub fn mock_demographic_indicators() -> Vec<DemographicIndicatorRow> {
-    vec![mock_demographic_indicator_a()]
-}
diff --git a/server/repository/src/mock/full_invoice.rs b/server/repository/src/mock/full_invoice.rs
index 16a2263bc..2527c0f7f 100644
--- a/server/repository/src/mock/full_invoice.rs
+++ b/server/repository/src/mock/full_invoice.rs
@@ -38,7 +38,7 @@ pub fn mock_full_draft_outbound_shipment_a() -> FullMockInvoice {
                     r.item_link_id = String::from("item_a");
                     r.item_name = String::from("Item A");
                     r.item_code = String::from("item_a_code");
-                    r.pack_size = 4.0;
+                    r.pack_size = 4;
                     r.cost_price_per_pack = 43.0;
                     r.sell_price_per_pack = 32.0;
                     r.total_before_tax = 278.26;
@@ -52,7 +52,7 @@ pub fn mock_full_draft_outbound_shipment_a() -> FullMockInvoice {
                     r.item_link_id = String::from("item_a");
                     r.store_id = String::from("store_c");
                     r.available_number_of_packs = 20.0;
-                    r.pack_size = 4.0;
+                    r.pack_size = 4;
                     r.cost_price_per_pack = 43.0;
                     r.sell_price_per_pack = 32.0;
                     r.total_number_of_packs = 30.0;
@@ -66,7 +66,7 @@ pub fn mock_full_draft_outbound_shipment_a() -> FullMockInvoice {
                     r.item_link_id = String::from("item_a");
                     r.item_name = String::from("Item A");
                     r.item_code = String::from("item_a_code");
-                    r.pack_size = 2.0;
+                    r.pack_size = 2;
                     r.cost_price_per_pack = 41.0;
                     r.sell_price_per_pack = 21.0;
                     r.total_before_tax = 210.0;
@@ -79,7 +79,7 @@ pub fn mock_full_draft_outbound_shipment_a() -> FullMockInvoice {
                     r.item_link_id = String::from("item_a");
                     r.store_id = String::from("store_c");
                     r.available_number_of_packs = 10.0;
-                    r.pack_size = 2.0;
+                    r.pack_size = 2;
                     r.cost_price_per_pack = 41.0;
                     r.sell_price_per_pack = 21.0;
                     r.total_number_of_packs = 12.0;
diff --git a/server/repository/src/mock/invoice.rs b/server/repository/src/mock/invoice.rs
index 627432bfb..746cbd2ea 100644
--- a/server/repository/src/mock/invoice.rs
+++ b/server/repository/src/mock/invoice.rs
@@ -246,9 +246,6 @@ pub fn mock_inbound_shipment_a() -> InvoiceRow {
             .unwrap()
             .and_hms_milli_opt(20, 30, 0, 0)
             .unwrap();
-        r.delivered_datetime = NaiveDate::from_ymd_opt(1970, 1, 3)
-            .unwrap()
-            .and_hms_milli_opt(21, 30, 0, 0);
     })
 }
 
@@ -375,7 +372,7 @@ pub fn mock_outbound_shipment_line_a() -> InvoiceLineRow {
         r.item_link_id = String::from("item_a");
         r.item_name = String::from("Item A");
         r.item_code = String::from("a");
-        r.pack_size = 1.0;
+        r.pack_size = 1;
         r.cost_price_per_pack = 0.0;
         r.sell_price_per_pack = 0.0;
         r.total_before_tax = 0.0;
diff --git a/server/repository/src/mock/invoice_line.rs b/server/repository/src/mock/invoice_line.rs
index ea88de8d0..a01bf7d5f 100644
--- a/server/repository/src/mock/invoice_line.rs
+++ b/server/repository/src/mock/invoice_line.rs
@@ -20,7 +20,7 @@ pub fn mock_outbound_shipment_a_invoice_lines() -> Vec<InvoiceLineRow> {
         stock_line_id: Some(String::from("item_a_line_a")),
         batch: Some(String::from("item_a_line_a")),
         expiry_date: Some(NaiveDate::from_ymd_opt(2020, 8, 1).unwrap()),
-        pack_size: 1.0,
+        pack_size: 1,
         cost_price_per_pack: 0.0,
         sell_price_per_pack: 0.0,
         total_before_tax: 0.87,
@@ -44,7 +44,7 @@ pub fn mock_outbound_shipment_a_invoice_lines() -> Vec<InvoiceLineRow> {
         stock_line_id: Some(String::from("item_b_line_a")),
         batch: Some(String::from("item_a_line_a")),
         expiry_date: Some(NaiveDate::from_ymd_opt(2020, 8, 2).unwrap()),
-        pack_size: 1.0,
+        pack_size: 1,
         cost_price_per_pack: 0.0,
         sell_price_per_pack: 0.0,
         total_before_tax: 1.74,
@@ -75,7 +75,7 @@ pub fn mock_outbound_shipment_b_invoice_lines() -> Vec<InvoiceLineRow> {
         stock_line_id: Some(String::from("item_a_line_a")),
         batch: Some(String::from("item_a_line_a")),
         expiry_date: Some(NaiveDate::from_ymd_opt(2020, 8, 3).unwrap()),
-        pack_size: 1.0,
+        pack_size: 1,
         cost_price_per_pack: 0.0,
         sell_price_per_pack: 0.0,
         total_before_tax: 3.0,
@@ -99,7 +99,7 @@ pub fn mock_outbound_shipment_b_invoice_lines() -> Vec<InvoiceLineRow> {
         stock_line_id: Some(String::from("item_b_line_a")),
         batch: Some(String::from("item_a_line_a")),
         expiry_date: Some(NaiveDate::from_ymd_opt(2020, 8, 4).unwrap()),
-        pack_size: 1.0,
+        pack_size: 1,
         cost_price_per_pack: 0.0,
         sell_price_per_pack: 0.0,
         total_before_tax: 4.0,
@@ -130,7 +130,7 @@ pub fn mock_outbound_shipment_c_invoice_lines() -> Vec<InvoiceLineRow> {
         stock_line_id: Some(String::from("stock_line_ci_c_siline_a")),
         batch: Some(String::from("item_a_ci_c_siline_a")),
         expiry_date: Some(NaiveDate::from_ymd_opt(2020, 1, 4).unwrap()),
-        pack_size: 3.0,
+        pack_size: 3,
         cost_price_per_pack: 8.0,
         sell_price_per_pack: 9.0,
         total_before_tax: 27.0,
@@ -154,7 +154,7 @@ pub fn mock_outbound_shipment_c_invoice_lines() -> Vec<InvoiceLineRow> {
         stock_line_id: Some(String::from("stock_line_ci_c_siline_b")),
         batch: None,
         expiry_date: Some(NaiveDate::from_ymd_opt(2020, 3, 23).unwrap()),
-        pack_size: 7.0,
+        pack_size: 7,
         cost_price_per_pack: 54.0,
         sell_price_per_pack: 34.0,
         total_before_tax: 34.0,
@@ -185,7 +185,7 @@ pub fn mock_outbound_shipment_d_invoice_lines() -> Vec<InvoiceLineRow> {
         stock_line_id: Some(String::from("stock_line_ci_d_siline_a")),
         batch: Some(String::from("stock_line_ci_d_siline_a")),
         expiry_date: Some(NaiveDate::from_ymd_opt(2020, 1, 4).unwrap()),
-        pack_size: 2.0,
+        pack_size: 2,
         cost_price_per_pack: 10.0,
         sell_price_per_pack: 11.0,
         total_before_tax: 22.0,
@@ -213,7 +213,7 @@ pub fn mock_outbound_shipment_no_stock_line() -> Vec<InvoiceLineRow> {
         stock_line_id: None,
         batch: None,
         expiry_date: Some(NaiveDate::from_ymd_opt(2020, 1, 4).unwrap()),
-        pack_size: 2.0,
+        pack_size: 2,
         cost_price_per_pack: 10.0,
         sell_price_per_pack: 11.0,
         total_before_tax: 22.0,
@@ -241,7 +241,7 @@ pub fn mock_inbound_shipment_a_invoice_lines() -> Vec<InvoiceLineRow> {
         stock_line_id: Some(String::from("item_a_line_a")),
         batch: Some(String::from("item_a_line_a")),
         expiry_date: Some(NaiveDate::from_ymd_opt(2020, 8, 5).unwrap()),
-        pack_size: 1.0,
+        pack_size: 1,
         cost_price_per_pack: 0.0,
         sell_price_per_pack: 0.0,
         total_before_tax: 5.0,
@@ -265,7 +265,7 @@ pub fn mock_inbound_shipment_a_invoice_lines() -> Vec<InvoiceLineRow> {
         stock_line_id: Some(String::from("item_b_line_a")),
         batch: Some(String::from("item_a_line_a")),
         expiry_date: Some(NaiveDate::from_ymd_opt(2020, 8, 6).unwrap()),
-        pack_size: 1.0,
+        pack_size: 1,
         cost_price_per_pack: 0.0,
         sell_price_per_pack: 0.0,
         total_before_tax: 6.0,
@@ -296,7 +296,7 @@ pub fn mock_inbound_shipment_b_invoice_lines() -> Vec<InvoiceLineRow> {
         stock_line_id: Some(String::from("item_a_line_a")),
         batch: Some(String::from("item_a_line_a")),
         expiry_date: Some(NaiveDate::from_ymd_opt(2020, 8, 7).unwrap()),
-        pack_size: 1.0,
+        pack_size: 1,
         cost_price_per_pack: 0.0,
         sell_price_per_pack: 0.0,
         total_before_tax: 7.0,
@@ -320,7 +320,7 @@ pub fn mock_inbound_shipment_b_invoice_lines() -> Vec<InvoiceLineRow> {
         stock_line_id: Some(String::from("item_b_line_a")),
         batch: Some(String::from("item_a_line_a")),
         expiry_date: Some(NaiveDate::from_ymd_opt(2020, 8, 8).unwrap()),
-        pack_size: 1.0,
+        pack_size: 1,
         cost_price_per_pack: 0.0,
         sell_price_per_pack: 0.0,
         total_before_tax: 8.0,
@@ -351,7 +351,7 @@ pub fn mock_inbound_shipment_c_invoice_lines() -> Vec<InvoiceLineRow> {
         stock_line_id: None,
         batch: Some(String::from("item_a_si_c_siline_a")),
         expiry_date: None,
-        pack_size: 1.0,
+        pack_size: 1,
         cost_price_per_pack: 7.0,
         sell_price_per_pack: 5.0,
         total_before_tax: 21.0,
@@ -375,7 +375,7 @@ pub fn mock_inbound_shipment_c_invoice_lines() -> Vec<InvoiceLineRow> {
         stock_line_id: None,
         batch: Some(String::from("item_b_si_c_siline_b")),
         expiry_date: Some(NaiveDate::from_ymd_opt(2020, 8, 8).unwrap()),
-        pack_size: 1.0,
+        pack_size: 1,
         cost_price_per_pack: 4.0,
         sell_price_per_pack: 2.0,
         total_before_tax: 8.0,
@@ -399,7 +399,7 @@ pub fn mock_inbound_shipment_c_invoice_lines() -> Vec<InvoiceLineRow> {
         stock_line_id: None,
         batch: Some(String::from("item_g_si_c_siline_g")),
         expiry_date: None,
-        pack_size: 1.0,
+        pack_size: 1,
         cost_price_per_pack: 4.0,
         sell_price_per_pack: 2.0,
         total_before_tax: 8.0,
@@ -431,7 +431,7 @@ pub fn mock_inbound_shipment_d_invoice_lines() -> Vec<InvoiceLineRow> {
         stock_line_id: Some(String::from("stock_line_si_d_siline_a")),
         batch: Some(String::from("item_a_si_d_siline_a")),
         expiry_date: None,
-        pack_size: 1.0,
+        pack_size: 1,
         cost_price_per_pack: 2.0,
         sell_price_per_pack: 18.0,
         total_before_tax: 14.0,
@@ -455,7 +455,7 @@ pub fn mock_inbound_shipment_d_invoice_lines() -> Vec<InvoiceLineRow> {
         stock_line_id: Some(String::from("stock_line_si_d_siline_b")),
         batch: Some(String::from("item_b_si_c_siline_d")),
         expiry_date: Some(NaiveDate::from_ymd_opt(2020, 8, 11).unwrap()),
-        pack_size: 3.0,
+        pack_size: 3,
         cost_price_per_pack: 45.0,
         sell_price_per_pack: 34.0,
         total_before_tax: 270.0,
@@ -484,7 +484,7 @@ pub fn mock_prescription_a_invoice_line_a() -> InvoiceLineRow {
         l.item_name = "Item A".to_string();
         l.stock_line_id = Some(mock_stock_line_si_d()[0].id.clone());
         l.batch = mock_stock_line_si_d()[0].batch.clone();
-        l.pack_size = 1.0;
+        l.pack_size = 1;
         l.cost_price_per_pack = 2.0;
         l.sell_price_per_pack = 18.0;
         l.number_of_packs = 5.0;
@@ -501,7 +501,7 @@ pub fn mock_prescription_a_invoice_line_b() -> InvoiceLineRow {
         l.item_link_id = "item_b".to_string();
         l.item_code = "item_b_code".to_string();
         l.stock_line_id = Some("stock_line_si_d_siline_b".to_string());
-        l.pack_size = 1.0;
+        l.pack_size = 1;
         l.cost_price_per_pack = 3.0;
         l.sell_price_per_pack = 5.0;
         l.number_of_packs = 10.0;
diff --git a/server/repository/src/mock/item.rs b/server/repository/src/mock/item.rs
index 13bbadd1c..3fc589ce3 100644
--- a/server/repository/src/mock/item.rs
+++ b/server/repository/src/mock/item.rs
@@ -61,7 +61,7 @@ pub fn mock_item_f() -> ItemRow {
         r.name = id.clone();
         r.code = id.clone();
         r.r#type = ItemType::Stock;
-        r.default_pack_size = 1.0;
+        r.default_pack_size = 1;
     })
 }
 
@@ -72,7 +72,7 @@ pub fn mock_item_g() -> ItemRow {
         r.name = id.clone();
         r.code = id.clone();
         r.r#type = ItemType::Stock;
-        r.default_pack_size = 1.0;
+        r.default_pack_size = 1;
     })
 }
 
@@ -91,7 +91,7 @@ pub fn item_query_test2() -> ItemRow {
         r.name = String::from("name_item_query_test2");
         r.code = String::from("code_item_query_test2");
         r.unit_id = Some("item_query_test2".to_owned());
-        r.default_pack_size = 1.0;
+        r.default_pack_size = 1;
         r.r#type = ItemType::Stock;
     })
 }
diff --git a/server/repository/src/mock/mod.rs b/server/repository/src/mock/mod.rs
index 277a2d68e..a104da276 100644
--- a/server/repository/src/mock/mod.rs
+++ b/server/repository/src/mock/mod.rs
@@ -8,7 +8,6 @@ mod clinician;
 pub mod common;
 mod context;
 mod currency;
-mod demographic;
 mod document;
 mod document_registry;
 mod form_schema;
@@ -62,7 +61,6 @@ pub use clinician::*;
 use common::*;
 pub use context::*;
 pub use currency::*;
-pub use demographic::*;
 pub use document::*;
 pub use document_registry::*;
 pub use form_schema::*;
@@ -113,7 +111,7 @@ use crate::{
     },
     ActivityLogRow, ActivityLogRowRepository, BarcodeRow, BarcodeRowRepository, ClinicianRow,
     ClinicianRowRepository, ClinicianStoreJoinRow, ClinicianStoreJoinRowRepository, ContextRow,
-    ContextRowRepository, CurrencyRow, DemographicIndicatorRow, Document, DocumentRegistryRow,
+    ContextRowRepository, CurrencyRow, Document, DocumentRegistryRow,
     DocumentRegistryRowRepository, DocumentRepository, FormSchema, FormSchemaRowRepository,
     InventoryAdjustmentReasonRow, InventoryAdjustmentReasonRowRepository, InvoiceLineRow,
     InvoiceLineRowRepository, InvoiceRow, ItemLinkRowRepository, ItemRow, KeyValueStoreRepository,
@@ -196,7 +194,6 @@ pub struct MockData {
     pub plugin_data: Vec<PluginDataRow>,
     pub assets: Vec<AssetRow>,
     pub asset_logs: Vec<AssetLogRow>,
-    pub demographic_indicators: Vec<DemographicIndicatorRow>,
 }
 
 impl MockData {
@@ -263,7 +260,6 @@ pub struct MockDataInserts {
     pub plugin_data: bool,
     pub assets: bool,
     pub asset_logs: bool,
-    pub demographic_indicators: bool,
 }
 
 impl MockDataInserts {
@@ -319,7 +315,6 @@ impl MockDataInserts {
             plugin_data: true,
             assets: true,
             asset_logs: true,
-            demographic_indicators: true,
         }
     }
 
@@ -562,11 +557,6 @@ impl MockDataInserts {
         self.asset_logs = true;
         self
     }
-
-    pub fn demographic_indicators(mut self) -> Self {
-        self.demographic_indicators = true;
-        self
-    }
 }
 
 #[derive(Default)]
@@ -643,7 +633,6 @@ pub(crate) fn all_mock_data() -> MockDataCollection {
             clinicians: mock_clinicians(),
             assets: mock_assets(),
             asset_logs: mock_asset_logs(),
-            demographic_indicators: mock_demographic_indicators(),
             ..Default::default()
         },
     );
@@ -1064,13 +1053,6 @@ pub fn insert_mock_data(
                 repo.upsert_one(row).unwrap();
             }
         }
-
-        if inserts.demographic_indicators {
-            let repo = crate::DemographicIndicatorRowRepository::new(connection);
-            for row in &mock_data.demographic_indicators {
-                repo.upsert_one(row).unwrap();
-            }
-        }
     }
     mock_data
 }
@@ -1130,7 +1112,6 @@ impl MockData {
             mut asset_logs,
             plugin_data: _,
             mut currencies,
-            mut demographic_indicators,
         } = other;
 
         self.user_accounts.append(&mut user_accounts);
@@ -1186,8 +1167,7 @@ impl MockData {
         self.currencies.append(&mut currencies);
         self.assets.append(&mut assets);
         self.asset_logs.append(&mut asset_logs);
-        self.demographic_indicators
-            .append(&mut demographic_indicators);
+
         self
     }
 }
diff --git a/server/repository/src/mock/pack_variant.rs b/server/repository/src/mock/pack_variant.rs
index 4874a377d..c26138529 100644
--- a/server/repository/src/mock/pack_variant.rs
+++ b/server/repository/src/mock/pack_variant.rs
@@ -8,7 +8,7 @@ pub fn mock_item_a_variant_a() -> PackVariantRow {
         item_id: mock_item_a().id,
         short_name: "tab".to_string(),
         long_name: "tablet".to_string(),
-        pack_size: 1.0,
+        pack_size: 1,
         is_active: true,
     }
 }
@@ -19,7 +19,7 @@ pub fn mock_item_a_variant_b() -> PackVariantRow {
         item_id: mock_item_a().id,
         short_name: "blist of 2 tabs".to_string(),
         long_name: "blister of 2 tablets".to_string(),
-        pack_size: 2.0,
+        pack_size: 2,
         is_active: true,
     }
 }
@@ -30,7 +30,7 @@ pub fn mock_item_a_variant_c() -> PackVariantRow {
         item_id: mock_item_a().id,
         short_name: "blist of 3 tabs".to_string(),
         long_name: "blister of 3 tablets".to_string(),
-        pack_size: 3.0,
+        pack_size: 3,
         is_active: true,
     }
 }
@@ -41,7 +41,7 @@ pub fn mock_item_a_variant_d() -> PackVariantRow {
         item_id: mock_item_a().id,
         short_name: "blist of 4 tabs".to_string(),
         long_name: "blister of 4 tablets".to_string(),
-        pack_size: 4.0,
+        pack_size: 4,
         is_active: true,
     }
 }
@@ -52,7 +52,7 @@ pub fn mock_item_b_variant_a() -> PackVariantRow {
         item_id: "item_b".to_string(),
         short_name: "tab".to_string(),
         long_name: "tablet".to_string(),
-        pack_size: 1.0,
+        pack_size: 1,
         is_active: true,
     }
 }
@@ -63,7 +63,7 @@ pub fn mock_item_b_variant_b() -> PackVariantRow {
         item_id: "item_b".to_string(),
         short_name: "blist of 3 tabs".to_string(),
         long_name: "blister of 3 tablets".to_string(),
-        pack_size: 3.0,
+        pack_size: 3,
         is_active: true,
     }
 }
@@ -74,7 +74,7 @@ pub fn mock_item_b_variant_c() -> PackVariantRow {
         item_id: "item_b".to_string(),
         short_name: "blist of 4 tabs".to_string(),
         long_name: "blister of 4 tablets".to_string(),
-        pack_size: 4.0,
+        pack_size: 4,
         is_active: true,
     }
 }
@@ -85,7 +85,7 @@ pub fn mock_item_b_variant_d() -> PackVariantRow {
         item_id: "item_b".to_string(),
         short_name: "blist of 7 tabs".to_string(),
         long_name: "blister of 7 tablets".to_string(),
-        pack_size: 7.0,
+        pack_size: 7,
         is_active: true,
     }
 }
diff --git a/server/repository/src/mock/program.rs b/server/repository/src/mock/program.rs
index 5aea651fa..1107ca265 100644
--- a/server/repository/src/mock/program.rs
+++ b/server/repository/src/mock/program.rs
@@ -1,27 +1,16 @@
 use crate::ProgramRow;
 
-use super::{context_immunisation_program, context_program_a, mock_master_list_program};
+use super::mock_master_list_program;
 
 pub fn mock_program_a() -> ProgramRow {
     ProgramRow {
         id: "program_a".to_string(),
-        master_list_id: Some(mock_master_list_program().master_list.id),
+        master_list_id: mock_master_list_program().master_list.id,
         name: "program_a".to_string(),
-        context_id: context_program_a().id,
-        is_immunisation: false,
-    }
-}
-
-pub fn mock_immunisation_program() -> ProgramRow {
-    ProgramRow {
-        id: "immunisation_program".to_string(),
-        master_list_id: None,
-        name: "immunisation_program".to_string(),
-        context_id: context_immunisation_program().id,
-        is_immunisation: true,
+        context_id: "program_a".to_string(),
     }
 }
 
 pub fn mock_programs() -> Vec<ProgramRow> {
-    vec![mock_program_a(), mock_immunisation_program()]
+    vec![mock_program_a()]
 }
diff --git a/server/repository/src/mock/stock_line.rs b/server/repository/src/mock/stock_line.rs
index d0b6acd87..c4b2144ed 100644
--- a/server/repository/src/mock/stock_line.rs
+++ b/server/repository/src/mock/stock_line.rs
@@ -9,7 +9,7 @@ pub fn mock_stock_line_a() -> StockLineRow {
         r.item_link_id = String::from("item_a");
         r.store_id = String::from("store_a");
         r.available_number_of_packs = 30.0;
-        r.pack_size = 1.0;
+        r.pack_size = 1;
         r.total_number_of_packs = 40.0;
         r.supplier_link_id = Some(String::from("name_store_b"));
     })
@@ -22,7 +22,7 @@ pub fn mock_stock_line_b() -> StockLineRow {
         r.store_id = String::from("store_a");
         r.batch = Some(String::from("item_a_batch_b"));
         r.available_number_of_packs = 20.0;
-        r.pack_size = 1.0;
+        r.pack_size = 1;
         r.total_number_of_packs = 30.0;
         r.supplier_link_id = Some(String::from("name_store_b"));
     })
@@ -43,7 +43,7 @@ pub fn mock_item_b_lines() -> Vec<StockLineRow> {
         r.store_id = String::from("store_b");
         r.batch = Some(String::from("item_b_batch_a"));
         r.available_number_of_packs = 3.0;
-        r.pack_size = 1.0;
+        r.pack_size = 1;
         r.total_number_of_packs = 30.0;
         r.supplier_link_id = Some(String::from("name_store_b"));
     });
@@ -54,7 +54,7 @@ pub fn mock_item_b_lines() -> Vec<StockLineRow> {
         r.store_id = String::from("store_b");
         r.batch = Some(String::from("item_b_batch_b"));
         r.available_number_of_packs = 4.0;
-        r.pack_size = 1.0;
+        r.pack_size = 1;
         r.total_number_of_packs = 25.0;
         r.supplier_link_id = Some(String::from("name_store_b"));
     });
@@ -69,7 +69,7 @@ pub fn mock_item_c_lines() -> Vec<StockLineRow> {
         r.store_id = String::from("store_c");
         r.batch = Some(String::from("item_c_batch_a"));
         r.available_number_of_packs = 5.0;
-        r.pack_size = 1.0;
+        r.pack_size = 1;
         r.cost_price_per_pack = 12.0;
         r.sell_price_per_pack = 15.0;
         r.total_number_of_packs = 1.0;
@@ -83,7 +83,7 @@ pub fn mock_item_c_lines() -> Vec<StockLineRow> {
         r.store_id = String::from("store_c");
         r.batch = Some(String::from("item_c_batch_b"));
         r.available_number_of_packs = 6.0;
-        r.pack_size = 1.0;
+        r.pack_size = 1;
         r.total_number_of_packs = 1.0;
         r.supplier_link_id = Some(String::from("name_store_b"));
     });
@@ -98,7 +98,7 @@ pub fn mock_stock_line_si_d() -> Vec<StockLineRow> {
         r.store_id = String::from("store_a");
         r.batch = Some(String::from("item_a_si_d_siline_a"));
         r.available_number_of_packs = 7.0;
-        r.pack_size = 1.0;
+        r.pack_size = 1;
         r.cost_price_per_pack = 2.0;
         r.sell_price_per_pack = 18.0;
         r.total_number_of_packs = 7.0;
@@ -111,7 +111,7 @@ pub fn mock_stock_line_si_d() -> Vec<StockLineRow> {
         r.store_id = String::from("store_a");
         r.batch = Some(String::from("item_b_si_c_siline_d"));
         r.available_number_of_packs = 2.0;
-        r.pack_size = 3.0;
+        r.pack_size = 3;
         r.cost_price_per_pack = 45.0;
         r.sell_price_per_pack = 34.0;
         r.total_number_of_packs = 2.0;
@@ -129,7 +129,7 @@ pub fn mock_stock_line_ci_c() -> Vec<StockLineRow> {
         r.store_id = String::from("store_a");
         r.batch = Some(String::from("item_a_ci_c_siline_a"));
         r.available_number_of_packs = 5.0;
-        r.pack_size = 3.0;
+        r.pack_size = 3;
         r.cost_price_per_pack = 8.0;
         r.sell_price_per_pack = 9.0;
         r.total_number_of_packs = 8.0;
@@ -142,7 +142,7 @@ pub fn mock_stock_line_ci_c() -> Vec<StockLineRow> {
         r.item_link_id = String::from("item_b");
         r.store_id = String::from("store_a");
         r.available_number_of_packs = 20.0;
-        r.pack_size = 7.0;
+        r.pack_size = 7;
         r.cost_price_per_pack = 54.0;
         r.sell_price_per_pack = 34.0;
         r.total_number_of_packs = 21.0;
@@ -160,7 +160,7 @@ pub fn mock_stock_line_ci_d() -> Vec<StockLineRow> {
         r.store_id = String::from("store_a");
         r.batch = Some(String::from("item_a_ci_d_siline_a"));
         r.available_number_of_packs = 10.0;
-        r.pack_size = 1.0;
+        r.pack_size = 1;
         r.cost_price_per_pack = 10.0;
         r.sell_price_per_pack = 11.0;
         r.total_number_of_packs = 10.0;
@@ -177,7 +177,7 @@ pub fn mock_item_query_test1() -> Vec<StockLineRow> {
         r.item_link_id = "item_query_test1".to_owned();
         r.store_id = "store_a".to_owned();
         r.available_number_of_packs = 3.0;
-        r.pack_size = 12.0;
+        r.pack_size = 12;
         r.cost_price_per_pack = 2.0;
         r.sell_price_per_pack = 11.0;
         r.total_number_of_packs = 3.0;
@@ -193,7 +193,7 @@ pub fn mock_stock_line_on_hold() -> Vec<StockLineRow> {
         r.item_link_id = "item_c".to_owned();
         r.store_id = "store_a".to_owned();
         r.available_number_of_packs = 100.0;
-        r.pack_size = 1.0;
+        r.pack_size = 1;
         r.total_number_of_packs = 100.0;
         r.on_hold = true;
         r.supplier_link_id = Some(String::from("name_store_b"));
@@ -209,7 +209,7 @@ pub fn mock_stock_line_location_is_on_hold() -> Vec<StockLineRow> {
         r.location_id = Some("location_on_hold".to_owned());
         r.store_id = "store_a".to_owned();
         r.available_number_of_packs = 100.0;
-        r.pack_size = 1.0;
+        r.pack_size = 1;
         r.total_number_of_packs = 100.0;
         r.supplier_link_id = Some(String::from("name_store_b"));
     });
diff --git a/server/repository/src/mock/test_item_stats.rs b/server/repository/src/mock/test_item_stats.rs
index fc4173186..25f86bef0 100644
--- a/server/repository/src/mock/test_item_stats.rs
+++ b/server/repository/src/mock/test_item_stats.rs
@@ -25,14 +25,14 @@ fn consumption_points() -> MockData {
                 r.invoice_id = invoice_id.clone();
                 r.item_link_id = item().id;
                 r.r#type = InvoiceLineType::StockOut;
-                r.pack_size = 1.0;
+                r.pack_size = 1;
             }),
             inline_init(|r: &mut InvoiceLineRow| {
                 r.id = format!("{}line2", invoice_id);
                 r.invoice_id = invoice_id.clone();
                 r.item_link_id = item2().id;
                 r.r#type = InvoiceLineType::StockOut;
-                r.pack_size = 1.0;
+                r.pack_size = 1;
             }),
         ];
     })
@@ -52,7 +52,7 @@ pub fn mock_item_stats() -> MockData {
     .join(inline_edit(&consumption_points(), |mut u| {
         u.invoices[0].picked_datetime = Some(Utc::now().naive_utc() - Duration::days(3));
         u.invoice_lines[ITEM1_INDEX].number_of_packs = 5.0;
-        u.invoice_lines[ITEM1_INDEX].pack_size = 3.0;
+        u.invoice_lines[ITEM1_INDEX].pack_size = 3;
         // Don't want item2 invoice line for 1 month calculation
         u.invoice_lines.remove(ITEM2_INDEX);
         u
@@ -86,7 +86,7 @@ pub fn item1_amc_3_months() -> f64 {
 }
 
 pub fn item2_amc_3_months() -> f64 {
-    30.0 / 3.0
+    (30) as f64 / 3.0
 }
 
 pub fn item1_amc_1_months() -> f64 {
@@ -113,7 +113,7 @@ pub fn stock_line1() -> StockLineRow {
         r.id = id.clone();
         r.item_link_id = item().id;
         r.store_id = mock_store_a().id;
-        r.pack_size = 10.0;
+        r.pack_size = 10;
         r.available_number_of_packs = 1.0;
         r.total_number_of_packs = 40.0;
         r.supplier_link_id = Some(String::from("name_store_b"));
@@ -127,7 +127,7 @@ pub fn stock_line2() -> StockLineRow {
         r.item_link_id = item().id;
         r.store_id = mock_store_a().id;
         r.available_number_of_packs = 20.0;
-        r.pack_size = 10.0;
+        r.pack_size = 10;
         r.total_number_of_packs = 40.0;
         r.supplier_link_id = Some(String::from("name_store_b"));
     })
@@ -140,14 +140,14 @@ pub fn stock_line3() -> StockLineRow {
         r.item_link_id = item().id;
         r.store_id = mock_store_a().id;
         r.available_number_of_packs = 10.0;
-        r.pack_size = 1.0;
+        r.pack_size = 1;
         r.total_number_of_packs = 40.0;
         r.supplier_link_id = Some(String::from("name_store_b"));
     })
 }
 
-pub fn item_1_soh() -> f64 {
-    10.0 + 20.0 * 10.0 + 10.0
+pub fn item_1_soh() -> u32 {
+    10 + 20 * 10 + 10
 }
 
 pub fn stock_line_1_store_b() -> StockLineRow {
@@ -157,14 +157,14 @@ pub fn stock_line_1_store_b() -> StockLineRow {
         r.item_link_id = item().id;
         r.store_id = mock_store_b().id;
         r.available_number_of_packs = 1.0;
-        r.pack_size = 10.0;
+        r.pack_size = 10;
         r.total_number_of_packs = 40.0;
         r.supplier_link_id = Some(String::from("name_store_b"));
     })
 }
 
-pub fn item_1_store_b_soh() -> f64 {
-    10.0
+pub fn item_1_store_b_soh() -> u32 {
+    10
 }
 
 pub fn item2() -> ItemRow {
@@ -184,12 +184,12 @@ pub fn stock_line1_item2() -> StockLineRow {
         r.item_link_id = item2().id;
         r.store_id = mock_store_a().id;
         r.available_number_of_packs = 11.0;
-        r.pack_size = 2.0;
+        r.pack_size = 2;
         r.total_number_of_packs = 40.0;
         r.supplier_link_id = Some(String::from("name_store_b"));
     })
 }
 
-pub fn item_2_soh() -> f64 {
-    2.0 * 11.0
+pub fn item_2_soh() -> u32 {
+    2 * 11
 }
diff --git a/server/repository/src/mock/test_outbound_shipment_update.rs b/server/repository/src/mock/test_outbound_shipment_update.rs
index 02fba9a5b..142051367 100644
--- a/server/repository/src/mock/test_outbound_shipment_update.rs
+++ b/server/repository/src/mock/test_outbound_shipment_update.rs
@@ -18,7 +18,7 @@ fn mock_outbound_shipment_line_no_stock_line() -> InvoiceLineRow {
         stock_line_id: None,
         batch: Some(String::from("item_a_line_a")),
         expiry_date: Some(NaiveDate::from_ymd_opt(2020, 8, 2).unwrap()),
-        pack_size: 1.0,
+        pack_size: 1,
         cost_price_per_pack: 0.0,
         sell_price_per_pack: 0.0,
         total_before_tax: 2.0,
diff --git a/server/repository/src/mock/test_remaining_to_supply.rs b/server/repository/src/mock/test_remaining_to_supply.rs
index 3b0015ee4..b03c015eb 100644
--- a/server/repository/src/mock/test_remaining_to_supply.rs
+++ b/server/repository/src/mock/test_remaining_to_supply.rs
@@ -41,7 +41,7 @@ pub fn line_to_supply_q5() -> RequisitionLineRow {
         r.requisition_id = requisition().id;
         r.id = "line_to_supply_q5".to_string();
         r.item_link_id = mock_item_a().id;
-        r.supply_quantity = 5.0;
+        r.supply_quantity = 5;
     })
 }
 // One unallocated line linked
@@ -50,7 +50,7 @@ pub fn line_to_supply_q2() -> RequisitionLineRow {
         r.requisition_id = requisition().id;
         r.id = "line_to_supply_q2".to_string();
         r.item_link_id = mock_item_b().id;
-        r.supply_quantity = 5.0;
+        r.supply_quantity = 5;
     })
 }
 
@@ -60,7 +60,7 @@ pub fn linked_line_1() -> InvoiceLineRow {
         r.id = "linked_line_1".to_string();
         r.item_link_id = line_to_supply_q2().item_link_id;
         r.r#type = InvoiceLineType::UnallocatedStock;
-        r.pack_size = 1.0;
+        r.pack_size = 1;
         r.number_of_packs = 3.0;
     })
 }
@@ -71,7 +71,7 @@ pub fn line_to_supply_q1() -> RequisitionLineRow {
         r.requisition_id = requisition().id;
         r.id = "line_to_supply_q1".to_string();
         r.item_link_id = mock_item_c().id;
-        r.supply_quantity = 10.0;
+        r.supply_quantity = 10;
     })
 }
 pub fn linked_line_2() -> InvoiceLineRow {
@@ -80,7 +80,7 @@ pub fn linked_line_2() -> InvoiceLineRow {
         r.id = "linked_line_2".to_string();
         r.item_link_id = line_to_supply_q1().item_link_id;
         r.r#type = InvoiceLineType::UnallocatedStock;
-        r.pack_size = 1.0;
+        r.pack_size = 1;
         r.number_of_packs = 3.0;
     })
 }
@@ -90,7 +90,7 @@ pub fn linked_line_3() -> InvoiceLineRow {
         r.id = "linked_line_3".to_string();
         r.item_link_id = line_to_supply_q1().item_link_id;
         r.r#type = InvoiceLineType::StockOut;
-        r.pack_size = 3.0;
+        r.pack_size = 3;
         r.number_of_packs = 2.0;
     })
 }
@@ -100,7 +100,7 @@ pub fn line_to_supply_q0() -> RequisitionLineRow {
         r.requisition_id = requisition().id;
         r.id = "line_to_supply_q0".to_string();
         r.item_link_id = mock_item_d().id;
-        r.supply_quantity = 2.0;
+        r.supply_quantity = 2;
     })
 }
 pub fn linked_line_4() -> InvoiceLineRow {
@@ -109,7 +109,7 @@ pub fn linked_line_4() -> InvoiceLineRow {
         r.id = "linked_line_4".to_string();
         r.item_link_id = line_to_supply_q0().item_link_id;
         r.r#type = InvoiceLineType::UnallocatedStock;
-        r.pack_size = 2.0;
+        r.pack_size = 2;
         r.number_of_packs = 1.0;
     })
 }
diff --git a/server/repository/src/mock/test_requisition_line_repository.rs b/server/repository/src/mock/test_requisition_line_repository.rs
index 2e84893da..2ce56a06a 100644
--- a/server/repository/src/mock/test_requisition_line_repository.rs
+++ b/server/repository/src/mock/test_requisition_line_repository.rs
@@ -20,10 +20,10 @@ pub fn mock_draft_request_requisition_line() -> RequisitionLineRow {
         r.id = "mock_draft_request_requisition_line".to_owned();
         r.requisition_id = mock_request_draft_requisition().id;
         r.item_link_id = mock_item_a().id;
-        r.requested_quantity = 10.0;
-        r.suggested_quantity = 3.0;
-        r.available_stock_on_hand = 1.0;
-        r.average_monthly_consumption = 10.0;
+        r.requested_quantity = 10;
+        r.suggested_quantity = 3;
+        r.available_stock_on_hand = 1;
+        r.average_monthly_consumption = 10;
     })
 }
 
@@ -32,9 +32,9 @@ pub fn mock_draft_request_requisition_line2() -> RequisitionLineRow {
         r.id = "mock_draft_request_requisition_line2".to_owned();
         r.requisition_id = mock_request_draft_requisition().id;
         r.item_link_id = mock_item_a().id;
-        r.requested_quantity = 10.0;
-        r.suggested_quantity = 3.0;
-        r.available_stock_on_hand = 1.0;
-        r.average_monthly_consumption = 10.0;
+        r.requested_quantity = 10;
+        r.suggested_quantity = 3;
+        r.available_stock_on_hand = 1;
+        r.average_monthly_consumption = 10;
     })
 }
diff --git a/server/repository/src/mock/test_requisition_queries.rs b/server/repository/src/mock/test_requisition_queries.rs
index be2712fe9..7990f26ba 100644
--- a/server/repository/src/mock/test_requisition_queries.rs
+++ b/server/repository/src/mock/test_requisition_queries.rs
@@ -92,20 +92,20 @@ pub fn mock_request_draft_requisition_all_fields() -> FullMockRequisition {
                 r.id = line1_id;
                 r.requisition_id = requisition_id.clone();
                 r.item_link_id = mock_item_a().id;
-                r.requested_quantity = 10.0;
-                r.suggested_quantity = 3.0;
-                r.available_stock_on_hand = 1.0;
-                r.average_monthly_consumption = 10.0;
+                r.requested_quantity = 10;
+                r.suggested_quantity = 3;
+                r.available_stock_on_hand = 1;
+                r.average_monthly_consumption = 10;
                 r.item_name = mock_item_a().name;
             }),
             inline_init(|r: &mut RequisitionLineRow| {
                 r.id = line2_id;
                 r.requisition_id = requisition_id.clone();
                 r.item_link_id = mock_item_b().id;
-                r.requested_quantity = 15.0;
-                r.suggested_quantity = 3.0;
-                r.available_stock_on_hand = 1.0;
-                r.average_monthly_consumption = 10.0;
+                r.requested_quantity = 15;
+                r.suggested_quantity = 3;
+                r.available_stock_on_hand = 1;
+                r.average_monthly_consumption = 10;
                 r.item_name = mock_item_b().name;
             }),
         ],
@@ -150,10 +150,10 @@ pub fn mock_response_draft_requisition_all_fields() -> FullMockRequisition {
             r.id = line1_id;
             r.requisition_id = requisition_id.clone();
             r.item_link_id = mock_item_a().id;
-            r.requested_quantity = 10.0;
-            r.suggested_quantity = 15.0;
-            r.available_stock_on_hand = 1.0;
-            r.average_monthly_consumption = 10.0;
+            r.requested_quantity = 10;
+            r.suggested_quantity = 15;
+            r.available_stock_on_hand = 1;
+            r.average_monthly_consumption = 10;
         })],
     }
 }
@@ -189,7 +189,7 @@ pub fn mock_invoice1_linked_to_requisition() -> FullMockInvoice {
                     item_code: mock_item_a().code,
                     batch: None,
                     expiry_date: None,
-                    pack_size: 4.0,
+                    pack_size: 4,
                     cost_price_per_pack: 43.0,
                     sell_price_per_pack: 32.0,
                     total_before_tax: 278.26,
@@ -209,7 +209,7 @@ pub fn mock_invoice1_linked_to_requisition() -> FullMockInvoice {
                     location_id: None,
                     batch: None,
                     available_number_of_packs: 20.0,
-                    pack_size: 4.0,
+                    pack_size: 4,
                     cost_price_per_pack: 43.0,
                     sell_price_per_pack: 32.0,
                     total_number_of_packs: 30.0,
@@ -231,7 +231,7 @@ pub fn mock_invoice1_linked_to_requisition() -> FullMockInvoice {
                     item_code: mock_item_b().code,
                     batch: None,
                     expiry_date: None,
-                    pack_size: 4.0,
+                    pack_size: 4,
                     cost_price_per_pack: 43.0,
                     sell_price_per_pack: 32.0,
                     total_before_tax: 278.26,
@@ -251,7 +251,7 @@ pub fn mock_invoice1_linked_to_requisition() -> FullMockInvoice {
                     location_id: None,
                     batch: None,
                     available_number_of_packs: 20.0,
-                    pack_size: 4.0,
+                    pack_size: 4,
                     cost_price_per_pack: 43.0,
                     sell_price_per_pack: 32.0,
                     total_number_of_packs: 30.0,
@@ -295,7 +295,7 @@ pub fn mock_invoice2_linked_to_requisition() -> FullMockInvoice {
                 item_code: mock_item_b().code,
                 batch: None,
                 expiry_date: None,
-                pack_size: 4.0,
+                pack_size: 4,
                 cost_price_per_pack: 43.0,
                 sell_price_per_pack: 32.0,
                 total_before_tax: 278.26,
@@ -315,7 +315,7 @@ pub fn mock_invoice2_linked_to_requisition() -> FullMockInvoice {
                 location_id: None,
                 batch: None,
                 available_number_of_packs: 20.0,
-                pack_size: 4.0,
+                pack_size: 4,
                 cost_price_per_pack: 43.0,
                 sell_price_per_pack: 32.0,
                 total_number_of_packs: 30.0,
@@ -358,7 +358,7 @@ pub fn mock_invoice3_linked_to_requisition() -> FullMockInvoice {
                 item_code: mock_item_a().code,
                 batch: None,
                 expiry_date: None,
-                pack_size: 4.0,
+                pack_size: 4,
                 cost_price_per_pack: 43.0,
                 sell_price_per_pack: 32.0,
                 total_before_tax: 278.26,
@@ -378,7 +378,7 @@ pub fn mock_invoice3_linked_to_requisition() -> FullMockInvoice {
                 location_id: None,
                 batch: None,
                 available_number_of_packs: 20.0,
-                pack_size: 4.0,
+                pack_size: 4,
                 cost_price_per_pack: 43.0,
                 sell_price_per_pack: 32.0,
                 total_number_of_packs: 30.0,
diff --git a/server/repository/src/mock/test_requisition_service.rs b/server/repository/src/mock/test_requisition_service.rs
index 7be9694fd..72d8665ef 100644
--- a/server/repository/src/mock/test_requisition_service.rs
+++ b/server/repository/src/mock/test_requisition_service.rs
@@ -119,10 +119,10 @@ pub fn mock_sent_request_requisition_line() -> RequisitionLineRow {
         r.id = "mock_sent_request_requisition_line".to_owned();
         r.requisition_id = mock_sent_request_requisition().id;
         r.item_link_id = mock_item_a().id;
-        r.requested_quantity = 10.0;
-        r.suggested_quantity = 5.0;
-        r.available_stock_on_hand = 1.0;
-        r.average_monthly_consumption = 1.0;
+        r.requested_quantity = 10;
+        r.suggested_quantity = 5;
+        r.available_stock_on_hand = 1;
+        r.average_monthly_consumption = 1;
     })
 }
 
@@ -148,10 +148,10 @@ pub fn mock_finalised_request_requisition_line() -> RequisitionLineRow {
         r.id = "mock_finalised_request_requisition_line".to_owned();
         r.requisition_id = mock_finalised_response_requisition().id;
         r.item_link_id = mock_item_a().id;
-        r.requested_quantity = 10.0;
-        r.suggested_quantity = 5.0;
-        r.available_stock_on_hand = 1.0;
-        r.average_monthly_consumption = 1.0;
+        r.requested_quantity = 10;
+        r.suggested_quantity = 5;
+        r.available_stock_on_hand = 1;
+        r.average_monthly_consumption = 1;
     })
 }
 
@@ -194,10 +194,10 @@ pub fn mock_new_response_requisition_for_update_test_line() -> RequisitionLineRo
         r.id = "mock_new_response_requisition_for_update_test_line".to_owned();
         r.requisition_id = mock_new_response_requisition_for_update_test().id;
         r.item_link_id = mock_item_a().id;
-        r.requested_quantity = 10.0;
-        r.suggested_quantity = 5.0;
-        r.available_stock_on_hand = 1.0;
-        r.average_monthly_consumption = 1.0;
+        r.requested_quantity = 10;
+        r.suggested_quantity = 5;
+        r.available_stock_on_hand = 1;
+        r.average_monthly_consumption = 1;
     })
 }
 
@@ -221,10 +221,10 @@ pub fn mock_full_draft_response_requisition_for_update_test() -> FullMockRequisi
             r.id = "mock_full_draft_response_requisition_for_update_test_line".to_owned();
             r.requisition_id = "mock_full_draft_response_requisition_for_update_test".to_string();
             r.item_link_id = mock_item_a().id;
-            r.requested_quantity = 10.0;
-            r.suggested_quantity = 5.0;
-            r.available_stock_on_hand = 1.0;
-            r.average_monthly_consumption = 1.0;
+            r.requested_quantity = 10;
+            r.suggested_quantity = 5;
+            r.available_stock_on_hand = 1;
+            r.average_monthly_consumption = 1;
         })],
     }
 }
@@ -255,36 +255,36 @@ pub fn mock_request_draft_requisition_calculation_test() -> FullMockRequisition
                 r.id = line1_id;
                 r.requisition_id = requisition_id.clone();
                 r.item_link_id = mock_item_a().id;
-                r.requested_quantity = 10.0;
-                r.suggested_quantity = 5.0;
-                r.available_stock_on_hand = 1.0;
-                r.average_monthly_consumption = 1.0;
+                r.requested_quantity = 10;
+                r.suggested_quantity = 5;
+                r.available_stock_on_hand = 1;
+                r.average_monthly_consumption = 1;
             }),
             inline_init(|r: &mut RequisitionLineRow| {
                 r.id = line2_id;
                 r.requisition_id = requisition_id.clone();
                 r.item_link_id = mock_item_b().id;
-                r.requested_quantity = 10.0;
-                r.suggested_quantity = 5.0;
-                r.available_stock_on_hand = 1.0;
+                r.requested_quantity = 10;
+                r.suggested_quantity = 5;
+                r.available_stock_on_hand = 1;
             }),
             inline_init(|r: &mut RequisitionLineRow| {
                 r.id = line3_id;
                 r.requisition_id = requisition_id.clone();
                 r.item_link_id = mock_item_c().id;
-                r.requested_quantity = 10.0;
-                r.suggested_quantity = 5.0;
-                r.available_stock_on_hand = 6.0;
-                r.average_monthly_consumption = 1.0;
+                r.requested_quantity = 10;
+                r.suggested_quantity = 5;
+                r.available_stock_on_hand = 6;
+                r.average_monthly_consumption = 1;
             }),
             inline_init(|r: &mut RequisitionLineRow| {
                 r.id = line4_id;
                 r.requisition_id = requisition_id.clone();
                 r.item_link_id = mock_item_d().id;
-                r.requested_quantity = 10.0;
-                r.suggested_quantity = 200.0;
-                r.available_stock_on_hand = 20.0;
-                r.average_monthly_consumption = 1.0;
+                r.requested_quantity = 10;
+                r.suggested_quantity = 200;
+                r.available_stock_on_hand = 20;
+                r.average_monthly_consumption = 1;
             }),
         ],
     }
@@ -330,20 +330,20 @@ pub fn mock_new_response_requisition_test() -> FullMockRequisition {
                 r.id = line1_id;
                 r.requisition_id = requisition_id.clone();
                 r.item_link_id = mock_item_a().id;
-                r.requested_quantity = 10.0;
-                r.suggested_quantity = 5.0;
-                r.supply_quantity = 50.0;
-                r.available_stock_on_hand = 1.0;
-                r.average_monthly_consumption = 1.0;
+                r.requested_quantity = 10;
+                r.suggested_quantity = 5;
+                r.supply_quantity = 50;
+                r.available_stock_on_hand = 1;
+                r.average_monthly_consumption = 1;
             }),
             inline_init(|r: &mut RequisitionLineRow| {
                 r.id = line2_id;
                 r.requisition_id = requisition_id.clone();
                 r.item_link_id = mock_item_b().id;
-                r.requested_quantity = 11.0;
-                r.suggested_quantity = 5.0;
-                r.supply_quantity = 100.0;
-                r.available_stock_on_hand = 1.0;
+                r.requested_quantity = 11;
+                r.suggested_quantity = 5;
+                r.supply_quantity = 100;
+                r.available_stock_on_hand = 1;
             }),
         ],
     }
@@ -374,7 +374,7 @@ pub fn mock_new_response_requisition_test_invoice() -> FullMockInvoice {
                     id: line1_id.clone(),
                     invoice_id: invoice_id.clone(),
                     r#type: InvoiceLineType::StockOut,
-                    pack_size: 2.0,
+                    pack_size: 2,
                     number_of_packs: 2.0,
                     item_link_id: mock_item_a().id,
                     item_name: mock_item_a().name,
@@ -400,7 +400,7 @@ pub fn mock_new_response_requisition_test_invoice() -> FullMockInvoice {
                     id: line2_id.clone(),
                     invoice_id: invoice_id.clone(),
                     r#type: InvoiceLineType::UnallocatedStock,
-                    pack_size: 1.0,
+                    pack_size: 1,
                     number_of_packs: 2.0,
                     item_link_id: mock_item_a().id,
                     item_name: mock_item_a().name,
@@ -467,11 +467,11 @@ pub fn mock_response_program_requisition() -> FullMockRequisition {
             r.id = line1_id;
             r.requisition_id = requisition_id;
             r.item_link_id = mock_item_a().id;
-            r.requested_quantity = 10.0;
-            r.suggested_quantity = 10.0;
-            r.supply_quantity = 100.0;
-            r.available_stock_on_hand = 1.0;
-            r.average_monthly_consumption = 1.0;
+            r.requested_quantity = 10;
+            r.suggested_quantity = 10;
+            r.supply_quantity = 100;
+            r.available_stock_on_hand = 1;
+            r.average_monthly_consumption = 1;
         })],
     }
 }
diff --git a/server/repository/src/mock/test_stocktake.rs b/server/repository/src/mock/test_stocktake.rs
index ed8b1fe9f..7c361737c 100644
--- a/server/repository/src/mock/test_stocktake.rs
+++ b/server/repository/src/mock/test_stocktake.rs
@@ -110,7 +110,7 @@ pub fn mock_stock_line_stocktake_surplus() -> StockLineRow {
         store_id: String::from("store_a"),
         batch: Some(String::from("item_a_batch_b")),
         available_number_of_packs: 20.0,
-        pack_size: 1.0,
+        pack_size: 1,
         cost_price_per_pack: 0.0,
         sell_price_per_pack: 0.0,
         total_number_of_packs: 30.0,
@@ -156,7 +156,7 @@ pub fn mock_stock_line_stocktake_deficit() -> StockLineRow {
         store_id: String::from("store_a"),
         batch: Some(String::from("item_a_batch_b")),
         available_number_of_packs: 20.0,
-        pack_size: 1.0,
+        pack_size: 1,
         cost_price_per_pack: 0.0,
         sell_price_per_pack: 0.0,
         total_number_of_packs: 30.0,
@@ -257,7 +257,7 @@ pub fn mock_stocktake_line_new_stock_line() -> StocktakeLineRow {
         r.item_link_id = mock_item_a().id;
         r.expiry_date = Some(NaiveDate::from_ymd_opt(2022, 12, 14).unwrap());
         r.batch = Some("batch".to_string());
-        r.pack_size = Some(10.0);
+        r.pack_size = Some(10);
         r.cost_price_per_pack = Some(11.0);
         r.sell_price_per_pack = Some(12.0);
         r.note = Some("note".to_string());
diff --git a/server/repository/src/mock/test_stocktake_line.rs b/server/repository/src/mock/test_stocktake_line.rs
index 961f2769b..403193d18 100644
--- a/server/repository/src/mock/test_stocktake_line.rs
+++ b/server/repository/src/mock/test_stocktake_line.rs
@@ -12,7 +12,7 @@ pub fn mock_new_stock_line_for_stocktake_a() -> StockLineRow {
         store_id: String::from("store_a"),
         batch: Some(String::from("item_a_batch_b")),
         available_number_of_packs: 20.0,
-        pack_size: 1.0,
+        pack_size: 1,
         cost_price_per_pack: 0.0,
         sell_price_per_pack: 0.0,
         total_number_of_packs: 30.0,
diff --git a/server/repository/src/mock/test_unallocated_line.rs b/server/repository/src/mock/test_unallocated_line.rs
index 0b3976c01..8a8e10861 100644
--- a/server/repository/src/mock/test_unallocated_line.rs
+++ b/server/repository/src/mock/test_unallocated_line.rs
@@ -45,7 +45,7 @@ pub fn mock_unallocated_line() -> InvoiceLineRow {
         location_id: None,
         batch: None,
         expiry_date: None,
-        pack_size: 1.0,
+        pack_size: 1,
         cost_price_per_pack: 0.0,
         sell_price_per_pack: 0.0,
         total_before_tax: 0.0,
@@ -88,7 +88,7 @@ pub fn mock_unallocated_line2() -> InvoiceLineRow {
         location_id: None,
         batch: None,
         expiry_date: None,
-        pack_size: 1.0,
+        pack_size: 1,
         cost_price_per_pack: 0.0,
         sell_price_per_pack: 0.0,
         total_before_tax: 0.0,
diff --git a/server/repository/src/repository_error.rs b/server/repository/src/repository_error.rs
index 3d2891573..cedbd9bce 100644
--- a/server/repository/src/repository_error.rs
+++ b/server/repository/src/repository_error.rs
@@ -11,7 +11,7 @@ pub enum RepositoryError {
     /// Foreign key constraint is violated
     #[error("foreign key constraint is violated {0}")]
     ForeignKeyViolation(String),
-    /// Actix thread pool cancelled
+    /// Actix thred pool canceled
     #[error("actix thread pool canceled")]
     ThreadPoolCanceled,
     /// Transaction error
diff --git a/server/repository/src/test_db/constants.rs b/server/repository/src/test_db/constants.rs
index ea2756cab..be8e6a4f3 100644
--- a/server/repository/src/test_db/constants.rs
+++ b/server/repository/src/test_db/constants.rs
@@ -1,36 +1,4 @@
-use std::{path::PathBuf, str::FromStr};
-
 #[allow(dead_code)]
 pub(crate) const TEST_OUTPUT_DIR: &str = "test_output";
-#[cfg(all(not(feature = "postgres"), not(feature = "memory")))]
 #[allow(dead_code)]
 pub(crate) const TEMPLATE_MARKER_FILE: &str = "___template_needs_update.marker";
-#[cfg(feature = "postgres")]
-pub(crate) const TEMPLATE_MARKER_FILE: &str = "___template_needs_update_pg.marker";
-
-#[allow(dead_code)]
-pub(crate) const ENV_MSUPPLY_NO_TEST_DB_TEMPLATE: &'static str = "MSUPPLY_NO_TEST_DB_TEMPLATE";
-
-#[allow(dead_code)]
-pub(crate) fn env_msupply_no_test_db_template() -> bool {
-    let Ok(var) = std::env::var(ENV_MSUPPLY_NO_TEST_DB_TEMPLATE) else {
-        return false;
-    };
-    match var.as_str() {
-        "true" | "1" => true,
-        "false" | "0" => false,
-        _ => panic!("Invalid MSUPPLY_NO_TEST_DB_TEMPLATE env value: {}", var),
-    }
-}
-
-#[allow(dead_code)]
-pub(crate) fn find_workspace_root() -> PathBuf {
-    let mut path = PathBuf::from_str(env!("CARGO_MANIFEST_DIR")).unwrap();
-    while let Some(current) = path.parent() {
-        path = current.to_path_buf();
-        if path.join("Cargo.lock").exists() {
-            return path;
-        }
-    }
-    panic!("workspace root not found!");
-}
diff --git a/server/repository/src/test_db/postgres.rs b/server/repository/src/test_db/postgres.rs
index f9cd14b16..690a5a32f 100644
--- a/server/repository/src/test_db/postgres.rs
+++ b/server/repository/src/test_db/postgres.rs
@@ -1,18 +1,10 @@
-use std::{fs, sync::Mutex};
-
-use diesel::prelude::*;
 use diesel::r2d2::{ConnectionManager, Pool};
-use diesel::{PgConnection, RunQueryDsl};
 
 use crate::{
     database_settings::DatabaseSettings,
-    get_storage_connection_manager,
     migrations::{migrate, Version},
-    mock::{all_mock_data, insert_all_mock_data, MockDataCollection, MockDataInserts},
-    test_db::constants::{
-        env_msupply_no_test_db_template, find_workspace_root, TEMPLATE_MARKER_FILE, TEST_OUTPUT_DIR,
-    },
-    DBConnection, StorageConnectionManager,
+    mock::{insert_all_mock_data, MockDataCollection, MockDataInserts},
+    StorageConnectionManager,
 };
 
 pub fn get_test_db_settings(db_name: &str) -> DatabaseSettings {
@@ -27,62 +19,21 @@ pub fn get_test_db_settings(db_name: &str) -> DatabaseSettings {
     }
 }
 
-static TEMPLATE_LOCK: Mutex<()> = Mutex::new(());
-
-fn create_template_db(
-    root_connection: &mut DBConnection,
-    db_settings: &DatabaseSettings,
-    version: Option<Version>,
-) -> StorageConnectionManager {
-    diesel::sql_query(format!(
-        "DROP DATABASE IF EXISTS \"{}\";",
-        &db_settings.database_name
-    ))
-    .execute(root_connection)
-    .unwrap();
-
-    diesel::sql_query(format!(
-        "CREATE DATABASE \"{}\";",
-        &db_settings.database_name
-    ))
-    .execute(root_connection)
-    .unwrap();
-
-    // migrate the DB:
-    let connection_manager = get_storage_connection_manager(&db_settings);
-    let connection = connection_manager.connection().unwrap();
-    migrate(&connection, version).unwrap();
-
-    connection_manager
-}
-
-table! {
-    pg_database (oid) {
-        oid -> BigInt,
-        datname -> Text,
-    }
-}
-
-#[derive(QueryableByName)]
-#[diesel(table_name = pg_database)]
-struct PgDatabaseRow {
-    #[allow(dead_code)]
-    oid: i64,
-    #[allow(dead_code)]
-    datname: String,
-}
-
 pub async fn setup(db_settings: &DatabaseSettings) -> StorageConnectionManager {
     setup_with_version(db_settings, None, MockDataInserts::none())
         .await
         .0
 }
 
-async fn setup_with_version_no_template(
+pub(crate) async fn setup_with_version(
     db_settings: &DatabaseSettings,
     version: Option<Version>,
     inserts: MockDataInserts,
 ) -> (StorageConnectionManager, MockDataCollection) {
+    use diesel::{PgConnection, RunQueryDsl};
+
+    use crate::get_storage_connection_manager;
+
     let connection_manager =
         ConnectionManager::<PgConnection>::new(&db_settings.connection_string_without_db());
     let pool = Pool::new(connection_manager).expect("Failed to connect to database");
@@ -109,105 +60,3 @@ async fn setup_with_version_no_template(
     let collection = insert_all_mock_data(&connection, inserts).await;
     (connection_manager, collection)
 }
-
-pub(crate) async fn setup_with_version(
-    db_settings: &DatabaseSettings,
-    version: Option<Version>,
-    inserts: MockDataInserts,
-) -> (StorageConnectionManager, MockDataCollection) {
-    if env_msupply_no_test_db_template() {
-        return setup_with_version_no_template(db_settings, version, inserts).await;
-    }
-    // cache db template
-    let cache_all_mock_data = inserts == MockDataInserts::all();
-    let template_name = if cache_all_mock_data {
-        format!(
-            "___template_{}_full_mock",
-            version.as_ref().unwrap_or(&Version::from_package_json())
-        )
-    } else {
-        format!(
-            "___template_{}",
-            version.as_ref().unwrap_or(&Version::from_package_json())
-        )
-    };
-
-    let connection_manager =
-        ConnectionManager::<PgConnection>::new(&db_settings.connection_string_without_db());
-    let pool = Pool::new(connection_manager).expect("Failed to connect to database");
-    // connection to no specific table
-    let mut root_connection = pool.get().expect("Failed to open connection");
-
-    // check if we need to refresh the cache
-    let template_settings = get_test_db_settings(&template_name);
-    {
-        let _guard = TEMPLATE_LOCK.lock().unwrap();
-
-        let existing_templates: Vec<String> = pg_database::table
-            .select(pg_database::dsl::datname)
-            .filter(pg_database::dsl::datname.ilike("___template_%"))
-            .load(&mut root_connection)
-            .unwrap();
-
-        // only clear the DB once, i.e. use the repository test_output directory as reference
-        let test_output_dir = find_workspace_root()
-            .join("repository")
-            .join(TEST_OUTPUT_DIR);
-        let marker_path = test_output_dir.join(TEMPLATE_MARKER_FILE).to_path_buf();
-        let marker_exists = marker_path.exists();
-
-        // if test_output_dir doesn't exist or if the marker exist, refresh the cache
-        let template_dbs = if !test_output_dir.exists() || marker_exists {
-            // create the directory so that we don't recreate the cache on the next run
-            fs::create_dir_all(&test_output_dir).unwrap();
-
-            for template in existing_templates {
-                diesel::sql_query(format!("DROP DATABASE IF EXISTS \"{}\";", &template))
-                    .execute(&mut root_connection)
-                    .unwrap();
-            }
-
-            // remove marker
-            if marker_exists {
-                fs::remove_file(&marker_path).unwrap();
-            }
-            vec![]
-        } else {
-            existing_templates
-        };
-        // create template
-        if !template_dbs.contains(&template_settings.database_name) {
-            let connection_manager =
-                create_template_db(&mut root_connection, &template_settings, version.clone());
-            let connection = connection_manager.connection().unwrap();
-            if cache_all_mock_data {
-                insert_all_mock_data(&connection, inserts.clone()).await;
-            }
-        }
-    }
-
-    // copy template
-
-    // remove existing db
-    diesel::sql_query(format!(
-        "DROP DATABASE IF EXISTS \"{}\";",
-        &db_settings.database_name
-    ))
-    .execute(&mut root_connection)
-    .unwrap();
-    diesel::sql_query(format!(
-        "CREATE DATABASE \"{}\" WITH TEMPLATE \"{}\";",
-        db_settings.database_name, template_settings.database_name
-    ))
-    .execute(&mut root_connection)
-    .unwrap();
-
-    let connection_manager = get_storage_connection_manager(db_settings);
-    let collection = if !cache_all_mock_data {
-        let connection = connection_manager.connection().unwrap();
-        insert_all_mock_data(&connection, inserts).await
-    } else {
-        all_mock_data()
-    };
-    (connection_manager, collection)
-}
diff --git a/server/repository/src/test_db/sqlite.rs b/server/repository/src/test_db/sqlite.rs
index 609259eea..68eaa12a1 100644
--- a/server/repository/src/test_db/sqlite.rs
+++ b/server/repository/src/test_db/sqlite.rs
@@ -1,8 +1,4 @@
-use std::{
-    fs,
-    path::{Path, PathBuf},
-    sync::Mutex,
-};
+use std::{fs, path::Path, sync::Mutex};
 
 use diesel::r2d2::{ConnectionManager, Pool};
 
@@ -13,26 +9,16 @@ use crate::{
     DBBackendConnection, StorageConnectionManager,
 };
 
-use super::constants::{
-    env_msupply_no_test_db_template, find_workspace_root, TEMPLATE_MARKER_FILE, TEST_OUTPUT_DIR,
-};
+use super::constants::{TEMPLATE_MARKER_FILE, TEST_OUTPUT_DIR};
 
 pub fn get_test_db_settings(db_name: &str) -> DatabaseSettings {
-    get_test_db_settings_etc(db_name, false)
-}
-
-fn get_test_db_settings_etc(db_name: &str, is_template: bool) -> DatabaseSettings {
     DatabaseSettings {
         username: "postgres".to_string(),
         password: "password".to_string(),
         port: 5432,
         host: "localhost".to_string(),
         // put DB test files into a test directory (also works for in-memory)
-        database_name: if is_template {
-            format!("{}/{}.sqlite", template_dir().to_string_lossy(), db_name)
-        } else {
-            format!("{}/{}.sqlite", TEST_OUTPUT_DIR, db_name)
-        },
+        database_name: format!("{}/{}.sqlite", TEST_OUTPUT_DIR, db_name),
         init_sql: None,
         database_path: None,
     }
@@ -44,24 +30,6 @@ pub async fn setup(db_settings: &DatabaseSettings) -> StorageConnectionManager {
         .0
 }
 
-// Use same templates between all crates (crates are tested in sequence)
-fn template_dir() -> PathBuf {
-    find_workspace_root()
-        .join("repository")
-        .join(TEST_OUTPUT_DIR)
-}
-
-async fn setup_with_version_no_template(
-    db_settings: &DatabaseSettings,
-    version: Option<Version>,
-    inserts: MockDataInserts,
-) -> (StorageConnectionManager, MockDataCollection) {
-    let connection_manager = create_db(db_settings, version.clone());
-    let connection = connection_manager.connection().unwrap();
-    let collection = insert_all_mock_data(&connection, inserts).await;
-    (connection_manager, collection)
-}
-
 static TEMPLATE_LOCK: Mutex<()> = Mutex::new(());
 
 pub(crate) async fn setup_with_version(
@@ -70,78 +38,83 @@ pub(crate) async fn setup_with_version(
     inserts: MockDataInserts,
 ) -> (StorageConnectionManager, MockDataCollection) {
     let db_path = db_settings.connection_string();
-    let memory_mode = db_path.starts_with("file:");
-    if memory_mode || env_msupply_no_test_db_template() {
-        return setup_with_version_no_template(db_settings, version, inserts).await;
-    }
 
-    // cache db template
-    let cache_all_mock_data = inserts == MockDataInserts::all();
-    let template_name = if cache_all_mock_data {
-        format!(
-            "___template_{}_full_mock",
-            version.as_ref().unwrap_or(&Version::from_package_json())
-        )
+    let (connection_manager, collection) = if db_path.starts_with("file:") {
+        // memory mode
+        let connection_manager = create_db(db_settings, version.clone());
+        let connection = connection_manager.connection().unwrap();
+        let collection = insert_all_mock_data(&connection, inserts).await;
+        (connection_manager, collection)
     } else {
-        format!(
-            "___template_{}",
-            version.as_ref().unwrap_or(&Version::from_package_json())
-        )
-    };
-
-    let guard = TEMPLATE_LOCK.lock().unwrap();
-    let template_output_dir = template_dir();
-
-    // if marker exists, DB needs to be recreated -> delete all template files
-    let marker_path = template_output_dir.join(TEMPLATE_MARKER_FILE);
-    if marker_path.exists() {
-        // remove all DB templates
-        for entry in fs::read_dir(&template_output_dir).unwrap() {
-            let entry = entry.unwrap();
-            if entry.file_name().to_string_lossy() == TEMPLATE_MARKER_FILE {
-                // delete marker after all template DBs to ensure we deleted all DBs, e.g. if
-                // this loop is interrupted
-                continue;
-            }
-            if entry
-                .file_name()
-                .to_string_lossy()
-                .starts_with("___template_")
-            {
-                fs::remove_file(&entry.path()).unwrap();
+        // cache db template
+        let cache_all_mock_data = inserts == MockDataInserts::all();
+        let template_name = if cache_all_mock_data {
+            format!(
+                "___template_{}_full_mock",
+                version.as_ref().unwrap_or(&Version::from_package_json())
+            )
+        } else {
+            format!(
+                "___template_{}",
+                version.as_ref().unwrap_or(&Version::from_package_json())
+            )
+        };
+
+        let guard = TEMPLATE_LOCK.lock().unwrap();
+        // if marker exists, DB needs to be recreated -> delete all template files
+        let marker_path =
+            Path::new(&format!("{}/{}", TEST_OUTPUT_DIR, TEMPLATE_MARKER_FILE)).to_path_buf();
+        if marker_path.exists() {
+            // remove all DB templates
+            for entry in fs::read_dir(TEST_OUTPUT_DIR).unwrap() {
+                let entry = entry.unwrap();
+                if entry.file_name().to_string_lossy() == TEMPLATE_MARKER_FILE {
+                    // delete marker after all template DBs to ensure we deleted all DBs, e.g. if
+                    // this loop is interrupted
+                    continue;
+                }
+                if entry
+                    .file_name()
+                    .to_string_lossy()
+                    .starts_with("___template_")
+                {
+                    fs::remove_file(&entry.path()).unwrap();
+                }
             }
+            // remove marker
+            fs::remove_file(&marker_path).unwrap();
         }
-        // remove marker
-        fs::remove_file(&marker_path).unwrap();
-    }
 
-    let template_settings = get_test_db_settings_etc(&template_name, true);
-    if !Path::new(&template_settings.database_name).exists() {
-        let connection_manager = create_db(&template_settings, version.clone());
-        let connection = connection_manager.connection().unwrap();
-        if cache_all_mock_data {
-            insert_all_mock_data(&connection, inserts.clone()).await;
+        let template_settings = get_test_db_settings(&template_name);
+        if !Path::new(&template_settings.database_name).exists() {
+            let connection_manager = create_db(&template_settings, version.clone());
+            let connection = connection_manager.connection().unwrap();
+            if cache_all_mock_data {
+                insert_all_mock_data(&connection, inserts.clone()).await;
+            }
         }
-    }
-    drop(guard);
+        drop(guard);
 
-    // copy template
+        // copy template
 
-    // remove existing db file
-    fs::remove_file(&db_path).ok();
-    // create parent dirs
-    let path = Path::new(&db_path);
-    let parent = path.parent().unwrap();
-    fs::create_dir_all(parent).unwrap();
-    fs::copy(&template_settings.database_name, &db_path).unwrap();
-
-    let connection_manager = connection_manager(db_settings);
-    let collection = if !cache_all_mock_data {
-        let connection = connection_manager.connection().unwrap();
-        insert_all_mock_data(&connection, inserts).await
-    } else {
-        all_mock_data()
+        // remove existing db file
+        fs::remove_file(&db_path).ok();
+        // create parent dirs
+        let path = Path::new(&db_path);
+        let parent = path.parent().unwrap();
+        fs::create_dir_all(parent).unwrap();
+        fs::copy(&template_settings.database_name, &db_path).unwrap();
+
+        let connection_manager = connection_manager(db_settings);
+        let collection = if !cache_all_mock_data {
+            let connection = connection_manager.connection().unwrap();
+            insert_all_mock_data(&connection, inserts).await
+        } else {
+            all_mock_data()
+        };
+        (connection_manager, collection)
     };
+
     (connection_manager, collection)
 }
 
diff --git a/server/repository/src/tests.rs b/server/repository/src/tests.rs
index 59bc72f62..091451446 100644
--- a/server/repository/src/tests.rs
+++ b/server/repository/src/tests.rs
@@ -56,7 +56,7 @@ mod repository_test {
                 store_id: "store1".to_string(),
                 batch: Some("batch1".to_string()),
                 available_number_of_packs: 6.0,
-                pack_size: 1.0,
+                pack_size: 1,
                 cost_price_per_pack: 0.0,
                 sell_price_per_pack: 0.0,
                 total_number_of_packs: 1.0,
@@ -152,7 +152,7 @@ mod repository_test {
                 stock_line_id: None,
                 batch: Some("".to_string()),
                 expiry_date: Some(NaiveDate::from_ymd_opt(2020, 9, 1).unwrap()),
-                pack_size: 1.0,
+                pack_size: 1,
                 cost_price_per_pack: 0.0,
                 sell_price_per_pack: 0.0,
                 total_before_tax: 1.0,
@@ -177,7 +177,7 @@ mod repository_test {
                 stock_line_id: None,
                 batch: Some("".to_string()),
                 expiry_date: Some(NaiveDate::from_ymd_opt(2020, 9, 3).unwrap()),
-                pack_size: 1.0,
+                pack_size: 1,
                 cost_price_per_pack: 0.0,
                 sell_price_per_pack: 0.0,
                 total_before_tax: 2.0,
@@ -203,7 +203,7 @@ mod repository_test {
                 stock_line_id: None,
                 batch: Some("".to_string()),
                 expiry_date: Some(NaiveDate::from_ymd_opt(2020, 9, 5).unwrap()),
-                pack_size: 1.0,
+                pack_size: 1,
                 cost_price_per_pack: 0.0,
                 sell_price_per_pack: 0.0,
                 total_before_tax: 3.0,
@@ -229,7 +229,7 @@ mod repository_test {
                 stock_line_id: None,
                 batch: Some("".to_string()),
                 expiry_date: Some(NaiveDate::from_ymd_opt(2021, 12, 6).unwrap()),
-                pack_size: 1.0,
+                pack_size: 1,
                 cost_price_per_pack: 0.0,
                 sell_price_per_pack: 0.0,
                 total_before_tax: 10.0,
@@ -377,7 +377,6 @@ mod repository_test {
         stock_line_repo.upsert_one(&stock_line).unwrap();
         let loaded_item = stock_line_repo
             .find_one_by_id(stock_line.id.as_str())
-            .unwrap()
             .unwrap();
         assert_eq!(stock_line, loaded_item);
     }
@@ -567,7 +566,7 @@ mod repository_test {
         repo.upsert_one(&master_list_line_1).unwrap();
         let loaded_item = repo
             .find_one_by_id(master_list_line_1.id.as_str())
-            .unwrap()
+            .await
             .unwrap();
         assert_eq!(master_list_line_1, loaded_item);
 
@@ -575,7 +574,7 @@ mod repository_test {
         repo.upsert_one(&master_list_line_upsert_1).unwrap();
         let loaded_item = repo
             .find_one_by_id(master_list_line_upsert_1.id.as_str())
-            .unwrap()
+            .await
             .unwrap();
         assert_eq!(master_list_line_upsert_1, loaded_item);
     }
@@ -602,7 +601,7 @@ mod repository_test {
             .unwrap();
         let loaded_item = MasterListNameJoinRepository::new(&connection)
             .find_one_by_id(master_list_name_join_1.id.as_str())
-            .unwrap()
+            .await
             .unwrap();
         assert_eq!(master_list_name_join_1, loaded_item);
     }
@@ -632,7 +631,6 @@ mod repository_test {
             .unwrap();
         let loaded_item = InvoiceRowRepository::new(&connection)
             .find_one_by_id(item1.id.as_str())
-            .unwrap()
             .unwrap();
         assert_eq!(item1, loaded_item);
 
@@ -696,16 +694,13 @@ mod repository_test {
         let repo = InvoiceLineRowRepository::new(&connection);
         let item1 = data::invoice_line_1();
         repo.upsert_one(&item1).unwrap();
-        let loaded_item = repo.find_one_by_id(item1.id.as_str()).unwrap().unwrap();
+        let loaded_item = repo.find_one_by_id(item1.id.as_str()).unwrap();
         assert_eq!(item1, loaded_item);
 
         // row with optional field
         let item2_optional = data::invoice_line_2();
         repo.upsert_one(&item2_optional).unwrap();
-        let loaded_item = repo
-            .find_one_by_id(item2_optional.id.as_str())
-            .unwrap()
-            .unwrap();
+        let loaded_item = repo.find_one_by_id(item2_optional.id.as_str()).unwrap();
         assert_eq!(item2_optional, loaded_item);
 
         // find_many_by_invoice_id:
@@ -971,7 +966,7 @@ mod repository_test {
 
         // Test insert
         let mut update_test_row = mock_draft_request_requisition_line();
-        update_test_row.requested_quantity = 99.0;
+        update_test_row.requested_quantity = 99;
         RequisitionLineRowRepository::new(&connection)
             .upsert_one(&update_test_row)
             .unwrap();
@@ -1013,7 +1008,7 @@ mod repository_test {
                     .requisition_id(EqualFilter::equal_to(
                         &mock_draft_request_requisition_line().requisition_id,
                     ))
-                    .requested_quantity(EqualFilter::equal_to_f64(99.0)),
+                    .requested_quantity(EqualFilter::equal_to_i32(99)),
             )
             .unwrap();
 
@@ -1097,7 +1092,7 @@ mod repository_test {
         // Note: this test is disabled when running tests using in 'memory' sqlite.
         // When running in memory sqlite uses a shared cache and returns an SQLITE_LOCKED response when two threads try to write using the shared cache concurrently
         // https://sqlite.org/rescode.html#locked
-        // We are relying on busy_timeout handler to manage the SQLITE_BUSY response code in this test and there's no equivalent available for shared cache connections (SQLITE_LOCKED).
+        // We are relying on busy_timeout handler to manage the SQLITE_BUSY response code in this test and there's no equivelant available for shared cache connections (SQLITE_LOCKED).
         // If we were to use shared cache in production, we'd probably need to use a mutex (or similar) to protect the database connection.
 
         /*
diff --git a/server/server/src/print/label.rs b/server/server/src/print/label.rs
index 093de42d6..ac4446d38 100644
--- a/server/server/src/print/label.rs
+++ b/server/server/src/print/label.rs
@@ -142,7 +142,7 @@ impl HostResponse {
             label_length: 0,
         };
         let lines: Vec<&str> = data.split('\n').collect();
-        if lines.len() < 3 {
+        if lines.len() != 3 {
             return invalid_response;
         }
         let line1_parts: Vec<&str> = lines[0].split(',').collect();
diff --git a/server/service/Cargo.toml b/server/service/Cargo.toml
index 10d7e0d13..12852958a 100644
--- a/server/service/Cargo.toml
+++ b/server/service/Cargo.toml
@@ -55,7 +55,6 @@ actix-rt = "2.6.0"
 assert-json-diff = "2.0.1"
 httpmock = "0.6.6"
 tokio = { version = "1.21.1", features = ["macros", "rt-multi-thread", "time"] }
-assert_approx_eq = "1"
 
 [features]
 default = ["sqlite"]
diff --git a/server/service/src/asset/insert.rs b/server/service/src/asset/insert.rs
index 008f9c0a9..654198d20 100644
--- a/server/service/src/asset/insert.rs
+++ b/server/service/src/asset/insert.rs
@@ -24,7 +24,7 @@ pub enum InsertAssetError {
     AssetNumberAlreadyExists,
 }
 
-#[derive(PartialEq, Debug, Clone, Default)]
+#[derive(PartialEq, Debug, Clone)]
 pub struct InsertAsset {
     pub id: String,
     pub store_id: Option<String>,
@@ -37,11 +37,6 @@ pub struct InsertAsset {
     pub type_id: Option<String>,
     pub installation_date: Option<NaiveDate>,
     pub replacement_date: Option<NaiveDate>,
-    pub properties: Option<String>,
-    pub donor_name_id: Option<String>,
-    pub warranty_start: Option<NaiveDate>,
-    pub warranty_end: Option<NaiveDate>,
-    pub needs_replacement: Option<bool>,
 }
 
 pub fn insert_asset(
@@ -127,11 +122,6 @@ pub fn generate(
         category_id,
         class_id,
         type_id,
-        properties,
-        donor_name_id,
-        warranty_start,
-        warranty_end,
-        needs_replacement,
     }: InsertAsset,
 ) -> AssetRow {
     AssetRow {
@@ -149,11 +139,6 @@ pub fn generate(
         asset_category_id: Some(category_id.unwrap_or_default()),
         asset_class_id: Some(class_id.unwrap_or_default()),
         asset_type_id: Some(type_id.unwrap_or_default()),
-        properties,
-        donor_name_id,
-        warranty_start,
-        warranty_end,
-        needs_replacement,
     }
 }
 
diff --git a/server/service/src/asset/insert_asset_property.rs b/server/service/src/asset/insert_asset_property.rs
deleted file mode 100644
index 7350e735b..000000000
--- a/server/service/src/asset/insert_asset_property.rs
+++ /dev/null
@@ -1,106 +0,0 @@
-use super::{query_asset_property::get_asset_property, validate::check_asset_property_exists};
-use crate::{
-    activity_log::activity_log_entry, service_provider::ServiceContext, SingleRecordError,
-};
-
-use repository::{
-    assets::asset_property_row::{AssetPropertyRow, AssetPropertyRowRepository},
-    types::PropertyValueType,
-    ActivityLogType, RepositoryError, StorageConnection,
-};
-
-#[derive(PartialEq, Debug)]
-pub enum InsertAssetPropertyError {
-    AssetPropertyAlreadyExists,
-    CreatedRecordNotFound,
-    DatabaseError(RepositoryError),
-}
-
-pub struct InsertAssetProperty {
-    pub id: String,
-    pub key: String,
-    pub name: String,
-    pub asset_class_id: Option<String>,
-    pub asset_category_id: Option<String>,
-    pub asset_type_id: Option<String>,
-    pub value_type: PropertyValueType,
-    pub allowed_values: Option<String>,
-}
-
-pub fn insert_asset_property(
-    ctx: &ServiceContext,
-    input: InsertAssetProperty,
-) -> Result<AssetPropertyRow, InsertAssetPropertyError> {
-    let asset_property = ctx
-        .connection
-        .transaction_sync(|connection| {
-            validate(&input, connection)?;
-            let new_asset_property = generate(ctx, input);
-            AssetPropertyRowRepository::new(connection).upsert_one(&new_asset_property)?;
-
-            activity_log_entry(
-                ctx,
-                ActivityLogType::AssetPropertyCreated,
-                Some(new_asset_property.id.clone()),
-                None,
-                None,
-            )?;
-
-            get_asset_property(ctx, new_asset_property.id).map_err(InsertAssetPropertyError::from)
-        })
-        .map_err(|error| error.to_inner_error())?;
-    Ok(asset_property)
-}
-
-pub fn validate(
-    input: &InsertAssetProperty,
-    connection: &StorageConnection,
-) -> Result<(), InsertAssetPropertyError> {
-    if check_asset_property_exists(&input.id, connection)?.is_some() {
-        return Err(InsertAssetPropertyError::AssetPropertyAlreadyExists);
-    }
-    // TODO: Check key is unique
-
-    Ok(())
-}
-
-pub fn generate(
-    _ctx: &ServiceContext,
-    InsertAssetProperty {
-        id,
-        key,
-        name,
-        asset_class_id,
-        asset_category_id,
-        asset_type_id,
-        value_type,
-        allowed_values,
-    }: InsertAssetProperty,
-) -> AssetPropertyRow {
-    AssetPropertyRow {
-        id,
-        key,
-        name,
-        asset_class_id,
-        asset_category_id,
-        asset_type_id,
-        value_type,
-        allowed_values,
-    }
-}
-
-impl From<RepositoryError> for InsertAssetPropertyError {
-    fn from(error: RepositoryError) -> Self {
-        InsertAssetPropertyError::DatabaseError(error)
-    }
-}
-
-impl From<SingleRecordError> for InsertAssetPropertyError {
-    fn from(error: SingleRecordError) -> Self {
-        use InsertAssetPropertyError::*;
-        match error {
-            SingleRecordError::DatabaseError(error) => DatabaseError(error),
-            SingleRecordError::NotFound(_) => CreatedRecordNotFound,
-        }
-    }
-}
diff --git a/server/service/src/asset/mod.rs b/server/service/src/asset/mod.rs
index ad950d750..85bf31efc 100644
--- a/server/service/src/asset/mod.rs
+++ b/server/service/src/asset/mod.rs
@@ -6,7 +6,6 @@ use self::insert_log_reason::{
     insert_asset_log_reason, InsertAssetLogReason, InsertAssetLogReasonError,
 };
 use self::query::{get_asset, get_assets};
-use self::query_asset_property::get_asset_properties;
 use self::query_log::{get_asset_log, get_asset_logs};
 use self::query_log_reason::{get_asset_log_reason, get_asset_log_reasons};
 use self::update::{update_asset, UpdateAsset, UpdateAssetError};
@@ -14,8 +13,6 @@ use self::update::{update_asset, UpdateAsset, UpdateAssetError};
 use super::{ListError, ListResult};
 use crate::{service_provider::ServiceContext, SingleRecordError};
 use repository::asset_log_reason::{AssetLogReason, AssetLogReasonFilter, AssetLogReasonSort};
-use repository::asset_property::AssetPropertyFilter;
-use repository::asset_property_row::AssetPropertyRow;
 use repository::assets::asset::{Asset, AssetFilter, AssetSort};
 use repository::assets::asset_log::{AssetLog, AssetLogFilter, AssetLogSort};
 use repository::{PaginationOption, StorageConnection};
@@ -23,12 +20,10 @@ use repository::{PaginationOption, StorageConnection};
 pub mod delete;
 pub mod delete_log_reason;
 pub mod insert;
-pub mod insert_asset_property;
 pub mod insert_log;
 pub mod insert_log_reason;
 pub mod location;
 pub mod query;
-pub mod query_asset_property;
 pub mod query_log;
 pub mod query_log_reason;
 pub mod update;
@@ -128,14 +123,6 @@ pub trait AssetServiceTrait: Sync + Send {
     ) -> Result<AssetLogReason, InsertAssetLogReasonError> {
         insert_asset_log_reason(ctx, input)
     }
-
-    fn get_asset_properties(
-        &self,
-        connection: &StorageConnection,
-        filter: Option<AssetPropertyFilter>,
-    ) -> Result<ListResult<AssetPropertyRow>, ListError> {
-        get_asset_properties(connection, filter)
-    }
 }
 
 pub struct AssetService {}
diff --git a/server/service/src/asset/query_asset_property.rs b/server/service/src/asset/query_asset_property.rs
deleted file mode 100644
index 7e3cb0c52..000000000
--- a/server/service/src/asset/query_asset_property.rs
+++ /dev/null
@@ -1,40 +0,0 @@
-use repository::{
-    asset_property::{AssetPropertyFilter, AssetPropertyRepository},
-    asset_property_row::AssetPropertyRow,
-    EqualFilter, StorageConnection,
-};
-
-use crate::{
-    service_provider::ServiceContext, usize_to_u32, ListError, ListResult, SingleRecordError,
-};
-
-pub fn get_asset_properties(
-    connection: &StorageConnection,
-    filter: Option<AssetPropertyFilter>,
-) -> Result<ListResult<AssetPropertyRow>, ListError> {
-    let repository = AssetPropertyRepository::new(connection);
-
-    let rows = repository.query(filter.clone())?;
-
-    Ok(ListResult {
-        count: usize_to_u32(rows.len()),
-        rows,
-    })
-}
-
-pub fn get_asset_property(
-    ctx: &ServiceContext,
-    id: String,
-) -> Result<AssetPropertyRow, SingleRecordError> {
-    let repository = AssetPropertyRepository::new(&ctx.connection);
-
-    let mut result = repository.query(Some(
-        AssetPropertyFilter::new().id(EqualFilter::equal_to(&id)),
-    ))?;
-
-    if let Some(record) = result.pop() {
-        Ok(record)
-    } else {
-        Err(SingleRecordError::NotFound(id))
-    }
-}
diff --git a/server/service/src/asset/tests/insert.rs b/server/service/src/asset/tests/insert.rs
index 7ef853b20..4b51fe93a 100644
--- a/server/service/src/asset/tests/insert.rs
+++ b/server/service/src/asset/tests/insert.rs
@@ -33,7 +33,11 @@ mod query {
                     asset_number: Some("test_code".to_string()),
                     serial_number: Some("test_serial_number".to_string()),
                     catalogue_item_id: Some("189ef51c-d232-4da7-b090-ca3a53d31f58".to_string()),
-                    ..Default::default()
+                    installation_date: None,
+                    replacement_date: None,
+                    category_id: None,
+                    class_id: None,
+                    type_id: None,
                 },
             )
             .unwrap();
@@ -59,7 +63,11 @@ mod query {
                     asset_number: Some("test_code".to_string()),
                     serial_number: Some("test_serial_number".to_string()),
                     catalogue_item_id: Some("189ef51c-d232-4da7-b090-ca3a53d31f58".to_string()), // 'GKS Healthsol LLP', 'FFVC 44SR'
-                    ..Default::default()
+                    installation_date: None,
+                    replacement_date: None,
+                    category_id: None,
+                    class_id: None,
+                    type_id: None,
                 },
             ),
             Err(InsertAssetError::AssetAlreadyExists)
@@ -76,7 +84,11 @@ mod query {
                     asset_number: Some("test_code".to_string()),
                     serial_number: Some("test_serial_number_2".to_string()),
                     catalogue_item_id: Some("189ef51c-d232-4da7-b090-ca3a53d31f58".to_string()), // 'GKS Healthsol LLP', 'FFVC 44SR'
-                    ..Default::default()
+                    installation_date: None,
+                    replacement_date: None,
+                    category_id: None,
+                    class_id: None,
+                    type_id: None,
                 },
             ),
             Err(InsertAssetError::AssetNumberAlreadyExists)
@@ -93,7 +105,11 @@ mod query {
                     asset_number: Some("test_code_2".to_string()),
                     serial_number: Some("test_serial_number".to_string()),
                     catalogue_item_id: Some("189ef51c-d232-4da7-b090-ca3a53d31f58".to_string()), // 'GKS Healthsol LLP', 'FFVC 44SR'
-                    ..Default::default()
+                    installation_date: None,
+                    replacement_date: None,
+                    category_id: None,
+                    class_id: None,
+                    type_id: None,
                 },
             ),
             Err(InsertAssetError::SerialNumberAlreadyExists)
diff --git a/server/service/src/asset/tests/update.rs b/server/service/src/asset/tests/update.rs
index 2203ee90d..36335e60a 100644
--- a/server/service/src/asset/tests/update.rs
+++ b/server/service/src/asset/tests/update.rs
@@ -43,7 +43,11 @@ mod query {
                     asset_number: Some("test_asset_number".to_string()),
                     serial_number: Some("test_serial_number".to_string()),
                     catalogue_item_id: Some("189ef51c-d232-4da7-b090-ca3a53d31f58".to_string()), // 'GKS Healthsol LLP', 'FFVC 44SR'
-                    ..Default::default()
+                    installation_date: None,
+                    replacement_date: None,
+                    category_id: None,
+                    class_id: None,
+                    type_id: None,
                 },
             )
             .unwrap();
@@ -58,7 +62,11 @@ mod query {
                     asset_number: Some("test_asset_number_2".to_string()),
                     serial_number: None,
                     catalogue_item_id: Some("189ef51c-d232-4da7-b090-ca3a53d31f58".to_string()),
-                    ..Default::default()
+                    installation_date: None,
+                    replacement_date: None,
+                    category_id: None,
+                    class_id: None,
+                    type_id: None,
                 },
             )
             .unwrap();
diff --git a/server/service/src/asset/update.rs b/server/service/src/asset/update.rs
index 7a246e4c0..7ba1cd86a 100644
--- a/server/service/src/asset/update.rs
+++ b/server/service/src/asset/update.rs
@@ -38,11 +38,6 @@ pub struct UpdateAsset {
     pub installation_date: Option<NullableUpdate<NaiveDate>>,
     pub replacement_date: Option<NullableUpdate<NaiveDate>>,
     pub location_ids: Option<Vec<String>>,
-    pub properties: Option<String>,
-    pub donor_name_id: Option<NullableUpdate<String>>,
-    pub warranty_start: Option<NullableUpdate<NaiveDate>>,
-    pub warranty_end: Option<NullableUpdate<NaiveDate>>,
-    pub needs_replacement: Option<bool>,
 }
 
 pub fn update_asset(
@@ -143,11 +138,6 @@ pub fn generate(
         installation_date,
         replacement_date,
         location_ids: _,
-        properties,
-        donor_name_id,
-        warranty_start,
-        warranty_end,
-        needs_replacement,
     }: UpdateAsset,
     mut asset_row: AssetRow,
 ) -> AssetRow {
@@ -174,26 +164,6 @@ pub fn generate(
         asset_row.replacement_date = replacement_date.value;
     }
 
-    if let Some(properties) = properties {
-        asset_row.properties = Some(properties);
-    }
-
-    if let Some(donor_name_id) = donor_name_id {
-        asset_row.donor_name_id = donor_name_id.value;
-    }
-
-    if let Some(warranty_start) = warranty_start {
-        asset_row.warranty_start = warranty_start.value;
-    }
-
-    if let Some(warranty_end) = warranty_end {
-        asset_row.warranty_end = warranty_end.value;
-    }
-
-    if let Some(needs_replacement) = needs_replacement {
-        asset_row.needs_replacement = Some(needs_replacement);
-    }
-
     // Set the modified date time
     asset_row.modified_datetime = Utc::now().naive_utc();
 
diff --git a/server/service/src/asset/validate.rs b/server/service/src/asset/validate.rs
index 69e7f71aa..028ac4156 100644
--- a/server/service/src/asset/validate.rs
+++ b/server/service/src/asset/validate.rs
@@ -4,7 +4,6 @@ use repository::{
     asset_internal_location_row::AssetInternalLocationRow,
     asset_log_reason_row::{AssetLogReasonRow, AssetLogReasonRowRepository},
     asset_log_row::AssetLogStatus,
-    asset_property_row::{AssetPropertyRow, AssetPropertyRowRepository},
     assets::{
         asset_log_row::{AssetLogRow, AssetLogRowRepository},
         asset_row::{AssetRow, AssetRowRepository},
@@ -22,13 +21,6 @@ pub fn check_asset_exists(
     AssetRowRepository::new(connection).find_one_by_id(id)
 }
 
-pub fn check_asset_property_exists(
-    id: &str,
-    connection: &StorageConnection,
-) -> Result<Option<AssetPropertyRow>, RepositoryError> {
-    AssetPropertyRowRepository::new(connection).find_one_by_id(id)
-}
-
 pub fn check_asset_number_exists(
     asset_number: &str,
     connection: &StorageConnection,
diff --git a/server/service/src/auth.rs b/server/service/src/auth.rs
index 0076554be..178585943 100644
--- a/server/service/src/auth.rs
+++ b/server/service/src/auth.rs
@@ -118,12 +118,6 @@ pub enum Resource {
     MutateAsset,
     MutateAssetCatalogueItem,
     QueryAsset,
-    // demographic
-    QueryDemographic,
-    MutateDemographic,
-    // vaccine course
-    MutateVaccineCourse,
-    QueryVaccineCourse,
 }
 
 fn all_permissions() -> HashMap<Resource, PermissionDSL> {
@@ -530,22 +524,6 @@ fn all_permissions() -> HashMap<Resource, PermissionDSL> {
         Resource::QueryAsset,
         PermissionDSL::HasPermission(PermissionType::AssetQuery),
     );
-    map.insert(
-        Resource::QueryDemographic,
-        PermissionDSL::NoPermissionRequired,
-    );
-    map.insert(
-        Resource::MutateDemographic,
-        PermissionDSL::NoPermissionRequired,
-    );
-    map.insert(
-        Resource::MutateVaccineCourse,
-        PermissionDSL::HasPermission(PermissionType::VaccineCourseMutate),
-    );
-    map.insert(
-        Resource::QueryVaccineCourse,
-        PermissionDSL::NoPermissionRequired,
-    );
 
     map
 }
diff --git a/server/service/src/barcode.rs b/server/service/src/barcode.rs
index abfc45917..97bc9885a 100644
--- a/server/service/src/barcode.rs
+++ b/server/service/src/barcode.rs
@@ -16,13 +16,13 @@ pub struct InsertResult {
     pub id: String,
     pub gtin: String,
     pub item_id: String,
-    pub pack_size: Option<f64>,
+    pub pack_size: Option<i32>,
 }
 
 pub struct BarcodeInput {
     pub gtin: String,
     pub item_id: String,
-    pub pack_size: Option<f64>,
+    pub pack_size: Option<i32>,
 }
 
 #[derive(Debug, PartialEq)]
diff --git a/server/service/src/catalogue/delete.rs b/server/service/src/catalogue/delete.rs
index c1318600b..f8c659f50 100644
--- a/server/service/src/catalogue/delete.rs
+++ b/server/service/src/catalogue/delete.rs
@@ -1,5 +1,9 @@
 use crate::service_provider::ServiceContext;
 use repository::asset::{AssetFilter, AssetRepository};
+use repository::asset_catalogue_item_property::{
+    AssetCatalogueItemPropertyRepository, AssetCataloguePropertyItemFilter,
+};
+use repository::asset_catalogue_item_property_row::AssetCatalogueItemPropertyRowRepository;
 use repository::asset_catalogue_item_row::AssetCatalogueItemRowRepository;
 use repository::EqualFilter;
 use repository::{RepositoryError, StorageConnection};
@@ -15,10 +19,23 @@ pub fn delete_asset_catalogue_item(
     ctx: &ServiceContext,
     id: String,
 ) -> Result<String, DeleteAssetCatalogueItemError> {
+    let property_ids = AssetCatalogueItemPropertyRepository::new(&ctx.connection)
+        .query(Some(
+            AssetCataloguePropertyItemFilter::new().catalogue_item_id(EqualFilter::equal_to(&id)),
+        ))?
+        .into_iter()
+        .map(|property| property.id)
+        .collect::<Vec<String>>();
     let asset_catalogue_item_id = ctx
         .connection
         .transaction_sync(|connection| {
             validate(connection, &id)?;
+            property_ids.into_iter().for_each(|id| {
+                match AssetCatalogueItemPropertyRowRepository::new(connection).delete(&id) {
+                    Ok(_) => (),
+                    Err(_) => (),
+                };
+            });
             match AssetCatalogueItemRowRepository::new(connection).mark_deleted(&id) {
                 Ok(_) => Ok(id),
                 Err(err) => Err(DeleteAssetCatalogueItemError::from(err)),
diff --git a/server/service/src/catalogue/insert.rs b/server/service/src/catalogue/insert.rs
index 54ec108ac..15b1626ba 100644
--- a/server/service/src/catalogue/insert.rs
+++ b/server/service/src/catalogue/insert.rs
@@ -28,7 +28,6 @@ pub struct InsertAssetCatalogueItem {
     pub manufacturer: Option<String>,
     pub model: String,
     pub type_id: String,
-    pub properties: Option<String>,
 }
 
 pub fn insert_asset_catalogue_item(
@@ -105,7 +104,6 @@ pub fn generate(
         manufacturer,
         model,
         type_id,
-        properties,
     }: InsertAssetCatalogueItem,
 ) -> AssetCatalogueItemRow {
     AssetCatalogueItemRow {
@@ -117,7 +115,6 @@ pub fn generate(
         manufacturer,
         model,
         type_id,
-        properties,
         deleted_datetime: None,
     }
 }
diff --git a/server/service/src/catalogue/insert_property.rs b/server/service/src/catalogue/insert_property.rs
new file mode 100644
index 000000000..f330db2fb
--- /dev/null
+++ b/server/service/src/catalogue/insert_property.rs
@@ -0,0 +1,126 @@
+use crate::{
+    activity_log::activity_log_entry, service_provider::ServiceContext, SingleRecordError,
+};
+use repository::{
+    asset_catalogue_item_property::{
+        AssetCatalogueItemPropertyRepository, AssetCataloguePropertyItemFilter,
+    },
+    asset_catalogue_item_property_row::{
+        AssetCatalogueItemPropertyRow, AssetCatalogueItemPropertyRowRepository,
+    },
+    ActivityLogType, EqualFilter, RepositoryError, StorageConnection,
+};
+
+#[derive(PartialEq, Debug)]
+pub enum InsertAssetCatalogueItemPropertyError {
+    ItemAlreadyExists,
+    CreatedRecordNotFound,
+    DatabaseError(RepositoryError),
+}
+
+#[derive(PartialEq, Debug, Clone)]
+pub struct InsertAssetCatalogueItemProperty {
+    pub id: String,
+    pub catalogue_item_id: String,
+    pub catalogue_property_id: String,
+    pub value_string: Option<String>,
+    pub value_int: Option<i32>,
+    pub value_float: Option<f64>,
+    pub value_bool: Option<bool>,
+}
+
+fn get_asset_catalogue_item_property(
+    connection: &StorageConnection,
+    id: String,
+) -> Result<Option<AssetCatalogueItemPropertyRow>, RepositoryError> {
+    let repository = AssetCatalogueItemPropertyRepository::new(connection);
+    let mut result = repository.query(Some(
+        AssetCataloguePropertyItemFilter::new().id(EqualFilter::equal_to(&id)),
+    ))?;
+    Ok(result.pop())
+}
+
+pub fn insert_asset_catalogue_item_property(
+    ctx: &ServiceContext,
+    input: InsertAssetCatalogueItemProperty,
+) -> Result<AssetCatalogueItemPropertyRow, InsertAssetCatalogueItemPropertyError> {
+    let asset_catalogue_item_property = ctx
+        .connection
+        .transaction_sync(|connection| {
+            validate(&input, connection)?;
+            let new_item = generate(input);
+            AssetCatalogueItemPropertyRowRepository::new(connection).upsert_one(&new_item)?;
+
+            activity_log_entry(
+                ctx,
+                ActivityLogType::AssetCatalogueItemCreated,
+                Some(new_item.id.clone()),
+                None,
+                None,
+            )?;
+
+            get_asset_catalogue_item_property(&ctx.connection, new_item.id)
+                .map_err(InsertAssetCatalogueItemPropertyError::from)
+        })
+        .map_err(|error| error.to_inner_error())?;
+
+    asset_catalogue_item_property
+        .ok_or(InsertAssetCatalogueItemPropertyError::CreatedRecordNotFound)
+}
+
+pub fn validate(
+    input: &InsertAssetCatalogueItemProperty,
+    connection: &StorageConnection,
+) -> Result<(), InsertAssetCatalogueItemPropertyError> {
+    let repo = AssetCatalogueItemPropertyRepository::new(connection);
+
+    // Check the item does not already exist
+    if repo.count(Some(
+        AssetCataloguePropertyItemFilter::new()
+            .catalogue_item_id(EqualFilter::equal_to(&input.catalogue_item_id))
+            .catalogue_property_id(EqualFilter::equal_to(&input.catalogue_property_id)),
+    ))? > 0
+    {
+        return Err(InsertAssetCatalogueItemPropertyError::ItemAlreadyExists);
+    }
+
+    Ok(())
+}
+
+pub fn generate(
+    InsertAssetCatalogueItemProperty {
+        id,
+        catalogue_item_id,
+        catalogue_property_id,
+        value_string,
+        value_int,
+        value_float,
+        value_bool,
+    }: InsertAssetCatalogueItemProperty,
+) -> AssetCatalogueItemPropertyRow {
+    AssetCatalogueItemPropertyRow {
+        id,
+        catalogue_item_id,
+        catalogue_property_id,
+        value_string,
+        value_int,
+        value_float,
+        value_bool,
+    }
+}
+
+impl From<RepositoryError> for InsertAssetCatalogueItemPropertyError {
+    fn from(error: RepositoryError) -> Self {
+        InsertAssetCatalogueItemPropertyError::DatabaseError(error)
+    }
+}
+
+impl From<SingleRecordError> for InsertAssetCatalogueItemPropertyError {
+    fn from(error: SingleRecordError) -> Self {
+        use InsertAssetCatalogueItemPropertyError::*;
+        match error {
+            SingleRecordError::DatabaseError(error) => DatabaseError(error),
+            SingleRecordError::NotFound(_) => CreatedRecordNotFound,
+        }
+    }
+}
diff --git a/server/service/src/catalogue/mod.rs b/server/service/src/catalogue/mod.rs
index 48c7d3a2e..605910e76 100644
--- a/server/service/src/catalogue/mod.rs
+++ b/server/service/src/catalogue/mod.rs
@@ -4,13 +4,22 @@ use self::delete::{delete_asset_catalogue_item, DeleteAssetCatalogueItemError};
 use self::insert::{
     insert_asset_catalogue_item, InsertAssetCatalogueItem, InsertAssetCatalogueItemError,
 };
-
+use self::insert_property::{
+    insert_asset_catalogue_item_property, InsertAssetCatalogueItemProperty,
+    InsertAssetCatalogueItemPropertyError,
+};
 use self::query_catalogue_item::{get_asset_catalogue_item, get_asset_catalogue_items};
+use self::query_catalogue_property::{
+    get_asset_catalogue_properties, get_asset_catalogue_property,
+};
 use self::query_category::{get_asset_categories, get_asset_category};
 use self::query_class::{get_asset_class, get_asset_classes};
 use self::query_type::{get_asset_type, get_asset_types};
 
 use super::{ListError, ListResult};
+use repository::asset_catalogue_item_property_row::AssetCatalogueItemPropertyRow;
+use repository::asset_catalogue_property::AssetCataloguePropertyFilter;
+use repository::asset_catalogue_property_row::AssetCataloguePropertyRow;
 use repository::RepositoryError;
 use repository::{
     assets::{
@@ -28,7 +37,9 @@ use repository::{
 
 pub mod delete;
 pub mod insert;
+pub mod insert_property;
 pub mod query_catalogue_item;
+pub mod query_catalogue_property;
 pub mod query_category;
 pub mod query_class;
 pub mod query_type;
@@ -120,6 +131,30 @@ pub trait AssetCatalogueServiceTrait: Sync + Send {
     ) -> Result<String, DeleteAssetCatalogueItemError> {
         delete_asset_catalogue_item(ctx, id)
     }
+
+    fn get_asset_catalogue_properties(
+        &self,
+        connection: &StorageConnection,
+        filter: Option<AssetCataloguePropertyFilter>,
+    ) -> Result<ListResult<AssetCataloguePropertyRow>, ListError> {
+        get_asset_catalogue_properties(connection, filter)
+    }
+
+    fn get_asset_catalogue_property(
+        &self,
+        connection: &StorageConnection,
+        id: String,
+    ) -> Result<Option<AssetCataloguePropertyRow>, RepositoryError> {
+        get_asset_catalogue_property(connection, id)
+    }
+
+    fn insert_asset_catalogue_item_property(
+        &self,
+        ctx: &ServiceContext,
+        property: InsertAssetCatalogueItemProperty,
+    ) -> Result<AssetCatalogueItemPropertyRow, InsertAssetCatalogueItemPropertyError> {
+        insert_asset_catalogue_item_property(ctx, property)
+    }
 }
 
 pub struct CatalogueService {}
diff --git a/server/service/src/catalogue/query_catalogue_property.rs b/server/service/src/catalogue/query_catalogue_property.rs
new file mode 100644
index 000000000..ec0e137ba
--- /dev/null
+++ b/server/service/src/catalogue/query_catalogue_property.rs
@@ -0,0 +1,30 @@
+use repository::{
+    asset_catalogue_property::{AssetCataloguePropertyFilter, AssetCataloguePropertyRepository},
+    asset_catalogue_property_row::AssetCataloguePropertyRow,
+    EqualFilter, RepositoryError, StorageConnection,
+};
+
+use crate::{usize_to_u32, ListError, ListResult};
+
+pub fn get_asset_catalogue_properties(
+    connection: &StorageConnection,
+    filter: Option<AssetCataloguePropertyFilter>,
+) -> Result<ListResult<AssetCataloguePropertyRow>, ListError> {
+    let repository = AssetCataloguePropertyRepository::new(connection);
+    let rows = repository.query(filter.clone())?;
+    Ok(ListResult {
+        rows: rows.clone(),
+        count: usize_to_u32(rows.len()),
+    })
+}
+
+pub fn get_asset_catalogue_property(
+    connection: &StorageConnection,
+    id: String,
+) -> Result<Option<AssetCataloguePropertyRow>, RepositoryError> {
+    let repository = AssetCataloguePropertyRepository::new(connection);
+    let mut result = repository.query(Some(
+        AssetCataloguePropertyFilter::new().id(EqualFilter::equal_to(&id)),
+    ))?;
+    Ok(result.pop())
+}
diff --git a/server/service/src/catalogue/tests/insert.rs b/server/service/src/catalogue/tests/insert.rs
index 2caecc801..e5dee3b5c 100644
--- a/server/service/src/catalogue/tests/insert.rs
+++ b/server/service/src/catalogue/tests/insert.rs
@@ -1,7 +1,6 @@
 #[cfg(test)]
 mod query {
     use repository::{
-        migrations::constants::{COLD_CHAIN_EQUIPMENT_UUID, REFRIGERATORS_AND_FREEZERS_UUID},
         mock::{mock_store_a, MockDataInserts},
         test_db::setup_all,
     };
@@ -19,8 +18,6 @@ mod query {
         )
         .await;
 
-        const REFRIGERATORS_UUID: &str = "fd79171f-5da8-4801-b299-9426f34310a8";
-
         let service_provider = ServiceProvider::new(connection_manager, "app_data");
         let ctx = service_provider
             .context(mock_store_a().id, "".to_string())
@@ -35,14 +32,13 @@ mod query {
                 InsertAssetCatalogueItem {
                     id: id.clone(),
                     sub_catalogue: "General".to_string(),
-                    category_id: REFRIGERATORS_AND_FREEZERS_UUID.to_string(),
-                    class_id: COLD_CHAIN_EQUIPMENT_UUID.to_string(),
+                    category_id: "02cbea92-d5bf-4832-863b-c04e093a7760".to_string(), // Refrigerators and Freezers
+                    class_id: "fad280b6-8384-41af-84cf-c7b6b4526ef0".to_string(), // Cold chain equipment
                     code: "G1".to_string(),
                     manufacturer: Some("Fisher & Paykel".to_string()),
                     model: "Kelvinator".to_string(),
-                    type_id: REFRIGERATORS_UUID.to_string(),
-                    properties: None,
-                }, // Fridge
+                    type_id: "fd79171f-5da8-4801-b299-9426f34310a8".to_string(), // Fridge
+                },
             )
             .unwrap();
 
@@ -53,13 +49,12 @@ mod query {
                 InsertAssetCatalogueItem {
                     id: id.clone(),
                     sub_catalogue: "General".to_string(),
-                    category_id: "REFRIGERATORS_AND_FREEZERS_UUID".to_string(),
-                    class_id: COLD_CHAIN_EQUIPMENT_UUID.to_string(),
+                    category_id: "02cbea92-d5bf-4832-863b-c04e093a7760".to_string(), // Refrigerators and Freezers
+                    class_id: "fad280b6-8384-41af-84cf-c7b6b4526ef0".to_string(), // Cold chain equipment
                     code: "G1".to_string(),
                     manufacturer: Some("Fisher & Paykel".to_string()),
                     model: "Kelvinator".to_string(),
-                    type_id: REFRIGERATORS_UUID.to_string(),
-                    properties: None
+                    type_id: "fd79171f-5da8-4801-b299-9426f34310a8".to_string(), // Fridge
                 },
             ),
             Err(InsertAssetCatalogueItemError::ItemAlreadyExists)
@@ -72,13 +67,12 @@ mod query {
                 InsertAssetCatalogueItem {
                     id: "new_id".to_string(),
                     sub_catalogue: "General".to_string(),
-                    category_id: REFRIGERATORS_AND_FREEZERS_UUID.to_string(),
-                    class_id: COLD_CHAIN_EQUIPMENT_UUID.to_string(),
+                    category_id: "02cbea92-d5bf-4832-863b-c04e093a7760".to_string(), // Refrigerators and Freezers
+                    class_id: "fad280b6-8384-41af-84cf-c7b6b4526ef0".to_string(), // Cold chain equipment
                     code: "G1".to_string(),
                     manufacturer: Some("Fisher & Paykel".to_string()),
                     model: "Kelvinator".to_string(),
-                    type_id: REFRIGERATORS_UUID.to_string(),
-                    properties: None
+                    type_id: "fd79171f-5da8-4801-b299-9426f34310a8".to_string(), // Fridge
                 },
             ),
             Err(InsertAssetCatalogueItemError::CodeAlreadyExists)
@@ -91,13 +85,12 @@ mod query {
                 InsertAssetCatalogueItem {
                     id: "new_id".to_string(),
                     sub_catalogue: "General".to_string(),
-                    category_id: REFRIGERATORS_AND_FREEZERS_UUID.to_string(),
-                    class_id: COLD_CHAIN_EQUIPMENT_UUID.to_string(),
+                    category_id: "02cbea92-d5bf-4832-863b-c04e093a7760".to_string(), // Refrigerators and Freezers
+                    class_id: "fad280b6-8384-41af-84cf-c7b6b4526ef0".to_string(), // Cold chain equipment
                     code: "NewCode".to_string(),
                     manufacturer: Some("Fisher & Paykel".to_string()),
                     model: "Kelvinator".to_string(),
-                    type_id: REFRIGERATORS_UUID.to_string(),
-                    properties: None
+                    type_id: "fd79171f-5da8-4801-b299-9426f34310a8".to_string(), // Fridge
                 },
             ),
             Err(InsertAssetCatalogueItemError::ManufacturerAndModelAlreadyExist)
diff --git a/server/service/src/catalogue/tests/query_catalogue_item.rs b/server/service/src/catalogue/tests/query_catalogue_item.rs
index f285305a2..98275f593 100644
--- a/server/service/src/catalogue/tests/query_catalogue_item.rs
+++ b/server/service/src/catalogue/tests/query_catalogue_item.rs
@@ -56,8 +56,6 @@ mod query_catalogue_item {
         let context = service_provider.basic_context().unwrap();
         let service = service_provider.catalogue_service;
 
-        static TOTAL_CATALOGUE_ITEM_ROWS: u32 = 168;
-
         // id equal_any
         let mut result = service
             .get_asset_catalogue_items(
@@ -194,7 +192,7 @@ mod query_catalogue_item {
             )
             .unwrap();
 
-        assert_eq!(result.count, TOTAL_CATALOGUE_ITEM_ROWS);
+        assert_eq!(result.count, 158);
 
         // class filter - equal like
         result = service
@@ -206,9 +204,9 @@ mod query_catalogue_item {
             )
             .unwrap();
 
-        assert_eq!(result.count, TOTAL_CATALOGUE_ITEM_ROWS);
+        assert_eq!(result.count, 158);
 
-        // class filter - empty string matches everything
+        // class filter - no matches
         let result_1 = service
             .get_asset_catalogue_items(
                 &context.connection,
@@ -217,7 +215,7 @@ mod query_catalogue_item {
                 None,
             )
             .unwrap();
-        assert_eq!(result_1.count, TOTAL_CATALOGUE_ITEM_ROWS);
+        assert_eq!(result_1.count, 158);
 
         // class filter - no matches
         let result = service
@@ -314,6 +312,6 @@ mod query_catalogue_item {
                 }),
             )
             .unwrap();
-        assert_eq!(result.rows[0].code, "E001/001-C");
+        assert_eq!(result.rows[0].code, "E003/002");
     }
 }
diff --git a/server/service/src/dashboard/item_count.rs b/server/service/src/dashboard/item_count.rs
index e586ee482..2fd0d9e3e 100644
--- a/server/service/src/dashboard/item_count.rs
+++ b/server/service/src/dashboard/item_count.rs
@@ -50,19 +50,19 @@ impl ItemCountServiceTrait for ItemServiceCount {
 
         let no_stock = item_stats
             .iter()
-            .filter(|i| i.available_stock_on_hand == 0.0)
+            .filter(|i| i.available_stock_on_hand == 0)
             .count() as i64;
 
         let low_stock = item_stats
             .iter()
-            .filter(|&i| (i.available_stock_on_hand > 0.0))
+            .filter(|&i| (i.available_stock_on_hand > 0))
             .map(|i| i.available_stock_on_hand as f64 / i.average_monthly_consumption)
             .filter(|months_of_stock| *months_of_stock < low_stock_threshold as f64)
             .count() as i64;
 
         let more_than_six_months_stock = item_stats
             .iter()
-            .filter(|&i| (i.available_stock_on_hand > 0.0))
+            .filter(|&i| (i.available_stock_on_hand > 0))
             .map(|i| i.available_stock_on_hand as f64 / i.average_monthly_consumption)
             .filter(|months_of_stock| *months_of_stock > 6.0)
             .count() as i64;
@@ -245,7 +245,7 @@ mod item_count_service_test {
                         item_link_id: "item1".to_string(),
                         store_id: mock_store_b().id,
                         available_number_of_packs: 5.0,
-                        pack_size: 1.0,
+                        pack_size: 1,
                         ..StockLineRow::default()
                     },
                     StockLineRow {
@@ -253,7 +253,7 @@ mod item_count_service_test {
                         item_link_id: "item2".to_string(),
                         store_id: mock_store_b().id,
                         available_number_of_packs: 0.0,
-                        pack_size: 1.0,
+                        pack_size: 1,
                         ..StockLineRow::default()
                     },
                 ],
@@ -393,7 +393,7 @@ mod item_count_service_test {
                         item_link_id: "item1".to_string(),
                         store_id: mock_store_b().id,
                         available_number_of_packs: 5.0,
-                        pack_size: 1.0,
+                        pack_size: 1,
                         ..StockLineRow::default()
                     },
                     StockLineRow {
@@ -401,7 +401,7 @@ mod item_count_service_test {
                         item_link_id: "item2".to_string(),
                         store_id: mock_store_b().id,
                         available_number_of_packs: 40.0,
-                        pack_size: 1.0,
+                        pack_size: 1,
                         ..StockLineRow::default()
                     },
                 ],
@@ -420,7 +420,7 @@ mod item_count_service_test {
                     invoice_id: "invoice1".to_string(),
                     item_link_id: "item2".to_string(),
                     number_of_packs: 5.0,
-                    pack_size: 1.0,
+                    pack_size: 1,
                     r#type: InvoiceLineType::StockOut,
                     ..InvoiceLineRow::default()
                 }],
@@ -456,7 +456,7 @@ mod item_count_service_test {
                 r.invoice_id = "invoice2".to_string();
                 r.item_link_id = "item1".to_string();
                 r.number_of_packs = 20.0;
-                r.pack_size = 1.0;
+                r.pack_size = 1;
                 r.r#type = InvoiceLineType::StockOut;
             }))
             .unwrap();
diff --git a/server/service/src/demographic/insert_demographic_indicator.rs b/server/service/src/demographic/insert_demographic_indicator.rs
deleted file mode 100644
index 4aa787c8e..000000000
--- a/server/service/src/demographic/insert_demographic_indicator.rs
+++ /dev/null
@@ -1,112 +0,0 @@
-use crate::{service_provider::ServiceContext, SingleRecordError};
-use repository::{
-    DemographicIndicatorRow, DemographicIndicatorRowRepository, RepositoryError, StorageConnection,
-};
-
-use super::{
-    query_demographic_indicator::get_demographic_indicator,
-    validate::{check_demographic_indicator_exists, check_year_name_combination_unique},
-};
-
-#[derive(PartialEq, Debug)]
-pub enum InsertDemographicIndicatorError {
-    DemographicIndicatorAlreadyExists,
-    DemographicIndicatorAlreadyExistsForThisYear,
-    CreatedRecordNotFound,
-    DatabaseError(RepositoryError),
-}
-
-#[derive(PartialEq, Debug, Clone, Default)]
-pub struct InsertDemographicIndicator {
-    pub id: String,
-    pub name: String,
-    pub base_year: i32,
-    pub base_population: Option<i32>,
-    pub population_percentage: Option<f64>,
-    pub year_1_projection: Option<i32>,
-    pub year_2_projection: Option<i32>,
-    pub year_3_projection: Option<i32>,
-    pub year_4_projection: Option<i32>,
-    pub year_5_projection: Option<i32>,
-}
-
-pub fn insert_demographic_indicator(
-    ctx: &ServiceContext,
-    input: InsertDemographicIndicator,
-) -> Result<DemographicIndicatorRow, InsertDemographicIndicatorError> {
-    let demographic_indicator = ctx
-        .connection
-        .transaction_sync(|connection| {
-            validate(&input, connection)?;
-
-            let new_demographic_indicator = generate(input);
-            DemographicIndicatorRowRepository::new(connection)
-                .upsert_one(&new_demographic_indicator)?;
-
-            // TODO add activity log entry
-
-            get_demographic_indicator(ctx, new_demographic_indicator.id)
-                .map_err(InsertDemographicIndicatorError::from)
-        })
-        .map_err(|error| error.to_inner_error())?;
-    Ok(demographic_indicator)
-}
-
-pub fn validate(
-    input: &InsertDemographicIndicator,
-    connection: &StorageConnection,
-) -> Result<(), InsertDemographicIndicatorError> {
-    if !check_year_name_combination_unique(&input.name, input.base_year, &input.id, connection)? {
-        return Err(InsertDemographicIndicatorError::DemographicIndicatorAlreadyExistsForThisYear);
-    }
-
-    if check_demographic_indicator_exists(&input.id, connection)?.is_some() {
-        return Err(InsertDemographicIndicatorError::DemographicIndicatorAlreadyExists);
-    }
-
-    Ok(())
-}
-
-pub fn generate(
-    InsertDemographicIndicator {
-        id,
-        name,
-        base_year,
-        base_population,
-        population_percentage,
-        year_1_projection,
-        year_2_projection,
-        year_3_projection,
-        year_4_projection,
-        year_5_projection,
-    }: InsertDemographicIndicator,
-) -> DemographicIndicatorRow {
-    DemographicIndicatorRow {
-        id,
-        name,
-        base_year,
-        base_population: base_population.unwrap_or_default(),
-        population_percentage: population_percentage.unwrap_or_default(),
-        year_1_projection: year_1_projection.unwrap_or_default(),
-        year_2_projection: year_2_projection.unwrap_or_default(),
-        year_3_projection: year_3_projection.unwrap_or_default(),
-        year_4_projection: year_4_projection.unwrap_or_default(),
-        year_5_projection: year_5_projection.unwrap_or_default(),
-    }
-}
-
-impl From<RepositoryError> for InsertDemographicIndicatorError {
-    fn from(error: RepositoryError) -> Self {
-        InsertDemographicIndicatorError::DatabaseError(error)
-    }
-}
-
-impl From<SingleRecordError> for InsertDemographicIndicatorError {
-    fn from(error: SingleRecordError) -> Self {
-        use InsertDemographicIndicatorError::*;
-        match error {
-            SingleRecordError::DatabaseError(error) => DatabaseError(error),
-            SingleRecordError::NotFound(_) => CreatedRecordNotFound,
-        }
-    }
-}
diff --git a/server/service/src/demographic/insert_demographic_projection.rs b/server/service/src/demographic/insert_demographic_projection.rs
deleted file mode 100644
index 787bf440c..000000000
--- a/server/service/src/demographic/insert_demographic_projection.rs
+++ /dev/null
@@ -1,106 +0,0 @@
-use repository::{
-    DemographicProjectionRow, DemographicProjectionRowRepository, RepositoryError,
-    StorageConnection,
-};
-
-use crate::{service_provider::ServiceContext, SingleRecordError};
-
-use super::{
-    query_demographic_projection::get_demographic_projection,
-    validate::{check_base_year_unique, check_demographic_projection_exists},
-};
-
-#[derive(PartialEq, Debug)]
-pub enum InsertDemographicProjectionError {
-    DemographicProjectionBaseYearAlreadyExists,
-    DemographicProjectionAlreadyExists,
-    CreatedRecordNotFound,
-    DatabaseError(RepositoryError),
-}
-
-#[derive(PartialEq, Debug, Clone, Default)]
-pub struct InsertDemographicProjection {
-    pub id: String,
-    pub base_year: i32,
-    pub year_1: Option<i32>,
-    pub year_2: Option<i32>,
-    pub year_3: Option<i32>,
-    pub year_4: Option<i32>,
-    pub year_5: Option<i32>,
-}
-
-pub fn insert_demographic_projection(
-    ctx: &ServiceContext,
-    input: InsertDemographicProjection,
-) -> Result<DemographicProjectionRow, InsertDemographicProjectionError> {
-    let demographic_projection = ctx
-        .connection
-        .transaction_sync(|connection| {
-            validate(&input, connection)?;
-
-            let new_demographic_projection = generate(input);
-            DemographicProjectionRowRepository::new(connection)
-                .upsert_one(&new_demographic_projection)?;
-
-            // TODO add activity log entry
-
-            get_demographic_projection(ctx, new_demographic_projection.id)
-                .map_err(InsertDemographicProjectionError::from)
-        })
-        .map_err(|error| error.to_inner_error())?;
-    Ok(demographic_projection)
-}
-
-pub fn validate(
-    input: &InsertDemographicProjection,
-    connection: &StorageConnection,
-) -> Result<(), InsertDemographicProjectionError> {
-    // Check for duplicate base year
-    if !check_base_year_unique(input.base_year.clone(), connection)? {
-        return Err(InsertDemographicProjectionError::DemographicProjectionBaseYearAlreadyExists);
-    }
-
-    if check_demographic_projection_exists(&input.id, connection)?.is_some() {
-        return Err(InsertDemographicProjectionError::DemographicProjectionAlreadyExists);
-    }
-
-    Ok(())
-}
-
-pub fn generate(
-    InsertDemographicProjection {
-        id,
-        base_year,
-        year_1,
-        year_2,
-        year_3,
-        year_4,
-        year_5,
-    }: InsertDemographicProjection,
-) -> DemographicProjectionRow {
-    DemographicProjectionRow {
-        id,
-        base_year,
-        year_1: year_1.unwrap_or_default(),
-        year_2: year_2.unwrap_or_default(),
-        year_3: year_3.unwrap_or_default(),
-        year_4: year_4.unwrap_or_default(),
-        year_5: year_5.unwrap_or_default(),
-    }
-}
-
-impl From<RepositoryError> for InsertDemographicProjectionError {
-    fn from(error: RepositoryError) -> Self {
-        InsertDemographicProjectionError::DatabaseError(error)
-    }
-}
-
-impl From<SingleRecordError> for InsertDemographicProjectionError {
-    fn from(error: SingleRecordError) -> Self {
-        use InsertDemographicProjectionError::*;
-        match error {
-            SingleRecordError::DatabaseError(error) => DatabaseError(error),
-            SingleRecordError::NotFound(_) => CreatedRecordNotFound,
-        }
-    }
-}
diff --git a/server/service/src/demographic/mod.rs b/server/service/src/demographic/mod.rs
deleted file mode 100644
index 428ce7d8c..000000000
--- a/server/service/src/demographic/mod.rs
+++ /dev/null
@@ -1,114 +0,0 @@
-use self::insert_demographic_indicator::{
-    insert_demographic_indicator, InsertDemographicIndicator, InsertDemographicIndicatorError,
-};
-
-use self::insert_demographic_projection::{
-    insert_demographic_projection, InsertDemographicProjection, InsertDemographicProjectionError,
-};
-use self::query_demographic_indicator::{get_demographic_indicator, get_demographic_indicators};
-use self::update_demographic_indicator::{
-    update_demographic_indicator, UpdateDemographicIndicator, UpdateDemographicIndicatorError,
-};
-use self::update_demographic_projection::{
-    update_demographic_projection, UpdateDemographicProjection, UpdateDemographicProjectionError,
-};
-
-use super::{ListError, ListResult};
-use crate::{service_provider::ServiceContext, SingleRecordError};
-
-use repository::demographic_indicator::{
-    DemographicIndicator, DemographicIndicatorFilter, DemographicIndicatorSort,
-};
-use repository::{
-    DemographicIndicatorRow, DemographicProjectionRow, PaginationOption, StorageConnection,
-};
-
-pub mod insert_demographic_indicator;
-pub mod insert_demographic_projection;
-pub mod query_demographic_indicator;
-pub mod query_demographic_projection;
-pub mod update_demographic_indicator;
-pub mod update_demographic_projection;
-mod validate;
-
-use self::query_demographic_projection::{get_demographic_projection, get_demographic_projections};
-
-use repository::demographic_projection::{
-    DemographicProjection, DemographicProjectionFilter, DemographicProjectionSort,
-};
-
-pub trait DemographicServiceTrait: Sync + Send {
-    fn get_demographic_indicators(
-        &self,
-        connection: &StorageConnection,
-        pagination: Option<PaginationOption>,
-        filter: Option<DemographicIndicatorFilter>,
-        sort: Option<DemographicIndicatorSort>,
-    ) -> Result<ListResult<DemographicIndicator>, ListError> {
-        get_demographic_indicators(connection, pagination, filter, sort)
-    }
-
-    fn get_demographic_indicator(
-        &self,
-        ctx: &ServiceContext,
-        id: String,
-    ) -> Result<DemographicIndicator, SingleRecordError> {
-        get_demographic_indicator(ctx, id)
-    }
-
-    fn get_demographic_projections(
-        &self,
-        connection: &StorageConnection,
-        pagination: Option<PaginationOption>,
-        filter: Option<DemographicProjectionFilter>,
-        sort: Option<DemographicProjectionSort>,
-    ) -> Result<ListResult<DemographicProjection>, ListError> {
-        get_demographic_projections(connection, pagination, filter, sort)
-    }
-
-    fn get_demographic_projection(
-        &self,
-        ctx: &ServiceContext,
-        id: String,
-    ) -> Result<DemographicProjection, SingleRecordError> {
-        get_demographic_projection(ctx, id)
-    }
-
-    fn insert_demographic_indicator(
-        &self,
-        ctx: &ServiceContext,
-        input: InsertDemographicIndicator,
-    ) -> Result<DemographicIndicatorRow, InsertDemographicIndicatorError> {
-        insert_demographic_indicator(ctx, input)
-    }
-    fn insert_demographic_projection(
-        &self,
-        ctx: &ServiceContext,
-        input: InsertDemographicProjection,
-    ) -> Result<DemographicProjectionRow, InsertDemographicProjectionError> {
-        insert_demographic_projection(ctx, input)
-    }
-
-    fn update_demographic_indicator(
-        &self,
-        ctx: &ServiceContext,
-        input: UpdateDemographicIndicator,
-    ) -> Result<DemographicIndicatorRow, UpdateDemographicIndicatorError> {
-        update_demographic_indicator(ctx, input)
-    }
-
-    fn update_demographic_projection(
-        &self,
-        ctx: &ServiceContext,
-        input: UpdateDemographicProjection,
-    ) -> Result<DemographicProjectionRow, UpdateDemographicProjectionError> {
-        update_demographic_projection(ctx, input)
-    }
-}
-
-pub struct DemographicService {}
-
-impl DemographicServiceTrait for DemographicService {}
-
-#[cfg(test)]
-mod tests;
diff --git a/server/service/src/demographic/query_demographic_indicator.rs b/server/service/src/demographic/query_demographic_indicator.rs
deleted file mode 100644
index a92028110..000000000
--- a/server/service/src/demographic/query_demographic_indicator.rs
+++ /dev/null
@@ -1,46 +0,0 @@
-use repository::{
-    demographic_indicator::{
-        DemographicIndicator, DemographicIndicatorFilter, DemographicIndicatorRepository,
-        DemographicIndicatorSort,
-    },
-    EqualFilter, PaginationOption, StorageConnection,
-};
-
-use crate::{
-    get_default_pagination, i64_to_u32, service_provider::ServiceContext, ListError, ListResult,
-    SingleRecordError,
-};
-
-pub const MAX_LIMIT: u32 = 1000;
-pub const MIN_LIMIT: u32 = 1;
-
-pub fn get_demographic_indicators(
-    connection: &StorageConnection,
-    pagination: Option<PaginationOption>,
-    filter: Option<DemographicIndicatorFilter>,
-    sort: Option<DemographicIndicatorSort>,
-) -> Result<ListResult<DemographicIndicator>, ListError> {
-    let pagination = get_default_pagination(pagination, MAX_LIMIT, MIN_LIMIT)?;
-    let repository = DemographicIndicatorRepository::new(connection);
-
-    Ok(ListResult {
-        rows: repository.query(pagination, filter.clone(), sort)?,
-        count: i64_to_u32(repository.count(filter)?),
-    })
-}
-
-pub fn get_demographic_indicator(
-    ctx: &ServiceContext,
-    id: String,
-) -> Result<DemographicIndicator, SingleRecordError> {
-    let repository = DemographicIndicatorRepository::new(&ctx.connection);
-
-    let mut result = repository
-        .query_by_filter(DemographicIndicatorFilter::new().id(EqualFilter::equal_to(&id)))?;
-
-    if let Some(record) = result.pop() {
-        Ok(record)
-    } else {
-        Err(SingleRecordError::NotFound(id))
-    }
-}
diff --git a/server/service/src/demographic/query_demographic_projection.rs b/server/service/src/demographic/query_demographic_projection.rs
deleted file mode 100644
index 74582e3c0..000000000
--- a/server/service/src/demographic/query_demographic_projection.rs
+++ /dev/null
@@ -1,46 +0,0 @@
-use repository::{
-    demographic_projection::{
-        DemographicProjection, DemographicProjectionFilter, DemographicProjectionRepository,
-        DemographicProjectionSort,
-    },
-    EqualFilter, PaginationOption, StorageConnection,
-};
-
-use crate::{
-    get_default_pagination, i64_to_u32, service_provider::ServiceContext, ListError, ListResult,
-    SingleRecordError,
-};
-
-pub const MAX_LIMIT: u32 = 1000;
-pub const MIN_LIMIT: u32 = 1;
-
-pub fn get_demographic_projections(
-    connection: &StorageConnection,
-    pagination: Option<PaginationOption>,
-    filter: Option<DemographicProjectionFilter>,
-    sort: Option<DemographicProjectionSort>,
-) -> Result<ListResult<DemographicProjection>, ListError> {
-    let pagination = get_default_pagination(pagination, MAX_LIMIT, MIN_LIMIT)?;
-    let repository = DemographicProjectionRepository::new(connection);
-
-    Ok(ListResult {
-        rows: repository.query(pagination, filter.clone(), sort)?,
-        count: i64_to_u32(repository.count(filter)?),
-    })
-}
-
-pub fn get_demographic_projection(
-    ctx: &ServiceContext,
-    id: String,
-) -> Result<DemographicProjection, SingleRecordError> {
-    let repository = DemographicProjectionRepository::new(&ctx.connection);
-
-    let mut result = repository
-        .query_by_filter(DemographicProjectionFilter::new().id(EqualFilter::equal_to(&id)))?;
-
-    if let Some(record) = result.pop() {
-        Ok(record)
-    } else {
-        Err(SingleRecordError::NotFound(id))
-    }
-}
diff --git a/server/service/src/demographic/tests/insert_indicator.rs b/server/service/src/demographic/tests/insert_indicator.rs
deleted file mode 100644
index f0fd8d263..000000000
--- a/server/service/src/demographic/tests/insert_indicator.rs
+++ /dev/null
@@ -1,90 +0,0 @@
-#[cfg(test)]
-
-mod query {
-    use repository::{
-        mock::{mock_store_a, MockDataInserts},
-        test_db::setup_all,
-    };
-
-    use crate::{
-        demographic::insert_demographic_indicator::{
-            InsertDemographicIndicator, InsertDemographicIndicatorError,
-        },
-        service_provider::ServiceProvider,
-    };
-
-    #[actix_rt::test]
-    async fn indicator_insert() {
-        let (_, _connection, connection_manager, _) =
-            setup_all("indicator_insert", MockDataInserts::none().stores()).await;
-
-        let service_provider = ServiceProvider::new(connection_manager, "app_data");
-        let ctx = service_provider
-            .context(mock_store_a().id, "".to_string())
-            .unwrap();
-        let service = service_provider.demographic_service;
-
-        // check we can insert
-        let id = "test_id".to_string();
-        let id_2 = "test_id_2".to_string();
-        let name_1 = "name".to_string();
-        let base_year_1 = 2024;
-        let name_2 = "name2".to_string();
-        let base_year_2 = 2025;
-        let indicator = service
-            .insert_demographic_indicator(
-                &ctx,
-                InsertDemographicIndicator {
-                    id: id.clone(),
-                    name: name_1.clone(),
-                    base_year: base_year_1,
-                    ..Default::default()
-                },
-            )
-            .unwrap();
-
-        assert_eq!(indicator.id, id);
-
-        // Check we can't insert duplicate id
-        assert_eq!(
-            service.insert_demographic_indicator(
-                &ctx,
-                InsertDemographicIndicator {
-                    id: id.clone(),
-                    name: name_2.clone(),
-                    base_year: base_year_2.clone(),
-                    ..Default::default()
-                },
-            ),
-            Err(InsertDemographicIndicatorError::DemographicIndicatorAlreadyExists)
-        );
-
-        // Check we can't insert duplicate base_year / name combination
-        assert_eq!(
-            service.insert_demographic_indicator(
-                &ctx,
-                InsertDemographicIndicator {
-                    id: id_2.clone(),
-                    name: name_1.clone(),
-                    base_year: base_year_1.clone(),
-                    ..Default::default()
-                },
-            ),
-            Err(InsertDemographicIndicatorError::DemographicIndicatorAlreadyExistsForThisYear)
-        );
-
-        // Check insert will work for same name of different year
-        let indicator = service
-            .insert_demographic_indicator(
-                &ctx,
-                InsertDemographicIndicator {
-                    id: id_2.clone(),
-                    name: name_1.clone(),
-                    base_year: base_year_2.clone(),
-                    ..Default::default()
-                },
-            )
-            .unwrap();
-        assert_eq!(indicator.id, id_2);
-    }
-}
diff --git a/server/service/src/demographic/tests/insert_projection.rs b/server/service/src/demographic/tests/insert_projection.rs
deleted file mode 100644
index ea1df421b..000000000
--- a/server/service/src/demographic/tests/insert_projection.rs
+++ /dev/null
@@ -1,84 +0,0 @@
-#[cfg(test)]
-
-mod query {
-    use repository::{
-        mock::{mock_store_a, MockDataInserts},
-        test_db::setup_all,
-    };
-
-    use crate::{
-        demographic::insert_demographic_projection::{
-            InsertDemographicProjection, InsertDemographicProjectionError,
-        },
-        service_provider::ServiceProvider,
-    };
-
-    #[actix_rt::test]
-    async fn projection_insert() {
-        let (_, _connection, connection_manager, _) =
-            setup_all("projection_insert", MockDataInserts::none().stores()).await;
-
-        let service_provider = ServiceProvider::new(connection_manager, "app_data");
-        let ctx = service_provider
-            .context(mock_store_a().id, "".to_string())
-            .unwrap();
-        let service = service_provider.demographic_service;
-
-        // check we can insert
-        let id = "test_id".to_string();
-        let id_2 = "test_id_2".to_string();
-        let base_year_1 = 2024;
-        let base_year_2 = 2025;
-        let projection = service
-            .insert_demographic_projection(
-                &ctx,
-                InsertDemographicProjection {
-                    id: id.clone(),
-                    base_year: base_year_1,
-                    ..Default::default()
-                },
-            )
-            .unwrap();
-
-        assert_eq!(projection.id, id);
-
-        // Check we can't insert duplicate id
-        assert_eq!(
-            service.insert_demographic_projection(
-                &ctx,
-                InsertDemographicProjection {
-                    id: id.clone(),
-                    base_year: base_year_2.clone(),
-                    ..Default::default()
-                },
-            ),
-            Err(InsertDemographicProjectionError::DemographicProjectionAlreadyExists)
-        );
-
-        // Check we can't insert duplicate base_year
-        assert_eq!(
-            service.insert_demographic_projection(
-                &ctx,
-                InsertDemographicProjection {
-                    id: id_2.clone(),
-                    base_year: base_year_1.clone(),
-                    ..Default::default()
-                },
-            ),
-            Err(InsertDemographicProjectionError::DemographicProjectionBaseYearAlreadyExists)
-        );
-
-        // Check insert will work for different year and id
-        let projection = service
-            .insert_demographic_projection(
-                &ctx,
-                InsertDemographicProjection {
-                    id: id_2.clone(),
-                    base_year: base_year_2.clone(),
-                    ..Default::default()
-                },
-            )
-            .unwrap();
-        assert_eq!(projection.id, id_2);
-    }
-}
diff --git a/server/service/src/demographic/tests/mod.rs b/server/service/src/demographic/tests/mod.rs
deleted file mode 100644
index 050c761af..000000000
--- a/server/service/src/demographic/tests/mod.rs
+++ /dev/null
@@ -1,11 +0,0 @@
-#[cfg(test)]
-mod insert_indicator;
-
-#[cfg(test)]
-mod insert_projection;
-
-#[cfg(test)]
-mod update_indicator;
-
-#[cfg(test)]
-mod update_projection;
diff --git a/server/service/src/demographic/tests/update_indicator.rs b/server/service/src/demographic/tests/update_indicator.rs
deleted file mode 100644
index aa6e2cd67..000000000
--- a/server/service/src/demographic/tests/update_indicator.rs
+++ /dev/null
@@ -1,95 +0,0 @@
-#[cfg(test)]
-
-mod query {
-    use repository::{
-        mock::{mock_store_a, MockDataInserts},
-        test_db::setup_all,
-    };
-
-    use crate::{
-        demographic::{
-            insert_demographic_indicator::InsertDemographicIndicator,
-            update_demographic_indicator::{
-                UpdateDemographicIndicator, UpdateDemographicIndicatorError,
-            },
-        },
-        service_provider::ServiceProvider,
-    };
-
-    #[actix_rt::test]
-    async fn indicator_update() {
-        let (_, _connection, connection_manager, _) =
-            setup_all("indicator_update", MockDataInserts::none().stores()).await;
-
-        let service_provider = ServiceProvider::new(connection_manager, "app_data");
-        let ctx = service_provider
-            .context(mock_store_a().id, "".to_string())
-            .unwrap();
-        let service = service_provider.demographic_service;
-
-        let id1 = "test_id".to_string();
-        let name_1 = "name".to_string();
-        let base_year_1 = 2024;
-        let id_2 = "test_id_2".to_string();
-        let name_2 = "name2".to_string();
-        let base_year_2 = 2025;
-
-        // first insert indicator
-        let indicator1 = service
-            .insert_demographic_indicator(
-                &ctx,
-                InsertDemographicIndicator {
-                    id: id1.clone(),
-                    name: name_1.clone(),
-                    base_year: base_year_1,
-                    ..Default::default()
-                },
-            )
-            .unwrap();
-
-        assert_eq!(indicator1.id, id1);
-
-        // add a second indicator
-        let indicator2 = service
-            .insert_demographic_indicator(
-                &ctx,
-                InsertDemographicIndicator {
-                    id: id_2.clone(),
-                    name: name_2.clone(),
-                    base_year: base_year_1,
-                    ..Default::default()
-                },
-            )
-            .unwrap();
-        assert_eq!(indicator2.id, id_2);
-
-        // Check we can't update to duplicate base_year / name combination
-        assert_eq!(
-            service.update_demographic_indicator(
-                &ctx,
-                UpdateDemographicIndicator {
-                    id: id_2.clone(),
-                    name: Some(name_1.clone()),
-                    base_year: Some(base_year_1.clone()),
-                    ..Default::default()
-                },
-            ),
-            Err(UpdateDemographicIndicatorError::DemographicIndicatorAlreadyExistsForThisYear)
-        );
-
-        // Check update will work for same name of different year
-        let indicator2 = service
-            .update_demographic_indicator(
-                &ctx,
-                UpdateDemographicIndicator {
-                    id: id_2.clone(),
-                    name: Some(name_1.clone()),
-                    base_year: Some(base_year_2.clone()),
-                    ..Default::default()
-                },
-            )
-            .unwrap();
-        assert_eq!(indicator2.name, name_1);
-        assert_eq!(indicator2.base_year, base_year_2);
-    }
-}
diff --git a/server/service/src/demographic/tests/update_projection.rs b/server/service/src/demographic/tests/update_projection.rs
deleted file mode 100644
index d0ccd9d17..000000000
--- a/server/service/src/demographic/tests/update_projection.rs
+++ /dev/null
@@ -1,93 +0,0 @@
-#[cfg(test)]
-
-mod query {
-    use repository::{
-        mock::{mock_store_a, MockDataInserts},
-        test_db::setup_all,
-    };
-
-    use crate::{
-        demographic::{
-            insert_demographic_projection::InsertDemographicProjection,
-            update_demographic_projection::{
-                UpdateDemographicProjection, UpdateDemographicProjectionError,
-            },
-        },
-        service_provider::ServiceProvider,
-    };
-
-    #[actix_rt::test]
-    async fn projection_insert() {
-        let (_, _connection, connection_manager, _) = setup_all(
-            "projection_service_insert",
-            MockDataInserts::none().stores(),
-        )
-        .await;
-
-        let service_provider = ServiceProvider::new(connection_manager, "app_data");
-        let ctx = service_provider
-            .context(mock_store_a().id, "".to_string())
-            .unwrap();
-        let service = service_provider.demographic_service;
-
-        // insert projection insert
-        let id = "test_id".to_string();
-        let id_2 = "test_id_2".to_string();
-        let base_year_1 = 2024;
-        let base_year_2 = 2025;
-        let base_year_3 = 3025;
-        let projection = service
-            .insert_demographic_projection(
-                &ctx,
-                InsertDemographicProjection {
-                    id: id.clone(),
-                    base_year: base_year_1,
-                    ..Default::default()
-                },
-            )
-            .unwrap();
-
-        assert_eq!(projection.id, id);
-
-        // Check we can update base_year
-        let projection = service
-            .update_demographic_projection(
-                &ctx,
-                UpdateDemographicProjection {
-                    id: id.clone(),
-                    base_year: Some(base_year_2.clone()),
-                    ..Default::default()
-                },
-            )
-            .unwrap();
-        assert_eq!(projection.base_year, base_year_2);
-
-        // insert second indicator
-
-        let projection = service
-            .insert_demographic_projection(
-                &ctx,
-                InsertDemographicProjection {
-                    id: id_2.clone(),
-                    base_year: base_year_3,
-                    ..Default::default()
-                },
-            )
-            .unwrap();
-
-        assert_eq!(projection.id, id_2);
-
-        // Check we can't update to same base year
-        assert_eq!(
-            service.update_demographic_projection(
-                &ctx,
-                UpdateDemographicProjection {
-                    id: id_2.clone(),
-                    base_year: Some(base_year_2.clone()),
-                    ..Default::default()
-                },
-            ),
-            Err(UpdateDemographicProjectionError::DemographicProjectionBaseYearAlreadyExists)
-        );
-    }
-}
diff --git a/server/service/src/demographic/update_demographic_indicator.rs b/server/service/src/demographic/update_demographic_indicator.rs
deleted file mode 100644
index 0d58d92ed..000000000
--- a/server/service/src/demographic/update_demographic_indicator.rs
+++ /dev/null
@@ -1,141 +0,0 @@
-use crate::{service_provider::ServiceContext, SingleRecordError};
-use repository::{
-    DemographicIndicatorRow, DemographicIndicatorRowRepository, RepositoryError, StorageConnection,
-};
-
-use super::{
-    query_demographic_indicator::get_demographic_indicator,
-    validate::{check_demographic_indicator_exists, check_year_name_combination_unique},
-};
-#[derive(PartialEq, Debug)]
-
-pub enum UpdateDemographicIndicatorError {
-    DemographicIndicatorAlreadyExistsForThisYear,
-    DemographicIndicatorDoesNotExist,
-    UpdatedRecordNotFound,
-    DatabaseError(RepositoryError),
-}
-
-#[derive(Debug, Default, Clone)]
-
-pub struct UpdateDemographicIndicator {
-    pub id: String,
-    pub name: Option<String>,
-    pub base_year: Option<i32>,
-    pub base_population: Option<i32>,
-    pub population_percentage: Option<f64>,
-    pub year_1_projection: Option<i32>,
-    pub year_2_projection: Option<i32>,
-    pub year_3_projection: Option<i32>,
-    pub year_4_projection: Option<i32>,
-    pub year_5_projection: Option<i32>,
-}
-
-pub fn update_demographic_indicator(
-    ctx: &ServiceContext,
-    input: UpdateDemographicIndicator,
-) -> Result<DemographicIndicatorRow, UpdateDemographicIndicatorError> {
-    let demographic_indicator = ctx
-        .connection
-        .transaction_sync(|connection| {
-            let demographic_indicator_row = validate(connection, &input)?;
-            let updated_demographic_indicator_row =
-                generate(input.clone(), demographic_indicator_row.clone());
-            DemographicIndicatorRowRepository::new(connection)
-                .upsert_one(&updated_demographic_indicator_row)?;
-            // TODO add activity logs
-            get_demographic_indicator(ctx, updated_demographic_indicator_row.id)
-                .map_err(UpdateDemographicIndicatorError::from)
-        })
-        .map_err(|error| error.to_inner_error())?;
-    Ok(demographic_indicator)
-}
-
-pub fn validate(
-    connection: &StorageConnection,
-    input: &UpdateDemographicIndicator,
-) -> Result<DemographicIndicatorRow, UpdateDemographicIndicatorError> {
-    let demographic_indicator_row = match check_demographic_indicator_exists(&input.id, connection)?
-    {
-        Some(demographic_indicator_row) => demographic_indicator_row,
-        None => return Err(UpdateDemographicIndicatorError::DemographicIndicatorDoesNotExist),
-    };
-    let base_year = match input.base_year {
-        Some(base_year) => base_year,
-        None => demographic_indicator_row.base_year,
-    };
-
-    let name = match &input.name {
-        Some(name) => name,
-        None => &demographic_indicator_row.name,
-    };
-
-    let id = &input.id;
-
-    if !check_year_name_combination_unique(&name, base_year, id, connection)? {
-        return Err(UpdateDemographicIndicatorError::DemographicIndicatorAlreadyExistsForThisYear);
-    }
-
-    Ok(demographic_indicator_row)
-}
-
-pub fn generate(
-    UpdateDemographicIndicator {
-        id: _,
-        name,
-        base_year,
-        population_percentage,
-        year_1_projection,
-        year_2_projection,
-        year_3_projection,
-        year_4_projection,
-        year_5_projection,
-        base_population,
-    }: UpdateDemographicIndicator,
-    mut demographic_indicator_row: DemographicIndicatorRow,
-) -> DemographicIndicatorRow {
-    if let Some(name) = name {
-        demographic_indicator_row.name = name;
-    }
-    if let Some(base_year) = base_year {
-        demographic_indicator_row.base_year = base_year;
-    }
-    if let Some(base_population) = base_population {
-        demographic_indicator_row.base_population = base_population;
-    }
-    if let Some(population_percentage) = population_percentage {
-        demographic_indicator_row.population_percentage = population_percentage;
-    }
-    if let Some(year_1_projection) = year_1_projection {
-        demographic_indicator_row.year_1_projection = year_1_projection;
-    }
-    if let Some(year_2_projection) = year_2_projection {
-        demographic_indicator_row.year_2_projection = year_2_projection;
-    }
-    if let Some(year_3_projection) = year_3_projection {
-        demographic_indicator_row.year_3_projection = year_3_projection;
-    }
-    if let Some(year_4_projection) = year_4_projection {
-        demographic_indicator_row.year_4_projection = year_4_projection;
-    }
-    if let Some(year_5_projection) = year_5_projection {
-        demographic_indicator_row.year_5_projection = year_5_projection;
-    }
-    demographic_indicator_row
-}
-
-impl From<RepositoryError> for UpdateDemographicIndicatorError {
-    fn from(error: RepositoryError) -> Self {
-        UpdateDemographicIndicatorError::DatabaseError(error)
-    }
-}
-
-impl From<SingleRecordError> for UpdateDemographicIndicatorError {
-    fn from(error: SingleRecordError) -> Self {
-        use UpdateDemographicIndicatorError::*;
-        match error {
-            SingleRecordError::DatabaseError(error) => DatabaseError(error),
-            SingleRecordError::NotFound(_) => UpdatedRecordNotFound,
-        }
-    }
-}
diff --git a/server/service/src/demographic/update_demographic_projection.rs b/server/service/src/demographic/update_demographic_projection.rs
deleted file mode 100644
index 190fe96d6..000000000
--- a/server/service/src/demographic/update_demographic_projection.rs
+++ /dev/null
@@ -1,123 +0,0 @@
-use crate::{service_provider::ServiceContext, SingleRecordError};
-use repository::{
-    DemographicProjectionRow, DemographicProjectionRowRepository, RepositoryError,
-    StorageConnection,
-};
-
-use super::{
-    query_demographic_projection::get_demographic_projection,
-    validate::{check_base_year_unique, check_demographic_projection_exists},
-};
-#[derive(PartialEq, Debug)]
-
-pub enum UpdateDemographicProjectionError {
-    DemographicProjectionBaseYearAlreadyExists,
-    DemographicProjectionDoesNotExist,
-    UpdatedRecordNotFound,
-    DatabaseError(RepositoryError),
-}
-
-#[derive(Debug, Default, Clone)]
-
-pub struct UpdateDemographicProjection {
-    pub id: String,
-    pub base_year: Option<i32>,
-    pub year_1: Option<i32>,
-    pub year_2: Option<i32>,
-    pub year_3: Option<i32>,
-    pub year_4: Option<i32>,
-    pub year_5: Option<i32>,
-}
-
-pub fn update_demographic_projection(
-    ctx: &ServiceContext,
-    input: UpdateDemographicProjection,
-) -> Result<DemographicProjectionRow, UpdateDemographicProjectionError> {
-    let demographic_projection = ctx
-        .connection
-        .transaction_sync(|connection| {
-            let demographic_projection_row = validate(connection, &input)?;
-            let updated_demographic_projection_row =
-                generate(input.clone(), demographic_projection_row.clone());
-
-            DemographicProjectionRowRepository::new(connection)
-                .upsert_one(&updated_demographic_projection_row)?;
-            // TODO add acitivity logs
-
-            get_demographic_projection(ctx, updated_demographic_projection_row.id)
-                .map_err(UpdateDemographicProjectionError::from)
-        })
-        .map_err(|error| error.to_inner_error())?;
-    Ok(demographic_projection)
-}
-
-pub fn validate(
-    connection: &StorageConnection,
-    input: &UpdateDemographicProjection,
-) -> Result<DemographicProjectionRow, UpdateDemographicProjectionError> {
-    let demographioc_projection_row =
-        match check_demographic_projection_exists(&input.id, connection)? {
-            Some(demographic_projection_row) => demographic_projection_row,
-            None => {
-                return Err(UpdateDemographicProjectionError::DemographicProjectionDoesNotExist)
-            }
-        };
-    if let Some(base_year) = input.base_year {
-        if !check_base_year_unique(base_year, connection)? {
-            return Err(
-                UpdateDemographicProjectionError::DemographicProjectionBaseYearAlreadyExists,
-            );
-        }
-    }
-
-    Ok(demographioc_projection_row)
-}
-
-pub fn generate(
-    UpdateDemographicProjection {
-        id: _,
-        base_year,
-        year_1,
-        year_2,
-        year_3,
-        year_4,
-        year_5,
-    }: UpdateDemographicProjection,
-    mut demographic_projection_row: DemographicProjectionRow,
-) -> DemographicProjectionRow {
-    if let Some(base_year) = base_year {
-        demographic_projection_row.base_year = base_year;
-    }
-    if let Some(year_1) = year_1 {
-        demographic_projection_row.year_1 = year_1;
-    }
-    if let Some(year_2) = year_2 {
-        demographic_projection_row.year_2 = year_2;
-    }
-    if let Some(year_3) = year_3 {
-        demographic_projection_row.year_3 = year_3;
-    }
-    if let Some(year_4) = year_4 {
-        demographic_projection_row.year_4 = year_4;
-    }
-    if let Some(year_5) = year_5 {
-        demographic_projection_row.year_5 = year_5;
-    }
-    demographic_projection_row
-}
-
-impl From<RepositoryError> for UpdateDemographicProjectionError {
-    fn from(error: RepositoryError) -> Self {
-        UpdateDemographicProjectionError::DatabaseError(error)
-    }
-}
-
-impl From<SingleRecordError> for UpdateDemographicProjectionError {
-    fn from(error: SingleRecordError) -> Self {
-        use UpdateDemographicProjectionError::*;
-        match error {
-            SingleRecordError::DatabaseError(error) => DatabaseError(error),
-            SingleRecordError::NotFound(_) => UpdatedRecordNotFound,
-        }
-    }
-}
diff --git a/server/service/src/demographic/validate.rs b/server/service/src/demographic/validate.rs
deleted file mode 100644
index a7ede5db8..000000000
--- a/server/service/src/demographic/validate.rs
+++ /dev/null
@@ -1,55 +0,0 @@
-use repository::{
-    demographic_projection::{DemographicProjectionFilter, DemographicProjectionRepository},
-    DemographicIndicatorFilter, DemographicIndicatorRepository, DemographicIndicatorRow,
-    DemographicIndicatorRowRepository, DemographicProjectionRow,
-    DemographicProjectionRowRepository, EqualFilter, RepositoryError, StorageConnection,
-    StringFilter,
-};
-
-pub fn check_demographic_indicator_exists(
-    id: &str,
-    connection: &StorageConnection,
-) -> Result<Option<DemographicIndicatorRow>, RepositoryError> {
-    DemographicIndicatorRowRepository::new(connection).find_one_by_id(id)
-}
-
-pub fn check_demographic_projection_exists(
-    id: &str,
-    connection: &StorageConnection,
-) -> Result<Option<DemographicProjectionRow>, RepositoryError> {
-    DemographicProjectionRowRepository::new(connection).find_one_by_id(id)
-}
-
-pub fn check_base_year_unique(
-    base_year: i32,
-    connection: &StorageConnection,
-) -> Result<bool, RepositoryError> {
-    let filter = DemographicProjectionFilter::new().base_year(EqualFilter::equal_to_i32(base_year));
-    let result = DemographicProjectionRepository::new(connection).query_by_filter(filter)?;
-    Ok(result.len() == 0)
-}
-
-pub fn check_year_name_combination_unique(
-    name: &str,
-    base_year: i32,
-    id: &str,
-    connection: &StorageConnection,
-) -> Result<bool, RepositoryError> {
-    let filter = DemographicIndicatorFilter::new()
-        .base_year(EqualFilter::equal_to_i32(base_year.to_owned()))
-        .name(StringFilter::equal_to(name));
-    let mut result = DemographicIndicatorRepository::new(connection).query_by_filter(filter)?;
-    let result_overlap = match result.len() {
-        0 => true,
-        // return ok if editing this id
-        1 => {
-            if result.pop().unwrap().id == id {
-                true
-            } else {
-                false
-            }
-        }
-        _ => false,
-    };
-    Ok(result_overlap)
-}
diff --git a/server/service/src/invoice/inbound_return/delete/mod.rs b/server/service/src/invoice/inbound_return/delete/mod.rs
index c5aa881f8..e7088b1e2 100644
--- a/server/service/src/invoice/inbound_return/delete/mod.rs
+++ b/server/service/src/invoice/inbound_return/delete/mod.rs
@@ -219,7 +219,7 @@ mod test {
         // test entry has been deleted
         assert_eq!(
             InvoiceRowRepository::new(&connection)
-                .find_one_by_id(&return_to_delete().id)
+                .find_one_by_id_option(&return_to_delete().id)
                 .unwrap(),
             None
         );
@@ -227,7 +227,7 @@ mod test {
         // stock has been deleted
         assert_eq!(
             stock_line_row_repo
-                .find_one_by_id(&stock_line().id)
+                .find_one_by_id_option(&stock_line().id)
                 .unwrap(),
             None
         )
diff --git a/server/service/src/invoice/inbound_return/generate_lines.rs b/server/service/src/invoice/inbound_return/generate_lines.rs
index aaa248f20..fffc8353d 100644
--- a/server/service/src/invoice/inbound_return/generate_lines.rs
+++ b/server/service/src/invoice/inbound_return/generate_lines.rs
@@ -15,7 +15,7 @@ pub struct InboundReturnLine {
     pub item_row: ItemRow,
     pub packs_issued: Option<f64>,
     pub batch: Option<String>,
-    pub pack_size: f64,
+    pub pack_size: i32,
     pub stock_line_id: Option<String>,
     pub expiry_date: Option<NaiveDate>,
 }
diff --git a/server/service/src/invoice/inbound_return/insert/mod.rs b/server/service/src/invoice/inbound_return/insert/mod.rs
index d7c43fc6e..04d35c09f 100644
--- a/server/service/src/invoice/inbound_return/insert/mod.rs
+++ b/server/service/src/invoice/inbound_return/insert/mod.rs
@@ -320,7 +320,7 @@ mod test {
                         id: "new_line_id".to_string(),
                         item_id: mock_item_a().id,
                         number_of_packs: 1.0,
-                        pack_size: 1.0,
+                        pack_size: 1,
                         reason_id: Some("does_not_exist".to_string()),
                         ..Default::default()
                     }],
@@ -383,7 +383,7 @@ mod test {
                             reason_id: Some(return_reason().id),
                             number_of_packs: 1.0,
                             item_id: mock_item_a().id,
-                            pack_size: 1.0,
+                            pack_size: 1,
                             ..Default::default()
                         },
                         InboundReturnLineInput {
@@ -391,7 +391,7 @@ mod test {
                             reason_id: Some(return_reason().id),
                             number_of_packs: 0.0,
                             item_id: mock_item_b().id,
-                            pack_size: 1.0,
+                            pack_size: 1,
                             ..Default::default()
                         },
                     ];
@@ -401,7 +401,6 @@ mod test {
 
         let invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id("new_inbound_return_id")
-            .unwrap()
             .unwrap();
 
         assert_eq!(invoice.id, "new_inbound_return_id");
diff --git a/server/service/src/invoice/inbound_return/insert/validate.rs b/server/service/src/invoice/inbound_return/insert/validate.rs
index 606b922b2..698f37cac 100644
--- a/server/service/src/invoice/inbound_return/insert/validate.rs
+++ b/server/service/src/invoice/inbound_return/insert/validate.rs
@@ -1,6 +1,9 @@
 use repository::{InvoiceRow, InvoiceStatus, InvoiceType, Name, StorageConnection};
 
-use crate::invoice::{check_invoice_exists, check_invoice_type, check_store};
+use crate::invoice::{
+    check_invoice_does_not_exists, check_invoice_exists, check_invoice_type, check_store,
+    InvoiceAlreadyExistsError,
+};
 use crate::validate::{check_other_party, CheckOtherPartyType, OtherPartyErrors};
 
 use super::{InsertInboundReturn, InsertInboundReturnError};
@@ -11,9 +14,10 @@ pub fn validate(
     input: &InsertInboundReturn,
 ) -> Result<Name, InsertInboundReturnError> {
     use InsertInboundReturnError::*;
-    if let Some(_) = check_invoice_exists(&input.id, connection)? {
-        return Err(InvoiceAlreadyExists);
-    }
+    check_invoice_does_not_exists(&input.id, connection).map_err(|e| match e {
+        InvoiceAlreadyExistsError::InvoiceAlreadyExists => InvoiceAlreadyExists,
+        InvoiceAlreadyExistsError::RepositoryError(err) => DatabaseError(err),
+    })?;
 
     if let Some(outbound_shipment_id) = &input.outbound_shipment_id {
         let outbound_shipment = check_invoice_exists(outbound_shipment_id, connection)?
diff --git a/server/service/src/invoice/inbound_return/mod.rs b/server/service/src/invoice/inbound_return/mod.rs
index a8b63b884..5ea7225b0 100644
--- a/server/service/src/invoice/inbound_return/mod.rs
+++ b/server/service/src/invoice/inbound_return/mod.rs
@@ -17,7 +17,7 @@ pub struct InboundReturnLineInput {
     pub item_id: String,
     pub expiry_date: Option<NaiveDate>,
     pub batch: Option<String>,
-    pub pack_size: f64,
+    pub pack_size: u32,
     pub number_of_packs: f64,
     pub reason_id: Option<String>,
     pub note: Option<String>,
diff --git a/server/service/src/invoice/inbound_return/update/generate.rs b/server/service/src/invoice/inbound_return/update/generate.rs
index 4466b7ccc..35da11984 100644
--- a/server/service/src/invoice/inbound_return/update/generate.rs
+++ b/server/service/src/invoice/inbound_return/update/generate.rs
@@ -85,9 +85,9 @@ pub fn should_create_batches(existing_status: &InvoiceStatus, patch: &UpdateInbo
 
     match (existing_status, new_status) {
         (
-            // From New/Picked/Shipped to Delivered/Verified
+            // From New/Picked/Shipped to Delivered
             InvoiceStatus::New | InvoiceStatus::Picked | InvoiceStatus::Shipped,
-            UpdateInboundReturnStatus::Delivered | UpdateInboundReturnStatus::Verified,
+            UpdateInboundReturnStatus::Delivered,
         ) => true,
         _ => false,
     }
@@ -110,16 +110,14 @@ fn set_new_status_datetime(inbound_return: &mut InvoiceRow, patch: &UpdateInboun
             inbound_return.delivered_datetime = Some(current_datetime);
         }
 
-        // From New/Picked/Shipped to Verified
+        // From New/Picked/Shipped/Delivered to Verified
         (
-            InvoiceStatus::New | InvoiceStatus::Picked | InvoiceStatus::Shipped,
+            InvoiceStatus::New
+            | InvoiceStatus::Picked
+            | InvoiceStatus::Shipped
+            | InvoiceStatus::Delivered,
             UpdateInboundReturnStatus::Verified,
         ) => {
-            inbound_return.delivered_datetime = Some(current_datetime);
-            inbound_return.verified_datetime = Some(current_datetime);
-        }
-        // From Delivered to Verified
-        (InvoiceStatus::Delivered, UpdateInboundReturnStatus::Verified) => {
             inbound_return.verified_datetime = Some(current_datetime);
         }
         _ => {}
diff --git a/server/service/src/invoice/inbound_return/update/mod.rs b/server/service/src/invoice/inbound_return/update/mod.rs
index c3a160738..3292deacc 100644
--- a/server/service/src/invoice/inbound_return/update/mod.rs
+++ b/server/service/src/invoice/inbound_return/update/mod.rs
@@ -333,7 +333,6 @@ mod test {
 
         let stock_line_delivered = StockLineRowRepository::new(&connection)
             .find_one_by_id(&stock_line_id)
-            .unwrap()
             .unwrap();
 
         // data from invoice line was added to the new stock line
@@ -384,83 +383,9 @@ mod test {
 
         let stock_line_verified = StockLineRowRepository::new(&connection)
             .find_one_by_id(&stock_line_id)
-            .unwrap()
             .unwrap();
 
         // Stock line has not changed
         assert_eq!(stock_line_delivered, stock_line_verified);
     }
-
-    #[actix_rt::test]
-    async fn update_inbound_return_success_new_to_verified() {
-        let (_, connection, connection_manager, _) = setup_all(
-            "update_inbound_return_success_new_to_verified",
-            MockDataInserts::all(),
-        )
-        .await;
-
-        let service_provider = ServiceProvider::new(connection_manager, "app_data");
-        let context = service_provider
-            .context(mock_store_b().id, mock_user_account_a().id)
-            .unwrap();
-        let service = service_provider.invoice_service;
-
-        let invoice_id = mock_inbound_return_b().id;
-
-        /* -------
-         * Setting NEW inbound return to VERIFIED
-         */
-        let return_line_filter =
-            InvoiceLineFilter::new().invoice_id(EqualFilter::equal_to(&mock_inbound_return_b().id));
-
-        let invoice_line_repo = InvoiceLineRepository::new(&connection);
-
-        let invoice_lines = invoice_line_repo
-            .query_by_filter(return_line_filter.clone())
-            .unwrap();
-
-        // Inbound return currently in NEW status, should have no stock lines
-        assert!(invoice_lines
-            .iter()
-            .all(|l| l.invoice_line_row.stock_line_id == None));
-
-        let updated_return = service
-            .update_inbound_return(
-                &context,
-                inline_init(|r: &mut UpdateInboundReturn| {
-                    r.id = invoice_id.clone();
-                    r.status = Some(UpdateInboundReturnStatus::Verified);
-                }),
-            )
-            .unwrap();
-
-        let return_row = updated_return.invoice_row;
-        // Status has been updated
-        assert_eq!(return_row.status, InvoiceStatus::Verified);
-        assert!(return_row.verified_datetime.is_some());
-
-        let invoice_lines = invoice_line_repo
-            .query_by_filter(return_line_filter.clone())
-            .unwrap();
-
-        assert_eq!(invoice_lines.len(), 1);
-
-        let stock_line_id = invoice_lines[0]
-            .invoice_line_row
-            .stock_line_id
-            .clone()
-            .unwrap();
-
-        // check stock line was introduced
-        let stock_line = StockLineRowRepository::new(&connection)
-            .find_one_by_id(&stock_line_id)
-            .unwrap()
-            .unwrap();
-
-        // data from invoice line was added to the new stock line
-        assert_eq!(
-            stock_line.batch,
-            mock_inbound_return_b_invoice_line_a().batch
-        );
-    }
 }
diff --git a/server/service/src/invoice/inbound_return/update_lines/mod.rs b/server/service/src/invoice/inbound_return/update_lines/mod.rs
index 338ae3566..ef9ade437 100644
--- a/server/service/src/invoice/inbound_return/update_lines/mod.rs
+++ b/server/service/src/invoice/inbound_return/update_lines/mod.rs
@@ -264,7 +264,7 @@ mod test {
                         inbound_return_id: mock_inbound_return_a().id,
                         inbound_return_lines: vec![InboundReturnLineInput {
                             id: "new_line".to_string(),
-                            pack_size: 0.0,
+                            pack_size: 0,
                             number_of_packs: 1.0,
                             ..Default::default()
                         }],
@@ -287,7 +287,7 @@ mod test {
                         inbound_return_id: mock_inbound_return_a().id,
                         inbound_return_lines: vec![InboundReturnLineInput {
                             id: mock_inbound_return_a_invoice_line_a().id,
-                            pack_size: 0.0,
+                            pack_size: 0,
                             number_of_packs: 1.0,
                             ..Default::default()
                         }],
@@ -311,7 +311,7 @@ mod test {
                         inbound_return_lines: vec![InboundReturnLineInput {
                             id: "new_line_id".to_string(),
                             number_of_packs: 1.0,
-                            pack_size: 1.0,
+                            pack_size: 1,
                             item_id: mock_item_a().id,
                             reason_id: Some("does_not_exist".to_string()),
                             ..Default::default()
@@ -371,7 +371,7 @@ mod test {
                         InboundReturnLineInput {
                             id: "line1".to_string(), // create
                             number_of_packs: 1.0,
-                            pack_size: 1.0,
+                            pack_size: 1,
                             item_id: mock_item_a().id,
                             reason_id: Some(return_reason().id),
                             ..Default::default()
@@ -379,7 +379,7 @@ mod test {
                         InboundReturnLineInput {
                             id: mock_inbound_return_a_invoice_line_a().id, // update
                             number_of_packs: 2.0,
-                            pack_size: 1.0,
+                            pack_size: 1,
                             item_id: mock_item_a().id,
                             reason_id: Some(return_reason().id),
                             ..Default::default()
diff --git a/server/service/src/invoice/inbound_shipment/batch.rs b/server/service/src/invoice/inbound_shipment/batch.rs
index 91ea85d55..96c118ab3 100644
--- a/server/service/src/invoice/inbound_shipment/batch.rs
+++ b/server/service/src/invoice/inbound_shipment/batch.rs
@@ -2,19 +2,17 @@ use repository::{Invoice, InvoiceLine, RepositoryError};
 
 use crate::{
     invoice_line::{
-        inbound_shipment_line::{
-            delete_inbound_shipment_line, insert_inbound_shipment_line,
-            update_inbound_shipment_line, DeleteInboundShipmentLine,
-            DeleteInboundShipmentLineError, InsertInboundShipmentLine,
-            InsertInboundShipmentLineError, UpdateInboundShipmentLine,
-            UpdateInboundShipmentLineError,
-        },
         inbound_shipment_service_line::{
             delete_inbound_shipment_service_line, insert_inbound_shipment_service_line,
             update_inbound_shipment_service_line, DeleteInboundShipmentServiceLineError,
             InsertInboundShipmentServiceLine, InsertInboundShipmentServiceLineError,
             UpdateInboundShipmentServiceLine, UpdateInboundShipmentServiceLineError,
         },
+        stock_in_line::{
+            delete_stock_in_line, insert_stock_in_line, update_stock_in_line, DeleteStockInLine,
+            DeleteStockInLineError, InsertStockInLine, InsertStockInLineError, UpdateStockInLine,
+            UpdateStockInLineError,
+        },
     },
     service_provider::ServiceContext,
     BatchMutationsProcessor, InputWithResult, WithDBError,
@@ -29,12 +27,12 @@ use super::{
 #[derive(Clone)]
 pub struct BatchInboundShipment {
     pub insert_shipment: Option<Vec<InsertInboundShipment>>,
-    pub insert_line: Option<Vec<InsertInboundShipmentLine>>,
-    pub update_line: Option<Vec<UpdateInboundShipmentLine>>,
-    pub delete_line: Option<Vec<DeleteInboundShipmentLine>>,
+    pub insert_line: Option<Vec<InsertStockInLine>>,
+    pub update_line: Option<Vec<UpdateStockInLine>>,
+    pub delete_line: Option<Vec<DeleteStockInLine>>,
     pub insert_service_line: Option<Vec<InsertInboundShipmentServiceLine>>,
     pub update_service_line: Option<Vec<UpdateInboundShipmentServiceLine>>,
-    pub delete_service_line: Option<Vec<DeleteInboundShipmentLine>>,
+    pub delete_service_line: Option<Vec<DeleteStockInLine>>,
     pub update_shipment: Option<Vec<UpdateInboundShipment>>,
     pub delete_shipment: Option<Vec<DeleteInboundShipment>>,
     pub continue_on_error: Option<bool>,
@@ -42,14 +40,12 @@ pub struct BatchInboundShipment {
 
 pub type InsertShipmentsResult =
     Vec<InputWithResult<InsertInboundShipment, Result<Invoice, InsertInboundShipmentError>>>;
-pub type InsertLinesResult = Vec<
-    InputWithResult<InsertInboundShipmentLine, Result<InvoiceLine, InsertInboundShipmentLineError>>,
->;
-pub type UpdateLinesResult = Vec<
-    InputWithResult<UpdateInboundShipmentLine, Result<InvoiceLine, UpdateInboundShipmentLineError>>,
->;
+pub type InsertLinesResult =
+    Vec<InputWithResult<InsertStockInLine, Result<InvoiceLine, InsertStockInLineError>>>;
+pub type UpdateLinesResult =
+    Vec<InputWithResult<UpdateStockInLine, Result<InvoiceLine, UpdateStockInLineError>>>;
 pub type DeleteLinesResult =
-    Vec<InputWithResult<DeleteInboundShipmentLine, Result<String, DeleteInboundShipmentLineError>>>;
+    Vec<InputWithResult<DeleteStockInLine, Result<String, DeleteStockInLineError>>>;
 pub type InsertServiceLinesResult = Vec<
     InputWithResult<
         InsertInboundShipmentServiceLine,
@@ -62,12 +58,8 @@ pub type UpdateServiceLinesResult = Vec<
         Result<InvoiceLine, UpdateInboundShipmentServiceLineError>,
     >,
 >;
-pub type DeleteServiceLinesResult = Vec<
-    InputWithResult<
-        DeleteInboundShipmentLine,
-        Result<String, DeleteInboundShipmentServiceLineError>,
-    >,
->;
+pub type DeleteServiceLinesResult =
+    Vec<InputWithResult<DeleteStockInLine, Result<String, DeleteInboundShipmentServiceLineError>>>;
 pub type UpdateShipmentsResult =
     Vec<InputWithResult<UpdateInboundShipment, Result<Invoice, UpdateInboundShipmentError>>>;
 pub type DeleteShipmentsResult =
@@ -110,21 +102,21 @@ pub fn batch_inbound_shipment(
             // Normal Line
 
             let (has_errors, result) = mutations_processor
-                .do_mutations_with_user_id(input.insert_line, insert_inbound_shipment_line);
+                .do_mutations_with_user_id(input.insert_line, insert_stock_in_line);
             results.insert_line = result;
             if has_errors && !continue_on_error {
                 return Err(WithDBError::err(results));
             }
 
             let (has_errors, result) = mutations_processor
-                .do_mutations_with_user_id(input.update_line, update_inbound_shipment_line);
+                .do_mutations_with_user_id(input.update_line, update_stock_in_line);
             results.update_line = result;
             if has_errors && !continue_on_error {
                 return Err(WithDBError::err(results));
             }
 
             let (has_errors, result) = mutations_processor
-                .do_mutations_with_user_id(input.delete_line, delete_inbound_shipment_line);
+                .do_mutations_with_user_id(input.delete_line, delete_stock_in_line);
             results.delete_line = result;
             if has_errors && !continue_on_error {
                 return Err(WithDBError::err(results));
@@ -205,7 +197,7 @@ mod test {
             BatchInboundShipment, DeleteInboundShipment, DeleteInboundShipmentError,
             InsertInboundShipment,
         },
-        invoice_line::inbound_shipment_line::InsertInboundShipmentLine,
+        invoice_line::stock_in_line::{InsertStockInLine, StockInType},
         service_provider::ServiceProvider,
         InputWithResult,
     };
@@ -230,15 +222,14 @@ mod test {
                 input.id = "new_id".to_string();
                 input.other_party_id = mock_name_a().id;
             })]),
-            insert_line: Some(vec![inline_init(
-                |input: &mut InsertInboundShipmentLine| {
-                    input.invoice_id = "new_id".to_string();
-                    input.id = "new_line_id".to_string();
-                    input.item_id = mock_item_a().id;
-                    input.pack_size = 1.0;
-                    input.number_of_packs = 1.0;
-                },
-            )]),
+            insert_line: Some(vec![inline_init(|input: &mut InsertStockInLine| {
+                input.invoice_id = "new_id".to_string();
+                input.id = "new_line_id".to_string();
+                input.item_id = mock_item_a().id;
+                input.pack_size = 1;
+                input.number_of_packs = 1.0;
+                input.r#type = StockInType::InboundShipment;
+            })]),
             update_line: None,
             delete_line: None,
             update_shipment: None,
@@ -264,14 +255,14 @@ mod test {
 
         assert_eq!(
             InvoiceRowRepository::new(&connection)
-                .find_one_by_id("new_id")
+                .find_one_by_id_option("new_id")
                 .unwrap(),
             None
         );
 
         assert_eq!(
             InvoiceLineRowRepository::new(&connection)
-                .find_one_by_id("new_line_id")
+                .find_one_by_id_option("new_line_id")
                 .unwrap(),
             None
         );
@@ -283,14 +274,14 @@ mod test {
 
         assert_ne!(
             InvoiceRowRepository::new(&connection)
-                .find_one_by_id("new_id")
+                .find_one_by_id_option("new_id")
                 .unwrap(),
             None
         );
 
         assert_ne!(
             InvoiceLineRowRepository::new(&connection)
-                .find_one_by_id("new_line_id")
+                .find_one_by_id_option("new_line_id")
                 .unwrap(),
             None
         );
diff --git a/server/service/src/invoice/inbound_shipment/delete/mod.rs b/server/service/src/invoice/inbound_shipment/delete/mod.rs
index 28281372d..70874c9ba 100644
--- a/server/service/src/invoice/inbound_shipment/delete/mod.rs
+++ b/server/service/src/invoice/inbound_shipment/delete/mod.rs
@@ -7,8 +7,8 @@ use validate::validate;
 use crate::{
     activity_log::activity_log_entry,
     invoice::common::get_lines_for_invoice,
-    invoice_line::inbound_shipment_line::{
-        delete_inbound_shipment_line, DeleteInboundShipmentLine, DeleteInboundShipmentLineError,
+    invoice_line::stock_in_line::{
+        delete_stock_in_line, DeleteStockInLine, DeleteStockInLineError, StockInType,
     },
     service_provider::ServiceContext,
     WithDBError,
@@ -32,10 +32,11 @@ pub fn delete_inbound_shipment(
 
             let lines = get_lines_for_invoice(connection, &input.id)?;
             for line in lines {
-                delete_inbound_shipment_line(
+                delete_stock_in_line(
                     ctx,
-                    DeleteInboundShipmentLine {
+                    DeleteStockInLine {
                         id: line.invoice_line_row.id.clone(),
+                        r#type: StockInType::InboundShipment,
                     },
                 )
                 .map_err(|error| DeleteInboundShipmentError::LineDeleteError {
@@ -71,7 +72,7 @@ pub enum DeleteInboundShipmentError {
     CannotEditFinalised,
     LineDeleteError {
         line_id: String,
-        error: DeleteInboundShipmentLineError,
+        error: DeleteStockInLineError,
     },
 }
 
@@ -109,7 +110,7 @@ mod test {
         invoice::inbound_shipment::{
             DeleteInboundShipment, DeleteInboundShipmentError as ServiceError,
         },
-        invoice_line::inbound_shipment_line::DeleteInboundShipmentLineError,
+        invoice_line::stock_in_line::DeleteStockInLineError,
         service_provider::ServiceProvider,
     };
 
@@ -167,7 +168,7 @@ mod test {
             ),
             Err(ServiceError::LineDeleteError {
                 line_id: "inbound_shipment_a_line_a".to_string(),
-                error: DeleteInboundShipmentLineError::BatchIsReserved
+                error: DeleteStockInLineError::BatchIsReserved
             })
         );
 
@@ -207,7 +208,7 @@ mod test {
         //test entry has been deleted
         assert_eq!(
             InvoiceRowRepository::new(&connection)
-                .find_one_by_id(&invoice_id)
+                .find_one_by_id_option(&invoice_id)
                 .unwrap(),
             None
         );
diff --git a/server/service/src/invoice/inbound_shipment/generate.rs b/server/service/src/invoice/inbound_shipment/generate.rs
index ce41fc63f..349c4fe22 100644
--- a/server/service/src/invoice/inbound_shipment/generate.rs
+++ b/server/service/src/invoice/inbound_shipment/generate.rs
@@ -24,7 +24,7 @@ pub fn generate_empty_invoice_lines(
                     location_id: None,
                     batch: None,
                     expiry_date: None,
-                    pack_size: 1.0,
+                    pack_size: 1,
                     cost_price_per_pack: 0.0,
                     sell_price_per_pack: 0.0,
                     total_before_tax: 0.0,
diff --git a/server/service/src/invoice/inbound_shipment/insert/mod.rs b/server/service/src/invoice/inbound_shipment/insert/mod.rs
index b26cdfb70..b101b978c 100644
--- a/server/service/src/invoice/inbound_shipment/insert/mod.rs
+++ b/server/service/src/invoice/inbound_shipment/insert/mod.rs
@@ -236,7 +236,6 @@ mod test {
 
         let invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id("new_id")
-            .unwrap()
             .unwrap();
 
         assert_eq!(
@@ -263,7 +262,6 @@ mod test {
 
         let invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id("test_on_hold")
-            .unwrap()
             .unwrap();
 
         assert_eq!(
@@ -288,7 +286,6 @@ mod test {
 
         let invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id("test_name_store_id_linked")
-            .unwrap()
             .unwrap();
 
         assert_eq!(
@@ -312,7 +309,6 @@ mod test {
 
         let invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id("test_name_store_id_not_linked")
-            .unwrap()
             .unwrap();
 
         assert_eq!(invoice.name_store_id, None);
diff --git a/server/service/src/invoice/inbound_shipment/insert/validate.rs b/server/service/src/invoice/inbound_shipment/insert/validate.rs
index 8c0698815..d593c53b5 100644
--- a/server/service/src/invoice/inbound_shipment/insert/validate.rs
+++ b/server/service/src/invoice/inbound_shipment/insert/validate.rs
@@ -1,4 +1,4 @@
-use crate::invoice::check_invoice_exists;
+use crate::invoice::{check_invoice_does_not_exists, InvoiceAlreadyExistsError};
 use crate::validate::{check_other_party, CheckOtherPartyType, OtherPartyErrors};
 use repository::Name;
 use repository::StorageConnection;
@@ -11,9 +11,10 @@ pub fn validate(
     input: &InsertInboundShipment,
 ) -> Result<Name, InsertInboundShipmentError> {
     use InsertInboundShipmentError::*;
-    if let Some(_) = check_invoice_exists(&input.id, connection)? {
-        return Err(InvoiceAlreadyExists);
-    }
+    check_invoice_does_not_exists(&input.id, connection).map_err(|e| match e {
+        InvoiceAlreadyExistsError::InvoiceAlreadyExists => InvoiceAlreadyExists,
+        InvoiceAlreadyExistsError::RepositoryError(err) => DatabaseError(err),
+    })?;
 
     let other_party = check_other_party(
         connection,
diff --git a/server/service/src/invoice/inbound_shipment/update/generate.rs b/server/service/src/invoice/inbound_shipment/update/generate.rs
index 0427dffa3..9ffa250aa 100644
--- a/server/service/src/invoice/inbound_shipment/update/generate.rs
+++ b/server/service/src/invoice/inbound_shipment/update/generate.rs
@@ -126,19 +126,14 @@ pub(crate) fn generate(
 }
 
 pub fn should_create_batches(invoice: &InvoiceRow, patch: &UpdateInboundShipment) -> bool {
-    let existing_status = &invoice.status;
-    let new_status = match changed_status(patch.status.to_owned(), existing_status) {
-        Some(status) => status,
-        None => return false, // Status has not been updated
-    };
+    if let Some(new_invoice_status) = patch.full_status() {
+        let invoice_status_index = invoice.status.index();
+        let new_invoice_status_index = new_invoice_status.index();
 
-    match (existing_status, new_status) {
-        (
-            // From New/Picked/Shipped to Delivered/Verified
-            InvoiceStatus::New | InvoiceStatus::Picked | InvoiceStatus::Shipped,
-            UpdateInboundShipmentStatus::Delivered | UpdateInboundShipmentStatus::Verified,
-        ) => true,
-        _ => false,
+        new_invoice_status_index >= InvoiceStatus::Delivered.index()
+            && invoice_status_index < InvoiceStatus::Delivered.index()
+    } else {
+        false
     }
 }
 
@@ -231,54 +226,26 @@ fn empty_lines_to_trim(
 }
 
 fn set_new_status_datetime(invoice: &mut InvoiceRow, patch: &UpdateInboundShipment) {
-    let new_status = match changed_status(patch.status.to_owned(), &invoice.status) {
-        Some(status) => status,
-        None => return, // There's no status to update
-    };
+    if let Some(new_invoice_status) = patch.full_status() {
+        let current_datetime = Utc::now().naive_utc();
+        let invoice_status_index = invoice.status.clone().index();
+        let new_invoice_status_index = new_invoice_status.index();
 
-    let current_datetime = Utc::now().naive_utc();
-    match (&invoice.status, new_status) {
-        // From New/Picked/Shipped to Delivered
-        (
-            InvoiceStatus::New | InvoiceStatus::Picked | InvoiceStatus::Shipped,
-            UpdateInboundShipmentStatus::Delivered,
-        ) => {
-            invoice.delivered_datetime = Some(current_datetime);
-        }
+        let is_status_update = |status: InvoiceStatus| {
+            new_invoice_status_index >= status.index()
+                && invoice_status_index < new_invoice_status_index
+        };
 
-        // From New/Picked/Shipped to Verified
-        (
-            InvoiceStatus::New | InvoiceStatus::Picked | InvoiceStatus::Shipped,
-            UpdateInboundShipmentStatus::Verified,
-        ) => {
+        if is_status_update(InvoiceStatus::Delivered) {
             invoice.delivered_datetime = Some(current_datetime);
-            invoice.verified_datetime = Some(current_datetime);
         }
-        // From Delivered to Verified
-        (InvoiceStatus::Delivered, UpdateInboundShipmentStatus::Verified) => {
+
+        if is_status_update(InvoiceStatus::Verified) {
             invoice.verified_datetime = Some(current_datetime);
         }
-        _ => {}
     }
 }
 
-fn changed_status(
-    status: Option<UpdateInboundShipmentStatus>,
-    existing_status: &InvoiceStatus,
-) -> Option<UpdateInboundShipmentStatus> {
-    let new_status = match status {
-        Some(status) => status,
-        None => return None, // Status is not changing
-    };
-
-    if &new_status.full_status() == existing_status {
-        // The invoice already has this status, there's nothing to do.
-        return None;
-    }
-
-    Some(new_status)
-}
-
 pub fn generate_lines_and_stock_lines(
     connection: &StorageConnection,
     store_id: &str,
diff --git a/server/service/src/invoice/inbound_shipment/update/mod.rs b/server/service/src/invoice/inbound_shipment/update/mod.rs
index 9813ac8d6..45f9df7ef 100644
--- a/server/service/src/invoice/inbound_shipment/update/mod.rs
+++ b/server/service/src/invoice/inbound_shipment/update/mod.rs
@@ -374,7 +374,7 @@ mod test {
                 r.id = "invoice_line_for_test".to_string();
                 r.invoice_id = "invoice_test".to_string();
                 r.item_link_id = "item_a".to_string();
-                r.pack_size = 1.0;
+                r.pack_size = 1;
                 r.number_of_packs = 1.0;
                 r.r#type = InvoiceLineType::StockIn;
             })
@@ -413,7 +413,6 @@ mod test {
 
         let invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id(&mock_inbound_shipment_a().id)
-            .unwrap()
             .unwrap();
 
         assert_eq!(
@@ -440,7 +439,6 @@ mod test {
 
         let invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id(&invoice_test().id)
-            .unwrap()
             .unwrap();
 
         assert_eq!(
@@ -493,7 +491,6 @@ mod test {
 
         let invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id(&invoice_test().id)
-            .unwrap()
             .unwrap();
 
         assert_eq!(
@@ -523,7 +520,6 @@ mod test {
             let stock_line_id = lines.invoice_line_row.stock_line_id.clone().unwrap();
             let stock_line = StockLineRowRepository::new(&connection)
                 .find_one_by_id(&stock_line_id)
-                .unwrap()
                 .unwrap();
             stock_lines_delivered.push(stock_line.clone());
             assert_eq!(lines.invoice_line_row.stock_line_id, Some(stock_line.id));
@@ -545,7 +541,6 @@ mod test {
 
         let invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id(&invoice_test().id)
-            .unwrap()
             .unwrap();
         let filter =
             InvoiceLineFilter::new().invoice_id(EqualFilter::equal_any(vec![invoice.clone().id]));
@@ -564,7 +559,6 @@ mod test {
             let stock_line_id = lines.invoice_line_row.stock_line_id.clone().unwrap();
             let stock_line = StockLineRowRepository::new(&connection)
                 .find_one_by_id(&stock_line_id)
-                .unwrap()
                 .unwrap();
             stock_lines_verified.push(stock_line.clone());
         }
@@ -603,7 +597,6 @@ mod test {
 
         let invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id(&invoice_test().id)
-            .unwrap()
             .unwrap();
 
         assert_eq!(
@@ -659,7 +652,6 @@ mod test {
 
         let invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id(&invoice_test().id)
-            .unwrap()
             .unwrap();
 
         assert_eq!(
@@ -690,7 +682,6 @@ mod test {
             let stock_line_id = lines.invoice_line_row.stock_line_id.clone().unwrap();
             let stock_line = StockLineRowRepository::new(&connection)
                 .find_one_by_id(&stock_line_id)
-                .unwrap()
                 .unwrap();
             stock_lines_delivered.push(stock_line.clone());
             assert_eq!(lines.invoice_line_row.stock_line_id, Some(stock_line.id));
@@ -711,7 +702,6 @@ mod test {
 
         let invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id(&invoice_test().id)
-            .unwrap()
             .unwrap();
         let filter =
             InvoiceLineFilter::new().invoice_id(EqualFilter::equal_any(vec![invoice.clone().id]));
@@ -731,7 +721,6 @@ mod test {
             let stock_line_id = lines.invoice_line_row.stock_line_id.clone().unwrap();
             let stock_line = StockLineRowRepository::new(&connection)
                 .find_one_by_id(&stock_line_id)
-                .unwrap()
                 .unwrap();
             stock_lines_verified.push(stock_line.clone());
         }
@@ -752,7 +741,6 @@ mod test {
 
         let invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id(&mock_inbound_shipment_c().id)
-            .unwrap()
             .unwrap();
         let log = ActivityLogRowRepository::new(&connection)
             .find_many_by_record_id(&mock_inbound_shipment_c().id)
@@ -782,7 +770,6 @@ mod test {
             let stock_line_id = lines.invoice_line_row.stock_line_id.clone().unwrap();
             let stock_line = StockLineRowRepository::new(&connection)
                 .find_one_by_id(&stock_line_id)
-                .unwrap()
                 .unwrap();
             assert_eq!(lines.invoice_line_row.stock_line_id, Some(stock_line.id));
         }
@@ -819,7 +806,6 @@ mod test {
 
         let invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id(&mock_inbound_shipment_a().id)
-            .unwrap()
             .unwrap();
 
         assert_eq!(
@@ -844,7 +830,6 @@ mod test {
 
         let invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id(&mock_inbound_shipment_a().id)
-            .unwrap()
             .unwrap();
 
         assert_eq!(invoice.name_store_id, None);
@@ -868,7 +853,6 @@ mod test {
             .unwrap();
         let invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id(&mock_inbound_shipment_a().id)
-            .unwrap()
             .unwrap();
         let log = ActivityLogRowRepository::new(&connection)
             .find_many_by_record_id(&mock_inbound_shipment_a().id)
@@ -878,15 +862,8 @@ mod test {
             .unwrap();
         let stock_line = StockLineRowRepository::new(&connection)
             .find_one_by_id(&stock_line_id)
-            .unwrap()
             .unwrap();
 
-        // Ensure delivered time not updated by status change to verified
-        assert_eq!(
-            invoice.delivered_datetime,
-            mock_inbound_shipment_a().delivered_datetime
-        );
-
         assert!(invoice.verified_datetime.unwrap() > now);
         assert!(invoice.verified_datetime.unwrap() < end_time);
         assert_eq!(
diff --git a/server/service/src/invoice/inventory_adjustment/add_new_stock_line/generate.rs b/server/service/src/invoice/inventory_adjustment/add_new_stock_line/generate.rs
index 9836706da..0fdd8fe21 100644
--- a/server/service/src/invoice/inventory_adjustment/add_new_stock_line/generate.rs
+++ b/server/service/src/invoice/inventory_adjustment/add_new_stock_line/generate.rs
@@ -7,16 +7,12 @@ use repository::{
 use util::constants::INVENTORY_ADJUSTMENT_NAME_CODE;
 use util::uuid::uuid;
 
+use crate::invoice::inventory_adjustment::UpdateInventoryAdjustmentReason;
 use crate::invoice_line::stock_in_line::{InsertStockInLine, StockInType};
 use crate::number::next_number;
 
 use super::AddNewStockLine;
 
-pub struct UpdateInventoryAdjustmentReason {
-    pub reason_id: Option<String>,
-    pub invoice_line_id: String,
-}
-
 pub struct GenerateResult {
     pub invoice: InvoiceRow,
     pub stock_in_line: InsertStockInLine,
diff --git a/server/service/src/invoice/inventory_adjustment/add_new_stock_line/insert.rs b/server/service/src/invoice/inventory_adjustment/add_new_stock_line/insert.rs
index 9a625266d..3e0af58db 100644
--- a/server/service/src/invoice/inventory_adjustment/add_new_stock_line/insert.rs
+++ b/server/service/src/invoice/inventory_adjustment/add_new_stock_line/insert.rs
@@ -20,7 +20,7 @@ pub struct AddNewStockLine {
     pub number_of_packs: f64,
     pub cost_price_per_pack: f64,
     pub sell_price_per_pack: f64,
-    pub pack_size: f64,
+    pub pack_size: u32,
     pub on_hold: bool,
     pub batch: Option<String>,
     pub location: Option<NullableUpdate<String>>,
@@ -207,7 +207,7 @@ mod test {
                 &context,
                 AddNewStockLine {
                     stock_line_id: "new".to_string(),
-                    pack_size: 0.0,
+                    pack_size: 0,
                     ..Default::default()
                 }
             ),
@@ -248,7 +248,7 @@ mod test {
                 &context,
                 AddNewStockLine {
                     stock_line_id: "new".to_string(),
-                    pack_size: 1.0,
+                    pack_size: 1,
                     number_of_packs: 2.0,
                     item_id: mock_item_a().id,
                     inventory_adjustment_reason_id: Some(addition_reason().id),
@@ -330,7 +330,7 @@ mod test {
             &context,
             AddNewStockLine {
                 stock_line_id: "new".to_string(),
-                pack_size: 1.0,
+                pack_size: 1,
                 number_of_packs: 2.0,
                 item_id: mock_item_a().id,
                 inventory_adjustment_reason_id: None, // Check *no* error when reasons not defined and not provided
diff --git a/server/service/src/invoice/inventory_adjustment/adjust_existing_stock/generate.rs b/server/service/src/invoice/inventory_adjustment/adjust_existing_stock/generate.rs
index da7532f28..2917273e7 100644
--- a/server/service/src/invoice/inventory_adjustment/adjust_existing_stock/generate.rs
+++ b/server/service/src/invoice/inventory_adjustment/adjust_existing_stock/generate.rs
@@ -1,16 +1,31 @@
 use chrono::Utc;
 
-use repository::{InvoiceLineRow, InvoiceLineType, NameRowRepository, StockLine, StockLineRow};
 use repository::{
     InvoiceRow, InvoiceStatus, InvoiceType, NumberRowType, RepositoryError, StorageConnection,
 };
+use repository::{NameRowRepository, StockLine, StockLineRow};
 use util::constants::INVENTORY_ADJUSTMENT_NAME_CODE;
 use util::uuid::uuid;
 
+use crate::invoice::inventory_adjustment::UpdateInventoryAdjustmentReason;
+use crate::invoice_line::stock_in_line::{InsertStockInLine, StockInType};
+use crate::invoice_line::stock_out_line::{InsertStockOutLine, StockOutType};
 use crate::number::next_number;
+use crate::{i32_to_u32, NullableUpdate};
 
 use super::{AdjustmentType, InsertInventoryAdjustment};
 
+pub enum InsertStockInOrOutLine {
+    StockIn(InsertStockInLine),
+    StockOut(InsertStockOutLine),
+}
+
+pub struct GenerateResult {
+    pub invoice: InvoiceRow,
+    pub insert_stock_in_or_out_line: InsertStockInOrOutLine,
+    pub update_inventory_adjustment_reason: UpdateInventoryAdjustmentReason,
+}
+
 pub fn generate(
     connection: &StorageConnection,
     store_id: &str,
@@ -22,7 +37,7 @@ pub fn generate(
         inventory_adjustment_reason_id,
     }: InsertInventoryAdjustment,
     stock_line: StockLine,
-) -> Result<(InvoiceRow, InvoiceLineRow, StockLineRow), RepositoryError> {
+) -> Result<GenerateResult, RepositoryError> {
     let current_datetime = Utc::now().naive_utc();
 
     let inventory_adjustment_name = NameRowRepository::new(connection)
@@ -79,45 +94,62 @@ pub fn generate(
         cost_price_per_pack,
         sell_price_per_pack,
         note,
+        on_hold,
         ..
     } = stock_line.stock_line_row.clone();
 
-    let invoice_line = InvoiceLineRow {
-        id: uuid(),
-        invoice_id: invoice.id.clone(),
-        item_link_id: stock_line.item_row.id,
-        item_name: stock_line.item_row.name,
-        item_code: stock_line.item_row.code,
-        stock_line_id: Some(stock_line_id),
-        location_id,
-        batch,
-        expiry_date,
-        pack_size,
-        cost_price_per_pack,
-        sell_price_per_pack,
-        total_before_tax: 0.0,
-        total_after_tax: 0.0,
-        tax_percentage: None,
-        r#type: match adjustment_type {
-            AdjustmentType::Addition => InvoiceLineType::StockIn,
-            AdjustmentType::Reduction => InvoiceLineType::StockOut,
-        },
-        number_of_packs: adjustment,
-        note,
-        inventory_adjustment_reason_id,
-        return_reason_id: None,
-        foreign_currency_price_before_tax: None,
-    };
+    let invoice_id = invoice.id.clone();
+    let invoice_line_id = uuid();
 
-    let mut updated_stock_line = stock_line.stock_line_row;
-
-    let delta = match adjustment_type {
-        AdjustmentType::Addition => adjustment,
-        AdjustmentType::Reduction => -adjustment,
+    let insert_stock_in_or_out_line = match adjustment_type {
+        AdjustmentType::Addition => InsertStockInOrOutLine::StockIn(InsertStockInLine {
+            r#type: StockInType::InventoryAddition,
+            id: invoice_line_id.clone(),
+            invoice_id,
+            stock_line_id: Some(stock_line_id),
+            number_of_packs: adjustment,
+            // From existing stock line
+            item_id: stock_line.item_row.id,
+            location: location_id.map(|id| NullableUpdate { value: Some(id) }),
+            pack_size: i32_to_u32(pack_size),
+            batch,
+            cost_price_per_pack,
+            sell_price_per_pack,
+            expiry_date,
+            stock_on_hold: on_hold,
+            note,
+            // Default
+            barcode: None,
+            total_before_tax: None,
+            tax_percentage: None,
+        }),
+        AdjustmentType::Reduction => InsertStockInOrOutLine::StockOut(InsertStockOutLine {
+            r#type: StockOutType::InventoryReduction,
+            id: invoice_line_id.clone(),
+            invoice_id,
+            stock_line_id,
+            note,
+            number_of_packs: adjustment,
+            // Default
+            total_before_tax: None,
+            tax_percentage: None,
+            location_id: None,
+            batch: None,
+            pack_size: None,
+            expiry_date: None,
+            cost_price_per_pack: None,
+            sell_price_per_pack: None,
+        }),
     };
 
-    updated_stock_line.available_number_of_packs += delta;
-    updated_stock_line.total_number_of_packs += delta;
+    let update_inventory_adjustment_reason = UpdateInventoryAdjustmentReason {
+        reason_id: inventory_adjustment_reason_id,
+        invoice_line_id,
+    };
 
-    Ok((invoice, invoice_line, updated_stock_line))
+    Ok(GenerateResult {
+        invoice,
+        insert_stock_in_or_out_line,
+        update_inventory_adjustment_reason,
+    })
 }
diff --git a/server/service/src/invoice/inventory_adjustment/adjust_existing_stock/insert.rs b/server/service/src/invoice/inventory_adjustment/adjust_existing_stock/insert.rs
index 98689bb3d..567ae25d3 100644
--- a/server/service/src/invoice/inventory_adjustment/adjust_existing_stock/insert.rs
+++ b/server/service/src/invoice/inventory_adjustment/adjust_existing_stock/insert.rs
@@ -2,14 +2,16 @@ use chrono::Utc;
 use repository::RepositoryError;
 use repository::{
     ActivityLogType, Invoice, InvoiceLineRowRepository, InvoiceRow, InvoiceRowRepository,
-    InvoiceStatus, StockLine, StockLineRowRepository,
+    InvoiceStatus, StockLine,
 };
 
-use super::generate::generate;
+use super::generate::{generate, GenerateResult, InsertStockInOrOutLine};
 use super::validate::validate;
 
 use crate::activity_log::activity_log_entry;
 use crate::invoice::query::get_invoice;
+use crate::invoice_line::stock_in_line::{insert_stock_in_line, InsertStockInLineError};
+use crate::invoice_line::stock_out_line::{insert_stock_out_line, InsertStockOutLineError};
 use crate::service_provider::ServiceContext;
 
 #[derive(Clone, Debug, PartialEq)]
@@ -44,6 +46,8 @@ pub enum InsertInventoryAdjustmentError {
     NewlyCreatedInvoiceDoesNotExist,
     DatabaseError(RepositoryError),
     InternalError(String),
+    StockInLineInsertError(InsertStockInLineError),
+    StockOutLineInsertError(InsertStockOutLineError),
 }
 
 pub fn insert_inventory_adjustment(
@@ -54,19 +58,41 @@ pub fn insert_inventory_adjustment(
         .connection
         .transaction_sync(|connection| {
             let stock_line = validate(connection, &ctx.store_id, &input)?;
-            let (new_invoice, invoice_line, stock_line_row) =
-                generate(connection, &ctx.store_id, &ctx.user_id, input, stock_line)?;
+            let GenerateResult {
+                invoice,
+                insert_stock_in_or_out_line,
+                update_inventory_adjustment_reason,
+            } = generate(connection, &ctx.store_id, &ctx.user_id, input, stock_line)?;
 
+            // Create Inventory Adjustment in New status
             let invoice_row_repo = InvoiceRowRepository::new(connection);
+            invoice_row_repo.upsert_one(&invoice)?;
+
+            // Add invoice line (and update stock line)
+            match insert_stock_in_or_out_line {
+                InsertStockInOrOutLine::StockIn(stock_in_line) => {
+                    insert_stock_in_line(ctx, stock_in_line).map_err(|error| {
+                        InsertInventoryAdjustmentError::StockInLineInsertError(error)
+                    })?;
+                }
+                InsertStockInOrOutLine::StockOut(stock_out_line) => {
+                    insert_stock_out_line(ctx, stock_out_line).map_err(|error| {
+                        InsertInventoryAdjustmentError::StockOutLineInsertError(error)
+                    })?;
+                }
+            }
 
-            invoice_row_repo.upsert_one(&new_invoice)?;
-            InvoiceLineRowRepository::new(connection).upsert_one(&invoice_line)?;
-            StockLineRowRepository::new(connection).upsert_one(&stock_line_row)?;
+            // Add inventory adjustment reason to the invoice line
+            let invoice_line_repo = InvoiceLineRowRepository::new(&connection);
+            invoice_line_repo.update_inventory_adjustment_reason_id(
+                &update_inventory_adjustment_reason.invoice_line_id,
+                update_inventory_adjustment_reason.reason_id,
+            )?;
 
             let verified_invoice = InvoiceRow {
                 status: InvoiceStatus::Verified,
                 verified_datetime: Some(Utc::now().naive_utc()),
-                ..new_invoice
+                ..invoice
             };
 
             invoice_row_repo.upsert_one(&verified_invoice)?;
@@ -251,9 +277,9 @@ mod test {
     }
 
     #[actix_rt::test]
-    async fn insert_inventory_adjustment_success() {
-        let (_, connection, connection_manager, _) = setup_all(
-            "insert_inventory_adjustment_success",
+    async fn insert_inventory_adjustment_success_no_reasons() {
+        let (_, _, connection_manager, _) = setup_all(
+            "insert_inventory_adjustment_success_no_reasons",
             MockDataInserts::all(),
         )
         .await;
@@ -275,6 +301,21 @@ mod test {
         );
 
         assert!(result.is_ok());
+    }
+
+    #[actix_rt::test]
+    async fn insert_inventory_adjustment_success() {
+        let (_, connection, connection_manager, _) = setup_all(
+            "insert_inventory_adjustment_success",
+            MockDataInserts::all(),
+        )
+        .await;
+
+        let service_provider = ServiceProvider::new(connection_manager, "app_data");
+        let context = service_provider
+            .context(mock_store_a().id, mock_user_account_a().id)
+            .unwrap();
+        let service = service_provider.invoice_service;
 
         // Positive adjustment
         let created_invoice = service
@@ -290,12 +331,10 @@ mod test {
 
         let retrieved_invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id(&created_invoice.invoice_row.id)
-            .unwrap()
             .unwrap();
 
         let updated_stockline = StockLineRowRepository::new(&connection)
             .find_one_by_id(&mock_stock_line_a().id)
-            .unwrap()
             .unwrap();
 
         assert_eq!(
@@ -309,12 +348,12 @@ mod test {
 
         assert_eq!(
             updated_stockline.available_number_of_packs,
-            mock_stock_line_a().available_number_of_packs + 3.0
+            mock_stock_line_a().available_number_of_packs + 2.0
         );
 
         assert_eq!(
             updated_stockline.total_number_of_packs,
-            mock_stock_line_a().total_number_of_packs + 3.0
+            mock_stock_line_a().total_number_of_packs + 2.0
         );
 
         // Negative adjustment
@@ -332,12 +371,10 @@ mod test {
 
         let retrieved_invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id(&created_invoice.invoice_row.id)
-            .unwrap()
             .unwrap();
 
         let updated_stockline = StockLineRowRepository::new(&connection)
             .find_one_by_id(&mock_stock_line_b().id)
-            .unwrap()
             .unwrap();
 
         assert_eq!(
diff --git a/server/service/src/invoice/inventory_adjustment/mod.rs b/server/service/src/invoice/inventory_adjustment/mod.rs
index f902e9306..53e80bf77 100644
--- a/server/service/src/invoice/inventory_adjustment/mod.rs
+++ b/server/service/src/invoice/inventory_adjustment/mod.rs
@@ -2,3 +2,8 @@ pub mod adjust_existing_stock;
 pub use self::adjust_existing_stock::*;
 
 pub mod add_new_stock_line;
+
+pub struct UpdateInventoryAdjustmentReason {
+    pub reason_id: Option<String>,
+    pub invoice_line_id: String,
+}
diff --git a/server/service/src/invoice/outbound_return/delete/mod.rs b/server/service/src/invoice/outbound_return/delete/mod.rs
index da4546e82..0f48ee3df 100644
--- a/server/service/src/invoice/outbound_return/delete/mod.rs
+++ b/server/service/src/invoice/outbound_return/delete/mod.rs
@@ -54,7 +54,8 @@ pub fn delete_outbound_return(
         })
         .map_err(|error: TransactionError<DeleteOutboundReturnError>| error.to_inner_error())?;
 
-    ctx.processors_trigger.trigger_invoice_transfer_processors();
+    ctx.processors_trigger
+        .trigger_invoice_transfer_processors();
 
     Ok(invoice_id)
 }
@@ -176,10 +177,7 @@ mod test {
         let stock_line_id = mock_outbound_return_a_invoice_line_a()
             .stock_line_id
             .unwrap();
-        let original_stock_line = stock_line_row_repo
-            .find_one_by_id(&stock_line_id)
-            .unwrap()
-            .unwrap();
+        let original_stock_line = stock_line_row_repo.find_one_by_id(&stock_line_id).unwrap();
 
         service
             .delete_outbound_return(&context, mock_outbound_return_a().id)
@@ -188,15 +186,12 @@ mod test {
         // test entry has been deleted
         assert_eq!(
             InvoiceRowRepository::new(&connection)
-                .find_one_by_id(&mock_outbound_return_a().id)
+                .find_one_by_id_option(&mock_outbound_return_a().id)
                 .unwrap(),
             None
         );
 
-        let updated_stock_line = stock_line_row_repo
-            .find_one_by_id(&stock_line_id)
-            .unwrap()
-            .unwrap();
+        let updated_stock_line = stock_line_row_repo.find_one_by_id(&stock_line_id).unwrap();
 
         // test stock has been increased by the num of packs in the outbound return line
         assert_eq!(
diff --git a/server/service/src/invoice/outbound_return/generate_outbound_return_lines.rs b/server/service/src/invoice/outbound_return/generate_outbound_return_lines.rs
index 841fbeb77..da139b73e 100644
--- a/server/service/src/invoice/outbound_return/generate_outbound_return_lines.rs
+++ b/server/service/src/invoice/outbound_return/generate_outbound_return_lines.rs
@@ -408,7 +408,7 @@ mod test {
             ItemRow {
                 id: "test_item".to_string(),
                 r#type: ItemType::Stock,
-                default_pack_size: 1.0,
+                default_pack_size: 1,
                 ..Default::default()
             }
         }
diff --git a/server/service/src/invoice/outbound_return/insert/generate.rs b/server/service/src/invoice/outbound_return/insert/generate.rs
index 792670362..bc615b2ca 100644
--- a/server/service/src/invoice/outbound_return/insert/generate.rs
+++ b/server/service/src/invoice/outbound_return/insert/generate.rs
@@ -80,9 +80,16 @@ pub fn generate(
             stock_line_id: line.stock_line_id.clone(),
             number_of_packs: line.number_of_packs.clone(),
             note: line.note.clone(),
-            r#type: Some(StockOutType::OutboundReturn),
+            r#type: StockOutType::OutboundReturn,
+            // Default
             tax_percentage: None,
             total_before_tax: None,
+            location_id: None,
+            batch: None,
+            pack_size: None,
+            expiry_date: None,
+            cost_price_per_pack: None,
+            sell_price_per_pack: None,
         })
         .collect();
 
diff --git a/server/service/src/invoice/outbound_return/insert/mod.rs b/server/service/src/invoice/outbound_return/insert/mod.rs
index 832fe54f3..dade7a74e 100644
--- a/server/service/src/invoice/outbound_return/insert/mod.rs
+++ b/server/service/src/invoice/outbound_return/insert/mod.rs
@@ -402,7 +402,6 @@ mod test {
 
         let invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id("new_outbound_return_id")
-            .unwrap()
             .unwrap();
 
         assert_eq!(invoice.id, "new_outbound_return_id");
diff --git a/server/service/src/invoice/outbound_return/insert/validate.rs b/server/service/src/invoice/outbound_return/insert/validate.rs
index 2187f7f82..56eea11b4 100644
--- a/server/service/src/invoice/outbound_return/insert/validate.rs
+++ b/server/service/src/invoice/outbound_return/insert/validate.rs
@@ -1,6 +1,9 @@
 use repository::{InvoiceRow, InvoiceStatus, InvoiceType, Name, StorageConnection};
 
-use crate::invoice::{check_invoice_exists, check_invoice_type, check_store};
+use crate::invoice::{
+    check_invoice_does_not_exists, check_invoice_exists, check_invoice_type, check_store,
+    InvoiceAlreadyExistsError,
+};
 use crate::validate::{check_other_party, CheckOtherPartyType, OtherPartyErrors};
 
 use super::{InsertOutboundReturn, InsertOutboundReturnError};
@@ -11,9 +14,10 @@ pub fn validate(
     input: &InsertOutboundReturn,
 ) -> Result<Name, InsertOutboundReturnError> {
     use InsertOutboundReturnError::*;
-    if let Some(_) = check_invoice_exists(&input.id, connection)? {
-        return Err(InvoiceAlreadyExists);
-    }
+    check_invoice_does_not_exists(&input.id, connection).map_err(|e| match e {
+        InvoiceAlreadyExistsError::InvoiceAlreadyExists => InvoiceAlreadyExists,
+        InvoiceAlreadyExistsError::RepositoryError(err) => DatabaseError(err),
+    })?;
 
     if let Some(inbound_shipment_id) = &input.inbound_shipment_id {
         let inbound_shipment = check_invoice_exists(inbound_shipment_id, connection)?
diff --git a/server/service/src/invoice/outbound_return/update/mod.rs b/server/service/src/invoice/outbound_return/update/mod.rs
index 14dd4318c..87b228787 100644
--- a/server/service/src/invoice/outbound_return/update/mod.rs
+++ b/server/service/src/invoice/outbound_return/update/mod.rs
@@ -288,10 +288,7 @@ mod test {
             .stock_line_id
             .unwrap();
 
-        let original_stock_line = stock_line_row_repo
-            .find_one_by_id(&stock_line_id)
-            .unwrap()
-            .unwrap();
+        let original_stock_line = stock_line_row_repo.find_one_by_id(&stock_line_id).unwrap();
 
         let result = service_provider
             .invoice_service
@@ -309,10 +306,7 @@ mod test {
         assert!(result.invoice_row.picked_datetime.is_some());
         assert!(result.invoice_row.shipped_datetime.is_some());
 
-        let updated_stock_line = stock_line_row_repo
-            .find_one_by_id(&stock_line_id)
-            .unwrap()
-            .unwrap();
+        let updated_stock_line = stock_line_row_repo.find_one_by_id(&stock_line_id).unwrap();
 
         assert_eq!(
             updated_stock_line.total_number_of_packs,
@@ -338,10 +332,7 @@ mod test {
             .stock_line_id
             .unwrap();
 
-        let original_stock_line = stock_line_row_repo
-            .find_one_by_id(&stock_line_id)
-            .unwrap()
-            .unwrap();
+        let original_stock_line = stock_line_row_repo.find_one_by_id(&stock_line_id).unwrap();
 
         let result = service_provider
             .invoice_service
@@ -358,10 +349,7 @@ mod test {
         assert_eq!(result.invoice_row.status, InvoiceStatus::Shipped);
         assert!(result.invoice_row.shipped_datetime.is_some());
 
-        let updated_stock_line = stock_line_row_repo
-            .find_one_by_id(&stock_line_id)
-            .unwrap()
-            .unwrap();
+        let updated_stock_line = stock_line_row_repo.find_one_by_id(&stock_line_id).unwrap();
 
         assert_eq!(
             updated_stock_line.total_number_of_packs,
diff --git a/server/service/src/invoice/outbound_return/update_lines/generate.rs b/server/service/src/invoice/outbound_return/update_lines/generate.rs
index 10c50544c..7ce2ead9e 100644
--- a/server/service/src/invoice/outbound_return/update_lines/generate.rs
+++ b/server/service/src/invoice/outbound_return/update_lines/generate.rs
@@ -43,9 +43,16 @@ pub fn generate(
             number_of_packs: line.number_of_packs,
             stock_line_id: line.stock_line_id,
             note: line.note,
-            r#type: Some(StockOutType::OutboundReturn),
+            r#type: StockOutType::OutboundReturn,
+            // Default
             tax_percentage: None,
             total_before_tax: None,
+            location_id: None,
+            batch: None,
+            pack_size: None,
+            expiry_date: None,
+            cost_price_per_pack: None,
+            sell_price_per_pack: None,
         })
         .collect();
 
diff --git a/server/service/src/invoice/outbound_shipment/batch.rs b/server/service/src/invoice/outbound_shipment/batch.rs
index 7959c93fe..6d5d301da 100644
--- a/server/service/src/invoice/outbound_shipment/batch.rs
+++ b/server/service/src/invoice/outbound_shipment/batch.rs
@@ -299,7 +299,7 @@ mod test {
             })]),
             insert_line: Some(vec![inline_init(|input: &mut InsertStockOutLine| {
                 input.invoice_id = "new_id".to_string();
-                input.r#type = Some(StockOutType::OutboundShipment);
+                input.r#type = StockOutType::OutboundShipment;
                 input.id = "new_line_id".to_string();
                 input.stock_line_id = mock_stock_line_a().id;
                 input.number_of_packs = 1.0
@@ -333,14 +333,14 @@ mod test {
 
         assert_eq!(
             InvoiceRowRepository::new(&connection)
-                .find_one_by_id("new_id")
+                .find_one_by_id_option("new_id")
                 .unwrap(),
             None
         );
 
         assert_eq!(
             InvoiceLineRowRepository::new(&connection)
-                .find_one_by_id("new_line_id")
+                .find_one_by_id_option("new_line_id")
                 .unwrap(),
             None
         );
@@ -352,14 +352,14 @@ mod test {
 
         assert_ne!(
             InvoiceRowRepository::new(&connection)
-                .find_one_by_id("new_id")
+                .find_one_by_id_option("new_id")
                 .unwrap(),
             None
         );
 
         assert_ne!(
             InvoiceLineRowRepository::new(&connection)
-                .find_one_by_id("new_line_id")
+                .find_one_by_id_option("new_line_id")
                 .unwrap(),
             None
         );
diff --git a/server/service/src/invoice/outbound_shipment/delete/mod.rs b/server/service/src/invoice/outbound_shipment/delete/mod.rs
index 007474061..44528f069 100644
--- a/server/service/src/invoice/outbound_shipment/delete/mod.rs
+++ b/server/service/src/invoice/outbound_shipment/delete/mod.rs
@@ -178,7 +178,7 @@ mod test {
         //test entry has been deleted
         assert_eq!(
             InvoiceRowRepository::new(&connection)
-                .find_one_by_id(&invoice_id)
+                .find_one_by_id_option(&invoice_id)
                 .unwrap(),
             None
         );
diff --git a/server/service/src/invoice/outbound_shipment/generate.rs b/server/service/src/invoice/outbound_shipment/generate.rs
index 3be8e0246..ace3592b0 100644
--- a/server/service/src/invoice/outbound_shipment/generate.rs
+++ b/server/service/src/invoice/outbound_shipment/generate.rs
@@ -24,7 +24,7 @@ pub fn generate_unallocated_invoice_lines(
                     location_id: None,
                     batch: None,
                     expiry_date: None,
-                    pack_size: 1.0,
+                    pack_size: 1,
                     cost_price_per_pack: 0.0,
                     sell_price_per_pack: 0.0,
                     total_before_tax: 0.0,
diff --git a/server/service/src/invoice/outbound_shipment/insert/mod.rs b/server/service/src/invoice/outbound_shipment/insert/mod.rs
index 460da48d7..438648a2d 100644
--- a/server/service/src/invoice/outbound_shipment/insert/mod.rs
+++ b/server/service/src/invoice/outbound_shipment/insert/mod.rs
@@ -240,7 +240,6 @@ mod test {
 
         let invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id("new_id")
-            .unwrap()
             .unwrap();
 
         assert_eq!(
@@ -267,7 +266,6 @@ mod test {
 
         let invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id("test_on_hold")
-            .unwrap()
             .unwrap();
 
         assert_eq!(
@@ -292,7 +290,6 @@ mod test {
 
         let invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id("test_name_store_id_linked")
-            .unwrap()
             .unwrap();
 
         assert_eq!(
@@ -316,7 +313,6 @@ mod test {
 
         let invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id("test_name_store_id_not_linked")
-            .unwrap()
             .unwrap();
 
         assert_eq!(invoice.name_store_id, None)
diff --git a/server/service/src/invoice/outbound_shipment/insert/validate.rs b/server/service/src/invoice/outbound_shipment/insert/validate.rs
index fc95549ae..3641d261a 100644
--- a/server/service/src/invoice/outbound_shipment/insert/validate.rs
+++ b/server/service/src/invoice/outbound_shipment/insert/validate.rs
@@ -1,7 +1,8 @@
 use repository::Name;
 use repository::StorageConnection;
 
-use crate::invoice::check_invoice_exists;
+use crate::invoice::check_invoice_does_not_exists;
+use crate::invoice::InvoiceAlreadyExistsError;
 use crate::validate::{check_other_party, CheckOtherPartyType, OtherPartyErrors};
 
 use super::{InsertOutboundShipment, InsertOutboundShipmentError};
@@ -12,9 +13,10 @@ pub fn validate(
     input: &InsertOutboundShipment,
 ) -> Result<Name, InsertOutboundShipmentError> {
     use InsertOutboundShipmentError::*;
-    if let Some(_) = check_invoice_exists(&input.id, connection)? {
-        return Err(InvoiceAlreadyExists);
-    }
+    check_invoice_does_not_exists(&input.id, connection).map_err(|e| match e {
+        InvoiceAlreadyExistsError::InvoiceAlreadyExists => InvoiceAlreadyExists,
+        InvoiceAlreadyExistsError::RepositoryError(err) => DatabaseError(err),
+    })?;
 
     let other_party = check_other_party(
         connection,
diff --git a/server/service/src/invoice/outbound_shipment/update/mod.rs b/server/service/src/invoice/outbound_shipment/update/mod.rs
index f384a6f5f..dbcb5f9ce 100644
--- a/server/service/src/invoice/outbound_shipment/update/mod.rs
+++ b/server/service/src/invoice/outbound_shipment/update/mod.rs
@@ -116,7 +116,8 @@ pub fn update_outbound_shipment(
         })
         .map_err(|error| error.to_inner_error())?;
 
-    ctx.processors_trigger.trigger_invoice_transfer_processors();
+    ctx.processors_trigger
+        .trigger_invoice_transfer_processors();
 
     Ok(invoice)
 }
@@ -339,7 +340,7 @@ mod test {
                 r.invoice_id = invoice().id;
                 r.item_link_id = mock_item_a().id;
                 r.r#type = InvoiceLineType::UnallocatedStock;
-                r.pack_size = 1.0;
+                r.pack_size = 1;
                 r.number_of_packs = 0.0;
             })
         }
@@ -355,7 +356,7 @@ mod test {
         .await;
 
         assert_eq!(
-            InvoiceLineRowRepository::new(&connection).find_one_by_id(&invoice_line().id),
+            InvoiceLineRowRepository::new(&connection).find_one_by_id_option(&invoice_line().id),
             Ok(Some(invoice_line()))
         );
 
@@ -374,7 +375,7 @@ mod test {
         assert!(result.is_ok(), "Not Ok(_) {:#?}", result);
 
         assert_eq!(
-            InvoiceLineRowRepository::new(&connection).find_one_by_id(&invoice_line().id),
+            InvoiceLineRowRepository::new(&connection).find_one_by_id_option(&invoice_line().id),
             Ok(None)
         );
     }
@@ -446,7 +447,6 @@ mod test {
 
         let updated_record = InvoiceRowRepository::new(&connection)
             .find_one_by_id(&invoice().id)
-            .unwrap()
             .unwrap();
 
         assert_eq!(
@@ -511,7 +511,6 @@ mod test {
 
         let invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id(&mock_outbound_shipment_c().id)
-            .unwrap()
             .unwrap();
         let invoice_lines = InvoiceLineRowRepository::new(&connection)
             .find_many_by_invoice_id(&invoice.id)
@@ -556,7 +555,7 @@ mod test {
                 r.store_id = mock_store_a().id;
                 r.available_number_of_packs = 8.0;
                 r.total_number_of_packs = 10.0;
-                r.pack_size = 1.0;
+                r.pack_size = 1;
                 r.item_link_id = mock_item_a().id;
             })
         }
@@ -613,10 +612,7 @@ mod test {
             u
         });
         assert_eq!(
-            stock_line_repo
-                .find_one_by_id(&new_stock_line.id)
-                .unwrap()
-                .unwrap(),
+            stock_line_repo.find_one_by_id(&new_stock_line.id).unwrap(),
             new_stock_line
         );
 
@@ -635,10 +631,7 @@ mod test {
 
         // Stock line should not have changed
         assert_eq!(
-            stock_line_repo
-                .find_one_by_id(&new_stock_line.id)
-                .unwrap()
-                .unwrap(),
+            stock_line_repo.find_one_by_id(&new_stock_line.id).unwrap(),
             new_stock_line
         );
 
@@ -656,10 +649,7 @@ mod test {
         let stock_line_repo = StockLineRowRepository::new(&connection);
         // Stock line should not have changed
         assert_eq!(
-            stock_line_repo
-                .find_one_by_id(&new_stock_line.id)
-                .unwrap()
-                .unwrap(),
+            stock_line_repo.find_one_by_id(&new_stock_line.id).unwrap(),
             new_stock_line
         );
 
@@ -702,10 +692,7 @@ mod test {
 
         // Stock line total_number_of_packs should have been reduced
         assert_eq!(
-            stock_line_repo
-                .find_one_by_id(&stock_line().id)
-                .unwrap()
-                .unwrap(),
+            stock_line_repo.find_one_by_id(&stock_line().id).unwrap(),
             inline_edit(&stock_line(), |mut u| {
                 u.total_number_of_packs = 8.0;
                 u
diff --git a/server/service/src/invoice/outbound_shipment/update_name/mod.rs b/server/service/src/invoice/outbound_shipment/update_name/mod.rs
index 31704b3bf..9760fef5c 100644
--- a/server/service/src/invoice/outbound_shipment/update_name/mod.rs
+++ b/server/service/src/invoice/outbound_shipment/update_name/mod.rs
@@ -72,7 +72,8 @@ pub fn update_outbound_shipment_name(
         })
         .map_err(|error| error.to_inner_error())?;
 
-    ctx.processors_trigger.trigger_invoice_transfer_processors();
+    ctx.processors_trigger
+        .trigger_invoice_transfer_processors();
 
     Ok(invoice)
 }
@@ -303,7 +304,9 @@ mod test {
             .unwrap();
 
         assert_eq!(
-            invoice_row_repo.find_one_by_id(&invoice().id).unwrap(),
+            invoice_row_repo
+                .find_one_by_id_option(&invoice().id)
+                .unwrap(),
             None
         );
         assert_eq!(
@@ -314,7 +317,7 @@ mod test {
         );
         assert_eq!(
             invoice_row_repo
-                .find_one_by_id(&updated_invoice.invoice_row.id)
+                .find_one_by_id_option(&updated_invoice.invoice_row.id)
                 .unwrap()
                 .unwrap(),
             updated_invoice.invoice_row
diff --git a/server/service/src/invoice/prescription/batch.rs b/server/service/src/invoice/prescription/batch.rs
index d668dc9c5..a33a04d93 100644
--- a/server/service/src/invoice/prescription/batch.rs
+++ b/server/service/src/invoice/prescription/batch.rs
@@ -155,7 +155,7 @@ mod test {
             })]),
             insert_line: Some(vec![inline_init(|input: &mut InsertStockOutLine| {
                 input.invoice_id = "new_id".to_string();
-                input.r#type = Some(StockOutType::Prescription);
+                input.r#type = StockOutType::Prescription;
                 input.id = "new_line_id".to_string();
                 input.stock_line_id = mock_stock_line_a().id;
                 input.number_of_packs = 1.0
@@ -180,14 +180,14 @@ mod test {
 
         assert_eq!(
             InvoiceRowRepository::new(&connection)
-                .find_one_by_id("new_id")
+                .find_one_by_id_option("new_id")
                 .unwrap(),
             None
         );
 
         assert_eq!(
             InvoiceLineRowRepository::new(&connection)
-                .find_one_by_id("new_line_id")
+                .find_one_by_id_option("new_line_id")
                 .unwrap(),
             None
         );
@@ -199,14 +199,14 @@ mod test {
 
         assert_ne!(
             InvoiceRowRepository::new(&connection)
-                .find_one_by_id("new_id")
+                .find_one_by_id_option("new_id")
                 .unwrap(),
             None
         );
 
         assert_ne!(
             InvoiceLineRowRepository::new(&connection)
-                .find_one_by_id("new_line_id")
+                .find_one_by_id_option("new_line_id")
                 .unwrap(),
             None
         );
diff --git a/server/service/src/invoice/prescription/delete/mod.rs b/server/service/src/invoice/prescription/delete/mod.rs
index 70c3c9de2..37e058e0a 100644
--- a/server/service/src/invoice/prescription/delete/mod.rs
+++ b/server/service/src/invoice/prescription/delete/mod.rs
@@ -148,7 +148,7 @@ mod test {
         //test entry has been deleted
         assert_eq!(
             InvoiceRowRepository::new(&connection)
-                .find_one_by_id(&invoice_id)
+                .find_one_by_id_option(&invoice_id)
                 .unwrap(),
             None
         );
diff --git a/server/service/src/invoice/prescription/insert/mod.rs b/server/service/src/invoice/prescription/insert/mod.rs
index ffd134622..d68cc29f1 100644
--- a/server/service/src/invoice/prescription/insert/mod.rs
+++ b/server/service/src/invoice/prescription/insert/mod.rs
@@ -227,7 +227,6 @@ mod test {
 
         let invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id("new_id")
-            .unwrap()
             .unwrap();
 
         assert_eq!(
diff --git a/server/service/src/invoice/prescription/insert/validate.rs b/server/service/src/invoice/prescription/insert/validate.rs
index bb91d698e..8d969d0b9 100644
--- a/server/service/src/invoice/prescription/insert/validate.rs
+++ b/server/service/src/invoice/prescription/insert/validate.rs
@@ -1,7 +1,5 @@
-use crate::{
-    invoice::check_invoice_exists,
-    validate::{check_other_party, CheckOtherPartyType, OtherPartyErrors},
-};
+use crate::invoice::{check_invoice_does_not_exists, InvoiceAlreadyExistsError};
+use crate::validate::{check_other_party, CheckOtherPartyType, OtherPartyErrors};
 use repository::StorageConnection;
 
 use super::{InsertPrescription, InsertPrescriptionError};
@@ -12,9 +10,10 @@ pub fn validate(
     input: &InsertPrescription,
 ) -> Result<(), InsertPrescriptionError> {
     use InsertPrescriptionError::*;
-    if let Some(_) = check_invoice_exists(&input.id, connection)? {
-        return Err(InvoiceAlreadyExists);
-    }
+    check_invoice_does_not_exists(&input.id, connection).map_err(|e| match e {
+        InvoiceAlreadyExistsError::InvoiceAlreadyExists => InvoiceAlreadyExists,
+        InvoiceAlreadyExistsError::RepositoryError(err) => DatabaseError(err),
+    })?;
 
     check_other_party(
         connection,
diff --git a/server/service/src/invoice/prescription/update/mod.rs b/server/service/src/invoice/prescription/update/mod.rs
index 454c32622..d5c9ddd34 100644
--- a/server/service/src/invoice/prescription/update/mod.rs
+++ b/server/service/src/invoice/prescription/update/mod.rs
@@ -330,7 +330,6 @@ mod test {
 
         let updated_record = InvoiceRowRepository::new(&connection)
             .find_one_by_id(&prescription().id)
-            .unwrap()
             .unwrap();
 
         assert_eq!(
@@ -389,7 +388,6 @@ mod test {
 
         let invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id(&prescription().id)
-            .unwrap()
             .unwrap();
         let invoice_lines = InvoiceLineRowRepository::new(&connection)
             .find_many_by_invoice_id(&invoice.id)
diff --git a/server/service/src/invoice/validate.rs b/server/service/src/invoice/validate.rs
index e882e5ada..ffd4f5d8b 100644
--- a/server/service/src/invoice/validate.rs
+++ b/server/service/src/invoice/validate.rs
@@ -92,9 +92,35 @@ pub fn check_invoice_status(
     Ok(())
 }
 
+pub enum InvoiceAlreadyExistsError {
+    InvoiceAlreadyExists,
+    RepositoryError(RepositoryError),
+}
+
 pub fn check_invoice_exists(
     id: &str,
     connection: &StorageConnection,
 ) -> Result<Option<InvoiceRow>, RepositoryError> {
-    InvoiceRowRepository::new(connection).find_one_by_id(id)
+    let result = InvoiceRowRepository::new(connection).find_one_by_id(id);
+
+    match result {
+        Ok(invoice_row) => Ok(Some(invoice_row)),
+        Err(RepositoryError::NotFound) => Ok(None),
+        Err(error) => Err(error),
+    }
+}
+
+pub fn check_invoice_does_not_exists(
+    id: &str,
+    connection: &StorageConnection,
+) -> Result<(), InvoiceAlreadyExistsError> {
+    let result = InvoiceRowRepository::new(connection).find_one_by_id(id);
+
+    if let Err(RepositoryError::NotFound) = &result {
+        Ok(())
+    } else if let Err(err) = result {
+        Err(InvoiceAlreadyExistsError::RepositoryError(err))
+    } else {
+        Err(InvoiceAlreadyExistsError::InvoiceAlreadyExists)
+    }
 }
diff --git a/server/service/src/invoice_line/inbound_shipment_line/delete/mod.rs b/server/service/src/invoice_line/inbound_shipment_line/delete/mod.rs
deleted file mode 100644
index fca546184..000000000
--- a/server/service/src/invoice_line/inbound_shipment_line/delete/mod.rs
+++ /dev/null
@@ -1,222 +0,0 @@
-use crate::{
-    invoice::common::generate_invoice_user_id_update, service_provider::ServiceContext, WithDBError,
-};
-use repository::{
-    InvoiceLineRowRepository, InvoiceRowRepository, RepositoryError, StockLineRowRepository,
-};
-
-mod validate;
-
-use validate::validate;
-
-#[derive(Clone, Debug, PartialEq, Default)]
-pub struct DeleteInboundShipmentLine {
-    pub id: String,
-}
-
-type OutError = DeleteInboundShipmentLineError;
-
-pub fn delete_inbound_shipment_line(
-    ctx: &ServiceContext,
-    input: DeleteInboundShipmentLine,
-) -> Result<String, OutError> {
-    let line_id = ctx
-        .connection
-        .transaction_sync(|connection| {
-            let (invoice_row, line) = validate(&input, &ctx.store_id, connection)?;
-
-            let delete_batch_id_option = line.stock_line_id.clone();
-
-            InvoiceLineRowRepository::new(connection).delete(&line.id)?;
-
-            if let Some(id) = delete_batch_id_option {
-                StockLineRowRepository::new(connection).delete(&id)?;
-            }
-
-            if let Some(invoice_row) = generate_invoice_user_id_update(&ctx.user_id, invoice_row) {
-                InvoiceRowRepository::new(connection).upsert_one(&invoice_row)?;
-            }
-
-            Ok(line.id) as Result<String, OutError>
-        })
-        .map_err(|error| error.to_inner_error())?;
-    Ok(line_id)
-}
-#[derive(Debug, PartialEq)]
-pub enum DeleteInboundShipmentLineError {
-    LineDoesNotExist,
-    DatabaseError(RepositoryError),
-    InvoiceDoesNotExist,
-    NotAnInboundShipment,
-    NotThisStoreInvoice,
-    CannotEditFinalised,
-    BatchIsReserved,
-    NotThisInvoiceLine(String),
-    LineUsedInStocktake,
-}
-
-impl From<RepositoryError> for DeleteInboundShipmentLineError {
-    fn from(error: RepositoryError) -> Self {
-        DeleteInboundShipmentLineError::DatabaseError(error)
-    }
-}
-
-impl<ERR> From<WithDBError<ERR>> for DeleteInboundShipmentLineError
-where
-    ERR: Into<DeleteInboundShipmentLineError>,
-{
-    fn from(result: WithDBError<ERR>) -> Self {
-        match result {
-            WithDBError::DatabaseError(error) => error.into(),
-            WithDBError::Error(error) => error.into(),
-        }
-    }
-}
-
-#[cfg(test)]
-mod test {
-    use chrono::NaiveDate;
-    use repository::{
-        mock::{
-            mock_inbound_shipment_a_invoice_lines, mock_inbound_shipment_b_invoice_lines,
-            mock_inbound_shipment_c_invoice_lines, mock_store_a, mock_store_b, mock_user_account_a,
-            MockData, MockDataInserts,
-        },
-        test_db::{setup_all, setup_all_with_data},
-        InvoiceLineRow, InvoiceLineRowRepository, InvoiceLineType,
-    };
-    use util::inline_init;
-
-    use crate::{
-        invoice_line::inbound_shipment_line::delete::DeleteInboundShipmentLine,
-        invoice_line::inbound_shipment_line::DeleteInboundShipmentLineError as ServiceError,
-        service_provider::ServiceProvider,
-    };
-
-    #[actix_rt::test]
-    async fn delete_inbound_shipment_line_errors() {
-        let (_, _, connection_manager, _) = setup_all_with_data(
-            "delete_inbound_shipment_line_errors",
-            MockDataInserts::all(),
-            inline_init(|r: &mut MockData| {
-                r.invoice_lines = vec![outbound_shipment_e_line()];
-            }),
-        )
-        .await;
-
-        fn outbound_shipment_e_line() -> InvoiceLineRow {
-            inline_init(|r: &mut InvoiceLineRow| {
-                r.id = String::from("outbound_shipment_e_line_a");
-                r.invoice_id = String::from("outbound_shipment_e");
-                r.item_link_id = String::from("item_a");
-                r.item_name = String::from("Item A");
-                r.item_code = String::from("item_a_code");
-                r.stock_line_id = Some(String::from("item_a_line_a"));
-                r.batch = Some(String::from("item_a_line_a"));
-                r.expiry_date = Some(NaiveDate::from_ymd_opt(2020, 8, 1).unwrap());
-                r.pack_size = 1.0;
-                r.total_before_tax = 0.87;
-                r.total_after_tax = 1.0;
-                r.tax_percentage = Some(15.0);
-                r.r#type = InvoiceLineType::StockOut;
-                r.number_of_packs = 10.0;
-            })
-        }
-
-        let service_provider = ServiceProvider::new(connection_manager, "app_data");
-        let mut context = service_provider
-            .context(mock_store_a().id, mock_user_account_a().id)
-            .unwrap();
-        let service = service_provider.invoice_line_service;
-
-        // LineDoesNotExist
-        assert_eq!(
-            service.delete_inbound_shipment_line(
-                &context,
-                DeleteInboundShipmentLine {
-                    id: "invalid".to_owned(),
-                },
-            ),
-            Err(ServiceError::LineDoesNotExist)
-        );
-
-        // NotAnInboundShipment
-        assert_eq!(
-            service.delete_inbound_shipment_line(
-                &context,
-                DeleteInboundShipmentLine {
-                    id: outbound_shipment_e_line().id.clone(),
-                },
-            ),
-            Err(ServiceError::NotAnInboundShipment)
-        );
-
-        // CannotEditFinalised
-        assert_eq!(
-            service.delete_inbound_shipment_line(
-                &context,
-                DeleteInboundShipmentLine {
-                    id: mock_inbound_shipment_b_invoice_lines()[0].id.clone(),
-                },
-            ),
-            Err(ServiceError::CannotEditFinalised)
-        );
-
-        // BatchIsReserved
-        assert_eq!(
-            service.delete_inbound_shipment_line(
-                &context,
-                DeleteInboundShipmentLine {
-                    id: mock_inbound_shipment_a_invoice_lines()[0].id.clone(),
-                },
-            ),
-            Err(ServiceError::BatchIsReserved)
-        );
-
-        // NotThisStoreInvoice
-        context.store_id = mock_store_b().id;
-        assert_eq!(
-            service.delete_inbound_shipment_line(
-                &context,
-                DeleteInboundShipmentLine {
-                    id: mock_inbound_shipment_a_invoice_lines()[0].id.clone()
-                },
-            ),
-            Err(ServiceError::NotThisStoreInvoice)
-        );
-
-        //TODO InvoiceDoesNotExist, NotThisInvoiceLine
-    }
-
-    #[actix_rt::test]
-    async fn delete_inbound_shipment_line_success() {
-        let (_, connection, connection_manager, _) = setup_all(
-            "delete_inbound_shipment_line_success",
-            MockDataInserts::all(),
-        )
-        .await;
-
-        let service_provider = ServiceProvider::new(connection_manager, "app_data");
-        let context = service_provider
-            .context(mock_store_a().id, mock_user_account_a().id)
-            .unwrap();
-        let service = service_provider.invoice_line_service;
-
-        let invoice_line_id = service
-            .delete_inbound_shipment_line(
-                &context,
-                DeleteInboundShipmentLine {
-                    id: mock_inbound_shipment_c_invoice_lines()[2].id.clone(),
-                },
-            )
-            .unwrap();
-
-        //test entry has been deleted
-        assert_eq!(
-            InvoiceLineRowRepository::new(&connection)
-                .find_one_by_id(&invoice_line_id)
-                .unwrap(),
-            None
-        );
-    }
-}
diff --git a/server/service/src/invoice_line/inbound_shipment_line/delete/validate.rs b/server/service/src/invoice_line/inbound_shipment_line/delete/validate.rs
deleted file mode 100644
index 629e31229..000000000
--- a/server/service/src/invoice_line/inbound_shipment_line/delete/validate.rs
+++ /dev/null
@@ -1,45 +0,0 @@
-use crate::{
-    invoice::{check_invoice_exists, check_invoice_is_editable, check_invoice_type, check_store},
-    invoice_line::{
-        inbound_shipment_line::check_batch,
-        validate::{
-            check_line_belongs_to_invoice, check_line_not_associated_with_stocktake,
-            check_line_row_exists,
-        },
-    },
-};
-use repository::{InvoiceLineRow, InvoiceRow, InvoiceType, StorageConnection};
-
-use super::{DeleteInboundShipmentLine, DeleteInboundShipmentLineError};
-
-pub fn validate(
-    input: &DeleteInboundShipmentLine,
-    store_id: &str,
-    connection: &StorageConnection,
-) -> Result<(InvoiceRow, InvoiceLineRow), DeleteInboundShipmentLineError> {
-    use DeleteInboundShipmentLineError::*;
-
-    let line = check_line_row_exists(connection, &input.id)?.ok_or(LineDoesNotExist)?;
-    let invoice = check_invoice_exists(&line.invoice_id, connection)?.ok_or(InvoiceDoesNotExist)?;
-
-    if !check_store(&invoice, store_id) {
-        return Err(NotThisStoreInvoice);
-    }
-    if !check_invoice_type(&invoice, InvoiceType::InboundShipment) {
-        return Err(NotAnInboundShipment);
-    }
-    if !check_invoice_is_editable(&invoice) {
-        return Err(CannotEditFinalised);
-    }
-    if !check_batch(&line, connection)? {
-        return Err(BatchIsReserved);
-    }
-    if !check_line_belongs_to_invoice(&line, &invoice) {
-        return Err(NotThisInvoiceLine(line.invoice_id));
-    }
-    if !check_line_not_associated_with_stocktake(connection, &line.id, store_id.to_string()) {
-        return Err(LineUsedInStocktake);
-    }
-
-    Ok((invoice, line))
-}
diff --git a/server/service/src/invoice_line/inbound_shipment_line/generate.rs b/server/service/src/invoice_line/inbound_shipment_line/generate.rs
deleted file mode 100644
index 9afa3b78b..000000000
--- a/server/service/src/invoice_line/inbound_shipment_line/generate.rs
+++ /dev/null
@@ -1,67 +0,0 @@
-use repository::{InvoiceLineRow, StockLineRow};
-use util::uuid::uuid;
-
-pub fn convert_stock_line_to_single_pack(stock_line: StockLineRow) -> StockLineRow {
-    StockLineRow {
-        total_number_of_packs: stock_line.total_number_of_packs * stock_line.pack_size as f64,
-        available_number_of_packs: stock_line.available_number_of_packs
-            * stock_line.pack_size as f64,
-        cost_price_per_pack: stock_line.cost_price_per_pack / stock_line.pack_size as f64,
-        sell_price_per_pack: stock_line.sell_price_per_pack / stock_line.pack_size as f64,
-        pack_size: 1.0,
-        ..stock_line
-    }
-}
-
-pub fn convert_invoice_line_to_single_pack(invoice_line: InvoiceLineRow) -> InvoiceLineRow {
-    InvoiceLineRow {
-        number_of_packs: invoice_line.number_of_packs * invoice_line.pack_size as f64,
-        sell_price_per_pack: invoice_line.sell_price_per_pack / invoice_line.pack_size as f64,
-        cost_price_per_pack: invoice_line.cost_price_per_pack / invoice_line.pack_size as f64,
-        pack_size: 1.0,
-        ..invoice_line
-    }
-}
-
-pub fn generate_batch(
-    store_id: &str,
-    InvoiceLineRow {
-        stock_line_id,
-        item_link_id,
-        pack_size,
-        batch,
-        expiry_date,
-        sell_price_per_pack,
-        cost_price_per_pack,
-        number_of_packs,
-        location_id,
-        note,
-        ..
-    }: InvoiceLineRow,
-    keep_existing_batch: bool,
-    supplier_link_id: &str,
-) -> StockLineRow {
-    // Generate new id if requested via parameter or if stock_line_id is not already set on line
-    let stock_line_id = match (stock_line_id, keep_existing_batch) {
-        (Some(stock_line_id), true) => stock_line_id,
-        _ => uuid(),
-    };
-
-    StockLineRow {
-        id: stock_line_id,
-        item_link_id,
-        store_id: store_id.to_string(),
-        location_id,
-        batch,
-        pack_size,
-        cost_price_per_pack,
-        sell_price_per_pack,
-        available_number_of_packs: number_of_packs,
-        total_number_of_packs: number_of_packs,
-        expiry_date,
-        on_hold: false,
-        note,
-        supplier_link_id: Some(supplier_link_id.to_string()),
-        barcode_id: None,
-    }
-}
diff --git a/server/service/src/invoice_line/inbound_shipment_line/insert/generate.rs b/server/service/src/invoice_line/inbound_shipment_line/insert/generate.rs
deleted file mode 100644
index 73c36eb9f..000000000
--- a/server/service/src/invoice_line/inbound_shipment_line/insert/generate.rs
+++ /dev/null
@@ -1,123 +0,0 @@
-use crate::{
-    invoice::common::{
-        calculate_foreign_currency_total, calculate_total_after_tax,
-        generate_invoice_user_id_update,
-    },
-    invoice_line::{
-        generate_batch,
-        inbound_shipment_line::generate::{
-            convert_invoice_line_to_single_pack, convert_stock_line_to_single_pack,
-        },
-    },
-    store_preference::get_store_preferences,
-};
-use repository::{
-    InvoiceLineRow, InvoiceLineType, InvoiceRow, InvoiceStatus, ItemRow, RepositoryError,
-    StockLineRow, StorageConnection,
-};
-
-use super::InsertInboundShipmentLine;
-
-pub fn generate(
-    connection: &StorageConnection,
-    user_id: &str,
-    input: InsertInboundShipmentLine,
-    item_row: ItemRow,
-    existing_invoice_row: InvoiceRow,
-) -> Result<(Option<InvoiceRow>, InvoiceLineRow, Option<StockLineRow>), RepositoryError> {
-    let store_preferences = get_store_preferences(connection, &existing_invoice_row.store_id)?;
-
-    let new_line = generate_line(connection, input, item_row, existing_invoice_row.clone())?;
-
-    let mut new_line = match store_preferences.pack_to_one {
-        true => convert_invoice_line_to_single_pack(new_line),
-        false => new_line,
-    };
-
-    let new_batch_option = if existing_invoice_row.status != InvoiceStatus::New {
-        let new_batch = generate_batch(
-            &existing_invoice_row.store_id,
-            new_line.clone(),
-            false,
-            &existing_invoice_row.name_link_id,
-        );
-        new_line.stock_line_id = Some(new_batch.id.clone());
-
-        let new_batch = match store_preferences.pack_to_one {
-            true => convert_stock_line_to_single_pack(new_batch),
-            false => new_batch,
-        };
-
-        Some(new_batch)
-    } else {
-        None
-    };
-
-    Ok((
-        generate_invoice_user_id_update(user_id, existing_invoice_row),
-        new_line,
-        new_batch_option,
-    ))
-}
-
-fn generate_line(
-    connection: &StorageConnection,
-    InsertInboundShipmentLine {
-        id,
-        invoice_id,
-        item_id,
-        pack_size,
-        batch,
-        expiry_date,
-        sell_price_per_pack,
-        cost_price_per_pack,
-        number_of_packs,
-        location,
-        total_before_tax,
-        tax_percentage: _,
-    }: InsertInboundShipmentLine,
-    ItemRow {
-        name: item_name,
-        code: item_code,
-        ..
-    }: ItemRow,
-    InvoiceRow {
-        tax_percentage,
-        currency_id,
-        currency_rate,
-        ..
-    }: InvoiceRow,
-) -> Result<InvoiceLineRow, RepositoryError> {
-    let total_before_tax = total_before_tax.unwrap_or(cost_price_per_pack * number_of_packs);
-    let total_after_tax = calculate_total_after_tax(total_before_tax, tax_percentage);
-    let foreign_currency_price_before_tax = calculate_foreign_currency_total(
-        connection,
-        total_before_tax,
-        currency_id,
-        &currency_rate,
-    )?;
-
-    Ok(InvoiceLineRow {
-        id,
-        invoice_id,
-        item_link_id: item_id,
-        location_id: location.map(|l| l.value).unwrap_or_default(),
-        pack_size,
-        batch,
-        expiry_date,
-        sell_price_per_pack,
-        cost_price_per_pack,
-        r#type: InvoiceLineType::StockIn,
-        number_of_packs,
-        item_name,
-        item_code,
-        stock_line_id: None,
-        total_before_tax,
-        total_after_tax,
-        tax_percentage,
-        note: None,
-        inventory_adjustment_reason_id: None,
-        return_reason_id: None,
-        foreign_currency_price_before_tax,
-    })
-}
diff --git a/server/service/src/invoice_line/inbound_shipment_line/insert/mod.rs b/server/service/src/invoice_line/inbound_shipment_line/insert/mod.rs
deleted file mode 100644
index 81979fc9f..000000000
--- a/server/service/src/invoice_line/inbound_shipment_line/insert/mod.rs
+++ /dev/null
@@ -1,353 +0,0 @@
-use crate::{
-    invoice_line::query::get_invoice_line, service_provider::ServiceContext, NullableUpdate,
-    WithDBError,
-};
-use chrono::NaiveDate;
-use repository::{
-    InvoiceLine, InvoiceLineRowRepository, InvoiceRowRepository, RepositoryError,
-    StockLineRowRepository,
-};
-
-mod generate;
-mod validate;
-
-use generate::generate;
-use validate::validate;
-
-#[derive(Clone, Debug, Default, PartialEq)]
-pub struct InsertInboundShipmentLine {
-    pub id: String,
-    pub invoice_id: String,
-    pub item_id: String,
-    pub location: Option<NullableUpdate<String>>,
-    pub pack_size: f64,
-    pub batch: Option<String>,
-    pub cost_price_per_pack: f64,
-    pub sell_price_per_pack: f64,
-    pub expiry_date: Option<NaiveDate>,
-    pub number_of_packs: f64,
-    pub total_before_tax: Option<f64>,
-    pub tax_percentage: Option<f64>,
-}
-
-type OutError = InsertInboundShipmentLineError;
-
-pub fn insert_inbound_shipment_line(
-    ctx: &ServiceContext,
-    input: InsertInboundShipmentLine,
-) -> Result<InvoiceLine, OutError> {
-    let new_line = ctx
-        .connection
-        .transaction_sync(|connection| {
-            let (item, invoice) = validate(&input, &ctx.store_id, connection)?;
-            let (invoice_row_option, new_line, new_batch_option) =
-                generate(connection, &ctx.user_id, input, item, invoice)?;
-
-            if let Some(new_batch) = new_batch_option {
-                StockLineRowRepository::new(connection).upsert_one(&new_batch)?;
-            }
-            InvoiceLineRowRepository::new(connection).upsert_one(&new_line)?;
-
-            if let Some(invoice_row) = invoice_row_option {
-                InvoiceRowRepository::new(connection).upsert_one(&invoice_row)?;
-            }
-
-            get_invoice_line(ctx, &new_line.id)
-                .map_err(OutError::DatabaseError)?
-                .ok_or(OutError::NewlyCreatedLineDoesNotExist)
-        })
-        .map_err(|error| error.to_inner_error())?;
-    Ok(new_line)
-}
-
-#[derive(Debug, PartialEq)]
-pub enum InsertInboundShipmentLineError {
-    LineAlreadyExists,
-    DatabaseError(RepositoryError),
-    InvoiceDoesNotExist,
-    NotAnInboundShipment,
-    NotThisStoreInvoice,
-    CannotEditFinalised,
-    LocationDoesNotExist,
-    ItemNotFound,
-    PackSizeBelowOne,
-    NumberOfPacksBelowZero,
-    NewlyCreatedLineDoesNotExist,
-}
-
-impl From<RepositoryError> for InsertInboundShipmentLineError {
-    fn from(error: RepositoryError) -> Self {
-        InsertInboundShipmentLineError::DatabaseError(error)
-    }
-}
-
-impl<ERR> From<WithDBError<ERR>> for InsertInboundShipmentLineError
-where
-    ERR: Into<InsertInboundShipmentLineError>,
-{
-    fn from(result: WithDBError<ERR>) -> Self {
-        match result {
-            WithDBError::DatabaseError(error) => error.into(),
-            WithDBError::Error(error) => error.into(),
-        }
-    }
-}
-
-#[cfg(test)]
-mod test {
-    use repository::{
-        mock::{
-            mock_inbound_shipment_a_invoice_lines, mock_inbound_shipment_c,
-            mock_inbound_shipment_c_invoice_lines, mock_item_a, mock_outbound_shipment_e,
-            mock_store_a, mock_store_b, mock_user_account_a, MockDataInserts,
-        },
-        test_db::setup_all,
-        InvoiceLineRowRepository, StorePreferenceRow, StorePreferenceRowRepository,
-    };
-    use util::{inline_edit, inline_init};
-
-    use crate::{
-        invoice_line::inbound_shipment_line::{
-            insert::InsertInboundShipmentLine, InsertInboundShipmentLineError as ServiceError,
-        },
-        service_provider::ServiceProvider,
-        NullableUpdate,
-    };
-
-    #[actix_rt::test]
-    async fn insert_inbound_shipment_line_errors() {
-        let (_, _, connection_manager, _) = setup_all(
-            "insert_inbound_shipment_line_errors",
-            MockDataInserts::all(),
-        )
-        .await;
-
-        let service_provider = ServiceProvider::new(connection_manager, "app_data");
-        let mut context = service_provider
-            .context(mock_store_a().id, mock_user_account_a().id)
-            .unwrap();
-        let service = service_provider.invoice_line_service;
-
-        // LineAlreadyExists
-        assert_eq!(
-            service.insert_inbound_shipment_line(
-                &context,
-                inline_init(|r: &mut InsertInboundShipmentLine| {
-                    r.id = mock_inbound_shipment_a_invoice_lines()[0].id.clone();
-                    r.invoice_id = mock_inbound_shipment_c_invoice_lines()[0]
-                        .invoice_id
-                        .clone();
-                }),
-            ),
-            Err(ServiceError::LineAlreadyExists)
-        );
-
-        // InvoiceDoesNotExist
-        assert_eq!(
-            service.insert_inbound_shipment_line(
-                &context,
-                inline_init(|r: &mut InsertInboundShipmentLine| {
-                    r.id = "new invoice line id".to_string();
-                    r.invoice_id = "new invoice id".to_string();
-                    r.item_id = mock_item_a().id.clone();
-                    r.pack_size = 1.0;
-                    r.number_of_packs = 1.0;
-                }),
-            ),
-            Err(ServiceError::InvoiceDoesNotExist)
-        );
-
-        // NotAnInboundShipment
-        assert_eq!(
-            service.insert_inbound_shipment_line(
-                &context,
-                inline_init(|r: &mut InsertInboundShipmentLine| {
-                    r.id = "new invoice line id".to_string();
-                    r.invoice_id = mock_outbound_shipment_e().id;
-                    r.item_id = mock_item_a().id.clone();
-                    r.pack_size = 1.0;
-                    r.number_of_packs = 1.0;
-                }),
-            ),
-            Err(ServiceError::NotAnInboundShipment)
-        );
-
-        // LocationDoesNotExist
-        assert_eq!(
-            service.insert_inbound_shipment_line(
-                &context,
-                inline_init(|r: &mut InsertInboundShipmentLine| {
-                    r.id = "new invoice line id".to_string();
-                    r.invoice_id = mock_inbound_shipment_c_invoice_lines()[0]
-                        .invoice_id
-                        .clone();
-                    r.location = Some(NullableUpdate {
-                        value: Some("invalid".to_string()),
-                    });
-                    r.item_id = mock_item_a().id.clone();
-                    r.pack_size = 1.0;
-                    r.number_of_packs = 1.0;
-                }),
-            ),
-            Err(ServiceError::LocationDoesNotExist)
-        );
-
-        // ItemNotFound
-        assert_eq!(
-            service.insert_inbound_shipment_line(
-                &context,
-                inline_init(|r: &mut InsertInboundShipmentLine| {
-                    r.id = "new invoice line id".to_string();
-                    r.invoice_id = mock_inbound_shipment_c_invoice_lines()[0]
-                        .invoice_id
-                        .clone();
-                    r.item_id = "invalid".to_string();
-                    r.pack_size = 1.0;
-                    r.number_of_packs = 1.0;
-                }),
-            ),
-            Err(ServiceError::ItemNotFound)
-        );
-
-        // PackSizeBelowOne
-        assert_eq!(
-            service.insert_inbound_shipment_line(
-                &context,
-                inline_init(|r: &mut InsertInboundShipmentLine| {
-                    r.id = "new invoice line id".to_string();
-                    r.invoice_id = mock_inbound_shipment_c_invoice_lines()[0]
-                        .invoice_id
-                        .clone();
-                    r.item_id = mock_item_a().id.clone();
-                    r.pack_size = 0.0;
-                    r.number_of_packs = 1.0;
-                }),
-            ),
-            Err(ServiceError::PackSizeBelowOne)
-        );
-
-        // NumberOfPacksBelowZero
-        assert_eq!(
-            service.insert_inbound_shipment_line(
-                &context,
-                inline_init(|r: &mut InsertInboundShipmentLine| {
-                    r.id = "new invoice line id".to_string();
-                    r.invoice_id = mock_inbound_shipment_c_invoice_lines()[0]
-                        .invoice_id
-                        .clone();
-                    r.item_id = mock_item_a().id.clone();
-                    r.pack_size = 1.0;
-                    r.number_of_packs = -1.0;
-                }),
-            ),
-            Err(ServiceError::NumberOfPacksBelowZero)
-        );
-
-        // NotThisStoreInvoice
-        context.store_id = mock_store_b().id;
-        assert_eq!(
-            service.insert_inbound_shipment_line(
-                &context,
-                inline_init(|r: &mut InsertInboundShipmentLine| {
-                    r.id = "new invoice line id".to_string();
-                    r.invoice_id = mock_inbound_shipment_c().id.clone();
-                    r.item_id = mock_item_a().id.clone();
-                    r.pack_size = 1.0;
-                    r.number_of_packs = 1.0;
-                }),
-            ),
-            Err(ServiceError::NotThisStoreInvoice)
-        );
-
-        //TODO NewlyCreatedLineDoesNotExist
-    }
-
-    #[actix_rt::test]
-    async fn insert_inbound_shipment_line_success() {
-        let (_, connection, connection_manager, _) = setup_all(
-            "insert_inbound_shipment_line_success",
-            MockDataInserts::all(),
-        )
-        .await;
-
-        let service_provider = ServiceProvider::new(connection_manager, "app_data");
-        let context = service_provider
-            .context(mock_store_a().id, mock_user_account_a().id)
-            .unwrap();
-        let service = service_provider.invoice_line_service;
-
-        service
-            .insert_inbound_shipment_line(
-                &context,
-                inline_init(|r: &mut InsertInboundShipmentLine| {
-                    r.id = "new invoice line id".to_string();
-                    r.invoice_id = mock_inbound_shipment_c_invoice_lines()[0]
-                        .invoice_id
-                        .clone();
-                    r.item_id = mock_item_a().id.clone();
-                    r.pack_size = 1.0;
-                    r.number_of_packs = 1.0;
-                }),
-            )
-            .unwrap();
-
-        let inbound_line = InvoiceLineRowRepository::new(&connection)
-            .find_one_by_id("new invoice line id")
-            .unwrap()
-            .unwrap();
-
-        assert_eq!(
-            inbound_line,
-            inline_edit(&inbound_line, |mut u| {
-                u.id = "new invoice line id".to_string();
-                u.item_link_id = mock_item_a().id.clone();
-                u.pack_size = 1.0;
-                u.number_of_packs = 1.0;
-                u
-            })
-        );
-
-        // pack to one preference is set
-        let pack_to_one = StorePreferenceRow {
-            id: mock_store_a().id.clone(),
-            pack_to_one: true,
-            ..StorePreferenceRow::default()
-        };
-        StorePreferenceRowRepository::new(&connection)
-            .upsert_one(&pack_to_one)
-            .unwrap();
-
-        service
-            .insert_inbound_shipment_line(
-                &context,
-                inline_init(|r: &mut InsertInboundShipmentLine| {
-                    r.id = "new invoice line pack to one".to_string();
-                    r.invoice_id = mock_inbound_shipment_c_invoice_lines()[0]
-                        .invoice_id
-                        .clone();
-                    r.item_id = mock_item_a().id.clone();
-                    r.pack_size = 10.0;
-                    r.number_of_packs = 20.0;
-                    r.sell_price_per_pack = 100.0;
-                }),
-            )
-            .unwrap();
-
-        let inbound_line = InvoiceLineRowRepository::new(&connection)
-            .find_one_by_id("new invoice line pack to one")
-            .unwrap()
-            .unwrap();
-
-        assert_eq!(
-            inbound_line,
-            inline_edit(&inbound_line, |mut u| {
-                u.id = "new invoice line pack to one".to_string();
-                u.item_link_id = mock_item_a().id.clone();
-                u.pack_size = 1.0;
-                u.number_of_packs = 200.0;
-                u.sell_price_per_pack = 10.0;
-                u
-            })
-        );
-    }
-}
diff --git a/server/service/src/invoice_line/inbound_shipment_line/insert/validate.rs b/server/service/src/invoice_line/inbound_shipment_line/insert/validate.rs
deleted file mode 100644
index efb897f57..000000000
--- a/server/service/src/invoice_line/inbound_shipment_line/insert/validate.rs
+++ /dev/null
@@ -1,55 +0,0 @@
-use crate::{
-    invoice::{check_invoice_exists, check_invoice_is_editable, check_invoice_type, check_store},
-    invoice_line::{
-        check_location_exists,
-        inbound_shipment_line::check_pack_size,
-        validate::{check_item_exists, check_line_exists, check_number_of_packs},
-    },
-};
-use repository::{InvoiceRow, InvoiceType, ItemRow, StorageConnection};
-
-use super::{InsertInboundShipmentLine, InsertInboundShipmentLineError};
-
-pub fn validate(
-    input: &InsertInboundShipmentLine,
-    store_id: &str,
-    connection: &StorageConnection,
-) -> Result<(ItemRow, InvoiceRow), InsertInboundShipmentLineError> {
-    use InsertInboundShipmentLineError::*;
-
-    if let Some(_) = check_line_exists(connection, &input.id)? {
-        return Err(LineAlreadyExists);
-    }
-
-    if !check_pack_size(Some(input.pack_size)) {
-        return Err(PackSizeBelowOne);
-    }
-    if !check_number_of_packs(Some(input.number_of_packs)) {
-        return Err(NumberOfPacksBelowZero);
-    }
-
-    let item = check_item_exists(connection, &input.item_id)?.ok_or(ItemNotFound)?;
-    if let Some(location) = &input.location {
-        if !check_location_exists(&location.value, connection)? {
-            return Err(LocationDoesNotExist);
-        }
-    }
-
-    let invoice =
-        check_invoice_exists(&input.invoice_id, connection)?.ok_or(InvoiceDoesNotExist)?;
-
-    if !check_store(&invoice, store_id) {
-        return Err(NotThisStoreInvoice);
-    };
-    if !check_invoice_type(&invoice, InvoiceType::InboundShipment) {
-        return Err(NotAnInboundShipment);
-    }
-    if !check_invoice_is_editable(&invoice) {
-        return Err(CannotEditFinalised);
-    }
-
-    // TODO: StockLineDoesNotBelongToCurrentStore
-    // TODO: LocationDoesNotBelongToCurrentStore
-
-    Ok((item, invoice))
-}
diff --git a/server/service/src/invoice_line/inbound_shipment_line/mod.rs b/server/service/src/invoice_line/inbound_shipment_line/mod.rs
deleted file mode 100644
index 74be8c3ff..000000000
--- a/server/service/src/invoice_line/inbound_shipment_line/mod.rs
+++ /dev/null
@@ -1,11 +0,0 @@
-pub mod delete;
-pub mod generate;
-pub mod insert;
-pub mod update;
-pub mod validate;
-
-pub use self::delete::*;
-pub use self::generate::*;
-pub use self::insert::*;
-pub use self::update::*;
-pub use self::validate::*;
diff --git a/server/service/src/invoice_line/inbound_shipment_line/update/generate.rs b/server/service/src/invoice_line/inbound_shipment_line/update/generate.rs
deleted file mode 100644
index 95c8e27a2..000000000
--- a/server/service/src/invoice_line/inbound_shipment_line/update/generate.rs
+++ /dev/null
@@ -1,147 +0,0 @@
-use crate::{
-    invoice::common::{
-        calculate_foreign_currency_total, calculate_total_after_tax,
-        generate_invoice_user_id_update,
-    },
-    invoice_line::inbound_shipment_line::{
-        generate::convert_invoice_line_to_single_pack, generate_batch,
-    },
-    store_preference::get_store_preferences,
-};
-use repository::{
-    InvoiceLine, InvoiceLineRow, InvoiceRow, InvoiceStatus, ItemRow, RepositoryError, StockLineRow,
-    StorageConnection,
-};
-
-use super::UpdateInboundShipmentLine;
-
-pub fn generate(
-    connection: &StorageConnection,
-    user_id: &str,
-    input: UpdateInboundShipmentLine,
-    current_line: InvoiceLine,
-    new_item_option: Option<ItemRow>,
-    existing_invoice_row: InvoiceRow,
-) -> Result<
-    (
-        Option<InvoiceRow>,
-        InvoiceLineRow,
-        Option<StockLineRow>,
-        Option<String>,
-    ),
-    RepositoryError,
-> {
-    let store_preferences = get_store_preferences(connection, &existing_invoice_row.store_id)?;
-
-    let batch_to_delete_id = get_batch_to_delete_id(&current_line, &new_item_option);
-
-    let update_line = generate_line(
-        connection,
-        input,
-        current_line.invoice_line_row,
-        new_item_option,
-        existing_invoice_row.currency_id.clone(),
-        &existing_invoice_row.currency_rate,
-    )?;
-
-    let mut update_line = match store_preferences.pack_to_one {
-        true => convert_invoice_line_to_single_pack(update_line),
-        false => update_line,
-    };
-
-    let upsert_batch_option = if existing_invoice_row.status != InvoiceStatus::New {
-        let new_batch = generate_batch(
-            &existing_invoice_row.store_id,
-            update_line.clone(),
-            batch_to_delete_id.is_none(),
-            &existing_invoice_row.name_link_id,
-        );
-        update_line.stock_line_id = Some(new_batch.id.clone());
-        Some(new_batch)
-    } else {
-        None
-    };
-
-    Ok((
-        generate_invoice_user_id_update(user_id, existing_invoice_row),
-        update_line,
-        upsert_batch_option,
-        batch_to_delete_id,
-    ))
-}
-
-fn get_batch_to_delete_id(
-    current_line: &InvoiceLine,
-    new_item_option: &Option<ItemRow>,
-) -> Option<String> {
-    if let (Some(new_item), Some(stock_line_id)) = (
-        new_item_option,
-        &current_line.invoice_line_row.stock_line_id,
-    ) {
-        if new_item.id != current_line.item_row.id {
-            return Some(stock_line_id.clone());
-        }
-    }
-    None
-}
-
-fn generate_line(
-    connection: &StorageConnection,
-    UpdateInboundShipmentLine {
-        pack_size,
-        batch,
-        cost_price_per_pack,
-        sell_price_per_pack,
-        expiry_date,
-        number_of_packs,
-        location,
-        id: _,
-        item_id: _,
-        total_before_tax,
-        tax,
-    }: UpdateInboundShipmentLine,
-    current_line: InvoiceLineRow,
-    new_item_option: Option<ItemRow>,
-    currency_id: Option<String>,
-    currency_rate: &f64,
-) -> Result<InvoiceLineRow, RepositoryError> {
-    let mut update_line = current_line;
-
-    update_line.pack_size = pack_size.unwrap_or(update_line.pack_size);
-    update_line.batch = batch.or(update_line.batch);
-    update_line.location_id = location.map(|l| l.value).unwrap_or(update_line.location_id);
-    update_line.expiry_date = expiry_date.or(update_line.expiry_date);
-    update_line.sell_price_per_pack =
-        sell_price_per_pack.unwrap_or(update_line.sell_price_per_pack);
-    update_line.cost_price_per_pack =
-        cost_price_per_pack.unwrap_or(update_line.cost_price_per_pack);
-    update_line.number_of_packs = number_of_packs.unwrap_or(update_line.number_of_packs);
-    update_line.tax_percentage = tax
-        .map(|tax| tax.percentage)
-        .unwrap_or(update_line.tax_percentage);
-    update_line.foreign_currency_price_before_tax = calculate_foreign_currency_total(
-        connection,
-        update_line.total_before_tax,
-        currency_id,
-        currency_rate,
-    )?;
-
-    if let Some(item) = new_item_option {
-        update_line.item_link_id = item.id;
-        update_line.item_code = item.code;
-        update_line.item_name = item.name;
-    }
-
-    update_line.total_before_tax = if let Some(total_before_tax) = total_before_tax {
-        total_before_tax
-    } else if number_of_packs.is_some() || cost_price_per_pack.is_some() {
-        update_line.cost_price_per_pack * update_line.number_of_packs
-    } else {
-        update_line.total_before_tax
-    };
-
-    update_line.total_after_tax =
-        calculate_total_after_tax(update_line.total_before_tax, update_line.tax_percentage);
-
-    Ok(update_line)
-}
diff --git a/server/service/src/invoice_line/inbound_shipment_line/update/mod.rs b/server/service/src/invoice_line/inbound_shipment_line/update/mod.rs
deleted file mode 100644
index 62db6cc2c..000000000
--- a/server/service/src/invoice_line/inbound_shipment_line/update/mod.rs
+++ /dev/null
@@ -1,355 +0,0 @@
-use crate::{
-    activity_log::activity_log_entry,
-    invoice_line::{query::get_invoice_line, ShipmentTaxUpdate},
-    service_provider::ServiceContext,
-    NullableUpdate, WithDBError,
-};
-use chrono::NaiveDate;
-use repository::{
-    ActivityLogType, InvoiceLine, InvoiceLineRowRepository, InvoiceRowRepository, RepositoryError,
-    StockLineRowRepository,
-};
-
-mod generate;
-mod validate;
-
-use generate::generate;
-use validate::validate;
-
-#[derive(Clone, Debug, Default, PartialEq)]
-pub struct UpdateInboundShipmentLine {
-    pub id: String,
-    pub item_id: Option<String>,
-    pub location: Option<NullableUpdate<String>>,
-    pub pack_size: Option<f64>,
-    pub batch: Option<String>,
-    pub cost_price_per_pack: Option<f64>,
-    pub sell_price_per_pack: Option<f64>,
-    pub expiry_date: Option<NaiveDate>,
-    pub number_of_packs: Option<f64>,
-    pub total_before_tax: Option<f64>,
-    pub tax: Option<ShipmentTaxUpdate>,
-}
-
-type OutError = UpdateInboundShipmentLineError;
-
-pub fn update_inbound_shipment_line(
-    ctx: &ServiceContext,
-    input: UpdateInboundShipmentLine,
-) -> Result<InvoiceLine, OutError> {
-    let updated_line = ctx
-        .connection
-        .transaction_sync(|connection| {
-            let (line, item, invoice) = validate(&input, &ctx.store_id, connection)?;
-
-            let (invoice_row_option, updated_line, upsert_batch_option, delete_batch_id_option) =
-                generate(
-                    connection,
-                    &ctx.user_id,
-                    input.clone(),
-                    line.clone(),
-                    item,
-                    invoice.clone(),
-                )?;
-
-            let stock_line_repository = StockLineRowRepository::new(connection);
-
-            if let Some(upsert_batch) = upsert_batch_option {
-                stock_line_repository.upsert_one(&upsert_batch)?;
-            }
-
-            InvoiceLineRowRepository::new(connection).upsert_one(&updated_line)?;
-
-            if let Some(id) = delete_batch_id_option {
-                stock_line_repository.delete(&id)?;
-            }
-
-            if let Some(invoice_row) = invoice_row_option {
-                InvoiceRowRepository::new(connection).upsert_one(&invoice_row)?;
-            }
-
-            if let Some(number_of_packs) = input.number_of_packs {
-                if number_of_packs == 0.0 {
-                    activity_log_entry(
-                        ctx,
-                        ActivityLogType::QuantityForLineHasBeenSetToZero,
-                        Some(invoice.id),
-                        Some(updated_line.batch.unwrap_or_default() + " " + &updated_line.id),
-                        None,
-                    )?;
-                }
-            }
-
-            get_invoice_line(ctx, &updated_line.id)
-                .map_err(OutError::DatabaseError)?
-                .ok_or(OutError::UpdatedLineDoesNotExist)
-        })
-        .map_err(|error| error.to_inner_error())?;
-
-    Ok(updated_line)
-}
-
-#[derive(Debug, PartialEq)]
-pub enum UpdateInboundShipmentLineError {
-    LineDoesNotExist,
-    DatabaseError(RepositoryError),
-    InvoiceDoesNotExist,
-    NotAnInboundShipment,
-    NotThisStoreInvoice,
-    CannotEditFinalised,
-    LocationDoesNotExist,
-    ItemNotFound,
-    PackSizeBelowOne,
-    NumberOfPacksBelowZero,
-    BatchIsReserved,
-    UpdatedLineDoesNotExist,
-    NotThisInvoiceLine(String),
-}
-
-impl From<RepositoryError> for UpdateInboundShipmentLineError {
-    fn from(error: RepositoryError) -> Self {
-        UpdateInboundShipmentLineError::DatabaseError(error)
-    }
-}
-
-impl<ERR> From<WithDBError<ERR>> for UpdateInboundShipmentLineError
-where
-    ERR: Into<UpdateInboundShipmentLineError>,
-{
-    fn from(result: WithDBError<ERR>) -> Self {
-        match result {
-            WithDBError::DatabaseError(error) => error.into(),
-            WithDBError::Error(error) => error.into(),
-        }
-    }
-}
-
-#[cfg(test)]
-mod test {
-    use repository::{
-        mock::{
-            mock_inbound_shipment_a_invoice_lines, mock_inbound_shipment_b_invoice_lines,
-            mock_inbound_shipment_c_invoice_lines, mock_item_a, mock_store_a, mock_store_b,
-            mock_user_account_a, MockDataInserts,
-        },
-        test_db::setup_all,
-        InvoiceLineRowRepository, StorePreferenceRow, StorePreferenceRowRepository,
-    };
-    use util::{inline_edit, inline_init};
-
-    use crate::{
-        invoice_line::inbound_shipment_line::{
-            update::UpdateInboundShipmentLine, UpdateInboundShipmentLineError as ServiceError,
-        },
-        service_provider::ServiceProvider,
-        NullableUpdate,
-    };
-
-    #[actix_rt::test]
-    async fn update_inbound_shipment_line_errors() {
-        let (_, _, connection_manager, _) = setup_all(
-            "update_inbound_shipment_line_errors",
-            MockDataInserts::all(),
-        )
-        .await;
-
-        let service_provider = ServiceProvider::new(connection_manager, "app_data");
-        let mut context = service_provider
-            .context(mock_store_a().id, mock_user_account_a().id)
-            .unwrap();
-        let service = service_provider.invoice_line_service;
-
-        // LineDoesNotExist
-        assert_eq!(
-            service.update_inbound_shipment_line(
-                &context,
-                inline_init(|r: &mut UpdateInboundShipmentLine| {
-                    r.id = "invalid".to_string();
-                }),
-            ),
-            Err(ServiceError::LineDoesNotExist)
-        );
-
-        // LocationDoesNotExist
-        assert_eq!(
-            service.update_inbound_shipment_line(
-                &context,
-                inline_init(|r: &mut UpdateInboundShipmentLine| {
-                    r.id = mock_inbound_shipment_c_invoice_lines()[0].id.clone();
-                    r.location = Some(NullableUpdate {
-                        value: Some("invalid".to_string()),
-                    });
-                }),
-            ),
-            Err(ServiceError::LocationDoesNotExist)
-        );
-
-        // ItemNotFound
-        assert_eq!(
-            service.update_inbound_shipment_line(
-                &context,
-                inline_init(|r: &mut UpdateInboundShipmentLine| {
-                    r.id = mock_inbound_shipment_c_invoice_lines()[0].id.clone();
-                    r.item_id = Some("invalid".to_string());
-                    r.pack_size = Some(1.0);
-                    r.number_of_packs = Some(1.0);
-                }),
-            ),
-            Err(ServiceError::ItemNotFound)
-        );
-
-        // PackSizeBelowOne
-        assert_eq!(
-            service.update_inbound_shipment_line(
-                &context,
-                inline_init(|r: &mut UpdateInboundShipmentLine| {
-                    r.id = mock_inbound_shipment_c_invoice_lines()[0].id.clone();
-                    r.item_id = Some(mock_item_a().id.clone());
-                    r.pack_size = Some(0.0);
-                    r.number_of_packs = Some(1.0);
-                }),
-            ),
-            Err(ServiceError::PackSizeBelowOne)
-        );
-
-        // NumberOfPacksBelowOne
-        assert_eq!(
-            service.update_inbound_shipment_line(
-                &context,
-                inline_init(|r: &mut UpdateInboundShipmentLine| {
-                    r.id = mock_inbound_shipment_c_invoice_lines()[0].id.clone();
-                    r.item_id = Some(mock_item_a().id.clone());
-                    r.pack_size = Some(1.0);
-                    r.number_of_packs = Some(-1.0);
-                }),
-            ),
-            Err(ServiceError::NumberOfPacksBelowZero)
-        );
-
-        // CannotEditFinalised
-        assert_eq!(
-            service.update_inbound_shipment_line(
-                &context,
-                inline_init(|r: &mut UpdateInboundShipmentLine| {
-                    r.id = mock_inbound_shipment_b_invoice_lines()[0].id.clone();
-                    r.item_id = Some(mock_item_a().id.clone());
-                    r.pack_size = Some(1.0);
-                    r.number_of_packs = Some(1.0);
-                }),
-            ),
-            Err(ServiceError::CannotEditFinalised)
-        );
-
-        // BatchIsReserved
-        assert_eq!(
-            service.update_inbound_shipment_line(
-                &context,
-                inline_init(|r: &mut UpdateInboundShipmentLine| {
-                    r.id = mock_inbound_shipment_a_invoice_lines()[0].id.clone();
-                    r.item_id = Some(mock_item_a().id.clone());
-                    r.pack_size = Some(1.0);
-                    r.number_of_packs = Some(1.0);
-                }),
-            ),
-            Err(ServiceError::BatchIsReserved)
-        );
-
-        // NotThisStoreInvoice
-        context.store_id = mock_store_b().id;
-        assert_eq!(
-            service.update_inbound_shipment_line(
-                &context,
-                inline_init(|r: &mut UpdateInboundShipmentLine| {
-                    r.id = mock_inbound_shipment_a_invoice_lines()[0].id.clone();
-                    r.item_id = Some(mock_item_a().id.clone());
-                    r.pack_size = Some(1.0);
-                    r.number_of_packs = Some(1.0);
-                }),
-            ),
-            Err(ServiceError::NotThisStoreInvoice)
-        );
-    }
-
-    #[actix_rt::test]
-    async fn update_inbound_shipment_line_success() {
-        let (_, connection, connection_manager, _) = setup_all(
-            "update_inbound_shipment_line_success",
-            MockDataInserts::all(),
-        )
-        .await;
-
-        let service_provider = ServiceProvider::new(connection_manager, "app_data");
-        let context = service_provider
-            .context(mock_store_a().id, mock_user_account_a().id)
-            .unwrap();
-        let service = service_provider.invoice_line_service;
-
-        service
-            .update_inbound_shipment_line(
-                &context,
-                inline_init(|r: &mut UpdateInboundShipmentLine| {
-                    r.id = mock_inbound_shipment_c_invoice_lines()[0].id.clone();
-                    r.item_id = Some(mock_item_a().id.clone());
-                    r.pack_size = Some(2.0);
-                    r.number_of_packs = Some(3.0);
-                }),
-            )
-            .unwrap();
-
-        let inbound_line_update = InvoiceLineRowRepository::new(&connection)
-            .find_one_by_id(&mock_inbound_shipment_c_invoice_lines()[0].id.clone())
-            .unwrap()
-            .unwrap();
-
-        assert_eq!(
-            inbound_line_update,
-            inline_edit(&inbound_line_update, |mut u| {
-                u.id = mock_inbound_shipment_c_invoice_lines()[0].id.clone();
-                u.item_link_id = mock_item_a().id.clone();
-                u.pack_size = 2.0;
-                u.number_of_packs = 3.0;
-                u
-            })
-        );
-
-        // pack to one preference is set
-        let pack_to_one = StorePreferenceRow {
-            id: mock_store_a().id.clone(),
-            pack_to_one: true,
-            ..StorePreferenceRow::default()
-        };
-        StorePreferenceRowRepository::new(&connection)
-            .upsert_one(&pack_to_one)
-            .unwrap();
-
-        service
-            .update_inbound_shipment_line(
-                &context,
-                inline_init(|r: &mut UpdateInboundShipmentLine| {
-                    r.id = mock_inbound_shipment_c_invoice_lines()[0].id.clone();
-                    r.pack_size = Some(20.0);
-                    r.number_of_packs = Some(20.0);
-                    r.sell_price_per_pack = Some(100.0);
-                    r.cost_price_per_pack = Some(60.0);
-                }),
-            )
-            .unwrap();
-
-        let inbound_line = InvoiceLineRowRepository::new(&connection)
-            .find_one_by_id(&mock_inbound_shipment_c_invoice_lines()[0].id.clone())
-            .unwrap()
-            .unwrap();
-
-        assert_eq!(
-            inbound_line,
-            inline_edit(&inbound_line, |mut u| {
-                u.id = mock_inbound_shipment_c_invoice_lines()[0].id.clone();
-                u.pack_size = 1.0;
-                u.number_of_packs = 400.0;
-                u.sell_price_per_pack = 5.0;
-                u.cost_price_per_pack = 3.0;
-                u
-            })
-        );
-    }
-}
diff --git a/server/service/src/invoice_line/inbound_shipment_line/update/validate.rs b/server/service/src/invoice_line/inbound_shipment_line/update/validate.rs
deleted file mode 100644
index 0ff6fd663..000000000
--- a/server/service/src/invoice_line/inbound_shipment_line/update/validate.rs
+++ /dev/null
@@ -1,77 +0,0 @@
-use crate::{
-    invoice::{check_invoice_exists, check_invoice_is_editable, check_invoice_type, check_store},
-    invoice_line::{
-        check_batch, check_location_exists, check_pack_size,
-        validate::{
-            check_item_exists, check_line_belongs_to_invoice, check_line_exists,
-            check_number_of_packs,
-        },
-    },
-};
-use repository::{InvoiceLine, InvoiceRow, InvoiceType, ItemRow, StorageConnection};
-
-use super::{UpdateInboundShipmentLine, UpdateInboundShipmentLineError};
-
-pub fn validate(
-    input: &UpdateInboundShipmentLine,
-    store_id: &str,
-    connection: &StorageConnection,
-) -> Result<(InvoiceLine, Option<ItemRow>, InvoiceRow), UpdateInboundShipmentLineError> {
-    use UpdateInboundShipmentLineError::*;
-
-    let line = check_line_exists(connection, &input.id)?.ok_or(LineDoesNotExist)?;
-    let line_row = &line.invoice_line_row;
-
-    if !check_pack_size(input.pack_size) {
-        return Err(PackSizeBelowOne);
-    }
-    if !check_number_of_packs(input.number_of_packs) {
-        return Err(NumberOfPacksBelowZero);
-    }
-
-    let item = check_item_option(&input.item_id, connection)?;
-
-    let invoice =
-        check_invoice_exists(&line_row.invoice_id, connection)?.ok_or(InvoiceDoesNotExist)?;
-    if !check_invoice_type(&invoice, InvoiceType::InboundShipment) {
-        return Err(NotAnInboundShipment);
-    }
-    if !check_invoice_is_editable(&invoice) {
-        return Err(CannotEditFinalised);
-    }
-    if !check_store(&invoice, store_id) {
-        return Err(NotThisStoreInvoice);
-    }
-
-    if !check_batch(line_row, connection)? {
-        return Err(BatchIsReserved);
-    }
-    if let Some(location) = &input.location {
-        if !check_location_exists(&location.value, connection)? {
-            return Err(LocationDoesNotExist);
-        }
-    }
-
-    if !check_line_belongs_to_invoice(line_row, &invoice) {
-        return Err(NotThisInvoiceLine(line.invoice_line_row.invoice_id));
-    }
-
-    // TODO: StockLineDoesNotBelongToCurrentStore
-    // TODO: LocationDoesNotBelongToCurrentStore
-
-    Ok((line, item, invoice))
-}
-
-fn check_item_option(
-    item_id_option: &Option<String>,
-    connection: &StorageConnection,
-) -> Result<Option<ItemRow>, UpdateInboundShipmentLineError> {
-    if let Some(item_id) = item_id_option {
-        Ok(Some(
-            check_item_exists(connection, item_id)?
-                .ok_or(UpdateInboundShipmentLineError::ItemNotFound)?,
-        ))
-    } else {
-        Ok(None)
-    }
-}
diff --git a/server/service/src/invoice_line/inbound_shipment_service_line/delete/mod.rs b/server/service/src/invoice_line/inbound_shipment_service_line/delete/mod.rs
index e8f4df273..9d9af3727 100644
--- a/server/service/src/invoice_line/inbound_shipment_service_line/delete/mod.rs
+++ b/server/service/src/invoice_line/inbound_shipment_service_line/delete/mod.rs
@@ -1,5 +1,5 @@
 use crate::{
-    invoice_line::DeleteInboundShipmentLine, service_provider::ServiceContext, WithDBError,
+    invoice_line::stock_in_line::DeleteStockInLine, service_provider::ServiceContext, WithDBError,
 };
 use repository::{InvoiceLineRowRepository, RepositoryError};
 
@@ -11,7 +11,7 @@ type OutError = DeleteInboundShipmentServiceLineError;
 
 pub fn delete_inbound_shipment_service_line(
     ctx: &ServiceContext,
-    input: DeleteInboundShipmentLine,
+    input: DeleteStockInLine,
 ) -> Result<String, OutError> {
     let line_id = ctx
         .connection
@@ -68,8 +68,7 @@ mod test {
     use util::inline_init;
 
     use crate::{
-        invoice_line::inbound_shipment_line::DeleteInboundShipmentLine,
-        service_provider::ServiceProvider,
+        invoice_line::stock_in_line::DeleteStockInLine, service_provider::ServiceProvider,
     };
 
     use super::DeleteInboundShipmentServiceLineError;
@@ -94,7 +93,7 @@ mod test {
         assert_eq!(
             service.delete_inbound_shipment_service_line(
                 &context,
-                inline_init(|r: &mut DeleteInboundShipmentLine| {
+                inline_init(|r: &mut DeleteStockInLine| {
                     r.id = "invalid".to_string();
                 }),
             ),
@@ -105,7 +104,7 @@ mod test {
         assert_eq!(
             service.delete_inbound_shipment_service_line(
                 &context,
-                inline_init(|r: &mut DeleteInboundShipmentLine| {
+                inline_init(|r: &mut DeleteStockInLine| {
                     r.id = mock_draft_outbound_service_line().id;
                 }),
             ),
@@ -116,7 +115,7 @@ mod test {
         assert_eq!(
             service.delete_inbound_shipment_service_line(
                 &context,
-                inline_init(|r: &mut DeleteInboundShipmentLine| {
+                inline_init(|r: &mut DeleteStockInLine| {
                     r.id = mock_draft_inbound_verified_service_line().id;
                 }),
             ),
@@ -128,7 +127,7 @@ mod test {
         assert_eq!(
             service.delete_inbound_shipment_service_line(
                 &context,
-                inline_init(|r: &mut DeleteInboundShipmentLine| {
+                inline_init(|r: &mut DeleteStockInLine| {
                     r.id = mock_draft_inbound_service_line().id;
                 }),
             ),
@@ -153,7 +152,7 @@ mod test {
         service
             .delete_inbound_shipment_service_line(
                 &context,
-                inline_init(|r: &mut DeleteInboundShipmentLine| {
+                inline_init(|r: &mut DeleteStockInLine| {
                     r.id = mock_draft_inbound_service_line().id;
                 }),
             )
@@ -161,7 +160,7 @@ mod test {
 
         assert_eq!(
             InvoiceLineRowRepository::new(&connection)
-                .find_one_by_id(&mock_draft_inbound_service_line().id)
+                .find_one_by_id_option(&mock_draft_inbound_service_line().id)
                 .unwrap(),
             None
         );
diff --git a/server/service/src/invoice_line/inbound_shipment_service_line/delete/validate.rs b/server/service/src/invoice_line/inbound_shipment_service_line/delete/validate.rs
index bf743b319..1f994d3d4 100644
--- a/server/service/src/invoice_line/inbound_shipment_service_line/delete/validate.rs
+++ b/server/service/src/invoice_line/inbound_shipment_service_line/delete/validate.rs
@@ -1,8 +1,8 @@
 use crate::{
     invoice::{check_invoice_exists, check_invoice_is_editable, check_invoice_type, check_store},
     invoice_line::{
-        validate::{check_line_belongs_to_invoice, check_line_row_exists},
-        DeleteInboundShipmentLine,
+        stock_in_line::DeleteStockInLine,
+        validate::{check_line_belongs_to_invoice, check_line_row_exists_option},
     },
 };
 use repository::{InvoiceLineRow, InvoiceType, StorageConnection};
@@ -10,13 +10,13 @@ use repository::{InvoiceLineRow, InvoiceType, StorageConnection};
 use super::DeleteInboundShipmentServiceLineError;
 
 pub fn validate(
-    input: &DeleteInboundShipmentLine,
+    input: &DeleteStockInLine,
     store_id: &str,
     connection: &StorageConnection,
 ) -> Result<InvoiceLineRow, DeleteInboundShipmentServiceLineError> {
     use DeleteInboundShipmentServiceLineError::*;
 
-    let line = check_line_row_exists(connection, &input.id)?.ok_or(LineDoesNotExist)?;
+    let line = check_line_row_exists_option(connection, &input.id)?.ok_or(LineDoesNotExist)?;
     let invoice = check_invoice_exists(&line.invoice_id, connection)?.ok_or(InvoiceDoesNotExist)?;
 
     if !check_store(&invoice, store_id) {
diff --git a/server/service/src/invoice_line/inbound_shipment_service_line/insert/generate.rs b/server/service/src/invoice_line/inbound_shipment_service_line/insert/generate.rs
index 6f22ee6a2..5749856b0 100644
--- a/server/service/src/invoice_line/inbound_shipment_service_line/insert/generate.rs
+++ b/server/service/src/invoice_line/inbound_shipment_service_line/insert/generate.rs
@@ -41,7 +41,7 @@ pub fn generate(
         location_id: None,
         batch: None,
         expiry_date: None,
-        pack_size: 0.0,
+        pack_size: 0,
         cost_price_per_pack: 0.0,
         sell_price_per_pack: 0.0,
         number_of_packs: 0.0,
diff --git a/server/service/src/invoice_line/inbound_shipment_service_line/insert/mod.rs b/server/service/src/invoice_line/inbound_shipment_service_line/insert/mod.rs
index 89fcba5fa..f05962da2 100644
--- a/server/service/src/invoice_line/inbound_shipment_service_line/insert/mod.rs
+++ b/server/service/src/invoice_line/inbound_shipment_service_line/insert/mod.rs
@@ -223,7 +223,7 @@ mod test {
             .unwrap();
 
         let line = InvoiceLineRowRepository::new(&connection)
-            .find_one_by_id("new_line_id")
+            .find_one_by_id_option("new_line_id")
             .unwrap()
             .unwrap();
 
@@ -262,7 +262,7 @@ mod test {
             .unwrap();
 
         let line = InvoiceLineRowRepository::new(&connection)
-            .find_one_by_id("new_line2_id")
+            .find_one_by_id_option("new_line2_id")
             .unwrap()
             .unwrap();
 
diff --git a/server/service/src/invoice_line/inbound_shipment_service_line/insert/validate.rs b/server/service/src/invoice_line/inbound_shipment_service_line/insert/validate.rs
index 4f1fe7e7d..0a83b45b0 100644
--- a/server/service/src/invoice_line/inbound_shipment_service_line/insert/validate.rs
+++ b/server/service/src/invoice_line/inbound_shipment_service_line/insert/validate.rs
@@ -6,7 +6,7 @@ use util::constants::DEFAULT_SERVICE_ITEM_CODE;
 
 use crate::{
     invoice::{check_invoice_exists, check_invoice_is_editable, check_invoice_type, check_store},
-    invoice_line::validate::{check_item_exists, check_line_exists},
+    invoice_line::validate::{check_item_exists, check_line_does_not_exist},
 };
 
 use super::{InsertInboundShipmentServiceLine, InsertInboundShipmentServiceLineError};
@@ -18,7 +18,7 @@ pub fn validate(
     store_id: &str,
     connection: &StorageConnection,
 ) -> Result<(ItemRow, InvoiceRow), OutError> {
-    if let Some(_) = check_line_exists(connection, &input.id)? {
+    if !check_line_does_not_exist(connection, &input.id)? {
         return Err(OutError::LineAlreadyExists);
     }
 
diff --git a/server/service/src/invoice_line/inbound_shipment_service_line/update/mod.rs b/server/service/src/invoice_line/inbound_shipment_service_line/update/mod.rs
index e224f585d..743efd195 100644
--- a/server/service/src/invoice_line/inbound_shipment_service_line/update/mod.rs
+++ b/server/service/src/invoice_line/inbound_shipment_service_line/update/mod.rs
@@ -214,7 +214,7 @@ mod test {
             .unwrap();
 
         let line = InvoiceLineRowRepository::new(&connection)
-            .find_one_by_id(&mock_draft_inbound_service_line().id)
+            .find_one_by_id_option(&mock_draft_inbound_service_line().id)
             .unwrap()
             .unwrap();
 
@@ -233,7 +233,7 @@ mod test {
             .unwrap();
 
         let line = InvoiceLineRowRepository::new(&connection)
-            .find_one_by_id(&mock_draft_inbound_service_line().id)
+            .find_one_by_id_option(&mock_draft_inbound_service_line().id)
             .unwrap()
             .unwrap();
 
@@ -258,7 +258,7 @@ mod test {
             .unwrap();
 
         let line = InvoiceLineRowRepository::new(&connection)
-            .find_one_by_id(&mock_draft_inbound_service_line().id)
+            .find_one_by_id_option(&mock_draft_inbound_service_line().id)
             .unwrap()
             .unwrap();
 
diff --git a/server/service/src/invoice_line/inbound_shipment_service_line/update/validate.rs b/server/service/src/invoice_line/inbound_shipment_service_line/update/validate.rs
index 20134cc37..cc9e8910b 100644
--- a/server/service/src/invoice_line/inbound_shipment_service_line/update/validate.rs
+++ b/server/service/src/invoice_line/inbound_shipment_service_line/update/validate.rs
@@ -2,7 +2,9 @@ use repository::{InvoiceLine, InvoiceRow, InvoiceType, ItemRow, ItemType, Storag
 
 use crate::{
     invoice::{check_invoice_exists, check_invoice_is_editable, check_invoice_type, check_store},
-    invoice_line::validate::{check_item_exists, check_line_belongs_to_invoice, check_line_exists},
+    invoice_line::validate::{
+        check_item_exists, check_line_belongs_to_invoice, check_line_exists_option,
+    },
 };
 
 use super::{UpdateInboundShipmentServiceLine, UpdateInboundShipmentServiceLineError};
@@ -14,7 +16,7 @@ pub fn validate(
 ) -> Result<(InvoiceLine, InvoiceRow, ItemRow), UpdateInboundShipmentServiceLineError> {
     use UpdateInboundShipmentServiceLineError::*;
 
-    let line = check_line_exists(connection, &input.id)?.ok_or(LineDoesNotExist)?;
+    let line = check_line_exists_option(connection, &input.id)?.ok_or(LineDoesNotExist)?;
     let invoice = check_invoice_exists(&line.invoice_line_row.invoice_id, connection)?
         .ok_or(InvoiceDoesNotExist)?;
 
diff --git a/server/service/src/invoice_line/mod.rs b/server/service/src/invoice_line/mod.rs
index ccd96df9b..16ec42732 100644
--- a/server/service/src/invoice_line/mod.rs
+++ b/server/service/src/invoice_line/mod.rs
@@ -12,9 +12,6 @@ use crate::ListResult;
 pub mod query;
 use self::query::*;
 
-pub mod inbound_shipment_line;
-use self::inbound_shipment_line::*;
-
 pub mod inbound_shipment_service_line;
 use self::inbound_shipment_service_line::*;
 
@@ -28,6 +25,7 @@ pub mod stock_out_line;
 use self::stock_out_line::*;
 
 pub mod stock_in_line;
+use self::stock_in_line::*;
 
 pub mod update_return_reason_id;
 use self::update_return_reason_id::*;
@@ -53,7 +51,7 @@ pub trait InvoiceLineServiceTrait: Sync + Send {
         get_invoice_lines(ctx, store_id, invoice_id, pagination, filter, sort)
     }
 
-    // Stock out: Outbound/Prescription
+    // Stock out: Outbound Shipment/Outbound Return/Prescription
     fn insert_stock_out_line(
         &self,
         ctx: &ServiceContext,
@@ -78,31 +76,32 @@ pub trait InvoiceLineServiceTrait: Sync + Send {
         delete_stock_out_line(ctx, input)
     }
 
-    // Inbound
-    fn insert_inbound_shipment_line(
+    // Stock in: Inbound Shipment/Inbound Return
+    fn insert_stock_in_line(
         &self,
         ctx: &ServiceContext,
-        input: InsertInboundShipmentLine,
-    ) -> Result<InvoiceLine, InsertInboundShipmentLineError> {
-        insert_inbound_shipment_line(ctx, input)
+        input: InsertStockInLine,
+    ) -> Result<InvoiceLine, InsertStockInLineError> {
+        insert_stock_in_line(ctx, input)
     }
 
-    fn update_inbound_shipment_line(
+    fn update_stock_in_line(
         &self,
         ctx: &ServiceContext,
-        input: UpdateInboundShipmentLine,
-    ) -> Result<InvoiceLine, UpdateInboundShipmentLineError> {
-        update_inbound_shipment_line(ctx, input)
+        input: UpdateStockInLine,
+    ) -> Result<InvoiceLine, UpdateStockInLineError> {
+        update_stock_in_line(ctx, input)
     }
 
-    fn delete_inbound_shipment_line(
+    fn delete_stock_in_line(
         &self,
         ctx: &ServiceContext,
-        input: DeleteInboundShipmentLine,
-    ) -> Result<String, DeleteInboundShipmentLineError> {
-        delete_inbound_shipment_line(ctx, input)
+        input: DeleteStockInLine,
+    ) -> Result<String, DeleteStockInLineError> {
+        delete_stock_in_line(ctx, input)
     }
 
+    // Inbound
     fn insert_inbound_shipment_service_line(
         &self,
         ctx: &ServiceContext,
@@ -122,7 +121,7 @@ pub trait InvoiceLineServiceTrait: Sync + Send {
     fn delete_inbound_shipment_service_line(
         &self,
         ctx: &ServiceContext,
-        input: DeleteInboundShipmentLine,
+        input: DeleteStockInLine,
     ) -> Result<String, DeleteInboundShipmentServiceLineError> {
         delete_inbound_shipment_service_line(ctx, input)
     }
diff --git a/server/service/src/invoice_line/outbound_shipment_service_line/delete/mod.rs b/server/service/src/invoice_line/outbound_shipment_service_line/delete/mod.rs
index 0a26e71a8..5568800cd 100644
--- a/server/service/src/invoice_line/outbound_shipment_service_line/delete/mod.rs
+++ b/server/service/src/invoice_line/outbound_shipment_service_line/delete/mod.rs
@@ -158,7 +158,7 @@ mod test {
 
         assert_eq!(
             InvoiceLineRowRepository::new(&connection)
-                .find_one_by_id(&mock_draft_outbound_service_line().id)
+                .find_one_by_id_option(&mock_draft_outbound_service_line().id)
                 .unwrap(),
             None
         );
diff --git a/server/service/src/invoice_line/outbound_shipment_service_line/delete/validate.rs b/server/service/src/invoice_line/outbound_shipment_service_line/delete/validate.rs
index d334d8db5..ee031e4b6 100644
--- a/server/service/src/invoice_line/outbound_shipment_service_line/delete/validate.rs
+++ b/server/service/src/invoice_line/outbound_shipment_service_line/delete/validate.rs
@@ -2,7 +2,7 @@ use crate::{
     invoice::{check_invoice_exists, check_invoice_is_editable, check_invoice_type, check_store},
     invoice_line::{
         stock_out_line::delete::DeleteStockOutLine,
-        validate::{check_line_belongs_to_invoice, check_line_row_exists},
+        validate::{check_line_belongs_to_invoice, check_line_row_exists_option},
     },
 };
 use repository::{InvoiceLineRow, InvoiceType, StorageConnection};
@@ -16,7 +16,7 @@ pub fn validate(
 ) -> Result<InvoiceLineRow, DeleteOutboundShipmentServiceLineError> {
     use DeleteOutboundShipmentServiceLineError::*;
 
-    let line = check_line_row_exists(connection, &input.id)?.ok_or(LineDoesNotExist)?;
+    let line = check_line_row_exists_option(connection, &input.id)?.ok_or(LineDoesNotExist)?;
     let invoice = check_invoice_exists(&line.invoice_id, connection)?.ok_or(InvoiceDoesNotExist)?;
 
     if !check_store(&invoice, store_id) {
diff --git a/server/service/src/invoice_line/outbound_shipment_service_line/insert/generate.rs b/server/service/src/invoice_line/outbound_shipment_service_line/insert/generate.rs
index 891a4b44a..9089962d1 100644
--- a/server/service/src/invoice_line/outbound_shipment_service_line/insert/generate.rs
+++ b/server/service/src/invoice_line/outbound_shipment_service_line/insert/generate.rs
@@ -41,7 +41,7 @@ pub fn generate(
         location_id: None,
         batch: None,
         expiry_date: None,
-        pack_size: 0.0,
+        pack_size: 0,
         cost_price_per_pack: 0.0,
         sell_price_per_pack: 0.0,
         number_of_packs: 0.0,
diff --git a/server/service/src/invoice_line/outbound_shipment_service_line/insert/mod.rs b/server/service/src/invoice_line/outbound_shipment_service_line/insert/mod.rs
index cc4eda423..6fa7cdc38 100644
--- a/server/service/src/invoice_line/outbound_shipment_service_line/insert/mod.rs
+++ b/server/service/src/invoice_line/outbound_shipment_service_line/insert/mod.rs
@@ -212,7 +212,7 @@ mod test {
             .unwrap();
 
         let line = InvoiceLineRowRepository::new(&connection)
-            .find_one_by_id("new_line_id")
+            .find_one_by_id_option("new_line_id")
             .unwrap()
             .unwrap();
 
@@ -252,7 +252,7 @@ mod test {
             .unwrap();
 
         let line = InvoiceLineRowRepository::new(&connection)
-            .find_one_by_id("new_line2_id")
+            .find_one_by_id_option("new_line2_id")
             .unwrap()
             .unwrap();
 
diff --git a/server/service/src/invoice_line/outbound_shipment_service_line/insert/validate.rs b/server/service/src/invoice_line/outbound_shipment_service_line/insert/validate.rs
index e9ffbde16..f202dd2f7 100644
--- a/server/service/src/invoice_line/outbound_shipment_service_line/insert/validate.rs
+++ b/server/service/src/invoice_line/outbound_shipment_service_line/insert/validate.rs
@@ -6,7 +6,7 @@ use util::constants::DEFAULT_SERVICE_ITEM_CODE;
 
 use crate::{
     invoice::{check_invoice_exists, check_invoice_is_editable, check_invoice_type, check_store},
-    invoice_line::validate::{check_item_exists, check_line_exists},
+    invoice_line::validate::{check_item_exists, check_line_does_not_exist},
 };
 
 use super::{InsertOutboundShipmentServiceLine, InsertOutboundShipmentServiceLineError};
@@ -18,7 +18,7 @@ pub fn validate(
     store_id: &str,
     connection: &StorageConnection,
 ) -> Result<(ItemRow, InvoiceRow), OutError> {
-    if let Some(_) = check_line_exists(connection, &input.id)? {
+    if !check_line_does_not_exist(connection, &input.id)? {
         return Err(OutError::LineAlreadyExists);
     }
 
diff --git a/server/service/src/invoice_line/outbound_shipment_service_line/update/mod.rs b/server/service/src/invoice_line/outbound_shipment_service_line/update/mod.rs
index 9c5b38b82..57b9fab98 100644
--- a/server/service/src/invoice_line/outbound_shipment_service_line/update/mod.rs
+++ b/server/service/src/invoice_line/outbound_shipment_service_line/update/mod.rs
@@ -218,7 +218,7 @@ mod test {
             .unwrap();
 
         let line = InvoiceLineRowRepository::new(&connection)
-            .find_one_by_id(&mock_draft_outbound_service_line().id)
+            .find_one_by_id_option(&mock_draft_outbound_service_line().id)
             .unwrap()
             .unwrap();
 
@@ -237,7 +237,7 @@ mod test {
             .unwrap();
 
         let line = InvoiceLineRowRepository::new(&connection)
-            .find_one_by_id(&mock_draft_outbound_service_line().id)
+            .find_one_by_id_option(&mock_draft_outbound_service_line().id)
             .unwrap()
             .unwrap();
 
@@ -262,7 +262,7 @@ mod test {
             .unwrap();
 
         let line = InvoiceLineRowRepository::new(&connection)
-            .find_one_by_id(&mock_draft_outbound_service_line().id)
+            .find_one_by_id_option(&mock_draft_outbound_service_line().id)
             .unwrap()
             .unwrap();
 
diff --git a/server/service/src/invoice_line/outbound_shipment_service_line/update/validate.rs b/server/service/src/invoice_line/outbound_shipment_service_line/update/validate.rs
index a500952e9..da2073cc7 100644
--- a/server/service/src/invoice_line/outbound_shipment_service_line/update/validate.rs
+++ b/server/service/src/invoice_line/outbound_shipment_service_line/update/validate.rs
@@ -3,7 +3,7 @@ use repository::{InvoiceLine, InvoiceRow, InvoiceType, ItemRow, ItemType, Storag
 use crate::{
     invoice::{check_invoice_exists, check_invoice_is_editable, check_invoice_type, check_store},
     invoice_line::validate::{
-        check_item_exists, check_line_belongs_to_invoice, check_line_exists,
+        check_item_exists, check_line_belongs_to_invoice, check_line_exists_option,
     },
 };
 
@@ -16,7 +16,7 @@ pub fn validate(
 ) -> Result<(InvoiceLine, InvoiceRow, ItemRow), UpdateOutboundShipmentServiceLineError> {
     use UpdateOutboundShipmentServiceLineError::*;
 
-    let line = check_line_exists(connection, &input.id)?.ok_or(LineDoesNotExist)?;
+    let line = check_line_exists_option(connection, &input.id)?.ok_or(LineDoesNotExist)?;
     let invoice = check_invoice_exists(&line.invoice_line_row.invoice_id, connection)?
         .ok_or(InvoiceDoesNotExist)?;
 
diff --git a/server/service/src/invoice_line/outbound_shipment_unallocated_line/allocate/generate.rs b/server/service/src/invoice_line/outbound_shipment_unallocated_line/allocate/generate.rs
index f2fd9360f..b8f0dcf48 100644
--- a/server/service/src/invoice_line/outbound_shipment_unallocated_line/allocate/generate.rs
+++ b/server/service/src/invoice_line/outbound_shipment_unallocated_line/allocate/generate.rs
@@ -36,9 +36,9 @@ pub fn generate(
     let mut result = GenerateOutput::default();
     let allocated_lines = get_allocated_lines(connection, &unallocated_line)?;
     // Assume pack_size 1 for unallocated line
-    let mut remaining_to_allocate = unallocated_line.invoice_line_row.number_of_packs;
+    let mut remaining_to_allocate = unallocated_line.invoice_line_row.number_of_packs as i32;
     // If nothing remaing to alloacted just remove the line
-    if remaining_to_allocate <= 0.0 {
+    if remaining_to_allocate <= 0 {
         result.delete_unallocated_line = Some(DeleteOutboundShipmentUnallocatedLine {
             id: unallocated_line.invoice_line_row.id,
         });
@@ -89,22 +89,22 @@ pub fn generate(
             )),
         }
 
-        remaining_to_allocate -= stock_line.stock_line_row.pack_size * packs_to_allocate;
+        remaining_to_allocate -= packs_to_allocate * stock_line.stock_line_row.pack_size;
 
-        if remaining_to_allocate <= 0.0 {
+        if remaining_to_allocate <= 0 {
             break;
         }
     }
 
     // If nothing remaining to alloacted just remove the line, otherwise update
-    if remaining_to_allocate <= 0.0 {
+    if remaining_to_allocate <= 0 {
         result.delete_unallocated_line = Some(DeleteOutboundShipmentUnallocatedLine {
             id: unallocated_line.invoice_line_row.id,
         });
     } else {
         result.update_unallocated_line = Some(UpdateOutboundShipmentUnallocatedLine {
             id: unallocated_line.invoice_line_row.id,
-            quantity: remaining_to_allocate,
+            quantity: remaining_to_allocate as u32,
         });
     };
 
@@ -151,13 +151,20 @@ fn generate_new_line(
     let stock_line_row = &stock_line.stock_line_row;
     InsertStockOutLine {
         id: uuid::uuid(),
-        r#type: Some(StockOutType::OutboundShipment),
+        r#type: StockOutType::OutboundShipment,
         invoice_id: invoice_id.to_string(),
         stock_line_id: stock_line_row.id.clone(),
         number_of_packs: packs_to_allocate,
+        // Default
         total_before_tax: None,
         tax_percentage: None,
         note: None,
+        location_id: None,
+        batch: None,
+        pack_size: None,
+        expiry_date: None,
+        cost_price_per_pack: None,
+        sell_price_per_pack: None,
     }
 }
 
@@ -183,20 +190,20 @@ fn try_allocate_existing_line(
         })
 }
 
-fn packs_to_allocate_from_stock_line(remaining_to_allocate: f64, line: &StockLine) -> f64 {
+fn packs_to_allocate_from_stock_line(remaining_to_allocate: i32, line: &StockLine) -> i32 {
     let available_quantity = line.available_quantity();
     let line_row = &line.stock_line_row;
-    if available_quantity < remaining_to_allocate {
-        return line_row.available_number_of_packs;
+    if available_quantity < remaining_to_allocate as f64 {
+        return line_row.available_number_of_packs as i32;
     }
     // We don't want to use fractions for number_of_packs (issue here) - to discuss
     let fractional_number_of_packs = remaining_to_allocate as f64 / line_row.pack_size as f64;
 
     if fraction_is_integer(fractional_number_of_packs) {
-        return fractional_number_of_packs;
+        return fractional_number_of_packs as i32;
     }
 
-    fractional_number_of_packs.floor() + 1.0
+    fractional_number_of_packs.floor() as i32 + 1
 }
 
 fn get_sorted_available_stock_lines(
diff --git a/server/service/src/invoice_line/outbound_shipment_unallocated_line/allocate/mod.rs b/server/service/src/invoice_line/outbound_shipment_unallocated_line/allocate/mod.rs
index 42446c41d..b3d5075b6 100644
--- a/server/service/src/invoice_line/outbound_shipment_unallocated_line/allocate/mod.rs
+++ b/server/service/src/invoice_line/outbound_shipment_unallocated_line/allocate/mod.rs
@@ -4,7 +4,7 @@ use crate::{
             insert_stock_out_line, update_stock_out_line, InsertStockOutLine,
             InsertStockOutLineError, UpdateStockOutLine, UpdateStockOutLineError,
         },
-        validate::check_line_exists,
+        validate::check_line_exists_option,
     },
     service_provider::ServiceContext,
 };
@@ -144,7 +144,7 @@ pub fn allocate_outbound_shipment_unallocated_line(
 
 fn validate(connection: &StorageConnection, line_id: &str) -> Result<InvoiceLine, OutError> {
     let invoice_line =
-        check_line_exists(connection, line_id)?.ok_or(OutError::LineDoesNotExist)?;
+        check_line_exists_option(connection, line_id)?.ok_or(OutError::LineDoesNotExist)?;
 
     if invoice_line.invoice_line_row.r#type != InvoiceLineType::UnallocatedStock {
         return Err(OutError::LineIsNotUnallocatedLine);
diff --git a/server/service/src/invoice_line/outbound_shipment_unallocated_line/allocate/test.rs b/server/service/src/invoice_line/outbound_shipment_unallocated_line/allocate/test.rs
index 3ca3585f2..fc9937166 100644
--- a/server/service/src/invoice_line/outbound_shipment_unallocated_line/allocate/test.rs
+++ b/server/service/src/invoice_line/outbound_shipment_unallocated_line/allocate/test.rs
@@ -9,7 +9,7 @@ mod test {
         },
         test_db::{setup_all, setup_all_with_data},
         InvoiceLineRow, InvoiceLineRowRepository, InvoiceLineType, InvoiceRow, InvoiceType,
-        StockLine, StockLineRow,
+        RepositoryError, StockLine, StockLineRow,
     };
     use util::{
         constants::stock_line_expiring_soon_offset, date_now, date_now_with_offset, inline_edit,
@@ -66,7 +66,7 @@ mod test {
                 r.item_link_id = mock_item_a().id;
                 r.r#type = InvoiceLineType::UnallocatedStock;
                 r.number_of_packs = 20.0;
-                r.pack_size = 1.0;
+                r.pack_size = 1;
             })
         }
 
@@ -75,7 +75,7 @@ mod test {
                 r.id = "stock_line".to_string();
                 r.store_id = mock_store_a().id;
                 r.item_link_id = mock_item_a().id;
-                r.pack_size = 2.0;
+                r.pack_size = 2;
                 r.available_number_of_packs = 30.0;
             })
         }
@@ -86,7 +86,7 @@ mod test {
                 r.id = "stock_line2".to_string();
                 r.store_id = mock_store_b().id;
                 r.item_link_id = mock_item_a().id;
-                r.pack_size = 2.0;
+                r.pack_size = 2;
                 r.available_number_of_packs = 30.0;
             })
         }
@@ -97,7 +97,7 @@ mod test {
                 r.id = "stock_line3".to_string();
                 r.store_id = mock_store_a().id;
                 r.item_link_id = mock_item_b().id;
-                r.pack_size = 2.0;
+                r.pack_size = 2;
                 r.available_number_of_packs = 30.0;
             })
         }
@@ -134,18 +134,20 @@ mod test {
 
         let repo = InvoiceLineRowRepository::new(&connection);
 
-        assert_eq!(repo.find_one_by_id(&result.deletes[0]), Ok(None));
+        assert_eq!(
+            repo.find_one_by_id(&result.deletes[0]),
+            Err(RepositoryError::NotFound)
+        );
 
         let new_line = repo
             .find_one_by_id(&result.inserts[0].invoice_line_row.id)
-            .unwrap()
             .unwrap();
 
         assert_eq!(
             new_line,
             inline_edit(&new_line, |mut u| {
                 u.number_of_packs = 10.0;
-                u.pack_size = 2.0;
+                u.pack_size = 2;
                 u
             })
         );
@@ -169,7 +171,7 @@ mod test {
                 r.item_link_id = mock_item_a().id;
                 r.r#type = InvoiceLineType::UnallocatedStock;
                 r.number_of_packs = 50.0;
-                r.pack_size = 1.0;
+                r.pack_size = 1;
             })
         }
 
@@ -178,7 +180,7 @@ mod test {
                 r.id = "stock_line".to_string();
                 r.store_id = mock_store_a().id;
                 r.item_link_id = mock_item_a().id;
-                r.pack_size = 3.0;
+                r.pack_size = 3;
                 r.available_number_of_packs = 10.0;
                 r.expiry_date = Some(NaiveDate::from_ymd_opt(3021, 1, 1).unwrap());
             })
@@ -189,7 +191,7 @@ mod test {
                 r.id = "stock_line2".to_string();
                 r.store_id = mock_store_a().id;
                 r.item_link_id = mock_item_a().id;
-                r.pack_size = 3.0;
+                r.pack_size = 3;
                 r.available_number_of_packs = 2.0;
                 r.expiry_date = Some(NaiveDate::from_ymd_opt(3021, 2, 1).unwrap());
             })
@@ -200,7 +202,7 @@ mod test {
                 r.id = "stock_line3".to_string();
                 r.store_id = mock_store_a().id;
                 r.item_link_id = mock_item_a().id;
-                r.pack_size = 1.0;
+                r.pack_size = 1;
                 r.available_number_of_packs = 2.0;
                 r.expiry_date = None;
             })
@@ -241,49 +243,45 @@ mod test {
 
         let new_line1 = repo
             .find_one_by_id(&result.inserts[0].invoice_line_row.id)
-            .unwrap()
             .unwrap();
 
         assert_eq!(
             new_line1,
             inline_edit(&new_line1, |mut u| {
                 u.number_of_packs = 10.0;
-                u.pack_size = 3.0;
+                u.pack_size = 3;
                 u
             })
         );
 
         let new_line2 = repo
             .find_one_by_id(&result.inserts[1].invoice_line_row.id)
-            .unwrap()
             .unwrap();
 
         assert_eq!(
             new_line2,
             inline_edit(&new_line2, |mut u| {
                 u.number_of_packs = 2.0;
-                u.pack_size = 3.0;
+                u.pack_size = 3;
                 u
             })
         );
 
         let new_line3 = repo
             .find_one_by_id(&result.inserts[2].invoice_line_row.id)
-            .unwrap()
             .unwrap();
 
         assert_eq!(
             new_line3,
             inline_edit(&new_line3, |mut u| {
                 u.number_of_packs = 2.0;
-                u.pack_size = 1.0;
+                u.pack_size = 1;
                 u
             })
         );
 
         let updated_uallocated_line = repo
             .find_one_by_id(&result.updates[0].invoice_line_row.id)
-            .unwrap()
             .unwrap();
 
         assert_eq!(
@@ -313,7 +311,7 @@ mod test {
                 r.item_link_id = mock_item_a().id;
                 r.r#type = InvoiceLineType::UnallocatedStock;
                 r.number_of_packs = 3.0;
-                r.pack_size = 1.0;
+                r.pack_size = 1;
             })
         }
 
@@ -322,7 +320,7 @@ mod test {
                 r.id = id.to_string();
                 r.store_id = mock_store_a().id;
                 r.item_link_id = mock_item_a().id;
-                r.pack_size = 1.0;
+                r.pack_size = 1;
                 r.available_number_of_packs = 1.0;
             })
         }
@@ -466,7 +464,7 @@ mod test {
                 r.item_link_id = mock_item_a().id;
                 r.r#type = InvoiceLineType::UnallocatedStock;
                 r.number_of_packs = 50.0;
-                r.pack_size = 1.0;
+                r.pack_size = 1;
             })
         }
 
@@ -475,7 +473,7 @@ mod test {
                 r.id = "stock_line".to_string();
                 r.store_id = mock_store_a().id;
                 r.item_link_id = mock_item_a().id;
-                r.pack_size = 1.0;
+                r.pack_size = 1;
                 r.available_number_of_packs = 30.0;
                 r.expiry_date = Some(NaiveDate::from_ymd_opt(3021, 2, 1).unwrap());
             })
@@ -489,7 +487,7 @@ mod test {
                 r.stock_line_id = Some(stock_line().id);
                 r.r#type = InvoiceLineType::StockOut;
                 r.number_of_packs = 2.0;
-                r.pack_size = 1.0;
+                r.pack_size = 1;
             })
         }
 
@@ -498,7 +496,7 @@ mod test {
                 r.id = "stock_line2".to_string();
                 r.store_id = mock_store_a().id;
                 r.item_link_id = mock_item_a().id;
-                r.pack_size = 1.0;
+                r.pack_size = 1;
                 r.available_number_of_packs = 5.0;
             })
         }
@@ -511,7 +509,7 @@ mod test {
                 r.stock_line_id = Some(stock_line2().id);
                 r.r#type = InvoiceLineType::StockOut;
                 r.number_of_packs = 10.0;
-                r.pack_size = 1.0;
+                r.pack_size = 1;
             })
         }
 
@@ -520,7 +518,7 @@ mod test {
                 r.id = "stock_line3".to_string();
                 r.store_id = mock_store_a().id;
                 r.item_link_id = mock_item_a().id;
-                r.pack_size = 1.0;
+                r.pack_size = 1;
                 r.available_number_of_packs = 100.0;
             })
         }
@@ -603,7 +601,7 @@ mod test {
                 r.item_link_id = mock_item_a().id;
                 r.r#type = InvoiceLineType::UnallocatedStock;
                 r.number_of_packs = 1.0;
-                r.pack_size = 1.0;
+                r.pack_size = 1;
             })
         }
 
@@ -612,7 +610,7 @@ mod test {
                 r.id = "stock_line".to_string();
                 r.store_id = mock_store_a().id;
                 r.item_link_id = mock_item_a().id;
-                r.pack_size = 3.0;
+                r.pack_size = 3;
                 r.available_number_of_packs = 3.0;
             })
         }
@@ -649,18 +647,20 @@ mod test {
 
         let repo = InvoiceLineRowRepository::new(&connection);
 
-        assert_eq!(repo.find_one_by_id(&result.deletes[0]), Ok(None));
+        assert_eq!(
+            repo.find_one_by_id(&result.deletes[0]),
+            Err(RepositoryError::NotFound)
+        );
 
         let new_line = repo
             .find_one_by_id(&result.inserts[0].invoice_line_row.id)
-            .unwrap()
             .unwrap();
 
         assert_eq!(
             new_line,
             inline_edit(&new_line, |mut u| {
                 u.number_of_packs = 1.0;
-                u.pack_size = 3.0;
+                u.pack_size = 3;
                 u
             })
         );
diff --git a/server/service/src/invoice_line/outbound_shipment_unallocated_line/delete.rs b/server/service/src/invoice_line/outbound_shipment_unallocated_line/delete.rs
index 8b8eef9bf..d6d561417 100644
--- a/server/service/src/invoice_line/outbound_shipment_unallocated_line/delete.rs
+++ b/server/service/src/invoice_line/outbound_shipment_unallocated_line/delete.rs
@@ -4,7 +4,7 @@ use repository::{
 
 use crate::{
     invoice::{check_invoice_exists, check_store},
-    invoice_line::validate::check_line_row_exists,
+    invoice_line::validate::check_line_row_exists_option,
     service_provider::ServiceContext,
 };
 
@@ -47,7 +47,7 @@ fn validate(
     input: &DeleteOutboundShipmentUnallocatedLine,
 ) -> Result<InvoiceLineRow, OutError> {
     let invoice_line =
-        check_line_row_exists(connection, &input.id)?.ok_or(OutError::LineDoesNotExist)?;
+        check_line_row_exists_option(connection, &input.id)?.ok_or(OutError::LineDoesNotExist)?;
 
     if invoice_line.r#type != InvoiceLineType::UnallocatedStock {
         return Err(OutError::LineIsNotUnallocatedLine);
@@ -76,7 +76,7 @@ mod test_delete {
             mock_unallocated_line, MockDataInserts,
         },
         test_db::setup_all,
-        InvoiceLineRowRepository,
+        InvoiceLineRowRepository, RepositoryError,
     };
 
     use crate::{
@@ -145,7 +145,7 @@ mod test_delete {
         let service = service_provider.invoice_line_service;
 
         let mut line_to_delete = mock_unallocated_line();
-        // Successful delete
+        // Succesfull delete
         let result = service
             .delete_outbound_shipment_unallocated_line(
                 &context,
@@ -159,7 +159,7 @@ mod test_delete {
         line_to_delete.number_of_packs = 20.0;
         assert_eq!(
             InvoiceLineRowRepository::new(&connection).find_one_by_id(&result),
-            Ok(None)
+            Err(RepositoryError::NotFound)
         )
     }
 }
diff --git a/server/service/src/invoice_line/outbound_shipment_unallocated_line/insert.rs b/server/service/src/invoice_line/outbound_shipment_unallocated_line/insert.rs
index 11aa14d2f..a83987c2f 100644
--- a/server/service/src/invoice_line/outbound_shipment_unallocated_line/insert.rs
+++ b/server/service/src/invoice_line/outbound_shipment_unallocated_line/insert.rs
@@ -7,9 +7,9 @@ use repository::{
 
 use crate::invoice::check_store;
 use crate::invoice_line::query::get_invoice_line;
-use crate::invoice_line::validate::check_line_exists;
 use crate::{
-    invoice::check_invoice_exists, invoice_line::validate::check_item_exists,
+    invoice::check_invoice_exists,
+    invoice_line::validate::{check_item_exists, check_line_does_not_exist},
     service_provider::ServiceContext,
 };
 #[derive(Clone, Debug, PartialEq, Default)]
@@ -60,7 +60,7 @@ fn validate(
     store_id: &str,
     input: &InsertOutboundShipmentUnallocatedLine,
 ) -> Result<ItemRow, OutError> {
-    if let Some(_) = check_line_exists(connection, &input.id)? {
+    if !check_line_does_not_exist(connection, &input.id)? {
         return Err(OutError::LineAlreadyExists);
     }
 
@@ -103,7 +103,7 @@ fn generate(
     let new_line = InvoiceLineRow {
         id,
         invoice_id,
-        pack_size: 1.0,
+        pack_size: 1,
         number_of_packs: quantity as f64,
         item_link_id: item_id,
         item_code: item.code,
@@ -332,12 +332,11 @@ mod test_insert {
         assert_eq!(
             InvoiceLineRowRepository::new(&connection)
                 .find_one_by_id(&result.invoice_line_row.id)
-                .unwrap()
                 .unwrap(),
             InvoiceLineRow {
                 id: "new_line".to_owned(),
                 invoice_id: invoice_id.clone(),
-                pack_size: 1.0,
+                pack_size: 1,
                 r#type: InvoiceLineType::UnallocatedStock,
                 number_of_packs: 4.0,
                 item_link_id: item.id.clone(),
diff --git a/server/service/src/invoice_line/outbound_shipment_unallocated_line/update.rs b/server/service/src/invoice_line/outbound_shipment_unallocated_line/update.rs
index 5b99fc1c2..09f5499c2 100644
--- a/server/service/src/invoice_line/outbound_shipment_unallocated_line/update.rs
+++ b/server/service/src/invoice_line/outbound_shipment_unallocated_line/update.rs
@@ -1,6 +1,6 @@
 use crate::{
     invoice::{check_invoice_exists, check_store},
-    invoice_line::{query::get_invoice_line, validate::check_line_row_exists},
+    invoice_line::{query::get_invoice_line, validate::check_line_row_exists_option},
     service_provider::ServiceContext,
 };
 use repository::{
@@ -10,7 +10,7 @@ use repository::{
 #[derive(Clone, Debug, PartialEq, Default)]
 pub struct UpdateOutboundShipmentUnallocatedLine {
     pub id: String,
-    pub quantity: f64,
+    pub quantity: u32,
 }
 
 #[derive(Clone, Debug, PartialEq)]
@@ -50,7 +50,7 @@ fn validate(
     input: &UpdateOutboundShipmentUnallocatedLine,
 ) -> Result<InvoiceLineRow, OutError> {
     let invoice_line =
-        check_line_row_exists(connection, &input.id)?.ok_or(OutError::LineDoesNotExist)?;
+        check_line_row_exists_option(connection, &input.id)?.ok_or(OutError::LineDoesNotExist)?;
 
     if invoice_line.r#type != InvoiceLineType::UnallocatedStock {
         return Err(OutError::LineIsNotUnallocatedLine);
@@ -72,7 +72,7 @@ fn generate(
     }: UpdateOutboundShipmentUnallocatedLine,
     mut line: InvoiceLineRow,
 ) -> Result<InvoiceLineRow, UpdateOutboundShipmentUnallocatedLineError> {
-    line.number_of_packs = quantity;
+    line.number_of_packs = quantity as f64;
 
     Ok(line)
 }
@@ -119,7 +119,7 @@ mod test_update {
                 &context,
                 UpdateOutboundShipmentUnallocatedLine {
                     id: "invalid".to_owned(),
-                    quantity: 0.0
+                    quantity: 0
                 },
             ),
             Err(ServiceError::LineDoesNotExist)
@@ -131,7 +131,7 @@ mod test_update {
                 &context,
                 UpdateOutboundShipmentUnallocatedLine {
                     id: mock_outbound_shipment_a_invoice_lines()[0].id.clone(),
-                    quantity: 0.0
+                    quantity: 0
                 },
             ),
             Err(ServiceError::LineIsNotUnallocatedLine)
@@ -143,7 +143,7 @@ mod test_update {
                 &context,
                 UpdateOutboundShipmentUnallocatedLine {
                     id: mock_unallocated_line().id,
-                    quantity: 0.0
+                    quantity: 0
                 },
             ),
             Err(ServiceError::NotThisStoreInvoice)
@@ -169,7 +169,7 @@ mod test_update {
                 &context,
                 UpdateOutboundShipmentUnallocatedLine {
                     id: line_to_update.id.clone(),
-                    quantity: 20.0,
+                    quantity: 20,
                 },
             )
             .unwrap();
@@ -179,7 +179,6 @@ mod test_update {
         assert_eq!(
             InvoiceLineRowRepository::new(&connection)
                 .find_one_by_id(&result.invoice_line_row.id)
-                .unwrap()
                 .unwrap(),
             line_to_update
         )
diff --git a/server/service/src/invoice_line/stock_in_line/delete/mod.rs b/server/service/src/invoice_line/stock_in_line/delete/mod.rs
index 576002a00..0c8e39490 100644
--- a/server/service/src/invoice_line/stock_in_line/delete/mod.rs
+++ b/server/service/src/invoice_line/stock_in_line/delete/mod.rs
@@ -246,14 +246,14 @@ mod test {
         //test return line has been deleted
         assert_eq!(
             InvoiceLineRowRepository::new(&connection)
-                .find_one_by_id(&invoice_line_id)
+                .find_one_by_id_option(&invoice_line_id)
                 .unwrap(),
             None
         );
         //test associated stock line has been deleted
         assert_eq!(
             StockLineRowRepository::new(&connection)
-                .find_one_by_id(&stock_line().id)
+                .find_one_by_id_option(&stock_line().id)
                 .unwrap(),
             None
         );
diff --git a/server/service/src/invoice_line/stock_in_line/delete/validate.rs b/server/service/src/invoice_line/stock_in_line/delete/validate.rs
index 9be61e6a9..8b5b5fcdf 100644
--- a/server/service/src/invoice_line/stock_in_line/delete/validate.rs
+++ b/server/service/src/invoice_line/stock_in_line/delete/validate.rs
@@ -1,10 +1,10 @@
 use crate::{
     invoice::{check_invoice_exists, check_invoice_is_editable, check_invoice_type, check_store},
     invoice_line::{
-        check_batch,
+        stock_in_line::check_batch,
         validate::{
             check_line_belongs_to_invoice, check_line_not_associated_with_stocktake,
-            check_line_row_exists,
+            check_line_row_exists_option,
         },
     },
 };
@@ -19,7 +19,7 @@ pub fn validate(
 ) -> Result<(InvoiceRow, InvoiceLineRow), DeleteStockInLineError> {
     use DeleteStockInLineError::*;
 
-    let line = check_line_row_exists(connection, &input.id)?.ok_or(LineDoesNotExist)?;
+    let line = check_line_row_exists_option(connection, &input.id)?.ok_or(LineDoesNotExist)?;
     let invoice = check_invoice_exists(&line.invoice_id, connection)?.ok_or(InvoiceDoesNotExist)?;
 
     if !check_store(&invoice, store_id) {
diff --git a/server/service/src/invoice_line/stock_in_line/generate.rs b/server/service/src/invoice_line/stock_in_line/generate.rs
new file mode 100644
index 000000000..dd58b8579
--- /dev/null
+++ b/server/service/src/invoice_line/stock_in_line/generate.rs
@@ -0,0 +1,130 @@
+use repository::{
+    InvoiceLineRow, RepositoryError, StockLineRow, StockLineRowRepository, StorageConnection,
+};
+use util::uuid::uuid;
+
+pub fn convert_stock_line_to_single_pack(stock_line: StockLineRow) -> StockLineRow {
+    StockLineRow {
+        total_number_of_packs: stock_line.total_number_of_packs * stock_line.pack_size as f64,
+        available_number_of_packs: stock_line.available_number_of_packs
+            * stock_line.pack_size as f64,
+        cost_price_per_pack: stock_line.cost_price_per_pack / stock_line.pack_size as f64,
+        sell_price_per_pack: stock_line.sell_price_per_pack / stock_line.pack_size as f64,
+        pack_size: 1,
+        ..stock_line
+    }
+}
+
+pub fn convert_invoice_line_to_single_pack(invoice_line: InvoiceLineRow) -> InvoiceLineRow {
+    InvoiceLineRow {
+        number_of_packs: invoice_line.number_of_packs * invoice_line.pack_size as f64,
+        sell_price_per_pack: invoice_line.sell_price_per_pack / invoice_line.pack_size as f64,
+        cost_price_per_pack: invoice_line.cost_price_per_pack / invoice_line.pack_size as f64,
+        pack_size: 1,
+        ..invoice_line
+    }
+}
+pub struct StockLineInput {
+    pub stock_line_id: Option<String>,
+    pub store_id: String,
+    pub on_hold: bool,
+    pub barcode_id: Option<String>,
+    pub supplier_link_id: String,
+    pub overwrite_stock_levels: bool,
+}
+
+struct StockLevels {
+    available_number_of_packs: f64,
+    total_number_of_packs: f64,
+}
+
+pub fn generate_batch(
+    connection: &StorageConnection,
+    InvoiceLineRow {
+        item_link_id,
+        pack_size,
+        batch,
+        expiry_date,
+        sell_price_per_pack,
+        cost_price_per_pack,
+        number_of_packs,
+        location_id,
+        note,
+        ..
+    }: InvoiceLineRow,
+    StockLineInput {
+        stock_line_id,
+        store_id,
+        on_hold,
+        barcode_id,
+        supplier_link_id,
+        overwrite_stock_levels,
+    }: StockLineInput,
+) -> Result<StockLineRow, RepositoryError> {
+    // Generate new stock line id if not provided
+    let stock_line_id = match stock_line_id {
+        Some(stock_line_id) => stock_line_id,
+        None => uuid(),
+    };
+
+    let existing_stock_line =
+        StockLineRowRepository::new(connection).find_one_by_id_option(&stock_line_id)?;
+
+    // Update existing stock level values if stock line already exists
+    let StockLevels {
+        available_number_of_packs,
+        total_number_of_packs,
+    } = get_updated_stock_levels(
+        &existing_stock_line,
+        number_of_packs,
+        overwrite_stock_levels,
+    );
+
+    let (barcode_id, supplier_link_id) = match existing_stock_line {
+        Some(stock_line) => (
+            // if no new barcode, use the existing one if exists
+            barcode_id.or(stock_line.barcode_id),
+            // if stock_line already has supplier, use that
+            stock_line.supplier_link_id.or(Some(supplier_link_id)),
+        ),
+        None => (barcode_id, Some(supplier_link_id)),
+    };
+
+    let stock_line_row = StockLineRow {
+        id: stock_line_id,
+        item_link_id,
+        store_id,
+        location_id,
+        batch,
+        pack_size,
+        cost_price_per_pack,
+        sell_price_per_pack,
+        available_number_of_packs,
+        total_number_of_packs,
+        expiry_date,
+        note,
+        supplier_link_id,
+        on_hold,
+        barcode_id,
+    };
+
+    Ok(stock_line_row)
+}
+
+fn get_updated_stock_levels(
+    existing_stock_line: &Option<StockLineRow>,
+    introduced_number_of_packs: f64,
+    overwrite_stock_levels: bool,
+) -> StockLevels {
+    match (existing_stock_line, overwrite_stock_levels) {
+        (Some(stock_line), false) => StockLevels {
+            available_number_of_packs: stock_line.available_number_of_packs
+                + introduced_number_of_packs,
+            total_number_of_packs: stock_line.total_number_of_packs + introduced_number_of_packs,
+        },
+        _ => StockLevels {
+            available_number_of_packs: introduced_number_of_packs,
+            total_number_of_packs: introduced_number_of_packs,
+        },
+    }
+}
diff --git a/server/service/src/invoice_line/stock_in_line/insert/generate.rs b/server/service/src/invoice_line/stock_in_line/insert/generate.rs
index 744dec30f..41139bb03 100644
--- a/server/service/src/invoice_line/stock_in_line/insert/generate.rs
+++ b/server/service/src/invoice_line/stock_in_line/insert/generate.rs
@@ -1,11 +1,12 @@
 use crate::{
     barcode::{self, BarcodeInput},
     invoice::common::{calculate_total_after_tax, generate_invoice_user_id_update},
-    invoice_line::{
-        convert_invoice_line_to_single_pack, convert_stock_line_to_single_pack,
-        stock_in_line::{generate_batch, StockInType, StockLineInput},
+    invoice_line::stock_in_line::{
+        convert_invoice_line_to_single_pack, convert_stock_line_to_single_pack, generate_batch,
+        StockInType, StockLineInput,
     },
     store_preference::get_store_preferences,
+    u32_to_i32,
 };
 use repository::{
     BarcodeRow, InvoiceLineRow, InvoiceLineType, InvoiceRow, InvoiceStatus, ItemRow,
@@ -39,24 +40,29 @@ pub fn generate(
 
     let barcode_option = generate_barcode(&input, connection)?;
 
-    let new_batch_option = if should_upsert_batch(&input.r#type, &existing_invoice_row) {
-        let new_batch = generate_batch(
-            // If a stock line id is included in the input, use it
-            input.stock_line_id.is_some(),
+    let batch_option = if should_upsert_batch(&input.r#type, &existing_invoice_row) {
+        let batch = generate_batch(
+            connection,
             new_line.clone(),
             StockLineInput {
+                stock_line_id: input.stock_line_id,
                 store_id: existing_invoice_row.store_id.clone(),
                 supplier_link_id: existing_invoice_row.name_link_id.clone(),
                 on_hold: input.stock_on_hold,
                 barcode_id: barcode_option.clone().map(|b| b.id.clone()),
+                overwrite_stock_levels: match &input.r#type {
+                    // adjusting existing stock, we want to add to existing stock levels
+                    StockInType::InventoryAddition => false,
+                    _ => true,
+                },
             },
-        );
+        )?;
         // If a new stock line has been created, update the stock_line_id on the invoice line
-        new_line.stock_line_id = Some(new_batch.id.clone());
+        new_line.stock_line_id = Some(batch.id.clone());
 
         let new_batch = match store_preferences.pack_to_one {
-            true => convert_stock_line_to_single_pack(new_batch),
-            false => new_batch,
+            true => convert_stock_line_to_single_pack(batch),
+            false => batch,
         };
 
         Some(new_batch)
@@ -67,7 +73,7 @@ pub fn generate(
     Ok(GenerateResult {
         invoice: generate_invoice_user_id_update(user_id, existing_invoice_row),
         invoice_line: new_line,
-        stock_line: new_batch_option,
+        stock_line: batch_option,
         barcode: barcode_option,
     })
 }
@@ -106,7 +112,7 @@ fn generate_line(
         invoice_id,
         item_link_id: item_id,
         location_id: location.map(|l| l.value).unwrap_or_default(),
-        pack_size: pack_size,
+        pack_size: u32_to_i32(pack_size),
         batch,
         expiry_date,
         sell_price_per_pack,
@@ -128,7 +134,9 @@ fn generate_line(
 
 fn should_upsert_batch(stock_in_type: &StockInType, existing_invoice_row: &InvoiceRow) -> bool {
     match stock_in_type {
-        StockInType::InboundReturn => existing_invoice_row.status != InvoiceStatus::New,
+        StockInType::InboundShipment | StockInType::InboundReturn => {
+            existing_invoice_row.status != InvoiceStatus::New
+        }
         StockInType::InventoryAddition => true,
     }
 }
@@ -151,7 +159,7 @@ fn generate_barcode(
                 BarcodeInput {
                     gtin: gtin.clone(),
                     item_id: input.item_id.clone(),
-                    pack_size: Some(input.pack_size),
+                    pack_size: Some(u32_to_i32(input.pack_size.clone())),
                 },
             )?;
 
diff --git a/server/service/src/invoice_line/stock_in_line/insert/mod.rs b/server/service/src/invoice_line/stock_in_line/insert/mod.rs
index ef1c10d63..c2c9ece0a 100644
--- a/server/service/src/invoice_line/stock_in_line/insert/mod.rs
+++ b/server/service/src/invoice_line/stock_in_line/insert/mod.rs
@@ -24,7 +24,7 @@ pub struct InsertStockInLine {
     pub invoice_id: String,
     pub item_id: String,
     pub location: Option<NullableUpdate<String>>,
-    pub pack_size: f64,
+    pub pack_size: u32,
     pub batch: Option<String>,
     pub note: Option<String>,
     pub cost_price_per_pack: f64,
@@ -34,6 +34,7 @@ pub struct InsertStockInLine {
     pub total_before_tax: Option<f64>,
     pub tax_percentage: Option<f64>,
     pub r#type: StockInType,
+    /// If None, new stock line will be generated
     pub stock_line_id: Option<String>,
     pub barcode: Option<String>,
     pub stock_on_hold: bool,
@@ -180,7 +181,7 @@ mod test {
                 &context,
                 inline_init(|r: &mut InsertStockInLine| {
                     r.id = "new invoice line id".to_string();
-                    r.pack_size = 0.0;
+                    r.pack_size = 0;
                 }),
             ),
             Err(ServiceError::PackSizeBelowOne)
@@ -192,7 +193,7 @@ mod test {
                 &context,
                 inline_init(|r: &mut InsertStockInLine| {
                     r.id = "new invoice line id".to_string();
-                    r.pack_size = 1.0;
+                    r.pack_size = 1;
                     r.number_of_packs = 0.0;
                 }),
             ),
@@ -205,7 +206,7 @@ mod test {
                 &context,
                 inline_init(|r: &mut InsertStockInLine| {
                     r.id = "new invoice line id".to_string();
-                    r.pack_size = 1.0;
+                    r.pack_size = 1;
                     r.number_of_packs = 1.0;
                     r.item_id = "invalid".to_string();
                 }),
@@ -219,7 +220,7 @@ mod test {
                 &context,
                 inline_init(|r: &mut InsertStockInLine| {
                     r.id = "new invoice line id".to_string();
-                    r.pack_size = 1.0;
+                    r.pack_size = 1;
                     r.number_of_packs = 1.0;
                     r.item_id = mock_item_a().id;
                     r.location = Some(NullableUpdate {
@@ -236,7 +237,7 @@ mod test {
                 &context,
                 inline_init(|r: &mut InsertStockInLine| {
                     r.id = "new invoice line id".to_string();
-                    r.pack_size = 1.0;
+                    r.pack_size = 1;
                     r.number_of_packs = 1.0;
                     r.item_id = mock_item_a().id;
                     r.invoice_id = "new invoice id".to_string();
@@ -252,7 +253,7 @@ mod test {
                 inline_init(|r: &mut InsertStockInLine| {
                     r.id = "new invoice line id".to_string();
                     r.item_id = mock_item_a().id.clone();
-                    r.pack_size = 1.0;
+                    r.pack_size = 1;
                     r.number_of_packs = 1.0;
                     r.invoice_id = mock_outbound_shipment_e().id;
                 }),
@@ -267,7 +268,7 @@ mod test {
                 inline_init(|r: &mut InsertStockInLine| {
                     r.id = "new invoice line id".to_string();
                     r.item_id = mock_item_a().id.clone();
-                    r.pack_size = 1.0;
+                    r.pack_size = 1;
                     r.number_of_packs = 1.0;
                     r.invoice_id = verified_inbound_return().id; // VERIFIED
                 }),
@@ -281,7 +282,7 @@ mod test {
                 &context,
                 inline_init(|r: &mut InsertStockInLine| {
                     r.id = "new invoice line id".to_string();
-                    r.pack_size = 1.0;
+                    r.pack_size = 1;
                     r.number_of_packs = 1.0;
                     r.item_id = mock_item_a().id;
                     r.invoice_id = mock_inbound_return_a().id; // Store B
@@ -309,7 +310,7 @@ mod test {
                 r.id = "new_invoice_line_id".to_string();
                 r.invoice_id = mock_inbound_return_a().id;
                 r.item_id = mock_item_a().id;
-                r.pack_size = 1.0;
+                r.pack_size = 1;
                 r.number_of_packs = 1.0;
                 r.barcode = Some(gtin.clone());
             }),
@@ -333,7 +334,7 @@ mod test {
             inline_edit(&inbound_line, |mut u| {
                 u.id = "new_invoice_line_id".to_string();
                 u.item_link_id = mock_item_a().id;
-                u.pack_size = 1.0;
+                u.pack_size = 1;
                 u.number_of_packs = 1.0;
                 u
             })
@@ -364,7 +365,7 @@ mod test {
                 r.id = "new_invoice_line_pack_to_one".to_string();
                 r.invoice_id = mock_inbound_return_a().id;
                 r.item_id = mock_item_a().id;
-                r.pack_size = 10.0;
+                r.pack_size = 10;
                 r.number_of_packs = 20.0;
                 r.sell_price_per_pack = 100.0;
             }),
@@ -373,7 +374,6 @@ mod test {
 
         let inbound_line = InvoiceLineRowRepository::new(&connection)
             .find_one_by_id("new_invoice_line_pack_to_one")
-            .unwrap()
             .unwrap();
 
         assert_eq!(
@@ -381,7 +381,7 @@ mod test {
             inline_edit(&inbound_line, |mut u| {
                 u.id = "new_invoice_line_pack_to_one".to_string();
                 u.item_link_id = mock_item_a().id;
-                u.pack_size = 1.0;
+                u.pack_size = 1;
                 u.number_of_packs = 200.0;
                 u.sell_price_per_pack = 10.0;
                 u
diff --git a/server/service/src/invoice_line/stock_in_line/insert/validate.rs b/server/service/src/invoice_line/stock_in_line/insert/validate.rs
index e256781c5..b660c3505 100644
--- a/server/service/src/invoice_line/stock_in_line/insert/validate.rs
+++ b/server/service/src/invoice_line/stock_in_line/insert/validate.rs
@@ -1,8 +1,8 @@
 use crate::{
     invoice::{check_invoice_exists, check_invoice_is_editable, check_invoice_type, check_store},
     invoice_line::{
-        check_location_exists, check_pack_size,
-        validate::{check_item_exists, check_line_exists},
+        stock_in_line::{check_location_exists, check_pack_size},
+        validate::{check_item_exists, check_line_does_not_exist},
     },
 };
 use repository::{InvoiceRow, ItemRow, StorageConnection};
@@ -15,7 +15,8 @@ pub fn validate(
     connection: &StorageConnection,
 ) -> Result<(ItemRow, InvoiceRow), InsertStockInLineError> {
     use InsertStockInLineError::*;
-    if let Some(_) = check_line_exists(connection, &input.id)? {
+
+    if !check_line_does_not_exist(connection, &input.id)? {
         return Err(LineAlreadyExists);
     }
     if !check_pack_size(Some(input.pack_size)) {
diff --git a/server/service/src/invoice_line/stock_in_line/mod.rs b/server/service/src/invoice_line/stock_in_line/mod.rs
index ef2677fb2..4ec970bf5 100644
--- a/server/service/src/invoice_line/stock_in_line/mod.rs
+++ b/server/service/src/invoice_line/stock_in_line/mod.rs
@@ -1,5 +1,7 @@
-use repository::{InvoiceLineRow, InvoiceType, StockLineRow};
-use util::uuid::uuid;
+use repository::InvoiceType;
+
+pub mod generate;
+pub mod validate;
 
 pub mod delete;
 pub mod insert;
@@ -8,11 +10,15 @@ pub use self::delete::*;
 pub use self::insert::*;
 pub use self::update::*;
 
+pub use self::generate::*;
+pub use self::validate::*;
+
 #[derive(Clone, Debug, Default, PartialEq)]
 pub enum StockInType {
     #[default]
     InboundReturn,
     InventoryAddition,
+    InboundShipment,
 }
 
 impl StockInType {
@@ -20,60 +26,7 @@ impl StockInType {
         match self {
             StockInType::InboundReturn => InvoiceType::InboundReturn,
             StockInType::InventoryAddition => InvoiceType::InventoryAddition,
+            StockInType::InboundShipment => InvoiceType::InboundShipment,
         }
     }
 }
-
-pub struct StockLineInput {
-    pub store_id: String,
-    pub on_hold: bool,
-    pub barcode_id: Option<String>,
-    pub supplier_link_id: String,
-}
-
-pub fn generate_batch(
-    keep_existing_batch: bool,
-    InvoiceLineRow {
-        stock_line_id,
-        item_link_id,
-        pack_size,
-        batch,
-        expiry_date,
-        sell_price_per_pack,
-        cost_price_per_pack,
-        number_of_packs,
-        location_id,
-        note,
-        ..
-    }: InvoiceLineRow,
-    StockLineInput {
-        store_id,
-        on_hold,
-        barcode_id,
-        supplier_link_id,
-    }: StockLineInput,
-) -> StockLineRow {
-    // Generate new id if requested via parameter or if stock_line_id is not already set on line
-    let stock_line_id = match (stock_line_id, keep_existing_batch) {
-        (Some(stock_line_id), true) => stock_line_id,
-        _ => uuid(),
-    };
-
-    StockLineRow {
-        id: stock_line_id,
-        item_link_id,
-        store_id,
-        location_id,
-        batch,
-        pack_size,
-        cost_price_per_pack,
-        sell_price_per_pack,
-        available_number_of_packs: number_of_packs,
-        total_number_of_packs: number_of_packs,
-        expiry_date,
-        note,
-        supplier_link_id: Some(supplier_link_id),
-        on_hold,
-        barcode_id,
-    }
-}
diff --git a/server/service/src/invoice_line/stock_in_line/update/generate.rs b/server/service/src/invoice_line/stock_in_line/update/generate.rs
index b6095e4e6..c45df6ea1 100644
--- a/server/service/src/invoice_line/stock_in_line/update/generate.rs
+++ b/server/service/src/invoice_line/stock_in_line/update/generate.rs
@@ -3,11 +3,11 @@ use crate::{
         calculate_foreign_currency_total, calculate_total_after_tax,
         generate_invoice_user_id_update,
     },
-    invoice_line::{
-        inbound_shipment_line::generate::convert_invoice_line_to_single_pack,
-        stock_in_line::{generate_batch, StockLineInput},
+    invoice_line::stock_in_line::{
+        convert_invoice_line_to_single_pack, generate_batch, StockLineInput,
     },
     store_preference::get_store_preferences,
+    u32_to_i32,
 };
 use repository::{
     InvoiceLine, InvoiceLineRow, InvoiceRow, InvoiceStatus, ItemRow, RepositoryError, StockLineRow,
@@ -51,18 +51,25 @@ pub fn generate(
     };
 
     let upsert_batch_option = if existing_invoice_row.status != InvoiceStatus::New {
+        // There will be a batch_to_delete_id if the item has changed
+        // If item has changed, we want a new stock line, otherwise keep existing
+        let stock_line_id = match batch_to_delete_id {
+            Some(_) => None, // will generate new stock line
+            None => update_line.stock_line_id.clone(),
+        };
+
         let new_batch = generate_batch(
-            // There will be a batch_to_delete_id if the item has changed
-            // If item has changed, we want a new stock line, otherwise keep existing
-            batch_to_delete_id.is_none(),
+            connection,
             update_line.clone(),
             StockLineInput {
+                stock_line_id,
                 store_id: existing_invoice_row.store_id.clone(),
                 supplier_link_id: existing_invoice_row.name_link_id.clone(),
                 on_hold: false,
                 barcode_id: None,
+                overwrite_stock_levels: true,
             },
-        );
+        )?;
         update_line.stock_line_id = Some(new_batch.id.clone());
         Some(new_batch)
     } else {
@@ -116,7 +123,7 @@ fn generate_line(
 ) -> Result<InvoiceLineRow, RepositoryError> {
     let mut update_line = current_line;
 
-    update_line.pack_size = pack_size.unwrap_or(update_line.pack_size);
+    update_line.pack_size = pack_size.map(u32_to_i32).unwrap_or(update_line.pack_size);
     update_line.batch = batch.or(update_line.batch);
     update_line.note = note.or(update_line.note);
     update_line.location_id = location.map(|l| l.value).unwrap_or(update_line.location_id);
diff --git a/server/service/src/invoice_line/stock_in_line/update/mod.rs b/server/service/src/invoice_line/stock_in_line/update/mod.rs
index f8b48f300..3cfe68741 100644
--- a/server/service/src/invoice_line/stock_in_line/update/mod.rs
+++ b/server/service/src/invoice_line/stock_in_line/update/mod.rs
@@ -22,7 +22,7 @@ pub struct UpdateStockInLine {
     pub id: String,
     pub item_id: Option<String>,
     pub location: Option<NullableUpdate<String>>,
-    pub pack_size: Option<f64>,
+    pub pack_size: Option<u32>,
     pub batch: Option<String>,
     pub note: Option<String>,
     pub cost_price_per_pack: Option<f64>,
@@ -199,7 +199,7 @@ mod test {
                 &context,
                 inline_init(|r: &mut UpdateStockInLine| {
                     r.id = mock_inbound_return_a_invoice_line_a().id;
-                    r.pack_size = Some(0.0);
+                    r.pack_size = Some(0);
                 }),
             ),
             Err(ServiceError::PackSizeBelowOne)
@@ -211,7 +211,7 @@ mod test {
                 &context,
                 inline_init(|r: &mut UpdateStockInLine| {
                     r.id = mock_inbound_return_a_invoice_line_a().id;
-                    r.pack_size = Some(1.0);
+                    r.pack_size = Some(1);
                     r.number_of_packs = Some(0.0);
                 }),
             ),
@@ -225,7 +225,7 @@ mod test {
                 inline_init(|r: &mut UpdateStockInLine| {
                     r.id = mock_inbound_return_a_invoice_line_a().id;
                     r.item_id = Some("invalid".to_string());
-                    r.pack_size = Some(1.0);
+                    r.pack_size = Some(1);
                     r.number_of_packs = Some(1.0);
                 }),
             ),
@@ -238,7 +238,7 @@ mod test {
                 &context,
                 inline_init(|r: &mut UpdateStockInLine| {
                     r.id = mock_outbound_return_a_invoice_line_a().id;
-                    r.pack_size = Some(1.0);
+                    r.pack_size = Some(1);
                     r.number_of_packs = Some(1.0);
                 }),
             ),
@@ -252,7 +252,7 @@ mod test {
                 inline_init(|r: &mut UpdateStockInLine| {
                     r.id = verified_return_line().id;
                     r.item_id = Some(mock_item_a().id.clone());
-                    r.pack_size = Some(1.0);
+                    r.pack_size = Some(1);
                     r.number_of_packs = Some(1.0);
                 }),
             ),
@@ -266,7 +266,7 @@ mod test {
                 inline_init(|r: &mut UpdateStockInLine| {
                     r.id = mock_inbound_return_a_invoice_line_b().id; // line number_of_packs and stock_line available_number_of_packs are different
                     r.item_id = Some(mock_item_b().id);
-                    r.pack_size = Some(1.0);
+                    r.pack_size = Some(1);
                     r.number_of_packs = Some(1.0);
                 }),
             ),
@@ -281,7 +281,7 @@ mod test {
                 inline_init(|r: &mut UpdateStockInLine| {
                     r.id = mock_inbound_return_a_invoice_line_a().id;
                     r.item_id = Some(mock_item_a().id);
-                    r.pack_size = Some(1.0);
+                    r.pack_size = Some(1);
                     r.number_of_packs = Some(1.0);
                 }),
             ),
@@ -305,7 +305,7 @@ mod test {
             &context,
             inline_init(|r: &mut UpdateStockInLine| {
                 r.id = return_line_id.clone();
-                r.pack_size = Some(2.0);
+                r.pack_size = Some(2);
                 r.number_of_packs = Some(3.0);
             }),
         )
@@ -313,14 +313,13 @@ mod test {
 
         let inbound_line_update = InvoiceLineRowRepository::new(&connection)
             .find_one_by_id(&return_line_id)
-            .unwrap()
             .unwrap();
 
         assert_eq!(
             inbound_line_update,
             inline_edit(&inbound_line_update, |mut u| {
                 u.id = return_line_id.clone();
-                u.pack_size = 2.0;
+                u.pack_size = 2;
                 u.number_of_packs = 3.0;
                 u
             })
@@ -340,7 +339,7 @@ mod test {
             &context,
             inline_init(|r: &mut UpdateStockInLine| {
                 r.id = return_line_id.clone();
-                r.pack_size = Some(20.0);
+                r.pack_size = Some(20);
                 r.number_of_packs = Some(20.0);
                 r.sell_price_per_pack = Some(100.0);
                 r.cost_price_per_pack = Some(60.0);
@@ -350,14 +349,13 @@ mod test {
 
         let inbound_line = InvoiceLineRowRepository::new(&connection)
             .find_one_by_id(&return_line_id)
-            .unwrap()
             .unwrap();
 
         assert_eq!(
             inbound_line,
             inline_edit(&inbound_line, |mut u| {
                 u.id = return_line_id;
-                u.pack_size = 1.0;
+                u.pack_size = 1;
                 u.number_of_packs = 400.0;
                 u.sell_price_per_pack = 5.0;
                 u.cost_price_per_pack = 3.0;
diff --git a/server/service/src/invoice_line/stock_in_line/update/validate.rs b/server/service/src/invoice_line/stock_in_line/update/validate.rs
index 88a1715c4..9d663cf09 100644
--- a/server/service/src/invoice_line/stock_in_line/update/validate.rs
+++ b/server/service/src/invoice_line/stock_in_line/update/validate.rs
@@ -1,8 +1,8 @@
 use crate::{
     invoice::{check_invoice_exists, check_invoice_is_editable, check_invoice_type, check_store},
     invoice_line::{
-        check_batch, check_location_exists, check_pack_size,
-        validate::{check_item_exists, check_line_belongs_to_invoice, check_line_exists},
+        stock_in_line::{check_batch, check_location_exists, check_pack_size},
+        validate::{check_item_exists, check_line_belongs_to_invoice, check_line_exists_option},
     },
 };
 use repository::{InvoiceLine, InvoiceRow, ItemRow, StorageConnection};
@@ -16,7 +16,7 @@ pub fn validate(
 ) -> Result<(InvoiceLine, Option<ItemRow>, InvoiceRow), UpdateStockInLineError> {
     use UpdateStockInLineError::*;
 
-    let line = check_line_exists(connection, &input.id)?.ok_or(LineDoesNotExist)?;
+    let line = check_line_exists_option(connection, &input.id)?.ok_or(LineDoesNotExist)?;
     let line_row = &line.invoice_line_row;
 
     if !check_pack_size(input.pack_size.clone()) {
diff --git a/server/service/src/invoice_line/inbound_shipment_line/validate.rs b/server/service/src/invoice_line/stock_in_line/validate.rs
similarity index 80%
rename from server/service/src/invoice_line/inbound_shipment_line/validate.rs
rename to server/service/src/invoice_line/stock_in_line/validate.rs
index e5cd2f532..3ee4d8d81 100644
--- a/server/service/src/invoice_line/inbound_shipment_line/validate.rs
+++ b/server/service/src/invoice_line/stock_in_line/validate.rs
@@ -3,9 +3,9 @@ use repository::{
     StorageConnection,
 };
 
-pub fn check_pack_size(pack_size_option: Option<f64>) -> bool {
+pub fn check_pack_size(pack_size_option: Option<u32>) -> bool {
     if let Some(pack_size) = pack_size_option {
-        if pack_size < 1.0 {
+        if pack_size < 1 {
             return false;
         }
     }
@@ -27,12 +27,10 @@ pub fn check_batch(
 
 pub fn check_batch_stock_reserved(
     line: &InvoiceLineRow,
-    batch: Option<StockLineRow>,
+    batch: StockLineRow,
 ) -> Result<bool, RepositoryError> {
-    if let Some(batch) = batch {
-        if line.number_of_packs != batch.available_number_of_packs {
-            return Ok(false);
-        }
+    if line.number_of_packs != batch.available_number_of_packs {
+        return Ok(false);
     }
     Ok(true)
 }
diff --git a/server/service/src/invoice_line/stock_out_line/delete/mod.rs b/server/service/src/invoice_line/stock_out_line/delete/mod.rs
index 4adfc714a..a233a5287 100644
--- a/server/service/src/invoice_line/stock_out_line/delete/mod.rs
+++ b/server/service/src/invoice_line/stock_out_line/delete/mod.rs
@@ -33,14 +33,10 @@ pub fn delete_stock_out_line(
                 let invoice_repository = InvoiceRowRepository::new(connection);
                 let stock_line_repository = StockLineRowRepository::new(connection);
 
-                let mut stock_line = stock_line_repository
-                    .find_one_by_id(&stock_line_id)?
-                    .ok_or(DeleteStockOutLineError::StockLineDoesNotExist)?;
+                let mut stock_line = stock_line_repository.find_one_by_id(&stock_line_id)?;
                 stock_line.available_number_of_packs += line.number_of_packs;
 
-                let invoice = invoice_repository
-                    .find_one_by_id(&line.invoice_id)?
-                    .ok_or(DeleteStockOutLineError::InvoiceDoesNotExist)?;
+                let invoice = invoice_repository.find_one_by_id(&line.invoice_id)?;
                 if invoice.status == InvoiceStatus::Picked {
                     stock_line.total_number_of_packs += line.number_of_packs;
                 }
@@ -56,7 +52,6 @@ pub fn delete_stock_out_line(
 
 #[derive(Debug, Clone, PartialEq)]
 pub enum DeleteStockOutLineError {
-    StockLineDoesNotExist,
     LineDoesNotExist,
     DatabaseError(RepositoryError),
     InvoiceDoesNotExist,
@@ -189,7 +184,7 @@ mod test {
                 r.stock_line_id = Some(String::from("item_a_line_a"));
                 r.batch = Some(String::from("item_a_line_a"));
                 r.expiry_date = Some(NaiveDate::from_ymd_opt(2020, 8, 1).unwrap());
-                r.pack_size = 1.0;
+                r.pack_size = 1;
                 r.total_before_tax = 0.87;
                 r.total_after_tax = 1.0;
                 r.tax_percentage = Some(15.0);
@@ -220,13 +215,11 @@ mod test {
             StockLineRowRepository::new(&connection)
                 .find_one_by_id(stock_line_id)
                 .unwrap()
-                .unwrap()
         };
 
         // Test delete Picked invoice line
         let invoice_line = InvoiceLineRowRepository::new(&connection)
             .find_one_by_id(&mock_outbound_shipment_a_invoice_lines()[0].id)
-            .unwrap()
             .unwrap();
         let stock_line = stock_line_for_invoice_line(&invoice_line);
         let expected_stock_line_total =
@@ -245,14 +238,13 @@ mod test {
             .unwrap();
         assert_eq!(
             InvoiceLineRowRepository::new(&connection)
-                .find_one_by_id(&invoice_line_id)
+                .find_one_by_id_option(&invoice_line_id)
                 .unwrap(),
             None
         );
 
         let stock_line = StockLineRowRepository::new(&connection)
             .find_one_by_id(&invoice_line.stock_line_id.unwrap())
-            .unwrap()
             .unwrap();
         assert_eq!(expected_stock_line_total, stock_line.total_number_of_packs);
         assert_eq!(
@@ -263,7 +255,6 @@ mod test {
         // Test delete New invoice line
         let invoice_line = InvoiceLineRowRepository::new(&connection)
             .find_one_by_id(&mock_outbound_shipment_c_invoice_lines()[0].id)
-            .unwrap()
             .unwrap();
         let stock_line = stock_line_for_invoice_line(&invoice_line);
         let expected_stock_line_total = stock_line.total_number_of_packs;
@@ -283,7 +274,6 @@ mod test {
 
         let stock_line = StockLineRowRepository::new(&connection)
             .find_one_by_id(&invoice_line.stock_line_id.unwrap())
-            .unwrap()
             .unwrap();
         assert_eq!(expected_stock_line_total, stock_line.total_number_of_packs);
         assert_eq!(
@@ -294,7 +284,6 @@ mod test {
         // Test delete Allocated invoice line
         let invoice_line = InvoiceLineRowRepository::new(&connection)
             .find_one_by_id(&outbound_shipment_lines().id)
-            .unwrap()
             .unwrap();
         let stock_line = stock_line_for_invoice_line(&invoice_line);
         let expected_stock_line_total = stock_line.total_number_of_packs;
@@ -313,7 +302,6 @@ mod test {
 
         let stock_line = StockLineRowRepository::new(&connection)
             .find_one_by_id(&invoice_line.stock_line_id.unwrap())
-            .unwrap()
             .unwrap();
         assert_eq!(expected_stock_line_total, stock_line.total_number_of_packs);
         assert_eq!(
diff --git a/server/service/src/invoice_line/stock_out_line/delete/validate.rs b/server/service/src/invoice_line/stock_out_line/delete/validate.rs
index 01940ccfe..0af3607af 100644
--- a/server/service/src/invoice_line/stock_out_line/delete/validate.rs
+++ b/server/service/src/invoice_line/stock_out_line/delete/validate.rs
@@ -1,6 +1,6 @@
 use crate::{
     invoice::{check_invoice_exists, check_invoice_is_editable, check_invoice_type, check_store},
-    invoice_line::validate::{check_line_belongs_to_invoice, check_line_row_exists},
+    invoice_line::validate::{check_line_belongs_to_invoice, check_line_row_exists_option},
 };
 use repository::{InvoiceLineRow, StorageConnection};
 
@@ -13,7 +13,7 @@ pub fn validate(
 ) -> Result<InvoiceLineRow, DeleteStockOutLineError> {
     use DeleteStockOutLineError::*;
 
-    let line = check_line_row_exists(connection, &input.id)?.ok_or(LineDoesNotExist)?;
+    let line = check_line_row_exists_option(connection, &input.id)?.ok_or(LineDoesNotExist)?;
     let invoice = check_invoice_exists(&line.invoice_id, connection)?.ok_or(InvoiceDoesNotExist)?;
 
     if !check_store(&invoice, store_id) {
diff --git a/server/service/src/invoice_line/stock_out_line/insert/generate.rs b/server/service/src/invoice_line/stock_out_line/insert/generate.rs
index b5efb6150..9e430ac62 100644
--- a/server/service/src/invoice_line/stock_out_line/insert/generate.rs
+++ b/server/service/src/invoice_line/stock_out_line/insert/generate.rs
@@ -3,7 +3,10 @@ use repository::{
     StockLine, StockLineRow, StorageConnection,
 };
 
-use crate::invoice::common::{calculate_foreign_currency_total, calculate_total_after_tax};
+use crate::{
+    invoice::common::{calculate_foreign_currency_total, calculate_total_after_tax},
+    invoice_line::StockOutType,
+};
 
 use super::{InsertStockOutLine, InsertStockOutLineError};
 
@@ -14,33 +17,59 @@ pub fn generate(
     batch: StockLine,
     invoice: InvoiceRow,
 ) -> Result<(InvoiceLineRow, StockLineRow), InsertStockOutLineError> {
-    let adjust_total_number_of_packs = invoice.status == InvoiceStatus::Picked;
+    let adjust_total_number_of_packs =
+        should_adjust_total_number_of_packs(invoice.status.clone(), &input.r#type);
 
     let update_batch = generate_batch_update(
-        &input,
+        input.clone(),
         batch.stock_line_row.clone(),
         adjust_total_number_of_packs,
     );
-    let new_line = generate_line(connection, input, item_row, batch, invoice)?;
+    let new_line = generate_line(connection, input, item_row, update_batch.clone(), invoice)?;
 
     Ok((new_line, update_batch))
 }
 
 fn generate_batch_update(
-    input: &InsertStockOutLine,
+    InsertStockOutLine {
+        location_id,
+        batch: input_batch_name,
+        pack_size,
+        expiry_date,
+        cost_price_per_pack,
+        sell_price_per_pack,
+        number_of_packs,
+        note: _,
+        id: _,
+        r#type: _,
+        invoice_id: _,
+        stock_line_id: _,
+        total_before_tax: _,
+        tax_percentage: _,
+    }: InsertStockOutLine,
     batch: StockLineRow,
     adjust_total_number_of_packs: bool,
 ) -> StockLineRow {
-    let mut update_batch = batch;
-
-    let reduction = input.number_of_packs;
+    let available_reduction = number_of_packs;
+    let total_reduction = if adjust_total_number_of_packs {
+        number_of_packs
+    } else {
+        0.0
+    };
 
-    update_batch.available_number_of_packs -= reduction;
-    if adjust_total_number_of_packs {
-        update_batch.total_number_of_packs -= reduction;
-    }
+    let updated_batch = StockLineRow {
+        available_number_of_packs: batch.available_number_of_packs - available_reduction,
+        total_number_of_packs: batch.total_number_of_packs - total_reduction,
+        location_id: location_id.or(batch.location_id),
+        batch: input_batch_name.or(batch.batch),
+        expiry_date: expiry_date.or(batch.expiry_date),
+        pack_size: pack_size.unwrap_or(batch.pack_size),
+        cost_price_per_pack: cost_price_per_pack.unwrap_or(batch.cost_price_per_pack),
+        sell_price_per_pack: sell_price_per_pack.unwrap_or(batch.sell_price_per_pack),
+        ..batch
+    };
 
-    update_batch
+    updated_batch
 }
 
 fn generate_line(
@@ -52,8 +81,14 @@ fn generate_line(
         stock_line_id,
         number_of_packs,
         total_before_tax,
-        tax_percentage: _,
         note,
+        tax_percentage: _,
+        location_id: _,
+        batch: _,
+        pack_size: _,
+        expiry_date: _,
+        cost_price_per_pack: _,
+        sell_price_per_pack: _,
     }: InsertStockOutLine,
     ItemRow {
         id: item_id,
@@ -61,20 +96,16 @@ fn generate_line(
         code: item_code,
         ..
     }: ItemRow,
-    StockLine {
-        stock_line_row:
-            StockLineRow {
-                sell_price_per_pack,
-                cost_price_per_pack,
-                pack_size,
-                batch,
-                expiry_date,
-                location_id,
-                note: _,
-                ..
-            },
+    StockLineRow {
+        sell_price_per_pack,
+        cost_price_per_pack,
+        pack_size,
+        batch,
+        expiry_date,
+        location_id,
+        note: _,
         ..
-    }: StockLine,
+    }: StockLineRow,
     InvoiceRow {
         tax_percentage,
         currency_id,
@@ -115,3 +146,10 @@ fn generate_line(
         foreign_currency_price_before_tax,
     })
 }
+
+fn should_adjust_total_number_of_packs(status: InvoiceStatus, r#type: &StockOutType) -> bool {
+    match r#type {
+        StockOutType::InventoryReduction => true,
+        _ => status == InvoiceStatus::Picked,
+    }
+}
diff --git a/server/service/src/invoice_line/stock_out_line/insert/mod.rs b/server/service/src/invoice_line/stock_out_line/insert/mod.rs
index 51febda06..cf29f2330 100644
--- a/server/service/src/invoice_line/stock_out_line/insert/mod.rs
+++ b/server/service/src/invoice_line/stock_out_line/insert/mod.rs
@@ -1,4 +1,5 @@
 use crate::{invoice_line::query::get_invoice_line, service_provider::ServiceContext, WithDBError};
+use chrono::NaiveDate;
 use repository::{InvoiceLine, InvoiceLineRowRepository, RepositoryError, StockLineRowRepository};
 
 mod generate;
@@ -11,13 +12,19 @@ use super::StockOutType;
 #[derive(Clone, Debug, PartialEq, Default)]
 pub struct InsertStockOutLine {
     pub id: String,
-    pub r#type: Option<StockOutType>,
+    pub r#type: StockOutType,
     pub invoice_id: String,
     pub stock_line_id: String,
     pub number_of_packs: f64,
     pub total_before_tax: Option<f64>,
     pub tax_percentage: Option<f64>,
     pub note: Option<String>,
+    pub location_id: Option<String>,
+    pub batch: Option<String>,
+    pub pack_size: Option<i32>,
+    pub expiry_date: Option<NaiveDate>,
+    pub cost_price_per_pack: Option<f64>,
+    pub sell_price_per_pack: Option<f64>,
 }
 
 #[derive(Clone, Debug, PartialEq)]
@@ -25,7 +32,6 @@ pub enum InsertStockOutLineError {
     LineAlreadyExists,
     DatabaseError(RepositoryError),
     InvoiceDoesNotExist,
-    NoInvoiceType,
     InvoiceTypeDoesNotMatch,
     NotThisStoreInvoice,
     CannotEditFinalised,
@@ -120,7 +126,7 @@ mod test {
                 &context,
                 inline_init(|r: &mut InsertStockOutLine| {
                     r.id = mock_outbound_shipment_a_invoice_lines()[0].id.clone();
-                    r.r#type = Some(StockOutType::OutboundShipment);
+                    r.r#type = StockOutType::OutboundShipment;
                     r.invoice_id = mock_outbound_shipment_a_invoice_lines()[0]
                         .invoice_id
                         .clone();
@@ -135,7 +141,7 @@ mod test {
                 &context,
                 inline_init(|r: &mut InsertStockOutLine| {
                     r.id = "new outbound shipment line id".to_string();
-                    r.r#type = Some(StockOutType::OutboundShipment);
+                    r.r#type = StockOutType::OutboundShipment;
                     r.invoice_id = "new invoice id".to_string();
                     r.number_of_packs = 1.0;
                     r.stock_line_id = mock_item_b_lines()[0].id.clone();
@@ -150,7 +156,7 @@ mod test {
                 &context,
                 inline_init(|r: &mut InsertStockOutLine| {
                     r.id = "new outbound line id".to_string();
-                    r.r#type = Some(StockOutType::OutboundShipment);
+                    r.r#type = StockOutType::OutboundShipment;
                     r.invoice_id = "invalid".to_string();
                     r.number_of_packs = 1.0;
                 }),
@@ -165,7 +171,7 @@ mod test {
                 &context,
                 inline_init(|r: &mut InsertStockOutLine| {
                     r.id = "new outbound line id".to_string();
-                    r.r#type = Some(StockOutType::OutboundShipment);
+                    r.r#type = StockOutType::OutboundShipment;
                     r.stock_line_id = "item_b_line_a".to_string();
                     r.invoice_id = mock_outbound_shipment_a_invoice_lines()[0]
                         .invoice_id
@@ -182,7 +188,7 @@ mod test {
                 &context,
                 inline_init(|r: &mut InsertStockOutLine| {
                     r.id = "new outbound line id".to_string();
-                    r.r#type = Some(StockOutType::OutboundShipment);
+                    r.r#type = StockOutType::OutboundShipment;
                     r.invoice_id = mock_outbound_shipment_a_invoice_lines()[0]
                         .invoice_id
                         .clone();
@@ -199,7 +205,7 @@ mod test {
                 &context,
                 inline_init(|r: &mut InsertStockOutLine| {
                     r.id = "new outbound line id".to_string();
-                    r.r#type = Some(StockOutType::OutboundShipment);
+                    r.r#type = StockOutType::OutboundShipment;
                     r.invoice_id = mock_outbound_shipment_a_invoice_lines()[0]
                         .invoice_id
                         .clone();
@@ -216,7 +222,7 @@ mod test {
                 &context,
                 inline_init(|r: &mut InsertStockOutLine| {
                     r.id = "new outbound line id".to_string();
-                    r.r#type = Some(StockOutType::OutboundShipment);
+                    r.r#type = StockOutType::OutboundShipment;
                     r.invoice_id = mock_outbound_shipment_a_invoice_lines()[0]
                         .invoice_id
                         .clone();
@@ -235,7 +241,7 @@ mod test {
                 &context,
                 inline_init(|r: &mut InsertStockOutLine| {
                     r.id = "new outbound line id".to_string();
-                    r.r#type = Some(StockOutType::OutboundShipment);
+                    r.r#type = StockOutType::OutboundShipment;
                     r.invoice_id = mock_outbound_shipment_a_invoice_lines()[0]
                         .invoice_id
                         .clone();
@@ -255,7 +261,7 @@ mod test {
                 &context,
                 inline_init(|r: &mut InsertStockOutLine| {
                     r.id = "new outbound line id".to_string();
-                    r.r#type = Some(StockOutType::OutboundShipment);
+                    r.r#type = StockOutType::OutboundShipment;
                     r.invoice_id = mock_outbound_shipment_a_invoice_lines()[0]
                         .invoice_id
                         .clone();
@@ -278,7 +284,6 @@ mod test {
             StockLineRowRepository::new(&connection)
                 .find_one_by_id(&stock_line_id)
                 .unwrap()
-                .unwrap()
         };
 
         let service_provider = ServiceProvider::new(connection_manager, "app_data");
@@ -292,7 +297,6 @@ mod test {
         let available_number_of_packs = StockLineRowRepository::new(&connection)
             .find_one_by_id(&mock_stock_line_si_d()[0].id.clone())
             .unwrap()
-            .unwrap()
             .available_number_of_packs;
 
         service
@@ -300,7 +304,7 @@ mod test {
                 &context,
                 inline_init(|r: &mut InsertStockOutLine| {
                     r.id = "new outbound line id".to_string();
-                    r.r#type = Some(StockOutType::OutboundShipment);
+                    r.r#type = StockOutType::OutboundShipment;
                     r.invoice_id = mock_outbound_shipment_c_invoice_lines()[0]
                         .invoice_id
                         .clone();
@@ -312,7 +316,6 @@ mod test {
             .unwrap();
         let new_outbound_line = InvoiceLineRowRepository::new(&connection)
             .find_one_by_id("new outbound line id")
-            .unwrap()
             .unwrap();
         let expected_available_stock =
             available_number_of_packs - new_outbound_line.number_of_packs;
@@ -322,7 +325,7 @@ mod test {
             inline_edit(&new_outbound_line, |mut u| {
                 u.id = "new outbound line id".to_string();
                 u.item_link_id = mock_item_a().id.clone();
-                u.pack_size = 1.0;
+                u.pack_size = 1;
                 u.number_of_packs = 1.0;
                 u
             })
@@ -336,7 +339,6 @@ mod test {
         let available_number_of_packs = StockLineRowRepository::new(&connection)
             .find_one_by_id(&mock_stock_line_a().id.clone())
             .unwrap()
-            .unwrap()
             .available_number_of_packs;
 
         invoice_service
@@ -353,7 +355,7 @@ mod test {
                 &context,
                 inline_init(|r: &mut InsertStockOutLine| {
                     r.id = "new allocated invoice line".to_string();
-                    r.r#type = Some(StockOutType::OutboundShipment);
+                    r.r#type = StockOutType::OutboundShipment;
                     r.invoice_id = mock_outbound_shipment_c_invoice_lines()[0]
                         .invoice_id
                         .clone();
@@ -365,7 +367,6 @@ mod test {
             .unwrap();
         let allocated_outbound_line = InvoiceLineRowRepository::new(&connection)
             .find_one_by_id("new allocated invoice line")
-            .unwrap()
             .unwrap();
         let expected_available_stock =
             available_number_of_packs - allocated_outbound_line.number_of_packs;
@@ -378,7 +379,6 @@ mod test {
         // New line on Picked invoice
         let stock_line = StockLineRowRepository::new(&connection)
             .find_one_by_id(&mock_item_b_lines()[0].id.clone())
-            .unwrap()
             .unwrap();
 
         invoice_service
@@ -395,7 +395,7 @@ mod test {
                 &context,
                 inline_init(|r: &mut InsertStockOutLine| {
                     r.id = "new picked invoice line".to_string();
-                    r.r#type = Some(StockOutType::OutboundShipment);
+                    r.r#type = StockOutType::OutboundShipment;
                     r.invoice_id = mock_outbound_shipment_c_invoice_lines()[0]
                         .invoice_id
                         .clone();
@@ -407,7 +407,6 @@ mod test {
             .unwrap();
         let picked_outbound_line = InvoiceLineRowRepository::new(&connection)
             .find_one_by_id("new picked invoice line")
-            .unwrap()
             .unwrap();
         let expected_available_stock =
             stock_line.available_number_of_packs - picked_outbound_line.number_of_packs;
@@ -428,7 +427,6 @@ mod test {
         let available_number_of_packs = StockLineRowRepository::new(&connection)
             .find_one_by_id(&mock_stock_line_a().id.clone())
             .unwrap()
-            .unwrap()
             .available_number_of_packs;
 
         service
@@ -436,7 +434,7 @@ mod test {
                 &context,
                 inline_init(|r: &mut InsertStockOutLine| {
                     r.id = "new prescription line id".to_string();
-                    r.r#type = Some(StockOutType::Prescription);
+                    r.r#type = StockOutType::Prescription;
                     r.invoice_id = mock_prescription_a().id;
                     r.stock_line_id = mock_stock_line_a().id.clone();
                     r.number_of_packs = 1.0;
@@ -446,7 +444,6 @@ mod test {
             .unwrap();
         let new_prescription_line = InvoiceLineRowRepository::new(&connection)
             .find_one_by_id("new prescription line id")
-            .unwrap()
             .unwrap();
         let expected_available_stock =
             available_number_of_packs - new_prescription_line.number_of_packs;
@@ -456,7 +453,7 @@ mod test {
             inline_edit(&new_prescription_line, |mut u| {
                 u.id = "new prescription line id".to_string();
                 u.item_link_id = mock_item_a().id.clone();
-                u.pack_size = 1.0;
+                u.pack_size = 1;
                 u.number_of_packs = 1.0;
                 u
             })
diff --git a/server/service/src/invoice_line/stock_out_line/insert/validate.rs b/server/service/src/invoice_line/stock_out_line/insert/validate.rs
index 1d7aef168..7a2e3faa8 100644
--- a/server/service/src/invoice_line/stock_out_line/insert/validate.rs
+++ b/server/service/src/invoice_line/stock_out_line/insert/validate.rs
@@ -4,7 +4,7 @@ use crate::{
     invoice::{check_invoice_exists, check_invoice_is_editable, check_invoice_type, check_store},
     invoice_line::{
         check_batch_exists, check_batch_on_hold, check_existing_stock_line, check_location_on_hold,
-        validate::{check_line_exists, check_number_of_packs},
+        validate::{check_line_does_not_exist, check_number_of_packs},
         LocationIsOnHoldError,
     },
 };
@@ -18,7 +18,7 @@ pub fn validate(
 ) -> Result<(ItemRow, InvoiceRow, StockLine), InsertStockOutLineError> {
     use InsertStockOutLineError::*;
 
-    if let Some(_) = check_line_exists(connection, &input.id)? {
+    if !check_line_does_not_exist(connection, &input.id)? {
         return Err(LineAlreadyExists);
     }
     let batch =
@@ -49,12 +49,8 @@ pub fn validate(
         return Err(StockLineAlreadyExistsInInvoice(existing_stock.id));
     }
 
-    if let Some(r#type) = &input.r#type {
-        if !check_invoice_type(&invoice, r#type.to_domain()) {
-            return Err(InvoiceTypeDoesNotMatch);
-        }
-    } else {
-        return Err(NoInvoiceType);
+    if !check_invoice_type(&invoice, input.r#type.to_domain()) {
+        return Err(InvoiceTypeDoesNotMatch);
     }
     if !check_invoice_is_editable(&invoice) {
         return Err(CannotEditFinalised);
diff --git a/server/service/src/invoice_line/stock_out_line/mod.rs b/server/service/src/invoice_line/stock_out_line/mod.rs
index d82f6f08a..937a5e1ad 100644
--- a/server/service/src/invoice_line/stock_out_line/mod.rs
+++ b/server/service/src/invoice_line/stock_out_line/mod.rs
@@ -12,11 +12,13 @@ pub use self::delete::*;
 pub mod validate;
 pub use self::validate::*;
 
-#[derive(Clone, Debug, PartialEq)]
+#[derive(Clone, Debug, Default, PartialEq)]
 pub enum StockOutType {
+    #[default]
     OutboundShipment,
     OutboundReturn,
     Prescription,
+    InventoryReduction,
 }
 
 impl StockOutType {
@@ -25,6 +27,7 @@ impl StockOutType {
             StockOutType::OutboundShipment => InvoiceType::OutboundShipment,
             StockOutType::Prescription => InvoiceType::Prescription,
             StockOutType::OutboundReturn => InvoiceType::OutboundReturn,
+            StockOutType::InventoryReduction => InvoiceType::InventoryReduction,
         }
     }
 }
diff --git a/server/service/src/invoice_line/stock_out_line/update/mod.rs b/server/service/src/invoice_line/stock_out_line/update/mod.rs
index d21439339..efacc78cf 100644
--- a/server/service/src/invoice_line/stock_out_line/update/mod.rs
+++ b/server/service/src/invoice_line/stock_out_line/update/mod.rs
@@ -321,7 +321,6 @@ mod test {
             StockLineRowRepository::new(&connection)
                 .find_one_by_id(stock_line_id)
                 .unwrap()
-                .unwrap()
         };
 
         let service_provider = ServiceProvider::new(connection_manager, "app_data");
@@ -341,13 +340,12 @@ mod test {
                 }),
             )
             .unwrap();
-        let updated_invoice_line = InvoiceLineRowRepository::new(&connection)
+        let updated_invoice = InvoiceLineRowRepository::new(&connection)
             .find_one_by_id(&mock_outbound_shipment_c_invoice_lines()[0].id)
-            .unwrap()
             .unwrap();
 
         assert_eq!(
-            updated_invoice_line,
+            updated_invoice,
             inline_edit(&mock_outbound_shipment_c_invoice_lines()[0], |mut u| {
                 u.id = mock_outbound_shipment_c_invoice_lines()[0].id.clone();
                 u.note = Some("new note".to_string());
@@ -364,13 +362,11 @@ mod test {
                     .unwrap(),
             )
             .unwrap()
-            .unwrap()
             .available_number_of_packs;
 
         // Line before update
         let previous_line = InvoiceLineRowRepository::new(&connection)
             .find_one_by_id(&mock_outbound_shipment_c_invoice_lines()[0].id.clone())
-            .unwrap()
             .unwrap();
 
         service
@@ -387,7 +383,6 @@ mod test {
 
         let outbound_line = InvoiceLineRowRepository::new(&connection)
             .find_one_by_id(&mock_outbound_shipment_c_invoice_lines()[0].id.clone())
-            .unwrap()
             .unwrap();
         let expected_available_number_of_packs = previous_available_number_of_packs
             + previous_line.number_of_packs
@@ -417,16 +412,13 @@ mod test {
                     .unwrap(),
             )
             .unwrap()
-            .unwrap()
             .available_number_of_packs;
         let new_available_number_of_packs = StockLineRowRepository::new(&connection)
             .find_one_by_id(&mock_stock_line_b().id.clone())
             .unwrap()
-            .unwrap()
             .available_number_of_packs;
         let previous_line = InvoiceLineRowRepository::new(&connection)
             .find_one_by_id(&mock_outbound_shipment_c_invoice_lines()[0].id.clone())
-            .unwrap()
             .unwrap();
 
         invoice_service
@@ -452,7 +444,6 @@ mod test {
             .unwrap();
         let allocated_outbound_line = InvoiceLineRowRepository::new(&connection)
             .find_one_by_id(&mock_outbound_shipment_c_invoice_lines()[0].id.clone())
-            .unwrap()
             .unwrap();
         let previous_available_number_of_packs =
             previous_available_number_of_packs + previous_line.number_of_packs;
@@ -476,11 +467,9 @@ mod test {
                     .clone()
                     .unwrap(),
             )
-            .unwrap()
             .unwrap();
         let previous_line = InvoiceLineRowRepository::new(&connection)
             .find_one_by_id(&mock_outbound_shipment_a_invoice_lines()[0].id.clone())
-            .unwrap()
             .unwrap();
 
         context.store_id = mock_store_b().id;
@@ -497,7 +486,6 @@ mod test {
             .unwrap();
         let allocated_outbound_line = InvoiceLineRowRepository::new(&connection)
             .find_one_by_id(&mock_outbound_shipment_a_invoice_lines()[0].id.clone())
-            .unwrap()
             .unwrap();
         let expected_available_number_of_packs = previous_totals.available_number_of_packs
             + previous_line.number_of_packs
diff --git a/server/service/src/invoice_line/stock_out_line/update/validate.rs b/server/service/src/invoice_line/stock_out_line/update/validate.rs
index 4baa28f7b..e364993ec 100644
--- a/server/service/src/invoice_line/stock_out_line/update/validate.rs
+++ b/server/service/src/invoice_line/stock_out_line/update/validate.rs
@@ -5,7 +5,9 @@ use crate::{
     invoice_line::{
         check_batch_exists, check_batch_on_hold, check_existing_stock_line, check_location_on_hold,
         stock_out_line::BatchPair,
-        validate::{check_line_belongs_to_invoice, check_line_exists, check_number_of_packs},
+        validate::{
+            check_line_belongs_to_invoice, check_line_exists_option, check_number_of_packs,
+        },
         LocationIsOnHoldError,
     },
 };
@@ -19,7 +21,7 @@ pub fn validate(
 ) -> Result<(InvoiceLineRow, ItemRow, BatchPair, InvoiceRow), UpdateStockOutLineError> {
     use UpdateStockOutLineError::*;
 
-    let line = check_line_exists(connection, &input.id)?.ok_or(LineDoesNotExist)?;
+    let line = check_line_exists_option(connection, &input.id)?.ok_or(LineDoesNotExist)?;
     let line_row = &line.invoice_line_row;
     let invoice =
         check_invoice_exists(&line_row.invoice_id, connection)?.ok_or(InvoiceDoesNotExist)?;
diff --git a/server/service/src/invoice_line/update_return_reason_id/validate.rs b/server/service/src/invoice_line/update_return_reason_id/validate.rs
index 5b08c667d..ed28f84b7 100644
--- a/server/service/src/invoice_line/update_return_reason_id/validate.rs
+++ b/server/service/src/invoice_line/update_return_reason_id/validate.rs
@@ -1,6 +1,6 @@
 use repository::{RepositoryError, ReturnReasonRow, ReturnReasonRowRepository, StorageConnection};
 
-use crate::invoice_line::validate::check_line_exists;
+use crate::invoice_line::validate::check_line_exists_option;
 
 use super::{UpdateLineReturnReason, UpdateLineReturnReasonError};
 
@@ -8,7 +8,7 @@ pub fn validate(
     connection: &StorageConnection,
     input: &UpdateLineReturnReason,
 ) -> Result<(), UpdateLineReturnReasonError> {
-    check_line_exists(connection, &input.line_id)?
+    check_line_exists_option(connection, &input.line_id)?
         .ok_or(UpdateLineReturnReasonError::LineDoesNotExist)?;
 
     if let Some(reason_id) = input.reason_id.as_ref() {
diff --git a/server/service/src/invoice_line/validate.rs b/server/service/src/invoice_line/validate.rs
index c6fd0edfb..8f5300643 100644
--- a/server/service/src/invoice_line/validate.rs
+++ b/server/service/src/invoice_line/validate.rs
@@ -4,6 +4,19 @@ use repository::{
     StockLineFilter, StockLineRepository, StorageConnection,
 };
 
+pub fn check_line_does_not_exist(
+    connection: &StorageConnection,
+    id: &str,
+) -> Result<bool, RepositoryError> {
+    let result = InvoiceLineRowRepository::new(connection).find_one_by_id(id);
+
+    match result {
+        Err(RepositoryError::NotFound) => Ok(true),
+        Err(error) => Err(error),
+        Ok(_) => Ok(false),
+    }
+}
+
 pub fn check_number_of_packs(number_of_packs_option: Option<f64>) -> bool {
     if let Some(number_of_packs) = number_of_packs_option {
         if number_of_packs < 0.0 {
@@ -20,14 +33,20 @@ pub fn check_item_exists(
     ItemRowRepository::new(connection).find_active_by_id(id)
 }
 
-pub fn check_line_row_exists(
+pub fn check_line_row_exists_option(
     connection: &StorageConnection,
     id: &str,
 ) -> Result<Option<InvoiceLineRow>, RepositoryError> {
-    InvoiceLineRowRepository::new(connection).find_one_by_id(id)
+    let result = InvoiceLineRowRepository::new(connection).find_one_by_id(id);
+
+    match result {
+        Ok(line) => Ok(Some(line)),
+        Err(RepositoryError::NotFound) => Ok(None),
+        Err(error) => Err(error),
+    }
 }
 
-pub fn check_line_exists(
+pub fn check_line_exists_option(
     connection: &StorageConnection,
     id: &str,
 ) -> Result<Option<InvoiceLine>, RepositoryError> {
diff --git a/server/service/src/item_stats.rs b/server/service/src/item_stats.rs
index 8436b38b7..c51708709 100644
--- a/server/service/src/item_stats.rs
+++ b/server/service/src/item_stats.rs
@@ -20,7 +20,7 @@ pub struct ItemStatsFilter {
 #[derive(Clone, Debug, PartialEq)]
 pub struct ItemStats {
     pub average_monthly_consumption: f64,
-    pub available_stock_on_hand: f64,
+    pub available_stock_on_hand: u32,
     pub item_id: String,
     pub item_name: String,
 }
@@ -106,19 +106,19 @@ impl ItemStats {
         for consumption_row in consumption_rows.into_iter() {
             let item_total_consumption = consumption_map
                 .entry(consumption_row.item_id.clone())
-                .or_insert(0.0);
+                .or_insert(0);
             *item_total_consumption += consumption_row.quantity;
         }
 
         stock_on_hand_rows
             .into_iter()
             .map(|stock_on_hand| ItemStats {
-                available_stock_on_hand: stock_on_hand.available_stock_on_hand,
+                available_stock_on_hand: stock_on_hand.available_stock_on_hand as u32,
                 item_id: stock_on_hand.item_id.clone(),
                 item_name: stock_on_hand.item_name.clone(),
                 average_monthly_consumption: consumption_map
                     .get(&stock_on_hand.item_id)
-                    .map(|consumption| *consumption / amc_lookback_months as f64)
+                    .map(|consumption| *consumption as f64 / amc_lookback_months as f64)
                     .unwrap_or_default(),
             })
             .collect()
@@ -128,7 +128,7 @@ impl ItemStats {
         let row = &requisition_line.requisition_line_row;
         ItemStats {
             average_monthly_consumption: row.average_monthly_consumption as f64,
-            available_stock_on_hand: row.available_stock_on_hand,
+            available_stock_on_hand: row.available_stock_on_hand as u32,
             item_id: requisition_line.item_row.id.clone(),
             item_name: requisition_line.item_row.name.clone(),
         }
@@ -178,11 +178,11 @@ mod test {
         assert_eq!(item_stats.len(), 2);
         assert_eq!(
             item_stats[0].available_stock_on_hand,
-            test_item_stats::item_1_soh() as f64
+            test_item_stats::item_1_soh()
         );
         assert_eq!(
             item_stats[1].available_stock_on_hand,
-            test_item_stats::item_2_soh() as f64
+            test_item_stats::item_2_soh()
         );
 
         assert_eq!(
@@ -203,11 +203,11 @@ mod test {
         assert_eq!(item_stats.len(), 2);
         assert_eq!(
             item_stats[0].available_stock_on_hand,
-            test_item_stats::item_1_soh() as f64
+            test_item_stats::item_1_soh()
         );
         assert_eq!(
             item_stats[1].available_stock_on_hand,
-            test_item_stats::item_2_soh() as f64
+            test_item_stats::item_2_soh()
         );
 
         assert_eq!(
@@ -225,10 +225,10 @@ mod test {
         assert_eq!(item_stats.len(), 2);
         assert_eq!(
             item_stats[0].available_stock_on_hand,
-            test_item_stats::item_1_store_b_soh() as f64
+            test_item_stats::item_1_store_b_soh()
         );
         // No stock line check
-        assert_eq!(item_stats[1].available_stock_on_hand, 0.0);
+        assert_eq!(item_stats[1].available_stock_on_hand, 0);
 
         assert_eq!(
             item_stats[0].average_monthly_consumption,
diff --git a/server/service/src/lib.rs b/server/service/src/lib.rs
index f5f5f782b..05819e068 100644
--- a/server/service/src/lib.rs
+++ b/server/service/src/lib.rs
@@ -21,7 +21,6 @@ mod common_stock;
 pub mod currency;
 pub mod cursor_controller;
 pub mod dashboard;
-pub mod demographic;
 pub mod display_settings_service;
 pub mod document;
 pub mod inventory_adjustment_reason;
@@ -37,7 +36,6 @@ pub mod login;
 pub mod master_list;
 pub mod missing_program;
 pub mod name;
-pub mod name_property;
 pub mod number;
 pub mod pack_variant;
 pub mod permission;
@@ -45,7 +43,6 @@ pub mod plugin;
 pub mod plugin_data;
 pub mod print;
 pub mod processors;
-pub mod program;
 pub mod programs;
 pub mod repack;
 pub mod report;
@@ -68,7 +65,6 @@ pub mod temperature_excursion;
 pub mod token;
 pub mod token_bucket;
 pub mod user_account;
-pub mod vaccine_course;
 pub mod validate;
 
 #[cfg(test)]
@@ -271,6 +267,10 @@ pub fn usize_to_i32(num: usize) -> i32 {
     num.try_into().unwrap_or(0)
 }
 
+pub fn u32_to_i32(num: u32) -> i32 {
+    num.try_into().unwrap_or(0)
+}
+
 pub fn usize_to_u64(num: usize) -> u64 {
     num.try_into().unwrap_or(0)
 }
diff --git a/server/service/src/master_list/tests/query.rs b/server/service/src/master_list/tests/query.rs
index 3350c0785..cef579eb1 100644
--- a/server/service/src/master_list/tests/query.rs
+++ b/server/service/src/master_list/tests/query.rs
@@ -67,34 +67,5 @@ mod query {
             )
             .unwrap();
         assert_eq!(result.count, 0);
-
-        // Test is_program filters
-        let result = service
-            .get_master_lists(
-                &context,
-                None,
-                Some(
-                    MasterListFilter::new()
-                        .name(StringFilter::equal_to("master_list_program_name"))
-                        .is_program(true),
-                ),
-                None,
-            )
-            .unwrap();
-        assert_eq!(result.count, 1);
-
-        let result = service
-            .get_master_lists(
-                &context,
-                None,
-                Some(
-                    MasterListFilter::new()
-                        .name(StringFilter::equal_to("master_list_program_name"))
-                        .is_program(false),
-                ),
-                None,
-            )
-            .unwrap();
-        assert_eq!(result.count, 0);
     }
 }
diff --git a/server/service/src/missing_program.rs b/server/service/src/missing_program.rs
index d34f44942..c78004079 100644
--- a/server/service/src/missing_program.rs
+++ b/server/service/src/missing_program.rs
@@ -24,10 +24,9 @@ pub fn create_missing_master_list_and_program(
 
     let missing_program = ProgramRow {
         id: MISSING_PROGRAM.to_string(),
-        master_list_id: Some(MISSING_PROGRAM.to_string()),
+        master_list_id: MISSING_PROGRAM.to_string(),
         name: MISSING_PROGRAM.to_string(),
         context_id: MISSING_PROGRAM.to_string(),
-        is_immunisation: false,
     };
 
     let connection = service_provider.connection()?;
diff --git a/server/service/src/name.rs b/server/service/src/name.rs
index 1110e0114..15bde12ec 100644
--- a/server/service/src/name.rs
+++ b/server/service/src/name.rs
@@ -1,5 +1,4 @@
 use repository::NameRepository;
-use repository::NameType;
 use repository::PaginationOption;
 use repository::{Name, NameFilter, NameSort};
 
@@ -20,12 +19,8 @@ pub fn get_names(
     let pagination = get_default_pagination(pagination, MAX_LIMIT, MIN_LIMIT)?;
     let repository = NameRepository::new(&ctx.connection);
 
-    let filter = filter
-        .unwrap_or_default()
-        .r#type(NameType::Patient.not_equal_to());
-
     Ok(ListResult {
-        rows: repository.query(store_id, pagination, Some(filter.clone()), sort)?,
-        count: i64_to_u32(repository.count(store_id, Some(filter))?),
+        rows: repository.query(store_id, pagination, filter.clone(), sort)?,
+        count: i64_to_u32(repository.count(store_id, filter)?),
     })
 }
diff --git a/server/service/src/name_property.rs b/server/service/src/name_property.rs
deleted file mode 100644
index 1dfb3cb55..000000000
--- a/server/service/src/name_property.rs
+++ /dev/null
@@ -1,20 +0,0 @@
-use repository::{
-    NameProperty, NamePropertyFilter, NamePropertyRepository, StorageConnectionManager,
-};
-
-use crate::{usize_to_u32, ListError, ListResult};
-
-pub fn get_name_properties(
-    connection_manager: &StorageConnectionManager,
-    filter: Option<NamePropertyFilter>,
-) -> Result<ListResult<NameProperty>, ListError> {
-    let connection = connection_manager.connection()?;
-    let repository = NamePropertyRepository::new(&connection);
-
-    let rows = repository.query(filter.clone())?;
-
-    Ok(ListResult {
-        count: usize_to_u32(rows.len()),
-        rows,
-    })
-}
diff --git a/server/service/src/pack_variant/insert.rs b/server/service/src/pack_variant/insert.rs
index 238c12404..c4b440df9 100644
--- a/server/service/src/pack_variant/insert.rs
+++ b/server/service/src/pack_variant/insert.rs
@@ -21,7 +21,7 @@ pub enum InsertPackVariantError {
 pub struct InsertPackVariant {
     pub id: String,
     pub item_id: String,
-    pub pack_size: f64,
+    pub pack_size: i32,
     pub short_name: String,
     pub long_name: String,
 }
@@ -83,7 +83,7 @@ fn validate(
         return Err(InsertPackVariantError::VariantWithPackSizeAlreadyExists);
     }
 
-    if input.pack_size == 0.0 {
+    if input.pack_size == 0 {
         return Err(InsertPackVariantError::CannotAddPackSizeOfZero);
     }
 
diff --git a/server/service/src/pack_variant/mod.rs b/server/service/src/pack_variant/mod.rs
index bc2345f36..0d6710de0 100644
--- a/server/service/src/pack_variant/mod.rs
+++ b/server/service/src/pack_variant/mod.rs
@@ -16,7 +16,7 @@ pub use delete::{DeletePackVariant, DeletePackVariantError};
 pub use insert::{InsertPackVariant, InsertPackVariantError};
 pub use update::{UpdatePackVariant, UpdatePackVariantError};
 
-#[derive(Debug, PartialEq)]
+#[derive(Debug, Eq, PartialEq)]
 pub struct ItemPackVariant {
     pub item_id: String,
     pub most_used_pack_variant_id: String,
diff --git a/server/service/src/pack_variant/validate.rs b/server/service/src/pack_variant/validate.rs
index 74319ebf9..2bb7b5b5b 100644
--- a/server/service/src/pack_variant/validate.rs
+++ b/server/service/src/pack_variant/validate.rs
@@ -6,12 +6,12 @@ use repository::{
 pub fn check_pack_size_is_unique(
     connection: &StorageConnection,
     item_id: &str,
-    pack_size: f64,
+    pack_size: i32,
 ) -> Result<bool, RepositoryError> {
     let pack_variants = PackVariantRepository::new(connection).query_by_filter(
         PackVariantFilter::new()
             .item_id(EqualFilter::equal_to(item_id))
-            .pack_size(EqualFilter::equal_to_f64(pack_size))
+            .pack_size(EqualFilter::equal_to_i32(pack_size))
             .is_active(true),
     )?;
 
diff --git a/server/service/src/print/jetdirect.rs b/server/service/src/print/jetdirect.rs
index e4309aa74..3c11ae67a 100644
--- a/server/service/src/print/jetdirect.rs
+++ b/server/service/src/print/jetdirect.rs
@@ -5,7 +5,7 @@ use std::time::Duration;
 use std::{io::Write, net::SocketAddr};
 use telnet::{Event, Telnet};
 
-const PRINTER_COMMAND_TIMEOUT: Duration = Duration::new(1, 0);
+const PRINTER_COMMAND_TIMEOUT: Duration = Duration::new(0, 500);
 const PRINTER_CONNECTION_TIMEOUT: Duration = Duration::new(5, 0);
 
 // Note: this file is mostly taken from https://github.com/fearful-symmetry/zebrasend/blob/main/src/cmd/jetdirect.rs
@@ -62,6 +62,7 @@ impl Jetdirect {
                 }
             }
         }
+
         Ok(response)
     }
 
diff --git a/server/service/src/print/label.rs b/server/service/src/print/label.rs
index 05c9bb05d..2c0a2fc5f 100644
--- a/server/service/src/print/label.rs
+++ b/server/service/src/print/label.rs
@@ -34,7 +34,7 @@ pub fn print_qr_code(
         ^XA
         ^FO50,{}
         ^BQN,2,4
-        ^FDMA,{}^FS        
+        ^FD,{}^FS        
         {}
         ^XZ"#,
         vertical_offset, code, formatted_message
diff --git a/server/service/src/processors/transfer/invoice/common.rs b/server/service/src/processors/transfer/invoice/common.rs
index 59ec43f98..85f567ce5 100644
--- a/server/service/src/processors/transfer/invoice/common.rs
+++ b/server/service/src/processors/transfer/invoice/common.rs
@@ -88,7 +88,7 @@ pub(crate) fn convert_invoice_line_to_single_pack(
         .map(|mut line| {
             line.number_of_packs *= line.pack_size as f64;
             line.cost_price_per_pack /= line.pack_size as f64;
-            line.pack_size = 1.0;
+            line.pack_size = 1;
             line
         })
         .collect()
diff --git a/server/service/src/processors/transfer/invoice/test.rs b/server/service/src/processors/transfer/invoice/test.rs
index 2d5bf9aab..b6a67e789 100644
--- a/server/service/src/processors/transfer/invoice/test.rs
+++ b/server/service/src/processors/transfer/invoice/test.rs
@@ -524,7 +524,7 @@ impl InvoiceTransferTester {
             r.item_link_id = item1.id.clone();
             r.batch = Some(uuid());
             r.expiry_date = Some(NaiveDate::from_ymd_opt(2025, 3, 1).unwrap());
-            r.pack_size = 10.0;
+            r.pack_size = 10;
             r.total_number_of_packs = 200.0;
             r.available_number_of_packs = 200.0;
         });
@@ -551,7 +551,7 @@ impl InvoiceTransferTester {
             r.store_id = outbound_store.id.clone();
             r.item_link_id = item2.id.clone();
             r.batch = Some(uuid());
-            r.pack_size = 10.0;
+            r.pack_size = 10;
             r.total_number_of_packs = 200.0;
             r.available_number_of_packs = 200.0;
             r.expiry_date = Some(NaiveDate::from_ymd_opt(2023, 1, 5).unwrap());
@@ -578,7 +578,7 @@ impl InvoiceTransferTester {
             r.id = uuid();
             r.invoice_id = outbound_shipment.id.clone();
             r.r#type = InvoiceLineType::UnallocatedStock;
-            r.pack_size = 1.0;
+            r.pack_size = 1;
             r.number_of_packs = 10.0;
             r.item_link_id = item2.id.clone();
             r.item_name = item2.name.clone();
@@ -794,7 +794,7 @@ impl InvoiceTransferTester {
 
     pub(crate) fn check_outbound_shipment_was_linked(&self, connection: &StorageConnection) {
         let outbound_shipment = InvoiceRowRepository::new(connection)
-            .find_one_by_id(&self.outbound_shipment.id)
+            .find_one_by_id_option(&self.outbound_shipment.id)
             .unwrap();
 
         assert!(outbound_shipment.is_some());
@@ -829,7 +829,7 @@ impl InvoiceTransferTester {
 
         assert_eq!(
             InvoiceRowRepository::new(connection)
-                .find_one_by_id(inbound_shipment_id)
+                .find_one_by_id_option(inbound_shipment_id)
                 .unwrap(),
             None
         );
@@ -880,7 +880,7 @@ impl InvoiceTransferTester {
 
     pub(crate) fn check_inbound_shipment_was_updated(&mut self, connection: &StorageConnection) {
         let inbound_shipment = InvoiceRowRepository::new(connection)
-            .find_one_by_id(&self.inbound_shipment.clone().map(|r| r.id).unwrap())
+            .find_one_by_id_option(&self.inbound_shipment.clone().map(|r| r.id).unwrap())
             .unwrap();
 
         assert!(inbound_shipment.is_some());
@@ -963,7 +963,7 @@ impl InvoiceTransferTester {
         connection: &StorageConnection,
     ) {
         let outbound_shipment = InvoiceRowRepository::new(connection)
-            .find_one_by_id(&self.outbound_shipment.id)
+            .find_one_by_id_option(&self.outbound_shipment.id)
             .unwrap();
 
         assert!(outbound_shipment.is_some());
@@ -1070,7 +1070,7 @@ impl InvoiceTransferTester {
 
     pub(crate) fn check_outbound_return_was_linked(&self, connection: &StorageConnection) {
         let outbound_return = InvoiceRowRepository::new(connection)
-            .find_one_by_id(&self.outbound_return.id)
+            .find_one_by_id_option(&self.outbound_return.id)
             .unwrap();
 
         assert!(outbound_return.is_some());
@@ -1105,7 +1105,7 @@ impl InvoiceTransferTester {
 
         assert_eq!(
             InvoiceRowRepository::new(connection)
-                .find_one_by_id(inbound_return_id)
+                .find_one_by_id_option(inbound_return_id)
                 .unwrap(),
             None
         );
@@ -1150,7 +1150,7 @@ impl InvoiceTransferTester {
 
     pub(crate) fn check_inbound_return_was_updated(&mut self, connection: &StorageConnection) {
         let inbound_return = InvoiceRowRepository::new(connection)
-            .find_one_by_id(&self.inbound_return.clone().map(|r| r.id).unwrap())
+            .find_one_by_id_option(&self.inbound_return.clone().map(|r| r.id).unwrap())
             .unwrap();
 
         assert!(inbound_return.is_some());
@@ -1225,7 +1225,7 @@ impl InvoiceTransferTester {
         connection: &StorageConnection,
     ) {
         let outbound_return = InvoiceRowRepository::new(connection)
-            .find_one_by_id(&self.outbound_return.id)
+            .find_one_by_id_option(&self.outbound_return.id)
             .unwrap();
 
         assert!(outbound_return.is_some());
diff --git a/server/service/src/processors/transfer/requisition/create_response_requisition.rs b/server/service/src/processors/transfer/requisition/create_response_requisition.rs
index 569694884..45d76590b 100644
--- a/server/service/src/processors/transfer/requisition/create_response_requisition.rs
+++ b/server/service/src/processors/transfer/requisition/create_response_requisition.rs
@@ -210,8 +210,8 @@ fn generate_response_requisition_lines(
                 comment: comment.clone(),
                 item_name,
                 // Default
-                supply_quantity: 0.0,
-                approved_quantity: 0.0,
+                supply_quantity: 0,
+                approved_quantity: 0,
                 approval_comment: None,
             },
         )
diff --git a/server/service/src/processors/transfer/requisition/test.rs b/server/service/src/processors/transfer/requisition/test.rs
index 23f7dc976..e5421b953 100644
--- a/server/service/src/processors/transfer/requisition/test.rs
+++ b/server/service/src/processors/transfer/requisition/test.rs
@@ -232,11 +232,11 @@ impl RequisitionTransferTester {
             r.id = uuid();
             r.requisition_id = request_requisition.id.clone();
             r.item_link_id = item1.id.clone();
-            r.requested_quantity = 2.0;
-            r.suggested_quantity = 3.0;
+            r.requested_quantity = 2;
+            r.suggested_quantity = 3;
             r.comment = Some("line comment".to_string());
-            r.available_stock_on_hand = 1.0;
-            r.average_monthly_consumption = 1.0;
+            r.available_stock_on_hand = 1;
+            r.average_monthly_consumption = 1;
             r.snapshot_datetime = Some(
                 NaiveDate::from_ymd_opt(2021, 1, 1)
                     .unwrap()
@@ -249,10 +249,10 @@ impl RequisitionTransferTester {
             r.id = uuid();
             r.requisition_id = request_requisition.id.clone();
             r.item_link_id = item2.id.clone();
-            r.requested_quantity = 10.0;
-            r.suggested_quantity = 20.0;
-            r.available_stock_on_hand = 30.0;
-            r.average_monthly_consumption = 10.0;
+            r.requested_quantity = 10;
+            r.suggested_quantity = 20;
+            r.available_stock_on_hand = 30;
+            r.average_monthly_consumption = 10;
             r.snapshot_datetime = Some(
                 NaiveDate::from_ymd_opt(2021, 1, 1)
                     .unwrap()
@@ -466,5 +466,5 @@ fn check_line(
         response_line.snapshot_datetime,
         request_line.snapshot_datetime
     );
-    assert_eq!(response_line.supply_quantity, 0.0);
+    assert_eq!(response_line.supply_quantity, 0);
 }
diff --git a/server/service/src/program/insert_immunisation.rs b/server/service/src/program/insert_immunisation.rs
deleted file mode 100644
index a55bde4f7..000000000
--- a/server/service/src/program/insert_immunisation.rs
+++ /dev/null
@@ -1,89 +0,0 @@
-use super::{query::get_program, validate::check_program_name_exists};
-use crate::{
-    activity_log::activity_log_entry, program::validate::check_immunisation_program_exists,
-    service_provider::ServiceContext, SingleRecordError,
-};
-
-use repository::{
-    ActivityLogType, ProgramRow, ProgramRowRepository, RepositoryError, StorageConnection,
-};
-use util::constants::IMMUNISATION_CONTEXT_ID;
-
-#[derive(PartialEq, Debug)]
-pub enum InsertImmunisationProgramError {
-    ImmunisationProgramAlreadyExists,
-    CreatedRecordNotFound,
-    DatabaseError(RepositoryError),
-}
-
-#[derive(PartialEq, Debug, Clone, Default)]
-pub struct InsertImmunisationProgram {
-    pub id: String,
-    pub name: String,
-}
-
-pub fn insert_immunisation_program(
-    ctx: &ServiceContext,
-    input: InsertImmunisationProgram,
-) -> Result<ProgramRow, InsertImmunisationProgramError> {
-    let immunisation_program = ctx
-        .connection
-        .transaction_sync(|connection| {
-            validate(&input, connection)?;
-            let new_immunisation_program = generate(input);
-            ProgramRowRepository::new(connection).upsert_one(&new_immunisation_program)?;
-
-            activity_log_entry(
-                ctx,
-                ActivityLogType::ProgramCreated,
-                Some(new_immunisation_program.id.clone()),
-                None,
-                None,
-            )?;
-
-            get_program(&ctx.connection, new_immunisation_program.id)
-                .map_err(InsertImmunisationProgramError::from)
-        })
-        .map_err(|error| error.to_inner_error())?;
-    Ok(immunisation_program)
-}
-
-pub fn validate(
-    input: &InsertImmunisationProgram,
-    connection: &StorageConnection,
-) -> Result<(), InsertImmunisationProgramError> {
-    if check_immunisation_program_exists(&input.id, connection)?.is_some() {
-        return Err(InsertImmunisationProgramError::ImmunisationProgramAlreadyExists);
-    }
-    if check_program_name_exists(&input.name, connection)?.is_some() {
-        return Err(InsertImmunisationProgramError::ImmunisationProgramAlreadyExists);
-    }
-
-    Ok(())
-}
-
-pub fn generate(InsertImmunisationProgram { id, name }: InsertImmunisationProgram) -> ProgramRow {
-    ProgramRow {
-        id,
-        name,
-        master_list_id: None,
-        context_id: IMMUNISATION_CONTEXT_ID.to_string(),
-        is_immunisation: true,
-    }
-}
-
-impl From<RepositoryError> for InsertImmunisationProgramError {
-    fn from(error: RepositoryError) -> Self {
-        InsertImmunisationProgramError::DatabaseError(error)
-    }
-}
-
-impl From<SingleRecordError> for InsertImmunisationProgramError {
-    fn from(error: SingleRecordError) -> Self {
-        use InsertImmunisationProgramError::*;
-        match error {
-            SingleRecordError::DatabaseError(error) => DatabaseError(error),
-            SingleRecordError::NotFound(_) => CreatedRecordNotFound,
-        }
-    }
-}
diff --git a/server/service/src/program/mod.rs b/server/service/src/program/mod.rs
deleted file mode 100644
index c9ba57ec7..000000000
--- a/server/service/src/program/mod.rs
+++ /dev/null
@@ -1,44 +0,0 @@
-use super::{ListError, ListResult};
-use crate::{service_provider::ServiceContext, SingleRecordError};
-
-use repository::{PaginationOption, ProgramFilter, ProgramRow, ProgramSort, StorageConnection};
-
-pub mod insert_immunisation;
-pub mod query;
-mod validate;
-
-#[cfg(test)]
-mod test;
-
-use query::{get_program, get_programs};
-
-pub trait ProgramServiceTrait: Sync + Send {
-    fn get_programs(
-        &self,
-        connection: &StorageConnection,
-        pagination: Option<PaginationOption>,
-        filter: Option<ProgramFilter>,
-        sort: Option<ProgramSort>,
-    ) -> Result<ListResult<ProgramRow>, ListError> {
-        get_programs(connection, pagination, filter, sort)
-    }
-
-    fn get_program(
-        &self,
-        connection: &StorageConnection,
-        id: String,
-    ) -> Result<ProgramRow, SingleRecordError> {
-        get_program(connection, id)
-    }
-
-    fn insert_immunisation_program(
-        &self,
-        ctx: &ServiceContext,
-        input: insert_immunisation::InsertImmunisationProgram,
-    ) -> Result<ProgramRow, insert_immunisation::InsertImmunisationProgramError> {
-        insert_immunisation::insert_immunisation_program(ctx, input)
-    }
-}
-
-pub struct ProgramService {}
-impl ProgramServiceTrait for ProgramService {}
diff --git a/server/service/src/program/query.rs b/server/service/src/program/query.rs
deleted file mode 100644
index c928c3f39..000000000
--- a/server/service/src/program/query.rs
+++ /dev/null
@@ -1,40 +0,0 @@
-use repository::{
-    EqualFilter, PaginationOption, ProgramFilter, ProgramRepository, ProgramRow, ProgramSort,
-    StorageConnection,
-};
-
-use crate::{get_default_pagination, i64_to_u32, ListError, ListResult, SingleRecordError};
-
-pub const MAX_LIMIT: u32 = 1000;
-pub const MIN_LIMIT: u32 = 1;
-
-pub fn get_programs(
-    connection: &StorageConnection,
-    pagination: Option<PaginationOption>,
-    filter: Option<ProgramFilter>,
-    sort: Option<ProgramSort>,
-) -> Result<ListResult<ProgramRow>, ListError> {
-    let pagination = get_default_pagination(pagination, MAX_LIMIT, MIN_LIMIT)?;
-    let repository = ProgramRepository::new(connection);
-
-    Ok(ListResult {
-        rows: repository.query(pagination, filter.clone(), sort)?,
-        count: i64_to_u32(repository.count(filter)?),
-    })
-}
-
-pub fn get_program(
-    connection: &StorageConnection,
-    id: String,
-) -> Result<ProgramRow, SingleRecordError> {
-    let repository = ProgramRepository::new(connection);
-
-    let mut result =
-        repository.query_by_filter(ProgramFilter::new().id(EqualFilter::equal_to(&id)))?;
-
-    if let Some(record) = result.pop() {
-        Ok(record)
-    } else {
-        Err(SingleRecordError::NotFound(id))
-    }
-}
diff --git a/server/service/src/program/test/insert.rs b/server/service/src/program/test/insert.rs
deleted file mode 100644
index 0f7e131a4..000000000
--- a/server/service/src/program/test/insert.rs
+++ /dev/null
@@ -1,44 +0,0 @@
-#[cfg(test)]
-mod query {
-    use repository::mock::MockDataInserts;
-    use repository::test_db::setup_all;
-
-    use crate::program::insert_immunisation::InsertImmunisationProgram;
-    use crate::service_provider::ServiceProvider;
-
-    #[actix_rt::test]
-    async fn insert_immunisation_program_duplicate_check() {
-        let (_, _, connection_manager, _) = setup_all(
-            "insert_immunisation_program_duplicate_check",
-            MockDataInserts::none(),
-        )
-        .await;
-
-        let service_provider = ServiceProvider::new(connection_manager, "app_data");
-        let context = service_provider.basic_context().unwrap();
-        let service = service_provider.program_service;
-
-        // Create an immunisation program
-        let program_insert = InsertImmunisationProgram {
-            id: "program_id".to_owned(),
-            name: "program_name".to_owned(),
-        };
-
-        let result = service
-            .insert_immunisation_program(&context, program_insert.clone())
-            .unwrap();
-
-        assert_eq!(result.id, program_insert.id);
-
-        // Try to create a program using the same name
-        let program_insert = InsertImmunisationProgram {
-            id: "program_id_2".to_owned(),
-            name: "program_name".to_owned(),
-        };
-
-        assert_eq!(
-            service.insert_immunisation_program(&context, program_insert),
-            Err(crate::program::insert_immunisation::InsertImmunisationProgramError::ImmunisationProgramAlreadyExists)
-        );
-    }
-}
diff --git a/server/service/src/program/test/mod.rs b/server/service/src/program/test/mod.rs
deleted file mode 100644
index fed74f14d..000000000
--- a/server/service/src/program/test/mod.rs
+++ /dev/null
@@ -1,4 +0,0 @@
-#[cfg(test)]
-mod insert;
-#[cfg(test)]
-mod query;
diff --git a/server/service/src/program/test/query.rs b/server/service/src/program/test/query.rs
deleted file mode 100644
index cc8a873b6..000000000
--- a/server/service/src/program/test/query.rs
+++ /dev/null
@@ -1,84 +0,0 @@
-#[cfg(test)]
-mod query {
-    use repository::mock::MockDataInserts;
-    use repository::test_db::setup_all;
-    use repository::{ProgramFilter, ProgramSort, ProgramSortField, StringFilter};
-
-    use crate::program::insert_immunisation::InsertImmunisationProgram;
-    use crate::{service_provider::ServiceProvider, SingleRecordError};
-
-    #[actix_rt::test]
-    async fn program_service_single_record() {
-        let (_, _, connection_manager, _) =
-            setup_all("test_program_single_record", MockDataInserts::none()).await;
-
-        let service_provider = ServiceProvider::new(connection_manager, "app_data");
-        let context = service_provider.basic_context().unwrap();
-        let service = service_provider.program_service;
-
-        // Create an immunisation program
-        let program_insert = InsertImmunisationProgram {
-            id: "program_id".to_owned(),
-            name: "program_name".to_owned(),
-        };
-
-        let _result = service
-            .insert_immunisation_program(&context, program_insert.clone())
-            .unwrap();
-
-        assert_eq!(
-            service.get_program(&context.connection, "invalid_id".to_owned()),
-            Err(SingleRecordError::NotFound("invalid_id".to_owned()))
-        );
-
-        let result = service
-            .get_program(&context.connection, program_insert.id.clone())
-            .unwrap();
-
-        assert_eq!(result.id, program_insert.id);
-    }
-
-    #[actix_rt::test]
-    async fn program_service_filter() {
-        let (_, connection, connection_manager, _) =
-            setup_all("test_program_filter", MockDataInserts::none()).await;
-
-        let service_provider = ServiceProvider::new(connection_manager, "app_data");
-        let context = service_provider.basic_context().unwrap();
-        let service = service_provider.program_service;
-
-        // Create 2 immunisation programs
-        let program_insert_a = InsertImmunisationProgram {
-            id: "program_id_a".to_owned(),
-            name: "program_name_a".to_owned(),
-        };
-
-        let _result = service
-            .insert_immunisation_program(&context, program_insert_a.clone())
-            .unwrap();
-
-        let program_insert_b = InsertImmunisationProgram {
-            id: "program_id_b".to_owned(),
-            name: "program_name_b".to_owned(),
-        };
-
-        let _result = service
-            .insert_immunisation_program(&context, program_insert_b.clone())
-            .unwrap();
-
-        let result = service
-            .get_programs(
-                &connection,
-                None,
-                Some(ProgramFilter::new().name(StringFilter::like("program_name_a"))),
-                Some(ProgramSort {
-                    key: ProgramSortField::Name,
-                    desc: Some(false),
-                }),
-            )
-            .unwrap();
-
-        assert_eq!(result.count, 1);
-        assert_eq!(result.rows[0].id, program_insert_a.id);
-    }
-}
diff --git a/server/service/src/program/validate.rs b/server/service/src/program/validate.rs
deleted file mode 100644
index f267afe33..000000000
--- a/server/service/src/program/validate.rs
+++ /dev/null
@@ -1,26 +0,0 @@
-use repository::{
-    ProgramFilter, ProgramRepository, ProgramRow, ProgramRowRepository, RepositoryError,
-    StorageConnection, StringFilter,
-};
-
-pub fn check_immunisation_program_exists(
-    id: &str,
-    connection: &StorageConnection,
-) -> Result<Option<ProgramRow>, RepositoryError> {
-    let program = ProgramRowRepository::new(connection).find_one_by_id(id)?;
-    match program {
-        Some(program) => match program.is_immunisation {
-            true => Ok(Some(program)),
-            false => Ok(None),
-        },
-        None => Ok(None),
-    }
-}
-pub fn check_program_name_exists(
-    name: &str,
-    connection: &StorageConnection,
-) -> Result<Option<ProgramRow>, RepositoryError> {
-    let program = ProgramRepository::new(connection)
-        .query_one(ProgramFilter::new().name(StringFilter::equal_to(name)))?;
-    Ok(program)
-}
diff --git a/server/service/src/repack/insert.rs b/server/service/src/repack/insert.rs
index cb2639945..118144817 100644
--- a/server/service/src/repack/insert.rs
+++ b/server/service/src/repack/insert.rs
@@ -15,7 +15,7 @@ use super::{
 pub struct InsertRepack {
     pub stock_line_id: String,
     pub number_of_packs: f64,
-    pub new_pack_size: f64,
+    pub new_pack_size: i32,
     pub new_location_id: Option<String>,
 }
 
@@ -147,7 +147,7 @@ mod test {
                 inline_init(|r: &mut InsertRepack| {
                     r.stock_line_id = mock_stock_line_a().id.clone();
                     r.number_of_packs = 9.0;
-                    r.new_pack_size = 2.0;
+                    r.new_pack_size = 2;
                 })
             ),
             Err(ServiceError::CannotHaveFractionalPack)
@@ -168,7 +168,7 @@ mod test {
                 inline_init(|r: &mut InsertRepack| {
                     r.stock_line_id = mock_stock_line_b().id.clone();
                     r.number_of_packs = 40.0;
-                    r.new_pack_size = 2.0;
+                    r.new_pack_size = 2;
                 })
             ),
             Err(ServiceError::StockLineReducedBelowZero(stock_line))
@@ -188,7 +188,7 @@ mod test {
             id: "stock_line_a".to_string(),
             item_link_id: "item_a".to_string(),
             store_id: mock_store_a().id.clone(),
-            pack_size: 5.0,
+            pack_size: 5,
             cost_price_per_pack: 0.20,
             sell_price_per_pack: 0.50,
             available_number_of_packs: 100.0,
@@ -250,14 +250,13 @@ mod test {
                 inline_init(|r: &mut InsertRepack| {
                     r.stock_line_id = mock_stock_line_a().id.clone();
                     r.number_of_packs = 8.0;
-                    r.new_pack_size = 2.0;
+                    r.new_pack_size = 2;
                 }),
             )
             .unwrap();
 
         let invoice = invoice_repo
             .find_one_by_id(&increased_pack_size.invoice_row.id)
-            .unwrap()
             .unwrap();
 
         let SortedInvoiceAndStock {
@@ -280,7 +279,7 @@ mod test {
                 location_id: mock_stock_line_a().location_id,
                 batch: mock_stock_line_a().batch,
                 expiry_date: mock_stock_line_a().expiry_date,
-                pack_size: 2.0,
+                pack_size: 2,
                 cost_price_per_pack: mock_stock_line_a().cost_price_per_pack * 2.0,
                 sell_price_per_pack: mock_stock_line_a().sell_price_per_pack * 2.0,
                 total_before_tax: (mock_stock_line_a().cost_price_per_pack * 2.0) * 4.0,
@@ -323,7 +322,7 @@ mod test {
                 supplier_link_id: mock_stock_line_a().supplier_link_id,
                 available_number_of_packs: 4.0,
                 total_number_of_packs: 4.0,
-                pack_size: 2.0,
+                pack_size: 2,
                 cost_price_per_pack: mock_stock_line_a().cost_price_per_pack * 2.0,
                 sell_price_per_pack: mock_stock_line_a().sell_price_per_pack * 2.0,
                 ..Default::default()
@@ -345,14 +344,13 @@ mod test {
                 inline_init(|r: &mut InsertRepack| {
                     r.stock_line_id = stock_line_a.id.clone();
                     r.number_of_packs = 6.0;
-                    r.new_pack_size = 6.0;
+                    r.new_pack_size = 6;
                 }),
             )
             .unwrap();
 
         let invoice = invoice_repo
             .find_one_by_id(&increased_pack_size.invoice_row.id)
-            .unwrap()
             .unwrap();
 
         let SortedInvoiceAndStock {
@@ -370,7 +368,7 @@ mod test {
                 id: new_stock.id.clone(),
                 available_number_of_packs: 5.0,
                 total_number_of_packs: 5.0,
-                pack_size: 6.0,
+                pack_size: 6,
                 cost_price_per_pack: stock_line_a.cost_price_per_pack * difference,
                 sell_price_per_pack: stock_line_a.sell_price_per_pack * difference,
                 ..stock_line_a.clone()
@@ -392,14 +390,13 @@ mod test {
                 inline_init(|r: &mut InsertRepack| {
                     r.stock_line_id = mock_stock_line_a().id.clone();
                     r.number_of_packs = 22.0;
-                    r.new_pack_size = 11.0;
+                    r.new_pack_size = 11;
                 }),
             )
             .unwrap();
 
         let invoice = invoice_repo
             .find_one_by_id(&repack_all.invoice_row.id)
-            .unwrap()
             .unwrap();
 
         let SortedInvoiceAndStock {
@@ -417,7 +414,7 @@ mod test {
                 id: new_stock.id.clone(),
                 available_number_of_packs: 2.0,
                 total_number_of_packs: 2.0,
-                pack_size: 11.0,
+                pack_size: 11,
                 cost_price_per_pack: mock_stock_line_a().cost_price_per_pack * difference,
                 sell_price_per_pack: mock_stock_line_a().sell_price_per_pack * difference,
                 ..mock_stock_line_a()
@@ -439,14 +436,13 @@ mod test {
                 inline_init(|r: &mut InsertRepack| {
                     r.stock_line_id = mock_stock_line_si_d()[1].id.clone();
                     r.number_of_packs = 1.0;
-                    r.new_pack_size = 1.0;
+                    r.new_pack_size = 1;
                 }),
             )
             .unwrap();
 
         let invoice = invoice_repo
             .find_one_by_id(&decreased_pack_size_to_one.invoice_row.id)
-            .unwrap()
             .unwrap();
 
         let SortedInvoiceAndStock {
@@ -466,7 +462,7 @@ mod test {
                 id: new_stock.id.clone(),
                 available_number_of_packs: 3.0,
                 total_number_of_packs: 3.0,
-                pack_size: 1.0,
+                pack_size: 1,
                 cost_price_per_pack: mock_stock_line_si_d()[1].cost_price_per_pack / 3.0,
                 sell_price_per_pack: (mock_stock_line_si_d()[1].sell_price_per_pack / 3.0).round(),
                 ..mock_stock_line_si_d()[1].clone()
@@ -488,7 +484,7 @@ mod test {
                 inline_init(|r: &mut InsertRepack| {
                     r.stock_line_id = mock_stock_line_ci_c()[1].id.clone();
                     r.number_of_packs = 3.0;
-                    r.new_pack_size = 3.0;
+                    r.new_pack_size = 3;
                     r.new_location_id = Some(mock_location_1().id);
                 }),
             )
@@ -496,7 +492,6 @@ mod test {
 
         let invoice = invoice_repo
             .find_one_by_id(&decreased_pack_size.invoice_row.id)
-            .unwrap()
             .unwrap();
 
         let SortedInvoiceAndStock {
@@ -514,7 +509,7 @@ mod test {
                 location_id: Some(mock_location_1().id),
                 available_number_of_packs: 7.0,
                 total_number_of_packs: 7.0,
-                pack_size: 3.0,
+                pack_size: 3,
                 cost_price_per_pack: mock_stock_line_ci_c()[1].cost_price_per_pack * difference,
                 sell_price_per_pack: mock_stock_line_ci_c()[1].sell_price_per_pack * difference,
                 ..mock_stock_line_ci_c()[1].clone()
diff --git a/server/service/src/repack/query.rs b/server/service/src/repack/query.rs
index 409363e4d..0356d161b 100644
--- a/server/service/src/repack/query.rs
+++ b/server/service/src/repack/query.rs
@@ -149,7 +149,7 @@ mod test {
             id: "line_a_stock_line_a".to_string(),
             item_link_id: mock_item_a().id,
             store_id: mock_store_a().id.clone(),
-            pack_size: 5.0,
+            pack_size: 5,
             cost_price_per_pack: 0.20,
             sell_price_per_pack: 0.50,
             available_number_of_packs: 10.0,
@@ -182,7 +182,7 @@ mod test {
             id: "original_stock_line".to_string(),
             item_link_id: mock_item_a().id,
             store_id: mock_store_a().id.clone(),
-            pack_size: 10.0,
+            pack_size: 10,
             cost_price_per_pack: 0.10,
             sell_price_per_pack: 0.25,
             available_number_of_packs: 10.0,
@@ -272,7 +272,7 @@ mod test {
                 InsertRepack {
                     stock_line_id: original_stock_line.id.clone(),
                     number_of_packs: 6.0,
-                    new_pack_size: 5.0,
+                    new_pack_size: 5,
                     new_location_id: None,
                 },
             )
diff --git a/server/service/src/requisition/program_settings/mod.rs b/server/service/src/requisition/program_settings/mod.rs
index e04826d05..a77968b27 100644
--- a/server/service/src/requisition/program_settings/mod.rs
+++ b/server/service/src/requisition/program_settings/mod.rs
@@ -102,7 +102,7 @@ mod test {
         };
         let program1 = ProgramRow {
             id: "program1".to_string(),
-            master_list_id: Some(master_list1.id.clone()),
+            master_list_id: master_list1.id.clone(),
             context_id: context1.id.clone(),
             ..Default::default()
         };
@@ -122,7 +122,7 @@ mod test {
         };
         let program2 = ProgramRow {
             id: "program2".to_string(),
-            master_list_id: Some(master_list2.id.clone()),
+            master_list_id: master_list2.id.clone(),
             context_id: context2.id.clone(),
             ..Default::default()
         };
diff --git a/server/service/src/requisition/request_requisition/add_from_master_list.rs b/server/service/src/requisition/request_requisition/add_from_master_list.rs
index c871c1f46..25b70c627 100644
--- a/server/service/src/requisition/request_requisition/add_from_master_list.rs
+++ b/server/service/src/requisition/request_requisition/add_from_master_list.rs
@@ -141,7 +141,6 @@ impl From<RepositoryError> for AddFromMasterListError {
 
 #[cfg(test)]
 mod test {
-    use assert_approx_eq::assert_approx_eq;
     use repository::{
         mock::{
             common::FullMockMasterList,
@@ -345,16 +344,17 @@ mod test {
 
         assert_eq!(
             line.requisition_line_row.available_stock_on_hand,
-            test_item_stats::item_1_soh()
+            test_item_stats::item_1_soh() as i32
         );
         assert_eq!(
             line.requisition_line_row.average_monthly_consumption,
-            test_item_stats::item1_amc_3_months()
+            test_item_stats::item1_amc_3_months() as i32
         );
-        assert_approx_eq!(
+        assert_eq!(
             line.requisition_line_row.suggested_quantity,
             // 10 = requisition max_mos
-            test_item_stats::item1_amc_3_months() * 10.0 - test_item_stats::item_1_soh()
+            test_item_stats::item1_amc_3_months() as i32 * 10
+                - test_item_stats::item_1_soh() as i32
         );
 
         let line = lines
@@ -364,16 +364,17 @@ mod test {
 
         assert_eq!(
             line.requisition_line_row.available_stock_on_hand,
-            test_item_stats::item_2_soh()
+            test_item_stats::item_2_soh() as i32
         );
         assert_eq!(
             line.requisition_line_row.average_monthly_consumption,
-            test_item_stats::item2_amc_3_months()
+            test_item_stats::item2_amc_3_months() as i32
         );
         assert_eq!(
             line.requisition_line_row.suggested_quantity,
             // 10 = requisition max_mos
-            test_item_stats::item2_amc_3_months() * 10.0 - test_item_stats::item_2_soh()
+            test_item_stats::item2_amc_3_months() as i32 * 10
+                - test_item_stats::item_2_soh() as i32
         );
     }
 }
diff --git a/server/service/src/requisition/request_requisition/generate.rs b/server/service/src/requisition/request_requisition/generate.rs
index 2338fb348..6d70d0830 100644
--- a/server/service/src/requisition/request_requisition/generate.rs
+++ b/server/service/src/requisition/request_requisition/generate.rs
@@ -6,8 +6,8 @@ use crate::item_stats::{get_item_stats, ItemStatsFilter};
 use crate::service_provider::ServiceContext;
 
 pub struct GenerateSuggestedQuantity {
-    pub average_monthly_consumption: f64,
-    pub available_stock_on_hand: f64,
+    pub average_monthly_consumption: i32,
+    pub available_stock_on_hand: i32,
     pub min_months_of_stock: f64,
     pub max_months_of_stock: f64,
 }
@@ -19,9 +19,9 @@ pub fn generate_suggested_quantity(
         min_months_of_stock,
         max_months_of_stock,
     }: GenerateSuggestedQuantity,
-) -> f64 {
-    if average_monthly_consumption == 0.0 {
-        return 0.0;
+) -> i32 {
+    if average_monthly_consumption == 0 {
+        return 0;
     }
     let months_of_stock = available_stock_on_hand as f64 / average_monthly_consumption as f64;
 
@@ -32,10 +32,10 @@ pub fn generate_suggested_quantity(
     };
 
     if max_months_of_stock == 0.0 || (months_of_stock > default_min_months_of_stock) {
-        return 0.0;
+        return 0;
     }
 
-    (max_months_of_stock - months_of_stock) * average_monthly_consumption
+    ((max_months_of_stock - months_of_stock) * average_monthly_consumption as f64) as i32
 }
 
 pub fn generate_requisition_lines(
@@ -54,8 +54,8 @@ pub fn generate_requisition_lines(
     let result = item_stats_rows
         .into_iter()
         .map(|item_stats| {
-            let average_monthly_consumption = item_stats.average_monthly_consumption;
-            let available_stock_on_hand = item_stats.available_stock_on_hand;
+            let average_monthly_consumption = item_stats.average_monthly_consumption as i32;
+            let available_stock_on_hand = item_stats.available_stock_on_hand as i32;
             let suggested_quantity = generate_suggested_quantity(GenerateSuggestedQuantity {
                 average_monthly_consumption,
                 available_stock_on_hand,
@@ -74,9 +74,9 @@ pub fn generate_requisition_lines(
                 snapshot_datetime: Some(Utc::now().naive_utc()),
                 // Default
                 comment: None,
-                supply_quantity: 0.0,
-                requested_quantity: 0.0,
-                approved_quantity: 0.0,
+                supply_quantity: 0,
+                requested_quantity: 0,
+                approved_quantity: 0,
                 approval_comment: None,
             }
         })
diff --git a/server/service/src/requisition/request_requisition/insert_program.rs b/server/service/src/requisition/request_requisition/insert_program.rs
index 9183415a9..59db9522c 100644
--- a/server/service/src/requisition/request_requisition/insert_program.rs
+++ b/server/service/src/requisition/request_requisition/insert_program.rs
@@ -168,11 +168,10 @@ fn generate(
         linked_requisition_id: None,
     };
 
-    let master_list_id = program.master_list_id.clone().unwrap_or_default();
-
     let program_item_ids: Vec<String> = MasterListLineRepository::new(connection)
         .query_by_filter(
-            MasterListLineFilter::new().master_list_id(EqualFilter::equal_to(&master_list_id)),
+            MasterListLineFilter::new()
+                .master_list_id(EqualFilter::equal_to(&program.master_list_id)),
         )?
         .into_iter()
         .map(|line| line.item_id)
diff --git a/server/service/src/requisition/request_requisition/update/generate.rs b/server/service/src/requisition/request_requisition/update/generate.rs
index 20a90e6c8..0258c684a 100644
--- a/server/service/src/requisition/request_requisition/update/generate.rs
+++ b/server/service/src/requisition/request_requisition/update/generate.rs
@@ -130,7 +130,7 @@ pub fn empty_lines_to_trim(
     let lines = RequisitionLineRepository::new(connection).query_by_filter(
         RequisitionLineFilter::new()
             .requisition_id(EqualFilter::equal_to(&requisition.id))
-            .requested_quantity(EqualFilter::equal_to_f64(0.0)),
+            .requested_quantity(EqualFilter::equal_to_i32(0)),
     )?;
 
     if lines.is_empty() {
diff --git a/server/service/src/requisition/request_requisition/update/test.rs b/server/service/src/requisition/request_requisition/update/test.rs
index 8db96f6d2..af8948e29 100644
--- a/server/service/src/requisition/request_requisition/update/test.rs
+++ b/server/service/src/requisition/request_requisition/update/test.rs
@@ -240,27 +240,27 @@ mod test_update {
             .find_one_by_id(&calculation_requisition.lines[0].id)
             .unwrap()
             .unwrap();
-        assert_eq!(line.suggested_quantity, 19.0);
+        assert_eq!(line.suggested_quantity, 19);
 
         // Average monthly consumption = 0
         let line = requisition_line_row_repo
             .find_one_by_id(&calculation_requisition.lines[1].id)
             .unwrap()
             .unwrap();
-        assert_eq!(line.suggested_quantity, 0.0);
+        assert_eq!(line.suggested_quantity, 0);
 
         // Above threshold MOS
         let line = requisition_line_row_repo
             .find_one_by_id(&calculation_requisition.lines[2].id)
             .unwrap()
             .unwrap();
-        assert_eq!(line.suggested_quantity, 0.0);
+        assert_eq!(line.suggested_quantity, 0);
 
         // Above max MOS
         let line = requisition_line_row_repo
             .find_one_by_id(&calculation_requisition.lines[3].id)
             .unwrap()
             .unwrap();
-        assert_eq!(line.suggested_quantity, 0.0);
+        assert_eq!(line.suggested_quantity, 0);
     }
 }
diff --git a/server/service/src/requisition/response_requisition/create_requisition_shipment/generate.rs b/server/service/src/requisition/response_requisition/create_requisition_shipment/generate.rs
index 4212e83e6..8172f2a15 100644
--- a/server/service/src/requisition/response_requisition/create_requisition_shipment/generate.rs
+++ b/server/service/src/requisition/response_requisition/create_requisition_shipment/generate.rs
@@ -77,7 +77,7 @@ pub fn generate_invoice_lines(
         invoice_line_rows.push(InvoiceLineRow {
             id: uuid(),
             invoice_id: invoice_id.to_owned(),
-            pack_size: 1.0,
+            pack_size: 1,
             number_of_packs: requisition_line_supply_status.remaining_quantity(),
             item_link_id: item_row.id,
             item_code: item_row.code,
diff --git a/server/service/src/requisition/response_requisition/create_requisition_shipment/test.rs b/server/service/src/requisition/response_requisition/create_requisition_shipment/test.rs
index 3f2d97ca4..b3b203c9d 100644
--- a/server/service/src/requisition/response_requisition/create_requisition_shipment/test.rs
+++ b/server/service/src/requisition/response_requisition/create_requisition_shipment/test.rs
@@ -103,7 +103,6 @@ mod test_update {
 
         let invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id(&invoice.invoice_row.id)
-            .unwrap()
             .unwrap();
 
         assert_eq!(
@@ -146,7 +145,7 @@ mod test_update {
                 &context,
                 inline_init(|r: &mut UpdateResponseRequisitionLine| {
                     r.id = mock_new_response_requisition_test().lines[0].id.clone();
-                    r.supply_quantity = Some(100.0);
+                    r.supply_quantity = Some(100);
                 }),
             )
             .unwrap();
@@ -162,7 +161,6 @@ mod test_update {
 
         let invoice = InvoiceRowRepository::new(&connection)
             .find_one_by_id(&invoice.invoice_row.id)
-            .unwrap()
             .unwrap();
 
         assert_eq!(
diff --git a/server/service/src/requisition/response_requisition/supply_requested_quantity.rs b/server/service/src/requisition/response_requisition/supply_requested_quantity.rs
index 3ab0c88c2..49d9dbfa4 100644
--- a/server/service/src/requisition/response_requisition/supply_requested_quantity.rs
+++ b/server/service/src/requisition/response_requisition/supply_requested_quantity.rs
@@ -283,7 +283,7 @@ mod test {
             let row = requisition_line_row.requisition_line_row;
             line_repo
                 .upsert_one(&RequisitionLineRow {
-                    approved_quantity: row.requested_quantity + 3.0,
+                    approved_quantity: row.requested_quantity + 3,
                     ..row
                 })
                 .unwrap();
diff --git a/server/service/src/requisition_line/chart/historic_consumption.rs b/server/service/src/requisition_line/chart/historic_consumption.rs
index b938da851..90685467f 100644
--- a/server/service/src/requisition_line/chart/historic_consumption.rs
+++ b/server/service/src/requisition_line/chart/historic_consumption.rs
@@ -135,7 +135,7 @@ fn calculate_consumption(
     consumption_rows: &Vec<ConsumptionRow>,
 ) -> ConsumptionHistory {
     // https://github.com/openmsupply/remote-server/issues/972
-    let total_consumption_amc = consumption_rows.iter().fold(0.0, |sum, row| {
+    let total_consumption_amc = consumption_rows.iter().fold(0, |sum, row| {
         if within_range(&start_of_amc_lookup, &end_of_amc_lookup, &row.date) {
             sum + row.quantity
         } else {
@@ -144,7 +144,7 @@ fn calculate_consumption(
     });
     let days_in_amc_lookup = (end_of_amc_lookup - start_of_amc_lookup).num_days();
 
-    let consumption = consumption_rows.iter().fold(0.0, |sum, row| {
+    let consumption = consumption_rows.iter().fold(0, |sum, row| {
         if within_range(
             &start_of_consumption_lookup,
             &end_of_consumption_lookup,
@@ -227,47 +227,47 @@ mod tests {
                 &vec![
                     inline_init(|r: &mut ConsumptionRow| {
                         r.date = NaiveDate::from_ymd_opt(2021, 2, 1).unwrap();
-                        r.quantity = 1000.0;
+                        r.quantity = 1000;
                     }),
                     inline_init(|r: &mut ConsumptionRow| {
                         r.date = NaiveDate::from_ymd_opt(2021, 1, 31).unwrap();
-                        r.quantity = 10.0;
+                        r.quantity = 10;
                     }),
                     inline_init(|r: &mut ConsumptionRow| {
                         r.date = NaiveDate::from_ymd_opt(2021, 1, 20).unwrap();
-                        r.quantity = 10.0;
+                        r.quantity = 10;
                     }),
                     inline_init(|r: &mut ConsumptionRow| {
                         r.date = NaiveDate::from_ymd_opt(2020, 12, 3).unwrap();
-                        r.quantity = 10.0;
+                        r.quantity = 10;
                     }),
                     inline_init(|r: &mut ConsumptionRow| {
                         r.date = NaiveDate::from_ymd_opt(2020, 12, 2).unwrap();
-                        r.quantity = 10.0;
+                        r.quantity = 10;
                     }),
                     inline_init(|r: &mut ConsumptionRow| {
                         r.date = NaiveDate::from_ymd_opt(2020, 11, 11).unwrap();
-                        r.quantity = 10.0;
+                        r.quantity = 10;
                     }),
                     inline_init(|r: &mut ConsumptionRow| {
                         r.date = NaiveDate::from_ymd_opt(2020, 10, 5).unwrap();
-                        r.quantity = 10.0;
+                        r.quantity = 10;
                     }),
                     inline_init(|r: &mut ConsumptionRow| {
                         r.date = NaiveDate::from_ymd_opt(2020, 10, 7).unwrap();
-                        r.quantity = 10.0;
+                        r.quantity = 10;
                     }),
                     inline_init(|r: &mut ConsumptionRow| {
                         r.date = NaiveDate::from_ymd_opt(2020, 10, 1).unwrap();
-                        r.quantity = 10.0;
+                        r.quantity = 10;
                     }),
                     inline_init(|r: &mut ConsumptionRow| {
                         r.date = NaiveDate::from_ymd_opt(2020, 9, 30).unwrap();
-                        r.quantity = 1000.0;
+                        r.quantity = 1000;
                     }),
                     inline_init(|r: &mut ConsumptionRow| {
                         r.date = NaiveDate::from_ymd_opt(2020, 2, 10).unwrap();
-                        r.quantity = 1000.0;
+                        r.quantity = 1000;
                     })
                 ]
             ),
diff --git a/server/service/src/requisition_line/chart/mod.rs b/server/service/src/requisition_line/chart/mod.rs
index 6db3e308c..5f14d74d0 100644
--- a/server/service/src/requisition_line/chart/mod.rs
+++ b/server/service/src/requisition_line/chart/mod.rs
@@ -270,7 +270,7 @@ mod test {
                         .and_hms_opt(0, 0, 0)
                         .unwrap(),
                 );
-                r.average_monthly_consumption = 333.0;
+                r.average_monthly_consumption = 333;
             })
         }
 
@@ -289,13 +289,13 @@ mod test {
                     r.item_link_id = mock_item_a().id;
                     r.r#type = InvoiceLineType::StockOut;
                     r.stock_line_id = Some(format!("{}stock_line", invoice_id));
-                    r.pack_size = 1.0;
+                    r.pack_size = 1;
                 })];
                 r.stock_lines = vec![inline_init(|r: &mut StockLineRow| {
                     r.id = format!("{}stock_line", invoice_id);
                     r.store_id = store().id;
                     r.item_link_id = mock_item_a().id;
-                    r.pack_size = 1.0;
+                    r.pack_size = 1;
                 })];
             })
         }
@@ -514,9 +514,9 @@ mod test {
                         .and_hms_opt(12, 10, 11)
                         .unwrap(),
                 );
-                r.average_monthly_consumption = 25.0 * NUMBER_OF_DAYS_IN_A_MONTH;
-                r.available_stock_on_hand = 30.0;
-                r.requested_quantity = 100.0;
+                r.average_monthly_consumption = 25 * NUMBER_OF_DAYS_IN_A_MONTH as i32;
+                r.available_stock_on_hand = 30;
+                r.requested_quantity = 100;
             })
         }
 
@@ -535,13 +535,13 @@ mod test {
                     r.item_link_id = mock_item_a().id;
                     r.r#type = InvoiceLineType::StockOut;
                     r.stock_line_id = Some(format!("{}stock_line", invoice_id));
-                    r.pack_size = 1.0;
+                    r.pack_size = 1;
                 })];
                 r.stock_lines = vec![inline_init(|r: &mut StockLineRow| {
                     r.id = format!("{}stock_line", invoice_id);
                     r.store_id = store().id;
                     r.item_link_id = mock_item_a().id;
-                    r.pack_size = 1.0;
+                    r.pack_size = 1;
                 })];
             })
         }
diff --git a/server/service/src/requisition_line/chart/stock_evolution.rs b/server/service/src/requisition_line/chart/stock_evolution.rs
index 1ba3b1328..6cd33c12d 100644
--- a/server/service/src/requisition_line/chart/stock_evolution.rs
+++ b/server/service/src/requisition_line/chart/stock_evolution.rs
@@ -144,7 +144,7 @@ fn calculate_historic_stock_evolution(
         // On reference_datetime's date we should should have reference_stock_on_hand
         // SOH at the start of next day is current day SOH
         let next_day = date_with_days_offset(&reference_date, 1);
-        let day_movements = stock_on_hand_rows.iter().fold(0.0, |movement, row| {
+        let day_movements = stock_on_hand_rows.iter().fold(0, |movement, row| {
             if within_range(next_day, row.datetime) {
                 movement + row.quantity
             } else {
@@ -254,28 +254,28 @@ mod tests {
                 ],
                 vec![
                     inline_init(|r: &mut StockMovementRow| {
-                        r.quantity = 10.0;
+                        r.quantity = 10;
                         r.datetime = NaiveDate::from_ymd_opt(2021, 1, 2)
                             .unwrap()
                             .and_hms_opt(10, 0, 0)
                             .unwrap();
                     }),
                     inline_init(|r: &mut StockMovementRow| {
-                        r.quantity = -20.0;
+                        r.quantity = -20;
                         r.datetime = NaiveDate::from_ymd_opt(2021, 1, 2)
                             .unwrap()
                             .and_hms_opt(7, 0, 0)
                             .unwrap();
                     }),
                     inline_init(|r: &mut StockMovementRow| {
-                        r.quantity = 15.0;
+                        r.quantity = 15;
                         r.datetime = NaiveDate::from_ymd_opt(2021, 1, 1)
                             .unwrap()
                             .and_hms_opt(2, 0, 0)
                             .unwrap();
                     }),
                     inline_init(|r: &mut StockMovementRow| {
-                        r.quantity = 7.0;
+                        r.quantity = 7;
                         r.datetime = NaiveDate::from_ymd_opt(2021, 1, 1)
                             .unwrap()
                             .and_hms_opt(2, 0, 0)
@@ -283,7 +283,7 @@ mod tests {
                     }),
                     // Not counted
                     inline_init(|r: &mut StockMovementRow| {
-                        r.quantity = -20.0;
+                        r.quantity = -20;
                         r.datetime = NaiveDate::from_ymd_opt(2020, 12, 31)
                             .unwrap()
                             .and_hms_opt(2, 0, 0)
@@ -291,7 +291,7 @@ mod tests {
                     }),
                     // Not counted
                     inline_init(|r: &mut StockMovementRow| {
-                        r.quantity = -100.0;
+                        r.quantity = -100;
                         r.datetime = NaiveDate::from_ymd_opt(2021, 1, 3)
                             .unwrap()
                             .and_hms_opt(2, 0, 0)
diff --git a/server/service/src/requisition_line/request_requisition_line/insert.rs b/server/service/src/requisition_line/request_requisition_line/insert.rs
index 82038a99b..5a5c85cbd 100644
--- a/server/service/src/requisition_line/request_requisition_line/insert.rs
+++ b/server/service/src/requisition_line/request_requisition_line/insert.rs
@@ -21,7 +21,7 @@ pub struct InsertRequestRequisitionLine {
     pub id: String,
     pub item_id: String,
     pub requisition_id: String,
-    pub requested_quantity: Option<f64>,
+    pub requested_quantity: Option<u32>,
     pub comment: Option<String>,
 }
 
@@ -123,7 +123,7 @@ fn generate(
             .pop()
             .ok_or(OutError::CannotFindItemStatusForRequisitionLine)?;
 
-    new_requisition_line.requested_quantity = requested_quantity.unwrap_or(0.0);
+    new_requisition_line.requested_quantity = requested_quantity.unwrap_or(0) as i32;
     new_requisition_line.id = id;
     new_requisition_line.comment = comment.or(new_requisition_line.comment);
 
@@ -301,7 +301,7 @@ mod test {
                         .id,
                     id: "new requisition line id".to_owned(),
                     item_id: test_item_stats::item2().id,
-                    requested_quantity: Some(20.0),
+                    requested_quantity: Some(20),
                     comment: Some("comment".to_string()),
                 },
             )
@@ -315,11 +315,11 @@ mod test {
         assert_eq!(
             line,
             inline_edit(&line, |mut u| {
-                u.requested_quantity = 20.0;
-                u.available_stock_on_hand = test_item_stats::item_2_soh() as f64;
-                u.average_monthly_consumption = test_item_stats::item2_amc_3_months() as f64;
-                u.suggested_quantity = test_item_stats::item2_amc_3_months() as f64 * 10.0
-                    - test_item_stats::item_2_soh() as f64;
+                u.requested_quantity = 20;
+                u.available_stock_on_hand = test_item_stats::item_2_soh() as i32;
+                u.average_monthly_consumption = test_item_stats::item2_amc_3_months() as i32;
+                u.suggested_quantity = test_item_stats::item2_amc_3_months() as i32 * 10
+                    - test_item_stats::item_2_soh() as i32;
                 u.comment = Some("comment".to_string());
                 u
             })
@@ -332,7 +332,7 @@ mod test {
                 r.requisition_id = mock_request_draft_requisition().id;
                 r.id = "new requisition line id2".to_owned();
                 r.item_id = mock_item_c().id;
-                r.requested_quantity = Some(20.0);
+                r.requested_quantity = Some(20);
             }),
         );
 
diff --git a/server/service/src/requisition_line/request_requisition_line/update.rs b/server/service/src/requisition_line/request_requisition_line/update.rs
index 64ee54492..d0b9fb442 100644
--- a/server/service/src/requisition_line/request_requisition_line/update.rs
+++ b/server/service/src/requisition_line/request_requisition_line/update.rs
@@ -14,7 +14,7 @@ use util::inline_edit;
 #[derive(Debug, PartialEq, Clone, Default)]
 pub struct UpdateRequestRequisitionLine {
     pub id: String,
-    pub requested_quantity: Option<f64>,
+    pub requested_quantity: Option<u32>,
     pub comment: Option<String>,
 }
 
@@ -90,7 +90,8 @@ fn generate(
     }: UpdateRequestRequisitionLine,
 ) -> RequisitionLineRow {
     inline_edit(&existing, |mut u| {
-        u.requested_quantity = updated_requested_quantity.unwrap_or(u.requested_quantity);
+        u.requested_quantity =
+            updated_requested_quantity.unwrap_or(u.requested_quantity as u32) as i32;
         u.comment = updated_comment.or(u.comment);
         u
     })
@@ -207,7 +208,7 @@ mod test {
                 &context,
                 UpdateRequestRequisitionLine {
                     id: test_line.id.clone(),
-                    requested_quantity: Some(99.0),
+                    requested_quantity: Some(99),
                     comment: Some("comment".to_string()),
                 },
             )
@@ -221,7 +222,7 @@ mod test {
         assert_eq!(
             line,
             inline_edit(&test_line, |mut u| {
-                u.requested_quantity = 99.0;
+                u.requested_quantity = 99;
                 u.comment = Some("comment".to_string());
                 u
             })
diff --git a/server/service/src/requisition_line/response_line_stats/mod.rs b/server/service/src/requisition_line/response_line_stats/mod.rs
index 050f76dec..28d920283 100644
--- a/server/service/src/requisition_line/response_line_stats/mod.rs
+++ b/server/service/src/requisition_line/response_line_stats/mod.rs
@@ -138,7 +138,7 @@ mod test {
             r.id = "requisition_line_one_a".to_string();
             r.requisition_id = "requisition_one".to_string();
             r.item_link_id = "item_d".to_string();
-            r.requested_quantity = 20.0;
+            r.requested_quantity = 20;
         })
     }
 
@@ -147,10 +147,10 @@ mod test {
             r.id = "requisition_line_one_b".to_string();
             r.requisition_id = "requisition_one".to_string();
             r.item_link_id = "item_e".to_string();
-            r.requested_quantity = 15.0;
-            r.available_stock_on_hand = 10.0;
-            r.average_monthly_consumption = 50.0;
-            r.suggested_quantity = 240.0;
+            r.requested_quantity = 15;
+            r.available_stock_on_hand = 10;
+            r.average_monthly_consumption = 50;
+            r.suggested_quantity = 240;
         })
     }
 
@@ -172,7 +172,7 @@ mod test {
             r.id = "requisition_line_two_a".to_string();
             r.requisition_id = "requisition_two".to_string();
             r.item_link_id = "item_e".to_string();
-            r.requested_quantity = 20.0;
+            r.requested_quantity = 20;
         })
     }
 
@@ -194,7 +194,7 @@ mod test {
             r.id = "request_requisition_a_line_a".to_string();
             r.requisition_id = "request_requisition_a".to_string();
             r.item_link_id = "item_e".to_string();
-            r.requested_quantity = 100.0;
+            r.requested_quantity = 100;
         })
     }
 
@@ -216,7 +216,7 @@ mod test {
             r.id = "request_requisition_b_line_a".to_string();
             r.requisition_id = "request_requisition_b".to_string();
             r.item_link_id = "item_e".to_string();
-            r.requested_quantity = 100.0;
+            r.requested_quantity = 100;
         })
     }
 
diff --git a/server/service/src/requisition_line/response_line_stats/response_line_stats.rs b/server/service/src/requisition_line/response_line_stats/response_line_stats.rs
index 4c0149b1b..6da748376 100644
--- a/server/service/src/requisition_line/response_line_stats/response_line_stats.rs
+++ b/server/service/src/requisition_line/response_line_stats/response_line_stats.rs
@@ -7,10 +7,10 @@ use repository::{
 
 #[derive(Clone, Debug, PartialEq, Default)]
 pub struct RequestStoreStats {
-    pub stock_on_hand: f64,
-    pub amc: f64,
+    pub stock_on_hand: i32,
+    pub amc: i32,
     pub max_months_of_stock: f64,
-    pub suggested_quantity: f64,
+    pub suggested_quantity: i32,
 }
 
 pub fn customer_store_stats(
@@ -31,10 +31,10 @@ pub fn customer_store_stats(
 #[derive(Clone, Debug, PartialEq, Default)]
 pub struct ResponseStoreStats {
     pub stock_on_hand: f64,
-    pub stock_on_order: f64, // Internal Order
+    pub stock_on_order: i32, // Internal Order
     pub incoming_stock: i32, // Linked Inbound - Shipped
-    pub requested_quantity: f64,
-    pub other_requested_quantity: f64,
+    pub requested_quantity: i32,
+    pub other_requested_quantity: i32,
 }
 
 pub fn response_store_stats(
@@ -64,7 +64,7 @@ pub fn response_store_stats(
 
     let stock_on_order = request_requisitions
         .iter()
-        .fold(0.0, |sum, requisition_line| {
+        .fold(0, |sum, requisition_line| {
             sum + requisition_line.requisition_line_row.requested_quantity
         });
 
@@ -78,8 +78,8 @@ pub fn response_store_stats(
     )?;
 
     let incoming_stock = invoice_lines.iter().fold(0, |sum, invoice_line| {
-        sum + (invoice_line.invoice_line_row.number_of_packs
-            * invoice_line.invoice_line_row.pack_size) as i32
+        sum + invoice_line.invoice_line_row.number_of_packs as i32
+            * invoice_line.invoice_line_row.pack_size
     });
 
     let response_requisition_lines = RequisitionLineRepository::new(connection).query_by_filter(
@@ -92,7 +92,7 @@ pub fn response_store_stats(
 
     let other_requested_quantity = (response_requisition_lines
         .iter()
-        .fold(0.0, |sum, requisition_line| {
+        .fold(0, |sum, requisition_line| {
             sum + requisition_line.requisition_line_row.requested_quantity
         }))
         - requisition_line.requisition_line_row.requested_quantity;
diff --git a/server/service/src/requisition_line/response_requisition_line/update.rs b/server/service/src/requisition_line/response_requisition_line/update.rs
index 766f6357b..554b7fd0c 100644
--- a/server/service/src/requisition_line/response_requisition_line/update.rs
+++ b/server/service/src/requisition_line/response_requisition_line/update.rs
@@ -16,7 +16,7 @@ use util::inline_edit;
 #[derive(Debug, PartialEq, Default)]
 pub struct UpdateResponseRequisitionLine {
     pub id: String,
-    pub supply_quantity: Option<f64>,
+    pub supply_quantity: Option<u32>,
     pub comment: Option<String>,
 }
 
@@ -104,7 +104,7 @@ fn generate(
     }: UpdateResponseRequisitionLine,
 ) -> (Option<RequisitionRow>, RequisitionLineRow) {
     let requisition_line_row = inline_edit(&existing, |mut u| {
-        u.supply_quantity = updated_supply_quantity.unwrap_or(u.supply_quantity);
+        u.supply_quantity = updated_supply_quantity.unwrap_or(u.supply_quantity as u32) as i32;
         u.comment = updated_comment.or(u.comment);
         u
     });
@@ -234,7 +234,7 @@ mod test {
                 &context,
                 UpdateResponseRequisitionLine {
                     id: test_line.id.clone(),
-                    supply_quantity: Some(99.0),
+                    supply_quantity: Some(99),
                     comment: Some("comment".to_string()),
                 },
             )
@@ -248,7 +248,7 @@ mod test {
         assert_eq!(
             line,
             inline_edit(&test_line, |mut u| {
-                u.supply_quantity = 99.0;
+                u.supply_quantity = 99;
                 u.comment = Some("comment".to_string());
                 u
             })
diff --git a/server/service/src/service_provider.rs b/server/service/src/service_provider.rs
index 43beb2438..a3555ddbb 100644
--- a/server/service/src/service_provider.rs
+++ b/server/service/src/service_provider.rs
@@ -13,7 +13,6 @@ use crate::{
         requisition_count::{RequisitionCountService, RequisitionCountServiceTrait},
         stock_expiry_count::{StockExpiryCountServiceTrait, StockExpiryServiceCount},
     },
-    demographic::DemographicServiceTrait,
     display_settings_service::{DisplaySettingsService, DisplaySettingsServiceTrait},
     document::{
         document_registry::{DocumentRegistryService, DocumentRegistryServiceTrait},
@@ -32,7 +31,6 @@ use crate::{
     pack_variant::PackVariantServiceTrait,
     plugin_data::{PluginDataService, PluginDataServiceTrait},
     processors::ProcessorsTrigger,
-    program::ProgramServiceTrait,
     programs::{
         contact_trace::{ContactTraceService, ContactTraceServiceTrait},
         encounter::{EncounterService, EncounterServiceTrait},
@@ -57,7 +55,6 @@ use crate::{
     },
     system_user::create_system_user,
     temperature_excursion::{TemperatureExcursionService, TemperatureExcursionServiceTrait},
-    vaccine_course::VaccineCourseServiceTrait,
     ListError, ListResult,
 };
 use repository::{
@@ -135,11 +132,6 @@ pub struct ServiceProvider {
     pub asset_service: Box<dyn AssetServiceTrait>,
     // Label Printer
     pub label_printer_settings_service: Box<dyn LabelPrinterSettingsServiceTrait>,
-    // Demographic
-    pub demographic_service: Box<dyn DemographicServiceTrait>,
-    // Vaccine Course
-    pub vaccine_course_service: Box<dyn VaccineCourseServiceTrait>,
-    pub program_service: Box<dyn ProgramServiceTrait>,
 }
 
 pub struct ServiceContext {
@@ -220,9 +212,6 @@ impl ServiceProvider {
             label_printer_settings_service: Box::new(
                 crate::label_printer_settings_service::LabelPrinterSettingsService {},
             ),
-            demographic_service: Box::new(crate::demographic::DemographicService {}),
-            vaccine_course_service: Box::new(crate::vaccine_course::VaccineCourseService {}),
-            program_service: Box::new(crate::program::ProgramService {}),
         }
     }
 
diff --git a/server/service/src/stock_line/tests/update.rs b/server/service/src/stock_line/tests/update.rs
index f42c99554..43b57af28 100644
--- a/server/service/src/stock_line/tests/update.rs
+++ b/server/service/src/stock_line/tests/update.rs
@@ -89,7 +89,6 @@ mod test {
 
         let stock_line = StockLineRowRepository::new(&connection)
             .find_one_by_id(&mock_stock_line_a().id)
-            .unwrap()
             .unwrap();
 
         assert_eq!(
diff --git a/server/service/src/stocktake/update.rs b/server/service/src/stocktake/update.rs
index eb10aa3ec..56c7145e5 100644
--- a/server/service/src/stocktake/update.rs
+++ b/server/service/src/stocktake/update.rs
@@ -2,9 +2,8 @@ use chrono::{NaiveDate, Utc};
 use repository::{
     location_movement::{LocationMovementFilter, LocationMovementRepository},
     ActivityLogType, CurrencyFilter, CurrencyRepository, DatetimeFilter, EqualFilter,
-    InvoiceLineRow, InvoiceLineRowRepository, InvoiceLineType, InvoiceRow, InvoiceRowRepository,
-    InvoiceStatus, InvoiceType, ItemLinkRowRepository, ItemRowRepository, LocationMovementRow,
-    LocationMovementRowRepository, NameLinkRowRepository, NameRowRepository, NumberRowType,
+    InvoiceLineRowRepository, InvoiceRow, InvoiceRowRepository, InvoiceStatus, InvoiceType,
+    LocationMovementRow, LocationMovementRowRepository, NameRowRepository, NumberRowType,
     RepositoryError, StockLine, StockLineFilter, StockLineRepository, StockLineRow,
     StockLineRowRepository, Stocktake, StocktakeLine, StocktakeLineFilter, StocktakeLineRepository,
     StocktakeLineRow, StocktakeLineRowRepository, StocktakeRow, StocktakeRowRepository,
@@ -13,8 +12,22 @@ use repository::{
 use util::{constants::INVENTORY_ADJUSTMENT_NAME_CODE, inline_edit, uuid::uuid};
 
 use crate::{
-    activity_log::activity_log_entry, number::next_number, service_provider::ServiceContext,
-    stocktake::query::get_stocktake, validate::check_store_id_matches,
+    activity_log::activity_log_entry,
+    i32_to_u32,
+    invoice::inventory_adjustment::UpdateInventoryAdjustmentReason,
+    invoice_line::{
+        stock_in_line::{
+            insert_stock_in_line, InsertStockInLine, InsertStockInLineError, StockInType,
+        },
+        stock_out_line::{
+            insert_stock_out_line, InsertStockOutLine, InsertStockOutLineError, StockOutType,
+        },
+    },
+    number::next_number,
+    service_provider::ServiceContext,
+    stocktake::query::get_stocktake,
+    validate::check_store_id_matches,
+    NullableUpdate,
 };
 
 use super::validate::{check_stocktake_exist, check_stocktake_not_finalised};
@@ -48,6 +61,14 @@ pub enum UpdateStocktakeError {
     StocktakeDoesNotExist,
     CannotEditFinalised,
     StocktakeIsLocked,
+    InsertStockInLineError {
+        line_id: String,
+        error: InsertStockInLineError,
+    },
+    InsertStockOutLineError {
+        line_id: String,
+        error: InsertStockOutLineError,
+    },
     /// Stocktakes doesn't contain any lines
     NoLines,
     /// Holds list of affected stock lines
@@ -179,13 +200,15 @@ pub fn check_stocktake_is_not_locked(input: &UpdateStocktake, existing: &Stockta
 struct StocktakeGenerateJob {
     stocktake: StocktakeRow,
     // list of stocktake lines to be updated, e.g. to link newly created stock_lines during
-    // stocktake finialisation.
+    // stocktake finalisation.
     stocktake_lines: Vec<StocktakeLineRow>,
 
     // new inventory adjustment
     inventory_addition: Option<InvoiceRow>,
     inventory_reduction: Option<InvoiceRow>,
-    inventory_adjustment_lines: Vec<InvoiceLineRow>,
+    inventory_addition_lines: Vec<InsertStockInLine>,
+    inventory_reduction_lines: Vec<InsertStockOutLine>,
+    inventory_adjustment_reason_updates: Vec<UpdateInventoryAdjustmentReason>,
 
     // list of stock_line upserts
     stock_lines: Vec<StockLineRow>,
@@ -194,16 +217,32 @@ struct StocktakeGenerateJob {
     location_movements: Option<Vec<LocationMovementRow>>,
 }
 
+pub enum StockChange {
+    StockIn(InsertStockInLine),
+    StockOut(InsertStockOutLine),
+    StockUpdate(StockLineRow),
+}
+
 /// Contains entities to be updated when a stock line is update/created
 struct StockLineJob {
-    stock_line: StockLineRow,
-    invoice_line: Option<InvoiceLineRow>,
+    stock_in_out_or_update: Option<StockChange>,
     stocktake_line: Option<StocktakeLineRow>,
     location_movement: Option<LocationMovementRow>,
+    update_inventory_adjustment_reason: Option<UpdateInventoryAdjustmentReason>,
+}
+
+fn generate_update_inventory_adjustment_reason(
+    invoice_line_id: String,
+    inventory_adjustment_reason_id: Option<String>,
+) -> Option<UpdateInventoryAdjustmentReason> {
+    inventory_adjustment_reason_id.map(|reason_id| UpdateInventoryAdjustmentReason {
+        reason_id: Some(reason_id),
+        invoice_line_id,
+    })
 }
 
 /// Returns new stock line and matching invoice line
-fn generate_stock_line_update(
+fn generate_stock_in_out_or_update(
     connection: &StorageConnection,
     store_id: &str,
     inventory_addition_id: &str,
@@ -211,235 +250,186 @@ fn generate_stock_line_update(
     stocktake_line: &StocktakeLine,
     stock_line: &StockLineRow,
 ) -> Result<StockLineJob, UpdateStocktakeError> {
-    let counted_number_of_packs = stocktake_line
-        .line
+    let row = stocktake_line.line.to_owned();
+
+    let counted_number_of_packs = row
         .counted_number_of_packs
         .unwrap_or(stocktake_line.line.snapshot_number_of_packs);
-    let delta = counted_number_of_packs - stocktake_line.line.snapshot_number_of_packs;
-
-    let stock_line_item_id = ItemLinkRowRepository::new(connection)
-        .find_one_by_id(&stock_line.item_link_id)?
-        .ok_or(UpdateStocktakeError::InternalError(format!(
-            "Item link ({}) not found",
-            stock_line.item_link_id
-        )))?
-        .item_id;
-    let stock_line_supplier_id = if let Some(supplier_link_id) = &stock_line.supplier_link_id {
-        Some(
-            NameLinkRowRepository::new(connection)
-                .find_one_by_id(supplier_link_id)?
-                .ok_or(UpdateStocktakeError::InternalError(format!(
-                    "Name link ({}) not found",
-                    supplier_link_id
-                )))?
-                .name_id,
-        )
-    } else {
-        None
-    };
+    let delta = counted_number_of_packs - row.snapshot_number_of_packs;
+
+    let stock_line_row = stock_line.to_owned();
+
+    let pack_size = row.pack_size.unwrap_or(stock_line_row.pack_size);
+    let expiry_date = row.expiry_date.or(stock_line_row.expiry_date);
+    let cost_price_per_pack = row
+        .cost_price_per_pack
+        .unwrap_or(stock_line_row.cost_price_per_pack);
+    let sell_price_per_pack = row
+        .sell_price_per_pack
+        .unwrap_or(stock_line_row.sell_price_per_pack);
+
+    // If no change in stock quantity, we just update the stock line (no inventory adjustment)
+    if delta == 0.0 {
+        let updated_stock_line = StockLineRow {
+            location_id: row.location_id,
+            batch: row.batch,
+            pack_size,
+            cost_price_per_pack,
+            sell_price_per_pack,
+            expiry_date,
+            ..stock_line_row
+        }
+        .to_owned();
 
-    let updated_line = StockLineRow {
-        id: stock_line.id.clone(),
-        item_link_id: stock_line_item_id.clone(),
-        store_id: stock_line.store_id.clone(),
-        location_id: stocktake_line.line.location_id.clone(),
-        batch: stocktake_line.line.batch.clone(),
-        pack_size: stocktake_line
-            .line
-            .pack_size
-            .unwrap_or(stock_line.pack_size),
-        cost_price_per_pack: stocktake_line
-            .line
-            .cost_price_per_pack
-            .unwrap_or(stock_line.cost_price_per_pack),
-        sell_price_per_pack: stocktake_line
-            .line
-            .sell_price_per_pack
-            .unwrap_or(stock_line.sell_price_per_pack),
-        // TODO might get negative!
-        available_number_of_packs: stock_line.available_number_of_packs + delta,
-        total_number_of_packs: stock_line.total_number_of_packs + delta,
-        expiry_date: stocktake_line.line.expiry_date.or(stock_line.expiry_date),
-        on_hold: stock_line.on_hold,
-        note: stock_line.note.clone(),
-        supplier_link_id: stock_line_supplier_id,
-        barcode_id: stock_line.barcode_id.clone(),
+        return Ok(StockLineJob {
+            stock_in_out_or_update: Some(StockChange::StockUpdate(updated_stock_line)),
+            stocktake_line: None,
+            location_movement: None,
+            update_inventory_adjustment_reason: None,
+        });
     };
 
-    let stock_line_item =
-        match ItemRowRepository::new(connection).find_active_by_id(&stock_line_item_id)? {
-            Some(item) => item,
-            None => {
-                return Err(UpdateStocktakeError::InternalError(format!(
-                    "Can't find item {} for existing stocktake line {}!",
-                    &stock_line_item_id, stocktake_line.line.id
-                )))
-            }
-        };
-
     let quantity_change = f64::abs(delta);
-    let shipment_line = if quantity_change > 0.0 {
-        let (invoice_id, r#type) = if delta > 0.0 {
-            (inventory_addition_id.to_string(), InvoiceLineType::StockIn)
-        } else {
-            (
-                inventory_reduction_id.to_string(),
-                InvoiceLineType::StockOut,
-            )
-        };
-        Some(InvoiceLineRow {
-            id: uuid(),
-            r#type,
-            invoice_id,
-            item_link_id: stock_line_item_id,
-            item_name: stock_line_item.name,
-            item_code: stock_line_item.code,
-            stock_line_id: Some(stock_line.id.clone()),
-            location_id: stock_line.location_id.clone(),
-            batch: stock_line.batch.clone(),
-            expiry_date: stock_line.expiry_date,
-            pack_size: stock_line.pack_size,
-            cost_price_per_pack: stock_line.cost_price_per_pack,
-            sell_price_per_pack: stock_line.sell_price_per_pack,
-            total_before_tax: 0.0,
-            total_after_tax: 0.0,
-            tax_percentage: None,
+    let invoice_line_id = uuid();
+
+    let update_inventory_adjustment_reason = generate_update_inventory_adjustment_reason(
+        invoice_line_id.clone(),
+        row.inventory_adjustment_reason_id,
+    );
+
+    let stock_in_or_out_line = if delta > 0.0 {
+        StockChange::StockIn(InsertStockInLine {
+            r#type: StockInType::InventoryAddition,
+            id: invoice_line_id,
+            invoice_id: inventory_addition_id.to_string(),
             number_of_packs: quantity_change,
-            note: stock_line.note.clone(),
-            inventory_adjustment_reason_id: stocktake_line
-                .line
-                .inventory_adjustment_reason_id
-                .clone(),
-            return_reason_id: None,
-            foreign_currency_price_before_tax: None,
+            location: row.location_id.map(|id| NullableUpdate { value: Some(id) }),
+            pack_size: i32_to_u32(pack_size),
+            batch: row.batch,
+            cost_price_per_pack,
+            sell_price_per_pack,
+            expiry_date,
+            // From existing stock line
+            stock_line_id: Some(stock_line_row.id),
+            item_id: stock_line_row.item_link_id,
+            stock_on_hold: stock_line_row.on_hold,
+            note: stock_line_row.note,
+            // Default
+            barcode: stock_line_row.barcode_id,
+            total_before_tax: None,
+            tax_percentage: None,
         })
     } else {
-        None
+        StockChange::StockOut(InsertStockOutLine {
+            r#type: StockOutType::InventoryReduction,
+            id: invoice_line_id,
+            invoice_id: inventory_reduction_id.to_string(),
+            stock_line_id: stock_line_row.id,
+            number_of_packs: quantity_change,
+            note: stock_line_row.note,
+            location_id: row.location_id,
+            batch: row.batch,
+            pack_size: row.pack_size,
+            expiry_date: row.expiry_date,
+            cost_price_per_pack: None,
+            sell_price_per_pack: None,
+            total_before_tax: None,
+            tax_percentage: None,
+        })
     };
 
-    let location_movement = if counted_number_of_packs <= 0.0 {
-        generate_exit_location_movements(connection, &store_id, updated_line.clone())?
+    // if reducing to 0, create movement to exit location
+    let location_movement = if counted_number_of_packs == 0.0 {
+        generate_exit_location_movements(connection, &store_id, stock_line.clone())?
     } else {
         None
     };
 
     Ok(StockLineJob {
-        stock_line: updated_line,
-        invoice_line: shipment_line,
-        stocktake_line: None,
+        stock_in_out_or_update: Some(stock_in_or_out_line),
         location_movement,
+        stocktake_line: None,
+        update_inventory_adjustment_reason,
     })
 }
 
-/// Returns new stock line and matching invoice line
 fn generate_new_stock_line(
-    connection: &StorageConnection,
     store_id: &str,
     inventory_addition_id: &str,
-    stocktake_line: StocktakeLine,
+    stocktake_line: &StocktakeLine,
 ) -> Result<StockLineJob, UpdateStocktakeError> {
-    let counted_number_of_packs = stocktake_line.line.counted_number_of_packs.unwrap_or(0.0);
-    let row = stocktake_line.line;
-    let pack_size = row.pack_size.unwrap_or(0.0);
-    let cost_price_per_pack = row.cost_price_per_pack.unwrap_or(0.0);
-    let sell_price_per_pack = row.sell_price_per_pack.unwrap_or(0.0);
+    let row = stocktake_line.line.to_owned();
+    let item_id = stocktake_line.item.id.to_owned();
     let stock_line_id = uuid();
 
-    // update the stock_line_id in the existing stocktake_line
-    let updated_stocktake_line = inline_edit(&row, |mut l: StocktakeLineRow| {
-        l.stock_line_id = Some(stock_line_id.clone());
-        l
-    });
+    let counted_number_of_packs = stocktake_line.line.counted_number_of_packs.unwrap_or(0.0);
 
-    let supplier_id = if let Some(supplier_link_id) = stocktake_line
-        .stock_line
-        .as_ref()
-        .and_then(|it| it.supplier_link_id.clone())
-    {
-        Some(
-            NameLinkRowRepository::new(connection)
-                .find_one_by_id(&supplier_link_id)?
-                .ok_or(UpdateStocktakeError::InternalError(format!(
-                    "Name link ({}) not found",
-                    supplier_link_id
-                )))?
-                .name_id,
-        )
-    } else {
-        None
+    // If no counted packs, we shouldn't create a stock line
+    if counted_number_of_packs == 0.0 {
+        return Ok(StockLineJob {
+            stock_in_out_or_update: None,
+            location_movement: None,
+            stocktake_line: None,
+            update_inventory_adjustment_reason: None,
+        });
+    }
+
+    // We're creating a new stock line, so need to update the stocktake line to link to the new stock line
+    let updated_stocktake_line = StocktakeLineRow {
+        stock_line_id: Some(stock_line_id.clone()),
+        ..row.clone()
     };
 
-    let item_id = stocktake_line.item.id;
-    let new_line = StockLineRow {
-        id: stock_line_id,
-        item_link_id: item_id.clone(),
-        store_id: store_id.to_string(),
-        location_id: row.location_id.clone(),
-        batch: row.batch.clone(),
-        pack_size,
+    let pack_size = row.pack_size.unwrap_or(0);
+    let cost_price_per_pack = row.cost_price_per_pack.unwrap_or(0.0);
+    let sell_price_per_pack = row.sell_price_per_pack.unwrap_or(0.0);
+    let invoice_line_id = uuid();
+
+    let update_inventory_adjustment_reason = generate_update_inventory_adjustment_reason(
+        invoice_line_id.clone(),
+        row.inventory_adjustment_reason_id,
+    );
+
+    let stock_in_line = StockChange::StockIn(InsertStockInLine {
+        r#type: StockInType::InventoryAddition,
+        id: invoice_line_id,
+        invoice_id: inventory_addition_id.to_string(),
+        number_of_packs: counted_number_of_packs,
+        location: row
+            .location_id
+            .clone()
+            .map(|id| NullableUpdate { value: Some(id) }),
+        pack_size: i32_to_u32(pack_size),
+        batch: row.batch,
         cost_price_per_pack,
         sell_price_per_pack,
-        available_number_of_packs: counted_number_of_packs,
-        total_number_of_packs: counted_number_of_packs,
         expiry_date: row.expiry_date,
-        on_hold: false,
-        note: row.note.clone(),
-        supplier_link_id: supplier_id,
-        barcode_id: None,
-    };
-
-    let item = match ItemRowRepository::new(connection).find_active_by_id(&item_id)? {
-        Some(item) => item,
-        None => {
-            return Err(UpdateStocktakeError::InternalError(format!(
-                "Can't find item {} for new stocktake line {}!",
-                &item_id, row.id
-            )))
-        }
-    };
-    let shipment_line = if counted_number_of_packs > 0.0 {
-        Some(InvoiceLineRow {
-            id: uuid(),
-            r#type: InvoiceLineType::StockIn,
-            invoice_id: inventory_addition_id.to_string(),
-            item_link_id: item.id,
-            item_name: item.name,
-            item_code: item.code,
-            stock_line_id: Some(new_line.id.clone()),
-            location_id: row.location_id,
-            batch: row.batch,
-            expiry_date: row.expiry_date,
-            pack_size,
-            cost_price_per_pack,
-            sell_price_per_pack,
-            total_before_tax: 0.0,
-            total_after_tax: 0.0,
-            tax_percentage: None,
-            number_of_packs: counted_number_of_packs,
-            note: row.note,
-            inventory_adjustment_reason_id: row.inventory_adjustment_reason_id,
-            return_reason_id: None,
-            foreign_currency_price_before_tax: None,
-        })
-    } else {
-        None
-    };
+        stock_line_id: Some(stock_line_id.clone()),
+        item_id,
+        note: row.note,
+        // Default
+        stock_on_hold: false,
+        barcode: None,
+        total_before_tax: None,
+        tax_percentage: None,
+    });
 
-    let location_movement = if new_line.location_id.is_some() {
+    // If new stock line has a location, create location movement
+    let location_movement = if row.location_id.is_some() {
         Some(generate_enter_location_movements(
             store_id.to_owned(),
-            new_line.id.to_owned(),
-            new_line.location_id.to_owned(),
+            stock_line_id,
+            row.location_id,
         ))
     } else {
         None
     };
 
     Ok(StockLineJob {
-        stock_line: new_line,
-        invoice_line: shipment_line,
-        stocktake_line: Some(updated_stocktake_line),
+        stock_in_out_or_update: Some(stock_in_line),
         location_movement,
+        stocktake_line: Some(updated_stocktake_line),
+        update_inventory_adjustment_reason,
     })
 }
 
@@ -565,21 +555,22 @@ fn generate(
     let inventory_reduction_id = uuid();
 
     // finalise the stocktake
-    let mut inventory_addition_lines: Vec<InvoiceLineRow> = Vec::new();
-    let mut inventory_reduction_lines: Vec<InvoiceLineRow> = Vec::new();
+    let mut inventory_addition_lines: Vec<InsertStockInLine> = Vec::new();
+    let mut inventory_reduction_lines: Vec<InsertStockOutLine> = Vec::new();
     let mut stock_lines: Vec<StockLineRow> = Vec::new();
+    let mut inventory_adjustment_reason_updates: Vec<UpdateInventoryAdjustmentReason> = Vec::new();
     let mut stocktake_line_updates: Vec<StocktakeLineRow> = Vec::new();
     let mut location_movements: Vec<LocationMovementRow> = Vec::new();
 
     for stocktake_line in stocktake_lines {
         let StockLineJob {
-            stock_line,
-            invoice_line,
             stocktake_line,
             location_movement,
+            stock_in_out_or_update,
+            update_inventory_adjustment_reason,
         } = if let Some(ref stock_line) = stocktake_line.stock_line {
             // adjust existing stock line
-            generate_stock_line_update(
+            generate_stock_in_out_or_update(
                 connection,
                 store_id,
                 &inventory_addition_id,
@@ -589,20 +580,22 @@ fn generate(
             )?
         } else {
             // create new stock line
-            generate_new_stock_line(
-                connection,
-                &store_id,
-                &inventory_addition_id,
-                stocktake_line,
-            )?
+            generate_new_stock_line(&store_id, &inventory_addition_id, &stocktake_line)?
         };
-        stock_lines.push(stock_line);
-        if let Some(shipment_line) = invoice_line {
-            if shipment_line.r#type == InvoiceLineType::StockIn {
-                inventory_addition_lines.push(shipment_line)
-            } else {
-                inventory_reduction_lines.push(shipment_line)
+        match stock_in_out_or_update {
+            Some(StockChange::StockIn(line)) => {
+                inventory_addition_lines.push(line);
+            }
+            Some(StockChange::StockOut(line)) => {
+                inventory_reduction_lines.push(line);
             }
+            Some(StockChange::StockUpdate(stock_line)) => {
+                stock_lines.push(stock_line);
+            }
+            None => {}
+        }
+        if let Some(update_reason) = update_inventory_adjustment_reason {
+            inventory_adjustment_reason_updates.push(update_reason);
         }
         if let Some(stocktake_line) = stocktake_line {
             stocktake_line_updates.push(stocktake_line);
@@ -629,7 +622,7 @@ fn generate(
         user_id: Some(user_id.to_string()),
         name_link_id: inventory_adjustment_name.id,
         store_id: store_id.to_string(),
-        status: InvoiceStatus::Verified,
+        status: InvoiceStatus::New,
         verified_datetime: Some(now),
         // Default
         currency_id: Some(currency.currency_row.id),
@@ -686,7 +679,9 @@ fn generate(
         stocktake_lines: stocktake_line_updates,
         inventory_addition,
         inventory_reduction,
-        inventory_adjustment_lines: [inventory_addition_lines, inventory_reduction_lines].concat(),
+        inventory_addition_lines,
+        inventory_reduction_lines,
+        inventory_adjustment_reason_updates,
         stock_lines,
         location_movements: Some(location_movements),
         stocktake_lines_to_trim: unallocated_lines_to_trim(connection, &stocktake, &ctx.store_id)?,
@@ -706,30 +701,65 @@ pub fn update_stocktake(
             let result = generate(&ctx, input, existing, stocktake_lines, status_changed)?;
 
             // write data to the DB
-            // write new stock lines
             let stock_line_repo = StockLineRowRepository::new(connection);
+            let stocktake_line_repo = StocktakeLineRowRepository::new(connection);
+            let invoice_row_repo = InvoiceRowRepository::new(connection);
+            let invoice_line_repo = InvoiceLineRowRepository::new(&connection);
+
+            // write updated stock lines (stock line info has changed, but no inventory adjustment)
             for stock_line in result.stock_lines {
                 stock_line_repo.upsert_one(&stock_line)?;
             }
-            // write updated stocktake lines
-            let stocktake_line_repo = StocktakeLineRowRepository::new(connection);
+            // write inventory adjustment
+            if let Some(inventory_addition) = result.inventory_addition.clone() {
+                invoice_row_repo.upsert_one(&inventory_addition)?;
+            }
+            if let Some(inventory_reduction) = result.inventory_reduction.clone() {
+                invoice_row_repo.upsert_one(&inventory_reduction)?;
+            }
+            // write inventory adjustment lines (and update/introduce stock)
+            for line in result.inventory_addition_lines {
+                let line_id = line.id.clone();
+                insert_stock_in_line(ctx, line).map_err(|error| {
+                    UpdateStocktakeError::InsertStockInLineError { line_id, error }
+                })?;
+            }
+            for line in result.inventory_reduction_lines {
+                let line_id = line.id.clone();
+                insert_stock_out_line(ctx, line).map_err(|error| {
+                    UpdateStocktakeError::InsertStockOutLineError { line_id, error }
+                })?;
+            }
+            // Add inventory adjustment reasons to the invoice lines
+            for update_reason in result.inventory_adjustment_reason_updates {
+                invoice_line_repo.update_inventory_adjustment_reason_id(
+                    &update_reason.invoice_line_id,
+                    update_reason.reason_id,
+                )?;
+            }
+            // write updated stocktake lines (update with stock_line_ids for newly created stock lines)
             for stocktake_line in result.stocktake_lines {
                 stocktake_line_repo.upsert_one(&stocktake_line)?;
             }
-            // write inventory adjustment
+
+            // Set inventory adjustment invoices to Verified after all lines have been added
             if let Some(inventory_addition) = result.inventory_addition {
-                let shipment_repo = InvoiceRowRepository::new(connection);
-                shipment_repo.upsert_one(&inventory_addition)?;
+                let verified_addition = InvoiceRow {
+                    status: InvoiceStatus::Verified,
+                    verified_datetime: Some(Utc::now().naive_utc()),
+                    ..inventory_addition
+                };
+                invoice_row_repo.upsert_one(&verified_addition)?;
             }
             if let Some(inventory_reduction) = result.inventory_reduction {
-                let shipment_repo = InvoiceRowRepository::new(connection);
-                shipment_repo.upsert_one(&inventory_reduction)?;
-            }
-            // write inventory adjustment lines
-            let shipment_line_repo = InvoiceLineRowRepository::new(connection);
-            for line in result.inventory_adjustment_lines {
-                shipment_line_repo.upsert_one(&line)?;
+                let verified_reduction = InvoiceRow {
+                    status: InvoiceStatus::Verified,
+                    verified_datetime: Some(Utc::now().naive_utc()),
+                    ..inventory_reduction
+                };
+                invoice_row_repo.upsert_one(&verified_reduction)?;
             }
+
             StocktakeRowRepository::new(connection).upsert_one(&result.stocktake)?;
             // trim uncounted stocktake lines
             if let Some(lines_to_trim) = result.stocktake_lines_to_trim {
@@ -790,7 +820,7 @@ mod test {
         StocktakeLineRepository, StocktakeLineRow, StocktakeLineRowRepository, StocktakeRepository,
         StocktakeRow, StocktakeStatus,
     };
-    use util::{inline_edit, inline_init};
+    use util::{constants::INVENTORY_ADJUSTMENT_NAME_CODE, inline_edit, inline_init};
 
     use crate::{
         service_provider::ServiceProvider,
@@ -834,7 +864,7 @@ mod test {
                 r.item_link_id = "item_a".to_string();
                 r.store_id = "store_a".to_string();
                 r.available_number_of_packs = 20.0;
-                r.pack_size = 1.0;
+                r.pack_size = 1;
                 r.cost_price_per_pack = 0.0;
                 r.sell_price_per_pack = 0.0;
                 r.total_number_of_packs = 20.0;
@@ -1128,7 +1158,6 @@ mod test {
             .unwrap();
         let stock_line = StockLineRowRepository::new(&context.connection)
             .find_one_by_id(&shipment_line.stock_line_id.unwrap())
-            .unwrap()
             .unwrap();
         let stocktake_line = mock_stocktake_line_new_stock_line();
         assert_eq!(stock_line.expiry_date, stocktake_line.expiry_date);
@@ -1143,7 +1172,10 @@ mod test {
             stocktake_line.sell_price_per_pack.unwrap()
         );
         assert_eq!(stock_line.note, stocktake_line.note);
-        assert_eq!(stock_line.supplier_link_id, None);
+        assert_eq!(
+            stock_line.supplier_link_id.unwrap(),
+            INVENTORY_ADJUSTMENT_NAME_CODE.to_string()
+        );
 
         // assert stocktake_line has been updated
         let updated_stocktake_line = StocktakeLineRowRepository::new(&context.connection)
diff --git a/server/service/src/stocktake_line/insert.rs b/server/service/src/stocktake_line/insert.rs
index 855400e1e..8272fad0f 100644
--- a/server/service/src/stocktake_line/insert.rs
+++ b/server/service/src/stocktake_line/insert.rs
@@ -12,6 +12,7 @@ use crate::{
     service_provider::ServiceContext,
     stocktake::validate::{check_stocktake_exist, check_stocktake_not_finalised},
     stocktake_line::query::get_stocktake_line,
+    u32_to_i32,
 };
 
 use super::validate::{
@@ -29,7 +30,7 @@ pub struct InsertStocktakeLine {
     pub item_id: Option<String>,
     pub batch: Option<String>,
     pub expiry_date: Option<NaiveDate>,
-    pub pack_size: Option<f64>,
+    pub pack_size: Option<u32>,
     pub cost_price_per_pack: Option<f64>,
     pub sell_price_per_pack: Option<f64>,
     pub note: Option<String>,
@@ -282,7 +283,7 @@ fn generate(
         item_name,
         batch,
         expiry_date,
-        pack_size,
+        pack_size: pack_size.map(u32_to_i32),
         cost_price_per_pack,
         sell_price_per_pack,
         note,
@@ -369,7 +370,7 @@ mod stocktake_line_test {
                 r.item_link_id = "item_a".to_string();
                 r.store_id = "store_a".to_string();
                 r.available_number_of_packs = 50.0;
-                r.pack_size = 1.0;
+                r.pack_size = 1;
                 r.cost_price_per_pack = 0.0;
                 r.sell_price_per_pack = 0.0;
                 r.total_number_of_packs = 50.0;
@@ -383,7 +384,7 @@ mod stocktake_line_test {
                 r.item_link_id = "item_a".to_string();
                 r.store_id = "store_a".to_string();
                 r.available_number_of_packs = 20.0;
-                r.pack_size = 1.0;
+                r.pack_size = 1;
                 r.cost_price_per_pack = 0.0;
                 r.sell_price_per_pack = 0.0;
                 r.total_number_of_packs = 30.0;
diff --git a/server/service/src/stocktake_line/update.rs b/server/service/src/stocktake_line/update.rs
index b063290ff..ef0ffe81c 100644
--- a/server/service/src/stocktake_line/update.rs
+++ b/server/service/src/stocktake_line/update.rs
@@ -10,6 +10,7 @@ use crate::{
     service_provider::ServiceContext,
     stocktake::validate::{check_stocktake_exist, check_stocktake_not_finalised},
     stocktake_line::{query::get_stocktake_line, validate::check_stocktake_line_exist},
+    u32_to_i32,
     validate::check_store_id_matches,
     NullableUpdate,
 };
@@ -28,7 +29,7 @@ pub struct UpdateStocktakeLine {
     pub counted_number_of_packs: Option<f64>,
     pub batch: Option<String>,
     pub expiry_date: Option<NaiveDate>,
-    pub pack_size: Option<f64>,
+    pub pack_size: Option<u32>,
     pub cost_price_per_pack: Option<f64>,
     pub sell_price_per_pack: Option<f64>,
     pub note: Option<String>,
@@ -159,7 +160,7 @@ fn generate(
         item_name: existing_line.item_name,
         expiry_date: expiry_date.or(existing_line.expiry_date),
         batch: batch.or(existing_line.batch),
-        pack_size: pack_size.or(existing_line.pack_size),
+        pack_size: pack_size.map(u32_to_i32).or(existing_line.pack_size),
         cost_price_per_pack: cost_price_per_pack.or(existing_line.cost_price_per_pack),
         sell_price_per_pack: sell_price_per_pack.or(existing_line.sell_price_per_pack),
         note: note.or(existing_line.note),
diff --git a/server/service/src/sync/README.md b/server/service/src/sync/README.md
index 5ac813711..8cc801d0d 100644
--- a/server/service/src/sync/README.md
+++ b/server/service/src/sync/README.md
@@ -158,7 +158,3 @@ When change allows for previous version to still work without logical or syntax
 - adding a new optional field or a field where default value can be deduced
 - adding a new table
 - adding new optional header
-
-### V6 Versioning
-
-The same versioning pattern also applies to the V6 sync (syncing with Open mSupply Central). The V6 sync version of the remote site is set in [settings.rs](./settings.rs), and checked in [sync_on_central](./sync_on_central/mod.rs)
diff --git a/server/service/src/sync/api/core.rs b/server/service/src/sync/api/core.rs
index 864e767d4..0cfd0b438 100644
--- a/server/service/src/sync/api/core.rs
+++ b/server/service/src/sync/api/core.rs
@@ -91,7 +91,7 @@ impl SyncApiV5 {
 
     #[cfg(test)]
     pub(crate) fn new_test(url: &str, site_name: &str, password: &str, hardware_id: &str) -> Self {
-        use crate::sync::settings::SYNC_V5_VERSION;
+        use crate::sync::settings::SYNC_VERSION;
         use util::hash::sha256;
 
         SyncApiV5 {
@@ -101,7 +101,7 @@ impl SyncApiV5 {
                 username: site_name.to_string(),
                 password_sha256: sha256(&password),
                 site_uuid: hardware_id.to_string(),
-                sync_version: SYNC_V5_VERSION.to_string(),
+                sync_version: SYNC_VERSION.to_string(),
                 app_version: Version::from_package_json().to_string(),
                 app_name: APP_NAME.to_string(),
             },
diff --git a/server/service/src/sync/api_v6/core.rs b/server/service/src/sync/api_v6/core.rs
index 4180836fe..83e23ad69 100644
--- a/server/service/src/sync/api_v6/core.rs
+++ b/server/service/src/sync/api_v6/core.rs
@@ -8,7 +8,6 @@ use super::*;
 pub(crate) struct SyncApiV6 {
     pub(crate) url: Url,
     pub(crate) sync_v5_settings: SyncApiSettings,
-    pub(crate) sync_v6_version: u32,
 }
 
 #[derive(Error, Debug)]
@@ -23,7 +22,6 @@ impl SyncApiV6 {
     pub fn new(
         url: &str,
         sync_v5_settings: &SyncApiSettings,
-        sync_v6_version: u32,
     ) -> Result<Self, SyncApiV6CreatingError> {
         let mut url = Url::parse(url)
             .map_err(|error| SyncApiV6CreatingError::CannotParseSyncUrl(url.to_string(), error))?;
@@ -33,7 +31,6 @@ impl SyncApiV6 {
         Ok(Self {
             url,
             sync_v5_settings: sync_v5_settings.clone(),
-            sync_v6_version,
         })
     }
 
@@ -46,7 +43,6 @@ impl SyncApiV6 {
         let Self {
             sync_v5_settings,
             url,
-            sync_v6_version,
         } = self;
 
         let route = "pull";
@@ -57,7 +53,6 @@ impl SyncApiV6 {
             batch_size,
             sync_v5_settings: sync_v5_settings.clone(),
             is_initialised,
-            sync_v6_version: sync_v6_version.clone(),
         };
 
         let result = Client::new().post(url.clone()).json(&request).send().await;
@@ -79,7 +74,6 @@ impl SyncApiV6 {
         let Self {
             sync_v5_settings,
             url,
-            sync_v6_version,
         } = self;
 
         let route = "push";
@@ -88,7 +82,6 @@ impl SyncApiV6 {
         let request = SyncPushRequestV6 {
             batch,
             sync_v5_settings: sync_v5_settings.clone(),
-            sync_v6_version: sync_v6_version.clone(),
         };
 
         let result = Client::new().post(url.clone()).json(&request).send().await;
@@ -110,7 +103,6 @@ impl SyncApiV6 {
         let Self {
             sync_v5_settings,
             url,
-            sync_v6_version,
         } = self;
 
         let route = "site_status";
@@ -118,7 +110,6 @@ impl SyncApiV6 {
 
         let request = SiteStatusRequestV6 {
             sync_v5_settings: sync_v5_settings.clone(),
-            sync_v6_version: sync_v6_version.clone(),
         };
 
         let result = Client::new().post(url.clone()).json(&request).send().await;
diff --git a/server/service/src/sync/api_v6/download_file.rs b/server/service/src/sync/api_v6/download_file.rs
index 813a44c99..8353e6183 100644
--- a/server/service/src/sync/api_v6/download_file.rs
+++ b/server/service/src/sync/api_v6/download_file.rs
@@ -12,7 +12,6 @@ impl SyncApiV6 {
         let Self {
             sync_v5_settings,
             url,
-            sync_v6_version,
         } = self;
 
         let route = "download_file";
@@ -23,7 +22,6 @@ impl SyncApiV6 {
             table_name: sync_file.table_name.clone(),
             record_id: sync_file.record_id.clone(),
             sync_v5_settings: sync_v5_settings.clone(),
-            sync_v6_version: sync_v6_version.clone(),
         };
 
         let request = Client::new().post(url.clone()).json(&request);
diff --git a/server/service/src/sync/api_v6/mod.rs b/server/service/src/sync/api_v6/mod.rs
index 98c478358..86a933037 100644
--- a/server/service/src/sync/api_v6/mod.rs
+++ b/server/service/src/sync/api_v6/mod.rs
@@ -39,8 +39,6 @@ pub enum SyncParsedErrorV6 {
     IntegrationInProgress,
     #[error("Sync file not found, file_id: {0}")]
     SyncFileNotFound(String),
-    #[error("Sync V6 API version not compatible, minVersion: {0}, maxVersion: {1}, received: {2}")]
-    SyncVersionMismatch(u32, u32, u32),
 }
 
 impl From<anyhow::Error> for SyncParsedErrorV6 {
@@ -152,7 +150,6 @@ impl From<PushSyncRecord> for SyncRecordV6 {
         }
     }
 }
-
 #[derive(Serialize, Deserialize)]
 #[serde(rename_all = "camelCase")]
 pub struct SyncPullRequestV6 {
@@ -160,8 +157,6 @@ pub struct SyncPullRequestV6 {
     pub(crate) batch_size: u32,
     pub(crate) sync_v5_settings: SyncApiSettings,
     pub(crate) is_initialised: bool,
-    #[serde(default)]
-    pub(crate) sync_v6_version: u32,
 }
 
 #[derive(Serialize, Deserialize)]
@@ -169,16 +164,12 @@ pub struct SyncPullRequestV6 {
 pub struct SyncPushRequestV6 {
     pub(crate) batch: SyncBatchV6,
     pub(crate) sync_v5_settings: SyncApiSettings,
-    #[serde(default)]
-    pub(crate) sync_v6_version: u32,
 }
 
 #[derive(Serialize, Deserialize)]
 #[serde(rename_all = "camelCase")]
 pub struct SiteStatusRequestV6 {
     pub(crate) sync_v5_settings: SyncApiSettings,
-    #[serde(default)]
-    pub(crate) sync_v6_version: u32,
 }
 
 #[derive(Debug, PartialEq, Serialize, Deserialize)]
@@ -193,16 +184,12 @@ pub struct SyncDownloadFileRequestV6 {
     pub(crate) record_id: String,
     pub(crate) id: String,
     pub(crate) sync_v5_settings: SyncApiSettings,
-    #[serde(default)]
-    pub(crate) sync_v6_version: u32,
 }
 
 #[derive(Deserialize, Debug, Serialize)]
 pub struct SyncUploadFileRequestV6 {
     pub file_id: String,
     pub sync_v5_settings: SyncApiSettings,
-    #[serde(default)]
-    pub(crate) sync_v6_version: u32,
 }
 
 #[derive(Deserialize, Debug, Serialize)]
diff --git a/server/service/src/sync/api_v6/upload_file.rs b/server/service/src/sync/api_v6/upload_file.rs
index 3df483801..bd46263f6 100644
--- a/server/service/src/sync/api_v6/upload_file.rs
+++ b/server/service/src/sync/api_v6/upload_file.rs
@@ -15,7 +15,6 @@ impl SyncApiV6 {
         let Self {
             sync_v5_settings,
             url,
-            sync_v6_version,
         } = self;
 
         let route = "upload_file";
@@ -34,7 +33,6 @@ impl SyncApiV6 {
         let json_request = SyncUploadFileRequestV6 {
             file_id: sync_file_reference_row.id.clone(),
             sync_v5_settings: sync_v5_settings.clone(),
-            sync_v6_version: sync_v6_version.clone(),
         };
 
         let request = client.put(url.clone()).multipart(
diff --git a/server/service/src/sync/central_data_synchroniser_v6.rs b/server/service/src/sync/central_data_synchroniser_v6.rs
index fa68aa968..4f932807e 100644
--- a/server/service/src/sync/central_data_synchroniser_v6.rs
+++ b/server/service/src/sync/central_data_synchroniser_v6.rs
@@ -67,10 +67,9 @@ impl SynchroniserV6 {
     pub(crate) fn new(
         url: &str,
         sync_v5_settings: &SyncApiSettings,
-        sync_v6_version: u32,
     ) -> Result<Self, SyncApiV6CreatingError> {
         Ok(Self {
-            sync_api_v6: SyncApiV6::new(url, sync_v5_settings, sync_v6_version)?,
+            sync_api_v6: SyncApiV6::new(url, sync_v5_settings)?,
         })
     }
 
diff --git a/server/service/src/sync/file_synchroniser.rs b/server/service/src/sync/file_synchroniser.rs
index 2a54d456d..9340ebf7f 100644
--- a/server/service/src/sync/file_synchroniser.rs
+++ b/server/service/src/sync/file_synchroniser.rs
@@ -14,18 +14,15 @@ use repository::{
 use crate::static_files::{StaticFile, StaticFileCategory};
 use crate::sync::api::SyncApiV5;
 use crate::sync::api_v6::SyncApiV6;
-use crate::sync::settings::SYNC_V5_VERSION;
+use crate::sync::settings::SYNC_VERSION;
 use crate::{service_provider::ServiceProvider, static_files::StaticFileService};
 
+use super::api_v6::{SyncApiErrorV6, SyncApiV6CreatingError};
 use super::settings::SyncSettings;
 use super::{
     api::SyncApiV5CreatingError,
     api_v6::{SyncApiErrorVariantV6, SyncParsedErrorV6},
 };
-use super::{
-    api_v6::{SyncApiErrorV6, SyncApiV6CreatingError},
-    settings::SYNC_V6_VERSION,
-};
 
 pub static MAX_UPLOAD_ATTEMPTS: i32 = 7 * 24; // 7 days * 24 hours Retry sending for up to for 1 week before giving up
 pub static RETRY_DELAY_MINUTES: i64 = 15; // Doubles each retry until MAX_RETRY_DELAY_MINUTES
@@ -73,9 +70,8 @@ impl FileSynchroniser {
         static_file_service: Arc<StaticFileService>,
     ) -> anyhow::Result<Self> {
         // Create SyncApiV6 instance
-        let sync_v5_settings =
-            SyncApiV5::new_settings(&settings, &service_provider, SYNC_V5_VERSION)?;
-        let sync_api_v6 = SyncApiV6::new(sync_v6_url, &sync_v5_settings, SYNC_V6_VERSION)?;
+        let sync_v5_settings = SyncApiV5::new_settings(&settings, &service_provider, SYNC_VERSION)?;
+        let sync_api_v6 = SyncApiV6::new(sync_v6_url, &sync_v5_settings)?;
 
         Ok(Self {
             sync_api_v6,
diff --git a/server/service/src/sync/settings.rs b/server/service/src/sync/settings.rs
index 2fe2fb331..6b6e6e038 100644
--- a/server/service/src/sync/settings.rs
+++ b/server/service/src/sync/settings.rs
@@ -1,8 +1,7 @@
 use serde::Deserialize;
 
 // See README.md for description of when this API version needs to be updated
-pub(crate) static SYNC_V5_VERSION: u32 = 5;
-pub(crate) static SYNC_V6_VERSION: u32 = 1;
+pub(crate) static SYNC_VERSION: u32 = 4;
 
 #[derive(Deserialize, Clone, Debug, PartialEq, Default)]
 pub struct SyncSettings {
diff --git a/server/service/src/sync/site_info.rs b/server/service/src/sync/site_info.rs
index 7736d446d..340459a4f 100644
--- a/server/service/src/sync/site_info.rs
+++ b/server/service/src/sync/site_info.rs
@@ -8,7 +8,7 @@ use crate::{
     service_provider::{ServiceContext, ServiceProvider},
     sync::{
         api::{SiteInfoV5, SyncApiV5},
-        settings::{SyncSettings, SYNC_V5_VERSION},
+        settings::{SyncSettings, SYNC_VERSION},
     },
 };
 
@@ -58,7 +58,7 @@ impl SiteInfoTrait for SiteInfoService {
         let sync_api_v5 = SyncApiV5::new(SyncApiV5::new_settings(
             &settings,
             &service_provider,
-            SYNC_V5_VERSION,
+            SYNC_VERSION,
         )?)?;
         let ctx = service_provider.basic_context()?;
 
diff --git a/server/service/src/sync/sync_on_central/mod.rs b/server/service/src/sync/sync_on_central/mod.rs
index 9d0e7011f..edf95e48c 100644
--- a/server/service/src/sync/sync_on_central/mod.rs
+++ b/server/service/src/sync/sync_on_central/mod.rs
@@ -29,10 +29,6 @@ use super::{
     translations::translate_changelogs_to_sync_records,
 };
 
-// See ../README.md for when to increment versions!
-static MIN_VERSION: u32 = 0;
-static MAX_VERSION: u32 = 1;
-
 /// Send Records to a remote open-mSupply Server
 pub async fn pull(
     service_provider: &ServiceProvider,
@@ -41,7 +37,6 @@ pub async fn pull(
         batch_size,
         sync_v5_settings,
         is_initialised,
-        sync_v6_version,
     }: SyncPullRequestV6,
 ) -> Result<SyncBatchV6, SyncParsedErrorV6> {
     use SyncParsedErrorV6 as Error;
@@ -49,15 +44,6 @@ pub async fn pull(
     if !CentralServerConfig::is_central_server() {
         return Err(Error::NotACentralServer);
     }
-
-    if !is_sync_version_compatible(sync_v6_version) {
-        return Err(Error::SyncVersionMismatch(
-            MIN_VERSION,
-            MAX_VERSION,
-            sync_v6_version,
-        ));
-    }
-
     // Check credentials again mSupply central server
     let response = SyncApiV5::new(sync_v5_settings)
         .map_err(|e| Error::OtherServerError(format_error(&e)))?
@@ -125,7 +111,6 @@ pub async fn push(
     SyncPushRequestV6 {
         batch,
         sync_v5_settings,
-        sync_v6_version,
     }: SyncPushRequestV6,
 ) -> Result<SyncPushSuccessV6, SyncParsedErrorV6> {
     use SyncParsedErrorV6 as Error;
@@ -133,15 +118,6 @@ pub async fn push(
     if !CentralServerConfig::is_central_server() {
         return Err(Error::NotACentralServer);
     }
-
-    if !is_sync_version_compatible(sync_v6_version) {
-        return Err(Error::SyncVersionMismatch(
-            MIN_VERSION,
-            MAX_VERSION,
-            sync_v6_version,
-        ));
-    }
-
     // Check credentials again mSupply central server
     let response = SyncApiV5::new(sync_v5_settings)
         .map_err(|e| Error::OtherServerError(format_error(&e)))?
@@ -188,10 +164,7 @@ pub async fn push(
 }
 
 pub async fn get_site_status(
-    SiteStatusRequestV6 {
-        sync_v5_settings,
-        sync_v6_version,
-    }: SiteStatusRequestV6,
+    SiteStatusRequestV6 { sync_v5_settings }: SiteStatusRequestV6,
 ) -> Result<SiteStatusV6, SyncParsedErrorV6> {
     use SyncParsedErrorV6 as Error;
 
@@ -199,14 +172,6 @@ pub async fn get_site_status(
         return Err(Error::NotACentralServer);
     }
 
-    if !is_sync_version_compatible(sync_v6_version) {
-        return Err(Error::SyncVersionMismatch(
-            MIN_VERSION,
-            MAX_VERSION,
-            sync_v6_version,
-        ));
-    }
-
     let response = SyncApiV5::new(sync_v5_settings)
         .map_err(|e| Error::OtherServerError(format_error(&e)))?
         .get_site_info()
@@ -251,7 +216,6 @@ pub async fn download_file(
         table_name,
         record_id,
         sync_v5_settings,
-        sync_v6_version,
     }: SyncDownloadFileRequestV6,
 ) -> Result<(actix_files::NamedFile, StaticFile), SyncParsedErrorV6> {
     use SyncParsedErrorV6 as Error;
@@ -266,15 +230,6 @@ pub async fn download_file(
     if !CentralServerConfig::is_central_server() {
         return Err(Error::NotACentralServer);
     }
-
-    if !is_sync_version_compatible(sync_v6_version) {
-        return Err(Error::SyncVersionMismatch(
-            MIN_VERSION,
-            MAX_VERSION,
-            sync_v6_version,
-        ));
-    }
-
     // Check credentials again mSupply central server
     let _ = SyncApiV5::new(sync_v5_settings)
         .map_err(|e| Error::OtherServerError(format_error(&e)))?
@@ -303,7 +258,6 @@ pub async fn upload_file(
     SyncUploadFileRequestV6 {
         file_id,
         sync_v5_settings,
-        sync_v6_version,
     }: SyncUploadFileRequestV6,
     file_part: TempFile,
 ) -> Result<(), SyncParsedErrorV6> {
@@ -314,15 +268,6 @@ pub async fn upload_file(
     if !CentralServerConfig::is_central_server() {
         return Err(Error::NotACentralServer);
     }
-
-    if !is_sync_version_compatible(sync_v6_version) {
-        return Err(Error::SyncVersionMismatch(
-            MIN_VERSION,
-            MAX_VERSION,
-            sync_v6_version,
-        ));
-    }
-
     // Check credentials again mSupply central server
     let _ = SyncApiV5::new(sync_v5_settings)
         .map_err(|e| Error::OtherServerError(format_error(&e)))?
@@ -373,7 +318,3 @@ fn set_integrating(site_id: i32, is_integrating: bool) {
         sites_being_integrated.retain(|id| *id != site_id);
     }
 }
-
-fn is_sync_version_compatible(sync_v6_version: u32) -> bool {
-    MIN_VERSION <= sync_v6_version && sync_v6_version <= MAX_VERSION
-}
diff --git a/server/service/src/sync/sync_status/logger.rs b/server/service/src/sync/sync_status/logger.rs
index 76b6b40c4..d88ca5669 100644
--- a/server/service/src/sync/sync_status/logger.rs
+++ b/server/service/src/sync/sync_status/logger.rs
@@ -357,10 +357,6 @@ impl SyncLogError {
                 SyncParsedErrorV6::LegacyServerError(source),
             )) => &source.code,
 
-            SyncApiErrorVariant::V6(SyncApiErrorVariantV6::ParsedError(
-                SyncParsedErrorV6::SyncVersionMismatch(_, _, _),
-            )) => return Self::new(SyncApiErrorCode::V6ApiVersionIncompatible, sync_error),
-
             // map connection errors
             SyncApiErrorVariant::V6(SyncApiErrorVariantV6::ConnectionError(_))
             | SyncApiErrorVariant::V5(SyncApiErrorVariantV5::ConnectionError { .. }) => {
diff --git a/server/service/src/sync/synchroniser.rs b/server/service/src/sync/synchroniser.rs
index c1c8e0947..966de2afd 100644
--- a/server/service/src/sync/synchroniser.rs
+++ b/server/service/src/sync/synchroniser.rs
@@ -20,7 +20,7 @@ use super::{
         PostInitialisationError, RemoteDataSynchroniser, RemotePullError, RemotePushError,
         WaitForSyncOperationError,
     },
-    settings::{SyncSettings, SYNC_V5_VERSION, SYNC_V6_VERSION},
+    settings::{SyncSettings, SYNC_VERSION},
     sync_buffer::SyncBuffer,
     sync_status::logger::{SyncLogger, SyncLoggerError},
     translation_and_integration::{TranslationAndIntegration, TranslationAndIntegrationResults},
@@ -35,7 +35,6 @@ pub struct Synchroniser {
     central: CentralDataSynchroniser,
     sync_v5_settings: SyncApiSettings,
     remote: RemoteDataSynchroniser,
-    sync_v6_version: u32,
 }
 
 #[derive(Error)]
@@ -108,14 +107,13 @@ impl Synchroniser {
         settings: SyncSettings,
         service_provider: Arc<ServiceProvider>,
     ) -> anyhow::Result<Self> {
-        Self::new_with_version(settings, service_provider, SYNC_V5_VERSION, SYNC_V6_VERSION)
+        Self::new_with_version(settings, service_provider, SYNC_VERSION)
     }
 
     pub(crate) fn new_with_version(
         settings: SyncSettings,
         service_provider: Arc<ServiceProvider>,
         sync_version: u32,
-        sync_v6_version: u32,
     ) -> anyhow::Result<Self> {
         let sync_v5_settings = SyncApiV5::new_settings(&settings, &service_provider, sync_version)?;
         let sync_api_v5 = SyncApiV5::new(sync_v5_settings.clone())?;
@@ -127,7 +125,6 @@ impl Synchroniser {
             service_provider,
             central: CentralDataSynchroniser { sync_api_v5 },
             sync_v5_settings,
-            sync_v6_version,
         })
     }
 
@@ -189,8 +186,7 @@ impl Synchroniser {
             CentralServerConfig::NotConfigured => return Err(SyncError::V6NotConfigured),
             CentralServerConfig::IsCentralServer => None,
             CentralServerConfig::CentralServerUrl(url) => {
-                let v6_sync =
-                    SynchroniserV6::new(&url, &self.sync_v5_settings, self.sync_v6_version)?;
+                let v6_sync = SynchroniserV6::new(&url, &self.sync_v5_settings)?;
                 Some(v6_sync)
             }
         };
diff --git a/server/service/src/sync/test/integration/central/unit_and_item.rs b/server/service/src/sync/test/integration/central/unit_and_item.rs
index b141267d8..c39164a78 100644
--- a/server/service/src/sync/test/integration/central/unit_and_item.rs
+++ b/server/service/src/sync/test/integration/central/unit_and_item.rs
@@ -53,7 +53,7 @@ impl SyncRecordTester for UnitAndItemTester {
             unit_id: None,
             r#type: ItemType::NonStock,
             legacy_record: "".to_string(),
-            default_pack_size: 1.0,
+            default_pack_size: 1,
             is_active: true,
         };
         let item_json1 = extend_base(json!({
@@ -72,7 +72,7 @@ impl SyncRecordTester for UnitAndItemTester {
             unit_id: Some(unit_row1.id.clone()),
             r#type: ItemType::Stock,
             legacy_record: "".to_string(),
-            default_pack_size: 1.0,
+            default_pack_size: 1,
             is_active: true,
         };
         let item_json2 = extend_base(json!({
@@ -91,7 +91,7 @@ impl SyncRecordTester for UnitAndItemTester {
             unit_id: None,
             r#type: ItemType::Service,
             legacy_record: "".to_string(),
-            default_pack_size: 1.0,
+            default_pack_size: 1,
             is_active: true,
         };
         let item_json3 = extend_base(json!({
diff --git a/server/service/src/sync/test/integration/errors.rs b/server/service/src/sync/test/integration/errors.rs
index 0dd1657bc..ff576f149 100644
--- a/server/service/src/sync/test/integration/errors.rs
+++ b/server/service/src/sync/test/integration/errors.rs
@@ -10,7 +10,7 @@ mod tests {
         service_provider::ServiceProvider,
         sync::{
             api::{ParsedError, SyncApiError, SyncApiErrorVariantV5, SyncErrorCodeV5},
-            remote_data_synchroniser::PostInitialisationError,
+            remote_data_synchroniser::{PostInitialisationError, RemotePushError},
             settings::SyncSettings,
             sync_status::SyncLogError,
             synchroniser::{SyncError, Synchroniser},
diff --git a/server/service/src/sync/test/integration/omsupply_central/pack_variant.rs b/server/service/src/sync/test/integration/omsupply_central/pack_variant.rs
index 368985332..4662e86f3 100644
--- a/server/service/src/sync/test/integration/omsupply_central/pack_variant.rs
+++ b/server/service/src/sync/test/integration/omsupply_central/pack_variant.rs
@@ -29,7 +29,7 @@ impl SyncRecordTester for PackVariantTester {
             item_id: item_id.clone(),
             short_name: uuid(),
             long_name: uuid(),
-            pack_size: 20.0,
+            pack_size: 20,
             is_active: true,
         };
 
diff --git a/server/service/src/sync/test/integration/remote/invoice.rs b/server/service/src/sync/test/integration/remote/invoice.rs
index c2c00bb83..399be71e1 100644
--- a/server/service/src/sync/test/integration/remote/invoice.rs
+++ b/server/service/src/sync/test/integration/remote/invoice.rs
@@ -78,7 +78,7 @@ impl SyncRecordTester for InvoiceRecordTester {
             location_id: Some(location_row.id.clone()),
             batch: None,
             expiry_date: None,
-            pack_size: 1.0,
+            pack_size: 1,
             cost_price_per_pack: 5.0,
             sell_price_per_pack: 10.0,
             total_before_tax: 8.0,
@@ -204,7 +204,7 @@ impl SyncRecordTester for InvoiceRecordTester {
             r.item_link_id = base_invoice_line_row.item_link_id;
             r.store_id = new_site_properties.store_id.clone();
             r.batch = Some("some batch".to_string());
-            r.pack_size = 20.0;
+            r.pack_size = 20;
             r.cost_price_per_pack = 0.5;
             r.sell_price_per_pack = 0.2;
         });
@@ -255,7 +255,7 @@ impl SyncRecordTester for InvoiceRecordTester {
             d.location_id = None;
             d.batch = Some("invoice line batch".to_string());
             d.expiry_date = NaiveDate::from_ymd_opt(2024, 04, 04);
-            d.pack_size = 10.0;
+            d.pack_size = 10;
             d.cost_price_per_pack = 15.0;
             d.sell_price_per_pack = 15.0;
             d.total_before_tax = 10.0;
diff --git a/server/service/src/sync/test/integration/remote/location_movement.rs b/server/service/src/sync/test/integration/remote/location_movement.rs
index 2824c9e3f..b5ae7f628 100644
--- a/server/service/src/sync/test/integration/remote/location_movement.rs
+++ b/server/service/src/sync/test/integration/remote/location_movement.rs
@@ -28,7 +28,7 @@ impl SyncRecordTester for LocationMovementRecordTester {
             store_id: store_id.clone(),
             location_id: Some(location_row.id.clone()),
             batch: Some("some remote sync test batch".to_string()),
-            pack_size: 5.0,
+            pack_size: 5,
             cost_price_per_pack: 10.0,
             sell_price_per_pack: 15.0,
             available_number_of_packs: 100.3333,
diff --git a/server/service/src/sync/test/integration/remote/stock_line.rs b/server/service/src/sync/test/integration/remote/stock_line.rs
index 3fa0329e0..d28197c05 100644
--- a/server/service/src/sync/test/integration/remote/stock_line.rs
+++ b/server/service/src/sync/test/integration/remote/stock_line.rs
@@ -29,7 +29,7 @@ impl SyncRecordTester for StockLineRecordTester {
             store_id: store_id.to_string(),
             location_id: Some(location_row.id.clone()),
             batch: Some("some remote sync test batch".to_string()),
-            pack_size: 5.0,
+            pack_size: 5,
             cost_price_per_pack: 10.0,
             sell_price_per_pack: 15.0,
             available_number_of_packs: 100.3333,
@@ -57,7 +57,7 @@ impl SyncRecordTester for StockLineRecordTester {
             d.item_link_id = uuid();
             d.location_id = None;
             d.batch = Some("some remote sync test batch 2".to_string());
-            d.pack_size = 10.0;
+            d.pack_size = 10;
             d.cost_price_per_pack = 15.0;
             d.sell_price_per_pack = 20.0;
             d.available_number_of_packs = 110.393939;
diff --git a/server/service/src/sync/test/integration/remote/stocktake.rs b/server/service/src/sync/test/integration/remote/stocktake.rs
index 610208c9d..9338855eb 100644
--- a/server/service/src/sync/test/integration/remote/stocktake.rs
+++ b/server/service/src/sync/test/integration/remote/stocktake.rs
@@ -65,7 +65,7 @@ impl SyncRecordTester for StocktakeRecordTester {
             item_name: "test item".to_string(),
             batch: None,
             expiry_date: None,
-            pack_size: Some(0.0),
+            pack_size: Some(0),
             cost_price_per_pack: Some(0.0),
             sell_price_per_pack: Some(0.0),
             note: None,
@@ -130,7 +130,7 @@ impl SyncRecordTester for StocktakeRecordTester {
             d.stock_line_id = Some(stock_line_row.id.clone());
             d.batch = Some(uuid());
             d.expiry_date = NaiveDate::from_ymd_opt(2025, 03, 24);
-            d.pack_size = Some(thread_rng().gen::<f64>());
+            d.pack_size = Some(thread_rng().gen::<i32>());
             d.cost_price_per_pack = Some(gen_f64());
             d.sell_price_per_pack = Some(gen_f64());
             d.note = Some("stock_line.note".to_string());
diff --git a/server/service/src/sync/test/test_data/asset.rs b/server/service/src/sync/test/test_data/asset.rs
index 138d4abb9..f472cc28d 100644
--- a/server/service/src/sync/test/test_data/asset.rs
+++ b/server/service/src/sync/test/test_data/asset.rs
@@ -34,7 +34,6 @@ fn asset1() -> AssetRow {
         created_datetime: Defaults::naive_date_time(),
         modified_datetime: Defaults::naive_date_time(),
         deleted_datetime: None,
-        ..Default::default()
     }
 }
 
diff --git a/server/service/src/sync/test/test_data/asset_catalogue_item_property.rs b/server/service/src/sync/test/test_data/asset_catalogue_item_property.rs
new file mode 100644
index 000000000..d2b298c6a
--- /dev/null
+++ b/server/service/src/sync/test/test_data/asset_catalogue_item_property.rs
@@ -0,0 +1,44 @@
+use repository::asset_catalogue_item_property_row::AssetCatalogueItemPropertyRow;
+use serde_json::json;
+
+use super::{TestSyncIncomingRecord, TestSyncOutgoingRecord};
+
+const TABLE_NAME: &str = "asset_catalogue_item_property";
+
+const ASSET_CATALOGUE_ITEM_PROPERTY1: (&str, &str) = (
+    "639e728b-f64b-4eef-9fd6-a1874bafb8a4",
+    r#"{
+        "id": "639e728b-f64b-4eef-9fd6-a1874bafb8a4",
+        "catalogue_item_id": "0dda9346-b79f-4f0f-a375-ae778240043a",
+        "catalogue_property_id": "854d8e25-d265-4884-aea3-8f13de3b55fb",
+        "value_string": "Electricity"
+    }"#,
+);
+
+fn asset_catalogue_item_property1() -> AssetCatalogueItemPropertyRow {
+    AssetCatalogueItemPropertyRow {
+        id: ASSET_CATALOGUE_ITEM_PROPERTY1.0.to_string(),
+        catalogue_item_id: "0dda9346-b79f-4f0f-a375-ae778240043a".to_string(),
+        catalogue_property_id: "854d8e25-d265-4884-aea3-8f13de3b55fb".to_string(),
+        value_string: Some("Electricity".to_string()),
+        value_int: None,
+        value_float: None,
+        value_bool: None,
+    }
+}
+
+pub(crate) fn test_pull_upsert_records() -> Vec<TestSyncIncomingRecord> {
+    vec![TestSyncIncomingRecord::new_pull_upsert(
+        TABLE_NAME,
+        ASSET_CATALOGUE_ITEM_PROPERTY1,
+        asset_catalogue_item_property1(),
+    )]
+}
+
+pub(crate) fn test_v6_central_push_records() -> Vec<TestSyncOutgoingRecord> {
+    vec![TestSyncOutgoingRecord {
+        table_name: TABLE_NAME.to_string(),
+        record_id: ASSET_CATALOGUE_ITEM_PROPERTY1.0.to_string(),
+        push_data: json!(asset_catalogue_item_property1()),
+    }]
+}
diff --git a/server/service/src/sync/test/test_data/asset_catalogue_property.rs b/server/service/src/sync/test/test_data/asset_catalogue_property.rs
new file mode 100644
index 000000000..d8cae4002
--- /dev/null
+++ b/server/service/src/sync/test/test_data/asset_catalogue_property.rs
@@ -0,0 +1,43 @@
+use repository::asset_catalogue_property_row::{AssetCataloguePropertyRow, PropertyValueType};
+use serde_json::json;
+
+use super::{TestSyncIncomingRecord, TestSyncOutgoingRecord};
+
+const TABLE_NAME: &str = "asset_catalogue_property";
+
+const ASSET_CATALOGUE_PROPERTY1: (&str, &str) = (
+    "854d8e25-d265-4884-aea3-8f13de3b55fb",
+    r#"{
+        "id": "854d8e25-d265-4884-aea3-8f13de3b55fb",
+        "category_id": "02cbea92-d5bf-4832-863b-c04e093a7760",
+        "name": "Energy source",
+        "value_type": "STRING",
+        "allowed_values": "Electricity,Solar,Passive,Kerosene,Gas"
+    }"#,
+);
+
+fn asset_catalogue_property1() -> AssetCataloguePropertyRow {
+    AssetCataloguePropertyRow {
+        id: ASSET_CATALOGUE_PROPERTY1.0.to_string(),
+        category_id: "02cbea92-d5bf-4832-863b-c04e093a7760".to_string(),
+        name: "Energy source".to_string(),
+        value_type: PropertyValueType::String,
+        allowed_values: Some("Electricity,Solar,Passive,Kerosene,Gas".to_string()),
+    }
+}
+
+pub(crate) fn test_pull_upsert_records() -> Vec<TestSyncIncomingRecord> {
+    vec![TestSyncIncomingRecord::new_pull_upsert(
+        TABLE_NAME,
+        ASSET_CATALOGUE_PROPERTY1,
+        asset_catalogue_property1(),
+    )]
+}
+
+pub(crate) fn test_v6_central_push_records() -> Vec<TestSyncOutgoingRecord> {
+    vec![TestSyncOutgoingRecord {
+        table_name: TABLE_NAME.to_string(),
+        record_id: ASSET_CATALOGUE_PROPERTY1.0.to_string(),
+        push_data: json!(asset_catalogue_property1()),
+    }]
+}
diff --git a/server/service/src/sync/test/test_data/asset_property.rs b/server/service/src/sync/test/test_data/asset_property.rs
deleted file mode 100644
index 0e8ecc9d1..000000000
--- a/server/service/src/sync/test/test_data/asset_property.rs
+++ /dev/null
@@ -1,47 +0,0 @@
-use repository::{asset_property_row::AssetPropertyRow, types::PropertyValueType};
-use serde_json::json;
-
-use super::{TestSyncIncomingRecord, TestSyncOutgoingRecord};
-
-const TABLE_NAME: &str = "asset_property";
-
-const ASSET_PROPERTY1: (&str, &str) = (
-    "59d20a10-0555-4e65-9c36-2c86e50e5abc",
-    r#"{
-        "id": "59d20a10-0555-4e65-9c36-2c86e50e5abc",
-        "asset_category_id": "02cbea92-d5bf-4832-863b-c04e093a7760", 
-        "key": "favourite_colour",
-        "name": "Your favourite colour",
-        "value_type": "STRING",
-        "allowed_values": "Blue,Yellow"
-    }"#,
-);
-
-fn asset_property1() -> AssetPropertyRow {
-    AssetPropertyRow {
-        id: ASSET_PROPERTY1.0.to_string(),
-        asset_class_id: None,
-        asset_category_id: Some("02cbea92-d5bf-4832-863b-c04e093a7760".to_string()), // Refrigerators and freezers
-        asset_type_id: None,
-        key: "favourite_colour".to_string(),
-        name: "Your favourite colour".to_string(),
-        value_type: PropertyValueType::String,
-        allowed_values: Some("Blue,Yellow".to_string()),
-    }
-}
-
-pub(crate) fn test_pull_upsert_records() -> Vec<TestSyncIncomingRecord> {
-    vec![TestSyncIncomingRecord::new_pull_upsert(
-        TABLE_NAME,
-        ASSET_PROPERTY1,
-        asset_property1(),
-    )]
-}
-
-pub(crate) fn test_v6_central_push_records() -> Vec<TestSyncOutgoingRecord> {
-    vec![TestSyncOutgoingRecord {
-        table_name: TABLE_NAME.to_string(),
-        record_id: ASSET_PROPERTY1.0.to_string(),
-        push_data: json!(asset_property1()),
-    }]
-}
diff --git a/server/service/src/sync/test/test_data/barcode.rs b/server/service/src/sync/test/test_data/barcode.rs
index 3d9249e1e..402934f24 100644
--- a/server/service/src/sync/test/test_data/barcode.rs
+++ b/server/service/src/sync/test/test_data/barcode.rs
@@ -42,7 +42,7 @@ pub(crate) fn test_pull_upsert_records() -> Vec<TestSyncIncomingRecord> {
                 gtin: "0123456789".to_string(),
                 item_id: "item_a".to_string(),
                 manufacturer_link_id: Some("name_a".to_string()),
-                pack_size: Some(1.0),
+                pack_size: Some(1),
                 parent_id: None,
             },
         ),
@@ -54,7 +54,7 @@ pub(crate) fn test_pull_upsert_records() -> Vec<TestSyncIncomingRecord> {
                 gtin: "9876543210".to_string(),
                 item_id: "item_b".to_string(),
                 manufacturer_link_id: Some("name_a".to_string()),
-                pack_size: Some(1.0),
+                pack_size: Some(1),
                 parent_id: None,
             },
         ),
@@ -71,7 +71,7 @@ pub(crate) fn test_push_records() -> Vec<TestSyncOutgoingRecord> {
                 gtin: "0123456789".to_string(),
                 item_id: "item_a".to_string(),
                 manufacturer_id: Some("name_a".to_string()),
-                pack_size: Some(1.0),
+                pack_size: Some(1),
                 parent_id: None,
             }),
         },
@@ -83,7 +83,7 @@ pub(crate) fn test_push_records() -> Vec<TestSyncOutgoingRecord> {
                 gtin: "9876543210".to_string(),
                 item_id: "item_b".to_string(),
                 manufacturer_id: Some("name_a".to_string()),
-                pack_size: Some(1.0),
+                pack_size: Some(1),
                 parent_id: None,
             }),
         },
diff --git a/server/service/src/sync/test/test_data/invoice_line.rs b/server/service/src/sync/test/test_data/invoice_line.rs
index 12dde971a..5bb7514d5 100644
--- a/server/service/src/sync/test/test_data/invoice_line.rs
+++ b/server/service/src/sync/test/test_data/invoice_line.rs
@@ -82,7 +82,7 @@ fn trans_line_1_pull_record() -> TestSyncIncomingRecord {
             location_id: None,
             batch: Some("stocktake_1".to_string()),
             expiry_date: None,
-            pack_size: 1.0,
+            pack_size: 1,
             cost_price_per_pack: 10.0,
             sell_price_per_pack: 0.0,
             total_before_tax: 10.0 * 700.36363636,
@@ -110,7 +110,7 @@ fn trans_line_1_push_record() -> TestSyncOutgoingRecord {
             location_id: None,
             batch: Some("stocktake_1".to_string()),
             expiry_date: None,
-            pack_size: 1.0,
+            pack_size: 1,
             cost_price_per_pack: 10.0,
             sell_price_per_pack: 0.0,
             r#type: LegacyTransLineType::StockIn,
@@ -197,7 +197,7 @@ fn trans_line_2_pull_record() -> TestSyncIncomingRecord {
             location_id: None,
             batch: None,
             expiry_date: Some(NaiveDate::from_ymd_opt(2022, 2, 22).unwrap()),
-            pack_size: 5.0,
+            pack_size: 5,
             cost_price_per_pack: 5.0,
             sell_price_per_pack: 2.0,
             total_before_tax: 2.0 * 1000.9124798,
@@ -225,7 +225,7 @@ fn trans_line_2_push_record() -> TestSyncOutgoingRecord {
             location_id: None,
             batch: None,
             expiry_date: Some(NaiveDate::from_ymd_opt(2022, 2, 22).unwrap()),
-            pack_size: 5.0,
+            pack_size: 5,
             cost_price_per_pack: 5.0,
             sell_price_per_pack: 2.0,
             r#type: LegacyTransLineType::StockOut,
@@ -315,7 +315,7 @@ fn trans_line_om_fields_pull_record() -> TestSyncIncomingRecord {
             location_id: None,
             batch: None,
             expiry_date: Some(NaiveDate::from_ymd_opt(2022, 2, 22).unwrap()),
-            pack_size: 5.0,
+            pack_size: 5,
             cost_price_per_pack: 5.0,
             sell_price_per_pack: 2.0,
             total_before_tax: 105.4,
@@ -343,7 +343,7 @@ fn trans_line_om_fields_push_record() -> TestSyncOutgoingRecord {
             location_id: None,
             batch: None,
             expiry_date: Some(NaiveDate::from_ymd_opt(2022, 2, 22).unwrap()),
-            pack_size: 5.0,
+            pack_size: 5,
             cost_price_per_pack: 5.0,
             sell_price_per_pack: 2.0,
             r#type: LegacyTransLineType::StockOut,
@@ -433,7 +433,7 @@ fn trans_line_om_fields_unset_tax_pull_record() -> TestSyncIncomingRecord {
             location_id: None,
             batch: None,
             expiry_date: Some(NaiveDate::from_ymd_opt(2022, 2, 22).unwrap()),
-            pack_size: 5.0,
+            pack_size: 5,
             cost_price_per_pack: 5.0,
             sell_price_per_pack: 2.0,
             total_before_tax: 105.4,
@@ -461,7 +461,7 @@ fn trans_line_om_fields_unset_tax_push_record() -> TestSyncOutgoingRecord {
             location_id: None,
             batch: None,
             expiry_date: Some(NaiveDate::from_ymd_opt(2022, 2, 22).unwrap()),
-            pack_size: 5.0,
+            pack_size: 5,
             cost_price_per_pack: 5.0,
             sell_price_per_pack: 2.0,
             r#type: LegacyTransLineType::StockOut,
diff --git a/server/service/src/sync/test/test_data/item.rs b/server/service/src/sync/test/test_data/item.rs
index 5919c6c9d..219835455 100644
--- a/server/service/src/sync/test/test_data/item.rs
+++ b/server/service/src/sync/test/test_data/item.rs
@@ -175,7 +175,7 @@ pub(crate) fn test_pull_upsert_records() -> Vec<TestSyncIncomingRecord> {
                 unit_id: None,
                 r#type: ItemType::NonStock,
                 legacy_record: ordered_simple_json(ITEM_1.1).unwrap(),
-                default_pack_size: 1.0,
+                default_pack_size: 1,
                 is_active: true,
             },
         ),
@@ -189,7 +189,7 @@ pub(crate) fn test_pull_upsert_records() -> Vec<TestSyncIncomingRecord> {
                 unit_id: Some("A02C91EB6C77400BA783C4CD7C565F29".to_owned()),
                 r#type: ItemType::Stock,
                 legacy_record: ordered_simple_json(ITEM_2.1).unwrap(),
-                default_pack_size: 2.0,
+                default_pack_size: 2,
                 is_active: true,
             },
         ),
diff --git a/server/service/src/sync/test/test_data/master_list_line.rs b/server/service/src/sync/test/test_data/master_list_line.rs
index 3702d73e3..58d2cfc2e 100644
--- a/server/service/src/sync/test/test_data/master_list_line.rs
+++ b/server/service/src/sync/test/test_data/master_list_line.rs
@@ -1,25 +1,12 @@
-use repository::{MasterListLineRow, SyncBufferRow};
-use util::inline_init;
+use repository::MasterListLineRow;
 
-use crate::sync::{test::TestSyncIncomingRecord, translations::PullTranslateResult};
+use crate::sync::test::TestSyncIncomingRecord;
 
 const MASTER_LIST_LINE_1: (&str, &str) = (
     "9B02D0770B544BD1AC7DB99BB85FCDD5",
     r#"{
     "ID": "9B02D0770B544BD1AC7DB99BB85FCDD5",
-    "item_master_ID": "item_query_test1",
-    "item_ID": "item_a",
-    "imprest_quan": 0,
-    "order_number": 1,
-    "price": 0
-  }"#,
-);
-
-const MASTER_LIST_LINE_2: (&str, &str) = (
-    "orphan",
-    r#"{
-    "ID": "9B02D0770B544BD1AC7DB99BB85FCDD5",
-    "item_master_ID": "orphan",
+    "item_master_ID": "87027C44835B48E6989376F42A58F7E3",
     "item_ID": "8F252B5884B74888AAB73A0D42C09E7F",
     "imprest_quan": 0,
     "order_number": 1,
@@ -27,30 +14,14 @@ const MASTER_LIST_LINE_2: (&str, &str) = (
   }"#,
 );
 
-fn master_list_line_a() -> TestSyncIncomingRecord {
-    TestSyncIncomingRecord::new_pull_upsert(
+pub(crate) fn test_pull_upsert_records() -> Vec<TestSyncIncomingRecord> {
+    vec![TestSyncIncomingRecord::new_pull_upsert(
         "list_master_line",
         MASTER_LIST_LINE_1,
         MasterListLineRow {
             id: "9B02D0770B544BD1AC7DB99BB85FCDD5".to_owned(),
-            item_link_id: "item_a".to_owned(),
-            master_list_id: "item_query_test1".to_owned(),
+            item_link_id: "8F252B5884B74888AAB73A0D42C09E7F".to_owned(),
+            master_list_id: "87027C44835B48E6989376F42A58F7E3".to_owned(),
         },
-    )
-}
-
-fn master_list_line_b() -> TestSyncIncomingRecord {
-    TestSyncIncomingRecord {
-        translated_record: PullTranslateResult::Ignored("Missing master list".to_string()),
-        sync_buffer_row: inline_init(|r: &mut SyncBufferRow| {
-            r.table_name = "list_master_line".to_owned();
-            r.record_id = MASTER_LIST_LINE_2.0.to_owned();
-            r.data = MASTER_LIST_LINE_2.1.to_owned();
-        }),
-        extra_data: None,
-    }
-}
-
-pub(crate) fn test_pull_upsert_records() -> Vec<TestSyncIncomingRecord> {
-    vec![master_list_line_a(), master_list_line_b()]
+    )]
 }
diff --git a/server/service/src/sync/test/test_data/mod.rs b/server/service/src/sync/test/test_data/mod.rs
index 260dd474a..6eae1fe38 100644
--- a/server/service/src/sync/test/test_data/mod.rs
+++ b/server/service/src/sync/test/test_data/mod.rs
@@ -5,11 +5,12 @@ use super::{TestSyncIncomingRecord, TestSyncOutgoingRecord};
 pub(crate) mod activity_log;
 pub(crate) mod asset;
 pub(crate) mod asset_catalogue_item;
+pub(crate) mod asset_catalogue_item_property;
+pub(crate) mod asset_catalogue_property;
 pub(crate) mod asset_category;
 pub(crate) mod asset_class;
 pub(crate) mod asset_log;
 pub(crate) mod asset_log_reason;
-pub(crate) mod asset_property;
 pub(crate) mod asset_type;
 pub(crate) mod barcode;
 pub(crate) mod currency;
@@ -74,11 +75,12 @@ pub(crate) fn get_all_pull_upsert_central_test_records() -> Vec<TestSyncIncoming
     test_records.append(&mut asset_category::test_pull_upsert_records());
     test_records.append(&mut asset_type::test_pull_upsert_records());
     test_records.append(&mut asset_catalogue_item::test_pull_upsert_records());
+    test_records.append(&mut asset_catalogue_property::test_pull_upsert_records());
+    test_records.append(&mut asset_catalogue_item_property::test_pull_upsert_records());
     test_records.append(&mut asset::test_pull_upsert_records());
     test_records.append(&mut asset_log::test_pull_upsert_records());
     test_records.append(&mut asset_log_reason::test_pull_upsert_records());
     test_records.append(&mut sync_file_reference::test_pull_upsert_records());
-    test_records.append(&mut asset_property::test_pull_upsert_records());
     test_records
 }
 
@@ -161,11 +163,12 @@ pub(crate) fn get_all_sync_v6_records() -> Vec<TestSyncOutgoingRecord> {
     test_records.append(&mut asset_category::test_v6_central_push_records());
     test_records.append(&mut asset_type::test_v6_central_push_records());
     test_records.append(&mut asset_catalogue_item::test_v6_central_push_records());
+    test_records.append(&mut asset_catalogue_item_property::test_v6_central_push_records());
+    test_records.append(&mut asset_catalogue_property::test_v6_central_push_records());
     test_records.append(&mut asset::test_v6_records());
     test_records.append(&mut asset_log::test_v6_records());
     test_records.append(&mut asset_log_reason::test_v6_records());
     test_records.append(&mut sync_file_reference::test_v6_records());
-    test_records.append(&mut asset_property::test_v6_central_push_records());
 
     test_records
 }
diff --git a/server/service/src/sync/test/test_data/pack_variant.rs b/server/service/src/sync/test/test_data/pack_variant.rs
index 279f19e42..fa75eaeda 100644
--- a/server/service/src/sync/test/test_data/pack_variant.rs
+++ b/server/service/src/sync/test/test_data/pack_variant.rs
@@ -23,7 +23,7 @@ fn pack_variant1() -> PackVariantRow {
         item_id: "item_a".to_string(),
         short_name: "Some short name".to_string(),
         long_name: "Some long name".to_string(),
-        pack_size: 100.0,
+        pack_size: 100,
         is_active: true,
     }
 }
diff --git a/server/service/src/sync/test/test_data/program_requisition_settings.rs b/server/service/src/sync/test/test_data/program_requisition_settings.rs
index 87cc4bf68..864972bb5 100644
--- a/server/service/src/sync/test/test_data/program_requisition_settings.rs
+++ b/server/service/src/sync/test/test_data/program_requisition_settings.rs
@@ -128,9 +128,8 @@ pub(crate) fn test_pull_upsert_records() -> Vec<TestSyncIncomingRecord> {
                 IntegrationOperation::upsert(ProgramRow {
                     id: MASTER_LIST_WITH_PROGRAM_1.0.to_owned(),
                     name: "Program Test 01".to_owned(),
-                    master_list_id: Some(MASTER_LIST_WITH_PROGRAM_1.0.to_owned()),
+                    master_list_id: MASTER_LIST_WITH_PROGRAM_1.0.to_owned(),
                     context_id: MASTER_LIST_WITH_PROGRAM_1.0.to_owned(),
-                    is_immunisation: false,
                 }),
                 IntegrationOperation::upsert(ProgramRequisitionSettingsRow {
                     id: MASTER_LIST_WITH_PROGRAM_1.0.to_owned() + &mock_name_tag_1().id,
@@ -213,9 +212,8 @@ pub(crate) fn test_pull_upsert_records() -> Vec<TestSyncIncomingRecord> {
                 IntegrationOperation::upsert(ProgramRow {
                     id: MASTER_LIST_WITH_PROGRAM_2.0.to_owned(),
                     name: "Program Test 02".to_owned(),
-                    master_list_id: Some(MASTER_LIST_WITH_PROGRAM_2.0.to_owned()),
+                    master_list_id: MASTER_LIST_WITH_PROGRAM_2.0.to_owned(),
                     context_id: MASTER_LIST_WITH_PROGRAM_2.0.to_owned(),
-                    is_immunisation: false,
                 }),
                 IntegrationOperation::upsert(ProgramRequisitionSettingsRow {
                     id: MASTER_LIST_WITH_PROGRAM_2.0.to_owned() + &mock_name_tag_1().id,
diff --git a/server/service/src/sync/test/test_data/requisition_line.rs b/server/service/src/sync/test/test_data/requisition_line.rs
index f05edd70e..16b09bad6 100644
--- a/server/service/src/sync/test/test_data/requisition_line.rs
+++ b/server/service/src/sync/test/test_data/requisition_line.rs
@@ -52,14 +52,14 @@ fn requisition_line_request_pull_record() -> TestSyncIncomingRecord {
             id: REQUISITION_LINE_1.0.to_string(),
             requisition_id: "mock_request_draft_requisition3".to_string(),
             item_link_id: "item_a".to_string(),
-            requested_quantity: 102.0,
-            suggested_quantity: 101.0,
-            supply_quantity: 2.0,
-            available_stock_on_hand: 10.0,
-            average_monthly_consumption: 3.0 * NUMBER_OF_DAYS_IN_A_MONTH,
+            requested_quantity: 102,
+            suggested_quantity: 101,
+            supply_quantity: 2,
+            available_stock_on_hand: 10,
+            average_monthly_consumption: 3 * NUMBER_OF_DAYS_IN_A_MONTH as i32,
             comment: None,
             snapshot_datetime: None,
-            approved_quantity: 0.0,
+            approved_quantity: 0,
             approval_comment: None,
             item_name: "Ibuprofen 200mg tablets".to_string(),
         },
@@ -73,14 +73,14 @@ fn requisition_line_request_push_record() -> TestSyncOutgoingRecord {
             ID: REQUISITION_LINE_1.0.to_string(),
             requisition_ID: "mock_request_draft_requisition3".to_string(),
             item_ID: "item_a".to_string(),
-            Cust_stock_order: 102.0,
-            suggested_quantity: 101.0,
-            actualQuan: 2.0,
-            stock_on_hand: 10.0,
+            Cust_stock_order: 102,
+            suggested_quantity: 101,
+            actualQuan: 2,
+            stock_on_hand: 10,
             daily_usage: 3.0,
             comment: None,
             snapshot_datetime: None,
-            approved_quantity: 0.0,
+            approved_quantity: 0,
             approval_comment: None,
             item_name: "Ibuprofen 200mg tablets".to_string()
         }),
@@ -131,13 +131,13 @@ fn requisition_line_om_fields_pull_record() -> TestSyncIncomingRecord {
             id: REQUISITION_LINE_OM_FIELD.0.to_string(),
             requisition_id: "mock_request_draft_requisition3".to_string(),
             item_link_id: "item_a".to_string(),
-            requested_quantity: 102.0,
-            suggested_quantity: 101.0,
-            supply_quantity: 2.0,
-            available_stock_on_hand: 10.0,
-            approved_quantity: 0.0,
+            requested_quantity: 102,
+            suggested_quantity: 101,
+            supply_quantity: 2,
+            available_stock_on_hand: 10,
+            approved_quantity: 0,
             approval_comment: Some("approval comment".to_string()),
-            average_monthly_consumption: 3.0 * NUMBER_OF_DAYS_IN_A_MONTH,
+            average_monthly_consumption: 3 * NUMBER_OF_DAYS_IN_A_MONTH as i32,
             comment: Some("Some comment".to_string()),
             snapshot_datetime: Some(
                 NaiveDate::from_ymd_opt(2022, 4, 4)
@@ -157,12 +157,12 @@ fn requisition_line_om_fields_push_record() -> TestSyncOutgoingRecord {
             ID: REQUISITION_LINE_OM_FIELD.0.to_string(),
             requisition_ID: "mock_request_draft_requisition3".to_string(),
             item_ID: "item_a".to_string(),
-            Cust_stock_order: 102.0,
-            suggested_quantity: 101.0,
-            actualQuan: 2.0,
-            stock_on_hand: 10.0,
+            Cust_stock_order: 102,
+            suggested_quantity: 101,
+            actualQuan: 2,
+            stock_on_hand: 10,
             daily_usage: 3.0,
-            approved_quantity: 0.0,
+            approved_quantity: 0,
             approval_comment: Some("approval comment".to_string()),
             comment: Some("Some comment".to_string()),
             item_name: "Ibuprofen 200mg tablets".to_string(),
diff --git a/server/service/src/sync/test/test_data/stock_line.rs b/server/service/src/sync/test/test_data/stock_line.rs
index 6432bf030..1b8e50c86 100644
--- a/server/service/src/sync/test/test_data/stock_line.rs
+++ b/server/service/src/sync/test/test_data/stock_line.rs
@@ -61,7 +61,7 @@ fn item_line_1_pull_record() -> TestSyncIncomingRecord {
             item_link_id: "item_a".to_string(),
             location_id: None,
             batch: Some("stocktake_1".to_string()),
-            pack_size: 1.0,
+            pack_size: 1,
             cost_price_per_pack: 5.0,
             sell_price_per_pack: 10.0,
             available_number_of_packs: 694.0,
@@ -86,7 +86,7 @@ fn item_line_1_push_record() -> TestSyncOutgoingRecord {
             expiry_date: Some(NaiveDate::from_ymd_opt(2022, 2, 17).unwrap()),
             hold: false,
             location_ID: None,
-            pack_size: 1.0,
+            pack_size: 1,
             available: 694.0,
             quantity: 694.0,
             cost_price: 5.0,
@@ -151,7 +151,7 @@ fn item_line_2_pull_record() -> TestSyncIncomingRecord {
             item_link_id: "item_b".to_string(),
             location_id: None,
             batch: Some("none".to_string()),
-            pack_size: 1.0,
+            pack_size: 1,
             cost_price_per_pack: 0.0,
             sell_price_per_pack: 0.0,
             available_number_of_packs: 1000.0,
@@ -176,7 +176,7 @@ fn item_line_2_push_record() -> TestSyncOutgoingRecord {
             expiry_date: None,
             hold: false,
             location_ID: None,
-            pack_size: 1.0,
+            pack_size: 1,
             available: 1000.0,
             quantity: 1001.0,
             cost_price: 0.0,
diff --git a/server/service/src/sync/test/test_data/stocktake_line.rs b/server/service/src/sync/test/test_data/stocktake_line.rs
index cbd2fc04b..e681118af 100644
--- a/server/service/src/sync/test/test_data/stocktake_line.rs
+++ b/server/service/src/sync/test/test_data/stocktake_line.rs
@@ -49,7 +49,7 @@ fn stocktake_line_pull_record() -> TestSyncIncomingRecord {
             item_name: mock_item_a().name,
             batch: Some("item_c_batch_a".to_string()),
             expiry_date: None,
-            pack_size: Some(1.0),
+            pack_size: Some(1),
             cost_price_per_pack: Some(12.0),
             sell_price_per_pack: Some(15.0),
             note: None,
@@ -67,7 +67,7 @@ fn stocktake_line_push_record() -> TestSyncOutgoingRecord {
             location_id: None,
             comment: None,
             snapshot_qty: 10.0,
-            snapshot_packsize: 1.0,
+            snapshot_packsize: 1,
             stock_take_qty: 700.0,
             is_edited: true,
             item_line_ID: Some("item_c_line_a".to_string()),
@@ -126,7 +126,7 @@ fn stocktake_line_om_field_pull_record() -> TestSyncIncomingRecord {
             item_name: mock_item_a().name,
             batch: Some("item_c_batch_a".to_string()),
             expiry_date: None,
-            pack_size: Some(1.0),
+            pack_size: Some(1),
             cost_price_per_pack: Some(12.0),
             sell_price_per_pack: Some(15.0),
             note: Some("om note".to_string()),
@@ -144,7 +144,7 @@ fn stocktake_line_om_field_push_record() -> TestSyncOutgoingRecord {
             location_id: None,
             comment: None,
             snapshot_qty: 10.0,
-            snapshot_packsize: 1.0,
+            snapshot_packsize: 1,
             stock_take_qty: 700.0,
             is_edited: true,
             item_line_ID: Some("item_c_line_a".to_string()),
diff --git a/server/service/src/sync/test/test_data/store.rs b/server/service/src/sync/test/test_data/store.rs
index 09da57ad3..e7d275bbe 100644
--- a/server/service/src/sync/test/test_data/store.rs
+++ b/server/service/src/sync/test/test_data/store.rs
@@ -114,7 +114,7 @@ const STORE_2: (&str, &str) = (
 fn store_2() -> TestSyncIncomingRecord {
     TestSyncIncomingRecord {
         translated_record: PullTranslateResult::Ignored(
-            "System names not implemented".to_string(),
+            "Ignoring not implemented system names".to_string(),
         ),
         sync_buffer_row: inline_init(|r: &mut SyncBufferRow| {
             r.table_name = TABLE_NAME.to_owned();
@@ -174,7 +174,7 @@ const STORE_3: (&str, &str) = (
 fn store_3() -> TestSyncIncomingRecord {
     TestSyncIncomingRecord {
         translated_record: PullTranslateResult::Ignored(
-            "System names not implemented".to_string(),
+            "Ignoring not implemented system names".to_string(),
         ),
         sync_buffer_row: inline_init(|r: &mut SyncBufferRow| {
             r.table_name = TABLE_NAME.to_owned();
@@ -234,7 +234,7 @@ const STORE_4: (&str, &str) = (
 fn store_4() -> TestSyncIncomingRecord {
     TestSyncIncomingRecord {
         translated_record: PullTranslateResult::Ignored(
-            "System names not implemented".to_string(),
+            "Ignoring not implemented system names".to_string(),
         ),
         sync_buffer_row: inline_init(|r: &mut SyncBufferRow| {
             r.table_name = TABLE_NAME.to_owned();
diff --git a/server/service/src/sync/translation_and_integration.rs b/server/service/src/sync/translation_and_integration.rs
index cfac58d04..e4ba4fdff 100644
--- a/server/service/src/sync/translation_and_integration.rs
+++ b/server/service/src/sync/translation_and_integration.rs
@@ -4,7 +4,7 @@ use super::{
     translations::{IntegrationOperation, PullTranslateResult, SyncTranslation, SyncTranslators},
 };
 use crate::usize_to_u64;
-use log::{debug, warn};
+use log::warn;
 use repository::*;
 use std::collections::HashMap;
 
@@ -40,7 +40,7 @@ impl<'a> TranslationAndIntegration<'a> {
         &self,
         sync_record: &SyncBufferRow,
         translators: &SyncTranslators,
-    ) -> Result<Vec<PullTranslateResult>, anyhow::Error> {
+    ) -> Result<Option<Vec<IntegrationOperation>>, anyhow::Error> {
         let mut translation_results = Vec::new();
 
         for translator in translators.iter() {
@@ -65,10 +65,22 @@ impl<'a> TranslationAndIntegration<'a> {
                 None => {}
             }
 
-            translation_results.push(translation_result);
+            match translation_result {
+                PullTranslateResult::IntegrationOperations(records) => {
+                    translation_results.push(records)
+                }
+                PullTranslateResult::Ignored(ignore_message) => {
+                    log::debug!("Ignored record in push translation: {}", ignore_message)
+                }
+                PullTranslateResult::NotMatched => {}
+            }
         }
 
-        Ok(translation_results)
+        if translation_results.is_empty() {
+            Ok(None)
+        } else {
+            Ok(Some(translation_results.into_iter().flatten().collect()))
+        }
     }
 
     pub(crate) fn translate_and_integrate_sync_records(
@@ -95,65 +107,38 @@ impl<'a> TranslationAndIntegration<'a> {
         };
 
         for (number_of_records_integrated, sync_record) in sync_records.into_iter().enumerate() {
-            let pull_translation_results =
-                match self.translate_sync_record(&sync_record, translators) {
-                    Ok(translation_result) => translation_result,
-                    // Record error in sync buffer and in result, continue to next sync_record
-                    Err(translation_error) => {
-                        self.sync_buffer
-                            .record_integration_error(&sync_record, &translation_error)?;
-                        result.insert_error(&sync_record.table_name);
-                        warn!(
-                            "{:?} {:?} {:?}",
-                            translation_error, sync_record.record_id, sync_record.table_name
-                        );
-                        // Next sync_record
-                        continue;
-                    }
-                };
-
-            let mut integration_records = Vec::new();
-            let mut ignored = false;
-            for pull_translation_result in pull_translation_results {
-                match pull_translation_result {
-                    PullTranslateResult::IntegrationOperations(mut operations) => {
-                        integration_records.append(&mut operations)
-                    }
-                    PullTranslateResult::Ignored(ignore_message) => {
-                        ignored = true;
-                        self.sync_buffer.record_integration_error(
-                            &sync_record,
-                            &anyhow::anyhow!("Ignored: {}", ignore_message),
-                        )?;
-                        result.insert_error(&sync_record.table_name);
-
-                        debug!(
-                            "Ignored record: {:?} {:?} {:?}",
-                            ignore_message, sync_record.record_id, sync_record.table_name
-                        );
-                        continue;
-                    }
-                    PullTranslateResult::NotMatched => {}
+            let translation_result = match self.translate_sync_record(&sync_record, translators) {
+                Ok(translation_result) => translation_result,
+                // Record error in sync buffer and in result, continue to next sync_record
+                Err(translation_error) => {
+                    self.sync_buffer
+                        .record_integration_error(&sync_record, &translation_error)?;
+                    result.insert_error(&sync_record.table_name);
+                    warn!(
+                        "{:?} {:?} {:?}",
+                        translation_error, sync_record.record_id, sync_record.table_name
+                    );
+                    // Next sync_record
+                    continue;
                 }
-            }
-
-            if ignored {
-                continue;
-            }
+            };
 
-            // Record translator not found error in sync buffer and in result, continue to next sync_record
-            if integration_records.is_empty() {
-                let error = anyhow::anyhow!("Translator for record not found");
-                self.sync_buffer
-                    .record_integration_error(&sync_record, &error)?;
-                result.insert_error(&sync_record.table_name);
-                warn!(
-                    "{:?} {:?} {:?}",
-                    error, sync_record.record_id, sync_record.table_name
-                );
-                // Next sync_record
-                continue;
-            }
+            let integration_records = match translation_result {
+                Some(integration_records) => integration_records,
+                // Record translator not found error in sync buffer and in result, continue to next sync_record
+                None => {
+                    let error = anyhow::anyhow!("Translator for record not found");
+                    self.sync_buffer
+                        .record_integration_error(&sync_record, &error)?;
+                    result.insert_error(&sync_record.table_name);
+                    warn!(
+                        "{:?} {:?} {:?}",
+                        error, sync_record.record_id, sync_record.table_name
+                    );
+                    // Next sync_record
+                    continue;
+                }
+            };
 
             // Integrate
             let integration_result = integrate(self.connection, &integration_records);
@@ -281,7 +266,7 @@ mod test {
 
                 assert_eq!(result, Ok(()));
 
-                // Fails due to referential constraint
+                // Fails due to referencial constraint
                 let result = integrate(
                     connection,
                     &[IntegrationOperation::upsert(inline_init(
@@ -300,7 +285,7 @@ mod test {
 
         // Record should exist
         assert_matches!(
-            UnitRowRepository::new(&connection).find_one_by_id("unit"),
+            UnitRowRepository::new(&connection).find_one_by_id_option("unit"),
             Ok(Some(_))
         );
 
diff --git a/server/service/src/sync/translations/asset_catalogue_item_property.rs b/server/service/src/sync/translations/asset_catalogue_item_property.rs
new file mode 100644
index 000000000..37ec2cd09
--- /dev/null
+++ b/server/service/src/sync/translations/asset_catalogue_item_property.rs
@@ -0,0 +1,108 @@
+use repository::{
+    asset_catalogue_item_property_row::{
+        AssetCatalogueItemPropertyRow, AssetCatalogueItemPropertyRowRepository,
+    },
+    ChangelogRow, ChangelogTableName, StorageConnection, SyncBufferRow,
+};
+
+use crate::sync::translations::asset_catalogue_item::AssetCatalogueItemTranslation;
+use crate::sync::translations::asset_catalogue_property::AssetCataloguePropertyTranslation;
+
+use super::{
+    PullTranslateResult, PushTranslateResult, SyncTranslation, ToSyncRecordTranslationType,
+};
+
+// Needs to be added to all_translators()
+#[deny(dead_code)]
+pub(crate) fn boxed() -> Box<dyn SyncTranslation> {
+    Box::new(AssetCatalogueItemPropertyTranslation)
+}
+
+struct AssetCatalogueItemPropertyTranslation;
+
+impl SyncTranslation for AssetCatalogueItemPropertyTranslation {
+    fn table_name(&self) -> &str {
+        "asset_catalogue_item_property"
+    }
+
+    fn pull_dependencies(&self) -> Vec<&str> {
+        vec![
+            AssetCatalogueItemTranslation.table_name(),
+            AssetCataloguePropertyTranslation.table_name(),
+        ]
+    }
+
+    fn try_translate_from_upsert_sync_record(
+        &self,
+        _: &StorageConnection,
+        sync_record: &SyncBufferRow,
+    ) -> Result<PullTranslateResult, anyhow::Error> {
+        Ok(PullTranslateResult::upsert(serde_json::from_str::<
+            AssetCatalogueItemPropertyRow,
+        >(&sync_record.data)?))
+    }
+
+    fn change_log_type(&self) -> Option<ChangelogTableName> {
+        Some(ChangelogTableName::AssetCatalogueItemProperty)
+    }
+
+    // Only translating and pulling from central server
+    fn should_translate_to_sync_record(
+        &self,
+        row: &ChangelogRow,
+        r#type: &ToSyncRecordTranslationType,
+    ) -> bool {
+        match r#type {
+            ToSyncRecordTranslationType::PullFromOmSupplyCentral => {
+                self.change_log_type().as_ref() == Some(&row.table_name)
+            }
+            _ => false,
+        }
+    }
+
+    fn try_translate_to_upsert_sync_record(
+        &self,
+        connection: &StorageConnection,
+        changelog: &ChangelogRow,
+    ) -> Result<PushTranslateResult, anyhow::Error> {
+        let row = AssetCatalogueItemPropertyRowRepository::new(connection)
+            .find_one_by_id(&changelog.record_id)?
+            .ok_or(anyhow::Error::msg(format!(
+                "AssetCatalogueItemProperty row ({}) not found",
+                changelog.record_id
+            )))?;
+
+        Ok(PushTranslateResult::upsert(
+            changelog,
+            self.table_name(),
+            serde_json::to_value(row)?,
+        ))
+    }
+}
+
+#[cfg(test)]
+mod tests {
+    use super::*;
+    use repository::{mock::MockDataInserts, test_db::setup_all};
+
+    #[actix_rt::test]
+    async fn test_asset_catalogue_item_property_translation() {
+        use crate::sync::test::test_data::asset_catalogue_item_property as test_data;
+        let translator = AssetCatalogueItemPropertyTranslation;
+
+        let (_, connection, _, _) = setup_all(
+            "test_asset_catalogue_item_property_translation",
+            MockDataInserts::none(),
+        )
+        .await;
+
+        for record in test_data::test_pull_upsert_records() {
+            assert!(translator.should_translate_from_sync_record(&record.sync_buffer_row));
+            let translation_result = translator
+                .try_translate_from_upsert_sync_record(&connection, &record.sync_buffer_row)
+                .unwrap();
+
+            assert_eq!(translation_result, record.translated_record);
+        }
+    }
+}
diff --git a/server/service/src/sync/translations/asset_property.rs b/server/service/src/sync/translations/asset_catalogue_property.rs
similarity index 74%
rename from server/service/src/sync/translations/asset_property.rs
rename to server/service/src/sync/translations/asset_catalogue_property.rs
index f04da987c..6de71e311 100644
--- a/server/service/src/sync/translations/asset_property.rs
+++ b/server/service/src/sync/translations/asset_catalogue_property.rs
@@ -1,5 +1,7 @@
 use repository::{
-    asset_property_row::{AssetPropertyRow, AssetPropertyRowRepository},
+    asset_catalogue_property_row::{
+        AssetCataloguePropertyRow, AssetCataloguePropertyRowRepository,
+    },
     ChangelogRow, ChangelogTableName, StorageConnection, SyncBufferRow,
 };
 
@@ -14,14 +16,14 @@ use super::{
 // Needs to be added to all_translators()
 #[deny(dead_code)]
 pub(crate) fn boxed() -> Box<dyn SyncTranslation> {
-    Box::new(AssetPropertyTranslation)
+    Box::new(AssetCataloguePropertyTranslation)
 }
 
-pub(crate) struct AssetPropertyTranslation;
+pub(crate) struct AssetCataloguePropertyTranslation;
 
-impl SyncTranslation for AssetPropertyTranslation {
+impl SyncTranslation for AssetCataloguePropertyTranslation {
     fn table_name(&self) -> &str {
-        "asset_property"
+        "asset_catalogue_property"
     }
 
     fn pull_dependencies(&self) -> Vec<&str> {
@@ -38,12 +40,12 @@ impl SyncTranslation for AssetPropertyTranslation {
         sync_record: &SyncBufferRow,
     ) -> Result<PullTranslateResult, anyhow::Error> {
         Ok(PullTranslateResult::upsert(serde_json::from_str::<
-            AssetPropertyRow,
+            AssetCataloguePropertyRow,
         >(&sync_record.data)?))
     }
 
     fn change_log_type(&self) -> Option<ChangelogTableName> {
-        Some(ChangelogTableName::AssetProperty)
+        Some(ChangelogTableName::AssetCatalogueProperty)
     }
 
     // Only translating and pulling from central server
@@ -65,10 +67,10 @@ impl SyncTranslation for AssetPropertyTranslation {
         connection: &StorageConnection,
         changelog: &ChangelogRow,
     ) -> Result<PushTranslateResult, anyhow::Error> {
-        let row = AssetPropertyRowRepository::new(connection)
+        let row = AssetCataloguePropertyRowRepository::new(connection)
             .find_one_by_id(&changelog.record_id)?
             .ok_or(anyhow::Error::msg(format!(
-                "AssetProperty row ({}) not found",
+                "AssetCatalogueProperty row ({}) not found",
                 changelog.record_id
             )))?;
 
@@ -86,12 +88,15 @@ mod tests {
     use repository::{mock::MockDataInserts, test_db::setup_all};
 
     #[actix_rt::test]
-    async fn test_asset_property_translation() {
-        use crate::sync::test::test_data::asset_property as test_data;
-        let translator = AssetPropertyTranslation;
-
-        let (_, connection, _, _) =
-            setup_all("test_asset_property_translation", MockDataInserts::none()).await;
+    async fn test_asset_catalogue_property_translation() {
+        use crate::sync::test::test_data::asset_catalogue_property as test_data;
+        let translator = AssetCataloguePropertyTranslation;
+
+        let (_, connection, _, _) = setup_all(
+            "test_asset_catalogue_property_translation",
+            MockDataInserts::none(),
+        )
+        .await;
 
         for record in test_data::test_pull_upsert_records() {
             assert!(translator.should_translate_from_sync_record(&record.sync_buffer_row));
diff --git a/server/service/src/sync/translations/barcode.rs b/server/service/src/sync/translations/barcode.rs
index 101eef5e0..08d2fcf06 100644
--- a/server/service/src/sync/translations/barcode.rs
+++ b/server/service/src/sync/translations/barcode.rs
@@ -21,7 +21,7 @@ pub struct LegacyBarcodeRow {
     #[serde(rename = "manufacturerID")]
     pub manufacturer_id: Option<String>,
     #[serde(rename = "packSize")]
-    pub pack_size: Option<f64>,
+    pub pack_size: Option<i32>,
     #[serde(deserialize_with = "empty_str_as_option_string")]
     #[serde(rename = "parentID")]
     pub parent_id: Option<String>,
diff --git a/server/service/src/sync/translations/clinician_store_join.rs b/server/service/src/sync/translations/clinician_store_join.rs
index 1e2aab74f..ba67d44b2 100644
--- a/server/service/src/sync/translations/clinician_store_join.rs
+++ b/server/service/src/sync/translations/clinician_store_join.rs
@@ -71,7 +71,7 @@ impl SyncTranslation for ClinicianStoreJoinTranslation {
             store_id,
             clinician_link_id,
         } = ClinicianStoreJoinRowRepository::new(connection)
-            .find_one_by_id(&changelog.record_id)?
+            .find_one_by_id_option(&changelog.record_id)?
             .ok_or(anyhow::Error::msg(format!(
                 "Clinician row ({}) not found",
                 changelog.record_id
diff --git a/server/service/src/sync/translations/document_registry.rs b/server/service/src/sync/translations/document_registry.rs
index 6c7e8a24b..a03eb93ad 100644
--- a/server/service/src/sync/translations/document_registry.rs
+++ b/server/service/src/sync/translations/document_registry.rs
@@ -16,8 +16,6 @@ enum LegacyDocumentCategory {
     Encounter,
     ContactTrace,
     Custom,
-    #[serde(other)]
-    Others
 }
 
 #[allow(non_snake_case)]
@@ -88,11 +86,6 @@ impl SyncTranslation for DocumentRegistryTranslation {
                 LegacyDocumentCategory::Encounter => DocumentRegistryCategory::Encounter,
                 LegacyDocumentCategory::ContactTrace => DocumentRegistryCategory::ContactTrace,
                 LegacyDocumentCategory::Custom => DocumentRegistryCategory::Custom,
-                LegacyDocumentCategory::Others => {
-                    return Ok(PullTranslateResult::Ignored(
-                        "Unsupported report type".to_string(),
-                    ));
-                }
             },
             name,
             form_schema_id,
diff --git a/server/service/src/sync/translations/invoice.rs b/server/service/src/sync/translations/invoice.rs
index b09771a64..3b935fa69 100644
--- a/server/service/src/sync/translations/invoice.rs
+++ b/server/service/src/sync/translations/invoice.rs
@@ -259,25 +259,15 @@ impl SyncTranslation for InvoiceTranslation {
             .find_one_by_name_id(&data.name_ID)?
             .map(|store_row| store_row.id);
 
-        let invoice_type = match invoice_type(&data, &name) {
-            Some(invoice_type) => invoice_type,
-            None => {
-                return Ok(PullTranslateResult::Ignored(format!(
-                    "Unsupported invoice type {:?}",
-                    data._type
-                )))
-            }
-        };
-        let invoice_status = match invoice_status(&invoice_type, &data) {
-            Some(invoice_status) => invoice_status,
-            None => {
-                return Ok(PullTranslateResult::Ignored(format!(
-                    "Unsupported invoice status {:?} (type: {:?}",
-                    data.status, data._type
-                )))
-            }
-        };
-
+        let invoice_type = invoice_type(&data, &name).ok_or(anyhow::Error::msg(format!(
+            "Unsupported invoice type: {:?} (mode: {:?})",
+            data._type, data.mode
+        )))?;
+        let invoice_status =
+            invoice_status(&invoice_type, &data).ok_or(anyhow::Error::msg(format!(
+                "Unsupported invoice status: {:?} (type: {:?})",
+                data.status, data._type
+            )))?;
         let mapping = map_legacy(&invoice_type, &data);
 
         let currency_id = match data.currency_id {
@@ -351,6 +341,8 @@ impl SyncTranslation for InvoiceTranslation {
             return Err(anyhow::anyhow!("Invoice not found"));
         };
 
+        // log::info!("Translating invoice row: {:#?}", invoice_row);
+
         let confirm_datetime = to_legacy_confirm_time(&invoice.invoice_row);
 
         let Invoice {
@@ -388,25 +380,13 @@ impl SyncTranslation for InvoiceTranslation {
             ..
         } = invoice;
 
-        let _type = match legacy_invoice_type(&r#type) {
-            Some(_type) => _type,
-            None => {
-                return Ok(PushTranslateResult::Ignored(format!(
-                    "Unsupported invoice type {:?}",
-                    r#type
-                )))
-            }
-        };
-
-        let legacy_status = match legacy_invoice_status(&r#type, &status) {
-            Some(legacy_status) => legacy_status,
-            None => {
-                return Ok(PushTranslateResult::Ignored(format!(
-                    "Unsupported invoice status: {:?}",
-                    status
-                )))
-            }
-        };
+        let _type = legacy_invoice_type(&r#type).ok_or(anyhow::Error::msg(format!(
+            "Invalid invoice type: {:?}",
+            r#type
+        )))?;
+        let legacy_status = legacy_invoice_status(&r#type, &status).ok_or(anyhow::Error::msg(
+            format!("Invalid invoice status: {:?}", r#status),
+        ))?;
 
         let legacy_row = LegacyTransactRow {
             ID: id.clone(),
@@ -453,6 +433,12 @@ impl SyncTranslation for InvoiceTranslation {
 
         let json_record = serde_json::to_value(legacy_row)?;
 
+        // log::info!(
+        //     "Translated row {}",
+        //     serde_json::to_string_pretty(&json_record)
+        //         .unwrap_or("Failed to stringify json".to_string())
+        // );
+
         Ok(PushTranslateResult::upsert(
             changelog,
             self.table_name(),
@@ -580,6 +566,9 @@ fn map_legacy(invoice_type: &InvoiceType, data: &LegacyTransactRow) -> LegacyMap
             _ => {}
         },
         InvoiceType::Repack => match data.status {
+            LegacyTransactStatus::Cn => {
+                mapping.verified_datetime = confirm_datetime;
+            }
             LegacyTransactStatus::Fn => {
                 mapping.verified_datetime = confirm_datetime;
             }
@@ -643,19 +632,15 @@ fn invoice_status(invoice_type: &InvoiceType, data: &LegacyTransactRow) -> Optio
             LegacyTransactStatus::Fn => InvoiceStatus::Verified,
             _ => return None,
         },
-        InvoiceType::InventoryAddition | InvoiceType::InventoryReduction => match data.status {
-            LegacyTransactStatus::Nw => InvoiceStatus::New,
-            LegacyTransactStatus::Sg => InvoiceStatus::New,
-            LegacyTransactStatus::Cn => InvoiceStatus::Verified,
-            LegacyTransactStatus::Fn => InvoiceStatus::Verified,
-            _ => return None,
-        },
-        // mSupply will alert users to finalise any repacks if they have un-finalised repacks
-        // before they migrate to Open mSupply.
-        InvoiceType::Repack => match data.status {
-            LegacyTransactStatus::Fn => InvoiceStatus::Verified,
-            _ => return None,
-        },
+        InvoiceType::InventoryAddition | InvoiceType::InventoryReduction | InvoiceType::Repack => {
+            match data.status {
+                LegacyTransactStatus::Nw => InvoiceStatus::New,
+                LegacyTransactStatus::Sg => InvoiceStatus::New,
+                LegacyTransactStatus::Cn => InvoiceStatus::Verified,
+                LegacyTransactStatus::Fn => InvoiceStatus::Verified,
+                _ => return None,
+            }
+        }
     };
     Some(status)
 }
diff --git a/server/service/src/sync/translations/invoice_line.rs b/server/service/src/sync/translations/invoice_line.rs
index 4fb0173bf..eacc3f6e2 100644
--- a/server/service/src/sync/translations/invoice_line.rs
+++ b/server/service/src/sync/translations/invoice_line.rs
@@ -55,7 +55,7 @@ pub struct LegacyTransLineRow {
     #[serde(deserialize_with = "zero_date_as_option")]
     #[serde(serialize_with = "date_option_to_isostring")]
     pub expiry_date: Option<NaiveDate>,
-    pub pack_size: f64,
+    pub pack_size: i32,
     #[serde(rename = "cost_price")]
     pub cost_price_per_pack: f64,
     #[serde(rename = "sell_price")]
@@ -145,15 +145,10 @@ impl SyncTranslation for InvoiceLineTranslation {
                 }
             });
 
-        let line_type = match to_invoice_line_type(&r#type) {
-            Some(line_type) => line_type,
-            None => {
-                return Ok(PullTranslateResult::Ignored(format!(
-                    "Unsupported line type {:?}",
-                    r#type
-                )))
-            }
-        };
+        let line_type = to_invoice_line_type(&r#type).ok_or(anyhow::Error::msg(format!(
+            "Unsupported trans_line type: {:?}",
+            r#type
+        )))?;
 
         let (item_code, tax_percentage, total_before_tax, total_after_tax) = match item_code {
             Some(item_code) => {
diff --git a/server/service/src/sync/translations/item.rs b/server/service/src/sync/translations/item.rs
index 3235d8bc9..4bf3f50f1 100644
--- a/server/service/src/sync/translations/item.rs
+++ b/server/service/src/sync/translations/item.rs
@@ -22,7 +22,7 @@ pub struct LegacyItemRow {
     #[serde(deserialize_with = "empty_str_as_option_string")]
     unit_ID: Option<String>,
     type_of: LegacyItemType,
-    default_pack_size: f64,
+    default_pack_size: u32,
 }
 
 fn to_item_type(type_of: LegacyItemType) -> ItemType {
@@ -68,7 +68,7 @@ impl SyncTranslation for ItemTranslation {
             unit_id: data.unit_ID,
             r#type: to_item_type(data.type_of),
             legacy_record: ordered_simple_json(&sync_record.data)?,
-            default_pack_size: data.default_pack_size,
+            default_pack_size: data.default_pack_size as i32,
             is_active: true,
         };
 
diff --git a/server/service/src/sync/translations/master_list_line.rs b/server/service/src/sync/translations/master_list_line.rs
index 3ba91e517..1999ecf11 100644
--- a/server/service/src/sync/translations/master_list_line.rs
+++ b/server/service/src/sync/translations/master_list_line.rs
@@ -1,7 +1,4 @@
-use repository::{
-    MasterListLineRow, MasterListLineRowDelete, MasterListRowRepository, StorageConnection,
-    SyncBufferRow,
-};
+use repository::{MasterListLineRow, MasterListLineRowDelete, StorageConnection, SyncBufferRow};
 
 use serde::Deserialize;
 
@@ -41,8 +38,7 @@ impl SyncTranslation for MasterListLineTranslation {
         _: &StorageConnection,
         sync_record: &SyncBufferRow,
     ) -> Result<PullTranslateResult, anyhow::Error> {
-        // TODO, check site ? (should never get delete records for this site,
-        // only transfer other half)
+        // TODO, check site ? (should never get delete records for this site, only transfer other half)
         Ok(PullTranslateResult::delete(MasterListLineRowDelete(
             sync_record.record_id.clone(),
         )))
@@ -50,18 +46,10 @@ impl SyncTranslation for MasterListLineTranslation {
 
     fn try_translate_from_upsert_sync_record(
         &self,
-        connection: &StorageConnection,
+        _: &StorageConnection,
         sync_record: &SyncBufferRow,
     ) -> Result<PullTranslateResult, anyhow::Error> {
         let data = serde_json::from_str::<LegacyListMasterLineRow>(&sync_record.data)?;
-        let master_list =
-            MasterListRowRepository::new(connection).find_one_by_id(&data.item_master_ID)?;
-        if master_list.is_none() {
-            return Ok(PullTranslateResult::Ignored(
-                "Missing master list".to_string(),
-            ));
-        }
-
         let result = MasterListLineRow {
             id: data.ID,
             item_link_id: data.item_ID,
@@ -82,9 +70,8 @@ mod tests {
         use crate::sync::test::test_data::master_list_line as test_data;
         let translator = MasterListLineTranslation {};
 
-        // Using all() because pull_upserts requires master_list from mock data
         let (_, connection, _, _) =
-            setup_all("test_master_list_line_translation", MockDataInserts::all()).await;
+            setup_all("test_master_list_line_translation", MockDataInserts::none()).await;
 
         for record in test_data::test_pull_upsert_records() {
             assert!(translator.should_translate_from_sync_record(&record.sync_buffer_row));
diff --git a/server/service/src/sync/translations/master_list_name_join.rs b/server/service/src/sync/translations/master_list_name_join.rs
index 7e3f53fe6..ec2aaf2c9 100644
--- a/server/service/src/sync/translations/master_list_name_join.rs
+++ b/server/service/src/sync/translations/master_list_name_join.rs
@@ -41,7 +41,7 @@ impl SyncTranslation for MasterListNameJoinTranslation {
     ) -> Result<PullTranslateResult, anyhow::Error> {
         let data = serde_json::from_str::<LegacyListMasterNameJoinRow>(&sync_record.data)?;
         if data.name_ID.is_empty() {
-            return Ok(PullTranslateResult::Ignored("Missing name id".to_string()));
+            return Ok(PullTranslateResult::Ignored("Missing name_id".to_string()));
         }
 
         let result = MasterListNameJoinRow {
diff --git a/server/service/src/sync/translations/mod.rs b/server/service/src/sync/translations/mod.rs
index addbae272..6c774d7a8 100644
--- a/server/service/src/sync/translations/mod.rs
+++ b/server/service/src/sync/translations/mod.rs
@@ -1,11 +1,12 @@
 pub(crate) mod activity_log;
 pub(crate) mod asset;
 pub(crate) mod asset_catalogue_item;
+pub(crate) mod asset_catalogue_item_property;
+pub(crate) mod asset_catalogue_property;
 pub(crate) mod asset_category;
 pub(crate) mod asset_class;
 pub(crate) mod asset_log;
 pub(crate) mod asset_log_reason;
-pub(crate) mod asset_property;
 pub(crate) mod asset_type;
 pub(crate) mod barcode;
 pub(crate) mod clinician;
@@ -113,9 +114,10 @@ pub(crate) fn all_translators() -> SyncTranslators {
         asset_category::boxed(),
         asset_type::boxed(),
         asset_catalogue_item::boxed(),
+        asset_catalogue_item_property::boxed(),
+        asset_catalogue_property::boxed(),
         asset_log::boxed(),
         asset_log_reason::boxed(),
-        asset_property::boxed(),
         //Sync file reference
         sync_file_reference::boxed(),
     ]
diff --git a/server/service/src/sync/translations/program_requisition_settings.rs b/server/service/src/sync/translations/program_requisition_settings.rs
index 99b26be23..1d5602e3b 100644
--- a/server/service/src/sync/translations/program_requisition_settings.rs
+++ b/server/service/src/sync/translations/program_requisition_settings.rs
@@ -177,10 +177,9 @@ fn generate_requisition_program(
     };
     let program_row = ProgramRow {
         id: master_list.id.clone(),
-        master_list_id: Some(master_list.id.clone()),
+        master_list_id: master_list.id.clone(),
         name: master_list.description.clone(),
         context_id: context_row.id.clone(),
-        is_immunisation: false,
     };
 
     let mut program_requisition_settings_rows = Vec::new();
diff --git a/server/service/src/sync/translations/report.rs b/server/service/src/sync/translations/report.rs
index e9e6a42f7..b2a19aca3 100644
--- a/server/service/src/sync/translations/report.rs
+++ b/server/service/src/sync/translations/report.rs
@@ -105,7 +105,7 @@ impl SyncTranslation for ReportTranslation {
             LegacyReportContext::Repack => ContextType::Repack,
             LegacyReportContext::Others => {
                 return Ok(PullTranslateResult::Ignored(
-                    "Unsupported report context".to_string(),
+                    "Unknown report context".to_string(),
                 ))
             }
         };
diff --git a/server/service/src/sync/translations/requisition.rs b/server/service/src/sync/translations/requisition.rs
index 3048410f6..a6fcdf245 100644
--- a/server/service/src/sync/translations/requisition.rs
+++ b/server/service/src/sync/translations/requisition.rs
@@ -191,15 +191,10 @@ impl SyncTranslation for RequisitionTranslation {
         sync_record: &SyncBufferRow,
     ) -> Result<PullTranslateResult, anyhow::Error> {
         let data = serde_json::from_str::<LegacyRequisitionRow>(&sync_record.data)?;
-        let r#type = match from_legacy_type(&data.r#type) {
-            Some(r#type) => r#type,
-            None => {
-                return Ok(PullTranslateResult::Ignored(format!(
-                    "Unsupported requisition type: {:?}",
-                    data.r#type
-                )))
-            }
-        };
+        let r#type = from_legacy_type(&data.r#type).ok_or(anyhow::Error::msg(format!(
+            "Unsupported requisition type: {:?}",
+            data.r#type
+        )))?;
 
         let (
             created_datetime,
@@ -332,15 +327,12 @@ impl SyncTranslation for RequisitionTranslation {
             name_ID: name_row.id,
             store_ID: store_id.clone(),
             r#type: to_legacy_type(&r#type),
-            status: match to_legacy_status(&r#type, &status, has_outbound_shipment) {
-                Some(status) => status,
-                None => {
-                    return Ok(PushTranslateResult::Ignored(format!(
-                        "Unsupported requisition status: {:?} (type: {:?}) row id: {}",
-                        status, r#type, changelog.record_id
-                    )))
-                }
-            },
+            status: to_legacy_status(&r#type, &status, has_outbound_shipment).ok_or(
+                anyhow::Error::msg(format!(
+                    "Unexpected row requisition status {:?} (type: {:?}), row id:{}",
+                    status, r#type, changelog.record_id
+                )),
+            )?,
             om_status: Some(status),
             date_entered: date_from_date_time(&created_datetime),
             created_datetime: Some(created_datetime),
diff --git a/server/service/src/sync/translations/requisition_line.rs b/server/service/src/sync/translations/requisition_line.rs
index 4448c9fd1..6b6b7be9b 100644
--- a/server/service/src/sync/translations/requisition_line.rs
+++ b/server/service/src/sync/translations/requisition_line.rs
@@ -20,16 +20,16 @@ pub struct LegacyRequisitionLineRow {
     pub item_ID: String,
 
     // requested_quantity
-    pub Cust_stock_order: f64,
-    pub suggested_quantity: f64,
+    pub Cust_stock_order: i32,
+    pub suggested_quantity: i32,
     // supply_quantity
-    pub actualQuan: f64,
+    pub actualQuan: i32,
     // available_stock_on_hand
-    pub stock_on_hand: f64,
+    pub stock_on_hand: i32,
     // average_monthly_consumption: daily_usage * NUMBER_OF_DAYS_IN_A_MONTH
     pub daily_usage: f64,
 
-    pub approved_quantity: f64,
+    pub approved_quantity: i32,
 
     #[serde(deserialize_with = "empty_str_as_option_string")]
     #[serde(rename = "authoriser_comment")]
@@ -83,7 +83,8 @@ impl SyncTranslation for RequisitionLineTranslation {
             suggested_quantity: data.suggested_quantity,
             supply_quantity: data.actualQuan,
             available_stock_on_hand: data.stock_on_hand,
-            average_monthly_consumption: (data.daily_usage * NUMBER_OF_DAYS_IN_A_MONTH).ceil(),
+            average_monthly_consumption: (data.daily_usage * NUMBER_OF_DAYS_IN_A_MONTH).ceil()
+                as i32,
             comment: data.comment,
             snapshot_datetime: data.snapshot_datetime,
             approved_quantity: data.approved_quantity,
diff --git a/server/service/src/sync/translations/special/name_to_name_store_join.rs b/server/service/src/sync/translations/special/name_to_name_store_join.rs
index ee9b7e156..a0e4d2ca4 100644
--- a/server/service/src/sync/translations/special/name_to_name_store_join.rs
+++ b/server/service/src/sync/translations/special/name_to_name_store_join.rs
@@ -50,6 +50,12 @@ impl SyncTranslation for NameToNameStoreJoinTranslation {
         let name_store_joins = NameStoreJoinRepository::new(connection)
             .query_by_filter(NameStoreJoinFilter::new().name_id(EqualFilter::equal_to(&data.ID)))?;
 
+        if name_store_joins.is_empty() {
+            return Ok(PullTranslateResult::Ignored(
+                "Name store joins now found for name".to_string(),
+            ));
+        }
+
         let upserts = name_store_joins
             .into_iter()
             .map(|r| NameStoreJoinRow {
diff --git a/server/service/src/sync/translations/stock_line.rs b/server/service/src/sync/translations/stock_line.rs
index 329b877e3..7175405be 100644
--- a/server/service/src/sync/translations/stock_line.rs
+++ b/server/service/src/sync/translations/stock_line.rs
@@ -1,8 +1,8 @@
 use crate::sync::{
     sync_serde::{date_option_to_isostring, empty_str_as_option_string, zero_date_as_option},
     translations::{
-        barcode::BarcodeTranslation, item::ItemTranslation, location::LocationTranslation,
-        name::NameTranslation, store::StoreTranslation,
+        item::ItemTranslation, location::LocationTranslation, name::NameTranslation,
+        store::StoreTranslation,
     },
 };
 use chrono::NaiveDate;
@@ -31,7 +31,7 @@ pub struct LegacyStockLineRow {
     pub hold: bool,
     #[serde(deserialize_with = "empty_str_as_option_string")]
     pub location_ID: Option<String>,
-    pub pack_size: f64,
+    pub pack_size: i32,
     pub available: f64,
     pub quantity: f64,
     pub cost_price: f64,
@@ -62,7 +62,6 @@ impl SyncTranslation for StockLineTranslation {
             NameTranslation.table_name(),
             StoreTranslation.table_name(),
             LocationTranslation.table_name(),
-            BarcodeTranslation.table_name(),
         ]
     }
 
diff --git a/server/service/src/sync/translations/stocktake.rs b/server/service/src/sync/translations/stocktake.rs
index 2bc329596..1a3a9e59b 100644
--- a/server/service/src/sync/translations/stocktake.rs
+++ b/server/service/src/sync/translations/stocktake.rs
@@ -48,6 +48,9 @@ pub struct LegacyStocktakeRow {
     #[serde(deserialize_with = "empty_str_as_option_string")]
     pub inventory_reduction_id: Option<String>,
 
+    // Ignore invad_reductions_ID for V1
+    // #[serde(deserialize_with = "empty_str_as_option_string")]
+    // invad_reductions_ID: Option<String>,
     pub serial_number: i64,
     #[serde(serialize_with = "date_to_isostring")]
     pub stock_take_created_date: NaiveDate,
@@ -112,16 +115,6 @@ impl SyncTranslation for StocktakeTranslation {
             ),
         };
 
-        let status = match stocktake_status(&data.status) {
-            Some(status) => status,
-            None => {
-                return Ok(PullTranslateResult::Ignored(format!(
-                    "Unexpected stocktake status: {:?}",
-                    data.status
-                )))
-            }
-        };
-
         let result = StocktakeRow {
             id: data.ID,
             user_id: data.user_id,
@@ -129,7 +122,10 @@ impl SyncTranslation for StocktakeTranslation {
             stocktake_number: data.serial_number,
             comment: data.comment,
             description: data.Description,
-            status,
+            status: stocktake_status(&data.status).ok_or(anyhow::Error::msg(format!(
+                "Unexpected stocktake status: {:?}",
+                data.status
+            )))?,
             created_datetime,
             finalised_datetime,
             inventory_addition_id: data.inventory_addition_id,
diff --git a/server/service/src/sync/translations/stocktake_line.rs b/server/service/src/sync/translations/stocktake_line.rs
index dc5fefa1b..6c4b989ac 100644
--- a/server/service/src/sync/translations/stocktake_line.rs
+++ b/server/service/src/sync/translations/stocktake_line.rs
@@ -27,7 +27,7 @@ pub struct LegacyStocktakeLineRow {
     #[serde(deserialize_with = "empty_str_as_option_string")]
     pub comment: Option<String>,
     pub snapshot_qty: f64,
-    pub snapshot_packsize: f64,
+    pub snapshot_packsize: i32,
     pub stock_take_qty: f64,
     pub is_edited: bool,
     #[serde(deserialize_with = "empty_str_as_option_string")]
@@ -181,7 +181,7 @@ impl SyncTranslation for StocktakeLineTranslation {
             item_ID: item.id,
             item_name,
             snapshot_packsize: pack_size
-                .unwrap_or(stock_line.as_ref().map(|it| it.pack_size).unwrap_or(0.0)),
+                .unwrap_or(stock_line.as_ref().map(|it| it.pack_size).unwrap_or(0)),
             Batch: batch,
             expiry: expiry_date,
             cost_price: cost_price_per_pack.unwrap_or(0.0),
diff --git a/server/service/src/sync/translations/store.rs b/server/service/src/sync/translations/store.rs
index c0fb245fb..f2eed56dc 100644
--- a/server/service/src/sync/translations/store.rs
+++ b/server/service/src/sync/translations/store.rs
@@ -65,13 +65,13 @@ impl SyncTranslation for StoreTranslation {
         // (i.e. return type) Translation Not Matches, Translation Ignored (with message ?) and Translated records
         if let "HIS" | "DRG" | "SM" = &data.code[..] {
             return Ok(PullTranslateResult::Ignored(
-                "System names not implemented".to_string(),
+                "Ignoring not implemented system names".to_string(),
             ));
         }
 
         if data.name_id.is_empty() {
             return Ok(PullTranslateResult::Ignored(
-                "Store has no name".to_string(),
+                "Ignore stores without name".to_string(),
             ));
         }
 
diff --git a/server/service/src/vaccine_course/insert.rs b/server/service/src/vaccine_course/insert.rs
deleted file mode 100644
index 2bcdfcdd3..000000000
--- a/server/service/src/vaccine_course/insert.rs
+++ /dev/null
@@ -1,111 +0,0 @@
-use super::{
-    query::get_vaccine_course,
-    validate::{check_demographic_indicator_exists, check_program_exists},
-};
-use crate::{
-    activity_log::activity_log_entry, service_provider::ServiceContext,
-    vaccine_course::validate::check_vaccine_course_exists, SingleRecordError,
-};
-
-use repository::{
-    vaccine_course::vaccine_course_row::{VaccineCourseRow, VaccineCourseRowRepository},
-    ActivityLogType, RepositoryError, StorageConnection,
-};
-
-#[derive(PartialEq, Debug)]
-pub enum InsertVaccineCourseError {
-    VaccineCourseAlreadyExists,
-    CreatedRecordNotFound,
-    ProgramDoesNotExist,
-    DemographicIndicatorDoesNotExist,
-    DatabaseError(RepositoryError),
-}
-
-#[derive(PartialEq, Debug, Clone, Default)]
-pub struct InsertVaccineCourse {
-    pub id: String,
-    pub name: String,
-    pub program_id: String,
-    pub demographic_indicator_id: String,
-}
-
-pub fn insert_vaccine_course(
-    ctx: &ServiceContext,
-    input: InsertVaccineCourse,
-) -> Result<VaccineCourseRow, InsertVaccineCourseError> {
-    let vaccine_course = ctx
-        .connection
-        .transaction_sync(|connection| {
-            validate(&input, connection)?;
-            let new_vaccine_course = generate(input);
-            VaccineCourseRowRepository::new(connection).upsert_one(&new_vaccine_course)?;
-
-            activity_log_entry(
-                ctx,
-                ActivityLogType::VaccineCourseCreated,
-                Some(new_vaccine_course.id.clone()),
-                None,
-                None,
-            )?;
-
-            get_vaccine_course(&ctx.connection, new_vaccine_course.id)
-                .map_err(InsertVaccineCourseError::from)
-        })
-        .map_err(|error| error.to_inner_error())?;
-    Ok(vaccine_course)
-}
-
-pub fn validate(
-    input: &InsertVaccineCourse,
-    connection: &StorageConnection,
-) -> Result<(), InsertVaccineCourseError> {
-    if check_vaccine_course_exists(&input.id, connection)?.is_some() {
-        return Err(InsertVaccineCourseError::VaccineCourseAlreadyExists);
-    }
-
-    if check_program_exists(&input.program_id, connection)?.is_none() {
-        return Err(InsertVaccineCourseError::ProgramDoesNotExist);
-    }
-
-    if check_demographic_indicator_exists(&input.demographic_indicator_id, connection)?.is_none() {
-        return Err(InsertVaccineCourseError::DemographicIndicatorDoesNotExist);
-    }
-
-    Ok(())
-}
-
-pub fn generate(
-    InsertVaccineCourse {
-        id,
-        name,
-        program_id,
-        demographic_indicator_id,
-    }: InsertVaccineCourse,
-) -> VaccineCourseRow {
-    VaccineCourseRow {
-        id,
-        name,
-        program_id,
-        demographic_indicator_id,
-        coverage_rate: 100.0,
-        is_active: true,
-        wastage_rate: 0.0,
-        doses: 1,
-    }
-}
-
-impl From<RepositoryError> for InsertVaccineCourseError {
-    fn from(error: RepositoryError) -> Self {
-        InsertVaccineCourseError::DatabaseError(error)
-    }
-}
-
-impl From<SingleRecordError> for InsertVaccineCourseError {
-    fn from(error: SingleRecordError) -> Self {
-        use InsertVaccineCourseError::*;
-        match error {
-            SingleRecordError::DatabaseError(error) => DatabaseError(error),
-            SingleRecordError::NotFound(_) => CreatedRecordNotFound,
-        }
-    }
-}
diff --git a/server/service/src/vaccine_course/mod.rs b/server/service/src/vaccine_course/mod.rs
deleted file mode 100644
index 1dabc8767..000000000
--- a/server/service/src/vaccine_course/mod.rs
+++ /dev/null
@@ -1,50 +0,0 @@
-use super::{ListError, ListResult};
-use crate::{service_provider::ServiceContext, SingleRecordError};
-
-use repository::{
-    vaccine_course::{
-        vaccine_course::{VaccineCourseFilter, VaccineCourseSort},
-        vaccine_course_row::VaccineCourseRow,
-    },
-    PaginationOption, StorageConnection,
-};
-
-pub mod insert;
-pub mod query;
-mod validate;
-
-#[cfg(test)]
-mod test;
-
-use query::{get_vaccine_course, get_vaccine_courses};
-
-pub trait VaccineCourseServiceTrait: Sync + Send {
-    fn get_vaccine_courses(
-        &self,
-        connection: &StorageConnection,
-        pagination: Option<PaginationOption>,
-        filter: Option<VaccineCourseFilter>,
-        sort: Option<VaccineCourseSort>,
-    ) -> Result<ListResult<VaccineCourseRow>, ListError> {
-        get_vaccine_courses(connection, pagination, filter, sort)
-    }
-
-    fn get_vaccine_course(
-        &self,
-        connection: &StorageConnection,
-        id: String,
-    ) -> Result<VaccineCourseRow, SingleRecordError> {
-        get_vaccine_course(connection, id)
-    }
-
-    fn insert_vaccine_course(
-        &self,
-        ctx: &ServiceContext,
-        input: insert::InsertVaccineCourse,
-    ) -> Result<VaccineCourseRow, insert::InsertVaccineCourseError> {
-        insert::insert_vaccine_course(ctx, input)
-    }
-}
-
-pub struct VaccineCourseService {}
-impl VaccineCourseServiceTrait for VaccineCourseService {}
diff --git a/server/service/src/vaccine_course/query.rs b/server/service/src/vaccine_course/query.rs
deleted file mode 100644
index 1f3b2806a..000000000
--- a/server/service/src/vaccine_course/query.rs
+++ /dev/null
@@ -1,43 +0,0 @@
-use repository::{
-    vaccine_course::{
-        vaccine_course::{VaccineCourseFilter, VaccineCourseRepository, VaccineCourseSort},
-        vaccine_course_row::VaccineCourseRow,
-    },
-    EqualFilter, PaginationOption, StorageConnection,
-};
-
-use crate::{get_default_pagination, i64_to_u32, ListError, ListResult, SingleRecordError};
-
-pub const MAX_LIMIT: u32 = 1000;
-pub const MIN_LIMIT: u32 = 1;
-
-pub fn get_vaccine_courses(
-    connection: &StorageConnection,
-    pagination: Option<PaginationOption>,
-    filter: Option<VaccineCourseFilter>,
-    sort: Option<VaccineCourseSort>,
-) -> Result<ListResult<VaccineCourseRow>, ListError> {
-    let pagination = get_default_pagination(pagination, MAX_LIMIT, MIN_LIMIT)?;
-    let repository = VaccineCourseRepository::new(connection);
-
-    Ok(ListResult {
-        rows: repository.query(pagination, filter.clone(), sort)?,
-        count: i64_to_u32(repository.count(filter)?),
-    })
-}
-
-pub fn get_vaccine_course(
-    connection: &StorageConnection,
-    id: String,
-) -> Result<VaccineCourseRow, SingleRecordError> {
-    let repository = VaccineCourseRepository::new(connection);
-
-    let mut result =
-        repository.query_by_filter(VaccineCourseFilter::new().id(EqualFilter::equal_to(&id)))?;
-
-    if let Some(record) = result.pop() {
-        Ok(record)
-    } else {
-        Err(SingleRecordError::NotFound(id))
-    }
-}
diff --git a/server/service/src/vaccine_course/test/mod.rs b/server/service/src/vaccine_course/test/mod.rs
deleted file mode 100644
index 7a5c59695..000000000
--- a/server/service/src/vaccine_course/test/mod.rs
+++ /dev/null
@@ -1,2 +0,0 @@
-#[cfg(test)]
-mod query;
diff --git a/server/service/src/vaccine_course/test/query.rs b/server/service/src/vaccine_course/test/query.rs
deleted file mode 100644
index 56d8ca78c..000000000
--- a/server/service/src/vaccine_course/test/query.rs
+++ /dev/null
@@ -1,96 +0,0 @@
-#[cfg(test)]
-mod query {
-    use repository::mock::{mock_demographic_indicator_a, mock_program_a, MockDataInserts};
-    use repository::StringFilter;
-    use repository::{
-        test_db::setup_all,
-        vaccine_course::vaccine_course::{
-            VaccineCourseFilter, VaccineCourseSort, VaccineCourseSortField,
-        },
-    };
-
-    use crate::vaccine_course::insert::InsertVaccineCourse;
-    use crate::{service_provider::ServiceProvider, SingleRecordError};
-
-    #[actix_rt::test]
-    async fn vaccine_course_service_single_record() {
-        let (_, _, connection_manager, _) =
-            setup_all("test_vaccine_course_single_record", MockDataInserts::all()).await;
-
-        let service_provider = ServiceProvider::new(connection_manager, "app_data");
-        let context = service_provider.basic_context().unwrap();
-        let service = service_provider.vaccine_course_service;
-
-        // Create a vaccine course
-        let vaccine_course_insert = InsertVaccineCourse {
-            id: "vaccine_course_id".to_owned(),
-            name: "vaccine_course_name".to_owned(),
-            program_id: mock_program_a().id.clone(),
-            demographic_indicator_id: mock_demographic_indicator_a().id.clone(),
-        };
-
-        let _result = service
-            .insert_vaccine_course(&context, vaccine_course_insert.clone())
-            .unwrap();
-
-        assert_eq!(
-            service.get_vaccine_course(&context.connection, "invalid_id".to_owned()),
-            Err(SingleRecordError::NotFound("invalid_id".to_owned()))
-        );
-
-        let result = service
-            .get_vaccine_course(&context.connection, vaccine_course_insert.id.clone())
-            .unwrap();
-
-        assert_eq!(result.id, vaccine_course_insert.id);
-    }
-
-    #[actix_rt::test]
-    async fn vaccine_course_service_filter() {
-        let (_, connection, connection_manager, _) =
-            setup_all("test_vaccine_course_filter", MockDataInserts::all()).await;
-
-        let service_provider = ServiceProvider::new(connection_manager, "app_data");
-        let context = service_provider.basic_context().unwrap();
-        let service = service_provider.vaccine_course_service;
-
-        // Create 2 vaccine courses
-        let vaccine_course_insert_a = InsertVaccineCourse {
-            id: "vaccine_course_id".to_owned(),
-            name: "vaccine_course_name".to_owned(),
-            program_id: mock_program_a().id.clone(),
-            demographic_indicator_id: mock_demographic_indicator_a().id.clone(),
-        };
-
-        let _result = service
-            .insert_vaccine_course(&context, vaccine_course_insert_a.clone())
-            .unwrap();
-
-        let vaccine_course_insert_b = InsertVaccineCourse {
-            id: "vaccine_course_id_b".to_owned(),
-            name: "vaccine_course_name_b".to_owned(),
-            program_id: mock_program_a().id.clone(),
-            demographic_indicator_id: mock_demographic_indicator_a().id.clone(),
-        };
-
-        let _result = service
-            .insert_vaccine_course(&context, vaccine_course_insert_b.clone())
-            .unwrap();
-
-        let result = service
-            .get_vaccine_courses(
-                &connection,
-                None,
-                Some(VaccineCourseFilter::new().name(StringFilter::like("vaccine_course_name"))),
-                Some(VaccineCourseSort {
-                    key: VaccineCourseSortField::Name,
-                    desc: Some(false),
-                }),
-            )
-            .unwrap();
-
-        assert_eq!(result.count, 2);
-        assert_eq!(result.rows[0].id, vaccine_course_insert_a.id);
-        assert_eq!(result.rows[1].id, vaccine_course_insert_b.id);
-    }
-}
diff --git a/server/service/src/vaccine_course/validate.rs b/server/service/src/vaccine_course/validate.rs
deleted file mode 100644
index 6e573d1ae..000000000
--- a/server/service/src/vaccine_course/validate.rs
+++ /dev/null
@@ -1,26 +0,0 @@
-use repository::{
-    vaccine_course::vaccine_course_row::{VaccineCourseRow, VaccineCourseRowRepository},
-    DemographicIndicatorRow, DemographicIndicatorRowRepository, ProgramRow, ProgramRowRepository,
-    RepositoryError, StorageConnection,
-};
-
-pub fn check_vaccine_course_exists(
-    id: &str,
-    connection: &StorageConnection,
-) -> Result<Option<VaccineCourseRow>, RepositoryError> {
-    VaccineCourseRowRepository::new(connection).find_one_by_id(id)
-}
-
-pub fn check_program_exists(
-    id: &str,
-    connection: &StorageConnection,
-) -> Result<Option<ProgramRow>, RepositoryError> {
-    ProgramRowRepository::new(connection).find_one_by_id(id)
-}
-
-pub fn check_demographic_indicator_exists(
-    id: &str,
-    connection: &StorageConnection,
-) -> Result<Option<DemographicIndicatorRow>, RepositoryError> {
-    DemographicIndicatorRowRepository::new(connection).find_one_by_id(id)
-}
diff --git a/server/util/Cargo.toml b/server/util/Cargo.toml
index fb2991651..2ddaad8ac 100644
--- a/server/util/Cargo.toml
+++ b/server/util/Cargo.toml
@@ -8,7 +8,7 @@ path = "src/lib.rs"
 
 [dependencies]
 sha2 = "0.10.2"
-uuid = { version = "1.8.0", features = ["v7"] }
+uuid = { version = "1.0.0", features = ["v4"] }
 chrono = { workspace = true }
 serde = "1.0.126"
 env_logger = "0.8.3"
diff --git a/server/util/src/constants.rs b/server/util/src/constants.rs
index bcc3e0a39..4ef2b5d5c 100644
--- a/server/util/src/constants.rs
+++ b/server/util/src/constants.rs
@@ -29,5 +29,3 @@ pub const MISSING_PROGRAM: &str = "missing_program";
 pub const PATIENT_TYPE: &str = "Patient";
 /// The default context ID for a patient
 pub const PATIENT_CONTEXT_ID: &str = "Patient";
-// Default context for immunisation
-pub const IMMUNISATION_CONTEXT_ID: &str = "Immunisation";
diff --git a/server/util/src/uuid.rs b/server/util/src/uuid.rs
index 97f157031..52957f629 100644
--- a/server/util/src/uuid.rs
+++ b/server/util/src/uuid.rs
@@ -2,7 +2,7 @@ use uuid::Uuid;
 
 /// Generates unique id
 pub fn uuid() -> String {
-    Uuid::now_v7().to_string()
+    Uuid::new_v4().to_string()
 }
 
 pub fn small_uuid() -> String {
